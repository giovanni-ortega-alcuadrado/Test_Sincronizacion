'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


Partial Public Class ReporteriaLegalDBML
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
    Partial Private Sub DeleteConfiguracionReportes(instance As CFReporteriaLegal.ConfiguracionReportes)
    End Sub
    Partial Private Sub InserttblEntidadControl(instance As CFReporteriaLegal.tblEntidadControl)
    End Sub
    Partial Private Sub UpdatetblEntidadControl(instance As CFReporteriaLegal.tblEntidadControl)
    End Sub
    Partial Private Sub DeletetblEntidadControl(instance As CFReporteriaLegal.tblEntidadControl)
    End Sub
    Partial Private Sub InserttblValoresDefecto(instance As CFReporteriaLegal.tblValoresDefecto)
    End Sub
    Partial Private Sub UpdatetblValoresDefecto(instance As CFReporteriaLegal.tblValoresDefecto)
    End Sub
    Partial Private Sub DeletetblValoresDefecto(instance As CFReporteriaLegal.tblValoresDefecto)
    End Sub
    Partial Private Sub InserttblCombosReporteria(instance As CFReporteriaLegal.tblCombosReporteria)
    End Sub
    Partial Private Sub UpdatetblCombosReporteria(instance As CFReporteriaLegal.tblCombosReporteria)
    End Sub
    Partial Private Sub DeletetblCombosReporteria(instance As CFReporteriaLegal.tblCombosReporteria)
    End Sub
  #End Region
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ConfiguracionReportes() As System.Data.Linq.Table(Of CFReporteriaLegal.ConfiguracionReportes)
		Get
			Return Me.GetTable(Of CFReporteriaLegal.ConfiguracionReportes)
		End Get
	End Property
	
	Public ReadOnly Property tblEntidadControl() As System.Data.Linq.Table(Of CFReporteriaLegal.tblEntidadControl)
		Get
			Return Me.GetTable(Of CFReporteriaLegal.tblEntidadControl)
		End Get
	End Property
	
	Public ReadOnly Property tblValoresDefecto() As System.Data.Linq.Table(Of CFReporteriaLegal.tblValoresDefecto)
		Get
			Return Me.GetTable(Of CFReporteriaLegal.tblValoresDefecto)
		End Get
	End Property
	
	Public ReadOnly Property tblCombosReporteria() As System.Data.Linq.Table(Of CFReporteriaLegal.tblCombosReporteria)
		Get
			Return Me.GetTable(Of CFReporteriaLegal.tblCombosReporteria)
		End Get
	End Property
	
	Private Sub InsertConfiguracionReportes(ByVal obj As CFReporteriaLegal.ConfiguracionReportes)
		Me.FuncionPorDefinir
	End Sub
	
	Private Sub UpdateConfiguracionReportes(ByVal obj As CFReporteriaLegal.ConfiguracionReportes)
		Me.FuncionPorDefinir
	End Sub
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute()>  _
	Public Function FuncionPorDefinir() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="CF.uspCalculosFinancieros_ConfiguracionReportes_Consultar")>  _
	Public Function uspCalculosFinancieros_ConfiguracionReportes_Consultar(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(60)")> ByVal pstrUsuario As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal pstrInfoSesion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal pintErrorPersonalizado As System.Nullable(Of Byte)) As ISingleResult(Of CFReporteriaLegal.ConfiguracionReportes)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pstrUsuario, pstrInfoSesion, pintErrorPersonalizado)
		Return CType(result.ReturnValue,ISingleResult(Of CFReporteriaLegal.ConfiguracionReportes))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="CF.uspCalculosFinancieros_ObtenerNombreFormato")>  _
	Public Function uspCalculosFinancieros_ObtenerNombreFormato(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Varchar(80) NULL")> ByVal pstrRetorno As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Varchar(10) NULL")> ByVal pstrFechaExportacion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(60)")> ByVal pstrUsuario As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal pstrInfoSesion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal pintErrorPersonalizado As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(80)")> ByRef pstrNombreFormato As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(300)")> ByRef pstrListaArchivosAExportar As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pstrRetorno, pstrFechaExportacion, pstrUsuario, pstrInfoSesion, pintErrorPersonalizado, pstrNombreFormato, pstrListaArchivosAExportar)
		pstrNombreFormato = CType(result.GetParameterValue(5),String)
		pstrListaArchivosAExportar = CType(result.GetParameterValue(6),String)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="CF.uspCalculosFinancieros_ConfiguracionReportes_ConsultarEntidadControl")>  _
	Public Function uspCalculosFinancieros_ConfiguracionReportes_ConsultarEntidadControl(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2)")> ByVal pstrCodigoPais As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(60)")> ByVal pstrUsuario As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal pstrInfoSesion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal pintErrorPersonalizado As System.Nullable(Of Byte)) As ISingleResult(Of CFReporteriaLegal.tblEntidadControl)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pstrCodigoPais, pstrUsuario, pstrInfoSesion, pintErrorPersonalizado)
		Return CType(result.ReturnValue,ISingleResult(Of CFReporteriaLegal.tblEntidadControl))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="CF.uspCalculosFinancieros_ConfiguracionReportes_ValoresDefecto")>  _
	Public Function uspCalculosFinancieros_ConfiguracionReportes_ValoresDefecto(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(60)")> ByVal pstrUsuario As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal pstrInfoSesion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal pintErrorPersonalizado As System.Nullable(Of Byte)) As ISingleResult(Of CFReporteriaLegal.tblValoresDefecto)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pstrUsuario, pstrInfoSesion, pintErrorPersonalizado)
		Return CType(result.ReturnValue,ISingleResult(Of CFReporteriaLegal.tblValoresDefecto))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="CF.uspCalculosFinancieros_ConfiguracionReportes_ConsultarCombos")>  _
	Public Function uspCalculosFinancieros_ConfiguracionReportes_ConsultarCombos(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(60)")> ByVal pstrUsuario As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(1000)")> ByVal pstrInfoSesion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal pintErrorPersonalizado As System.Nullable(Of Byte)) As ISingleResult(Of CFReporteriaLegal.tblCombosReporteria)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pstrUsuario, pstrInfoSesion, pintErrorPersonalizado)
		Return CType(result.ReturnValue,ISingleResult(Of CFReporteriaLegal.tblCombosReporteria))
	End Function
End Class

Namespace CFReporteriaLegal
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblConfiguracionReportes")>  _
	Partial Public Class ConfiguracionReportes
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _intIDFormato As Integer
		
		Private _strNombreFormato As String
		
		Private _strDescripcionFormato As String
		
		Private _strProforma As String
		
		Private _strTipoInforme As String
		
		Private _strCircularExportar As String
		
		Private _strEntidadControl As String
		
		Private _dtmActualizacion As System.Nullable(of System.DateTime)
		
		Private _strUsuario As String
		
		Private _logSeleccionado As System.Nullable(of System.Boolean)
		
		Private _strCodigoISOPais As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintIDFormatoChanging(value As Integer)
    End Sub
    Partial Private Sub OnintIDFormatoChanged()
    End Sub
    Partial Private Sub OnstrNombreFormatoChanging(value As String)
    End Sub
    Partial Private Sub OnstrNombreFormatoChanged()
    End Sub
    Partial Private Sub OnstrDescripcionFormatoChanging(value As String)
    End Sub
    Partial Private Sub OnstrDescripcionFormatoChanged()
    End Sub
    Partial Private Sub OnstrProformaChanging(value As String)
    End Sub
    Partial Private Sub OnstrProformaChanged()
    End Sub
    Partial Private Sub OnstrTipoInformeChanging(value As String)
    End Sub
    Partial Private Sub OnstrTipoInformeChanged()
    End Sub
    Partial Private Sub OnstrCircularExportarChanging(value As String)
    End Sub
    Partial Private Sub OnstrCircularExportarChanged()
    End Sub
    Partial Private Sub OnstrEntidadControlChanging(value As String)
    End Sub
    Partial Private Sub OnstrEntidadControlChanged()
    End Sub
    Partial Private Sub OndtmActualizacionChanging(value As System.Nullable(of System.DateTime))
    End Sub
    Partial Private Sub OndtmActualizacionChanged()
    End Sub
    Partial Private Sub OnstrUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnstrUsuarioChanged()
    End Sub
    Partial Private Sub OnlogSeleccionadoChanging(value As System.Nullable(of System.Boolean))
    End Sub
    Partial Private Sub OnlogSeleccionadoChanged()
    End Sub
    Partial Private Sub OnstrCodigoISOPaisChanging(value As String)
    End Sub
    Partial Private Sub OnstrCodigoISOPaisChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intIDFormato", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property intIDFormato() As Integer
			Get
				Return Me._intIDFormato
			End Get
			Set
				If ((Me._intIDFormato = value)  _
							= false) Then
					Me.OnintIDFormatoChanging(value)
					Me.SendPropertyChanging
					Me._intIDFormato = value
					Me.SendPropertyChanged("intIDFormato")
					Me.OnintIDFormatoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strNombreFormato", DbType:="Varchar(80) NOT NULL")>  _
		Public Property strNombreFormato() As String
			Get
				Return Me._strNombreFormato
			End Get
			Set
				If (String.Equals(Me._strNombreFormato, value) = false) Then
					Me.OnstrNombreFormatoChanging(value)
					Me.SendPropertyChanging
					Me._strNombreFormato = value
					Me.SendPropertyChanged("strNombreFormato")
					Me.OnstrNombreFormatoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDescripcionFormato", DbType:="Varchar(100) NOT NULL")>  _
		Public Property strDescripcionFormato() As String
			Get
				Return Me._strDescripcionFormato
			End Get
			Set
				If (String.Equals(Me._strDescripcionFormato, value) = false) Then
					Me.OnstrDescripcionFormatoChanging(value)
					Me.SendPropertyChanging
					Me._strDescripcionFormato = value
					Me.SendPropertyChanged("strDescripcionFormato")
					Me.OnstrDescripcionFormatoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strProforma", DbType:="Varchar(max) NOT NULL")>  _
		Public Property strProforma() As String
			Get
				Return Me._strProforma
			End Get
			Set
				If (String.Equals(Me._strProforma, value) = false) Then
					Me.OnstrProformaChanging(value)
					Me.SendPropertyChanging
					Me._strProforma = value
					Me.SendPropertyChanged("strProforma")
					Me.OnstrProformaChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strTipoInforme", DbType:="Varchar(1000) NOT NULL")>  _
		Public Property strTipoInforme() As String
			Get
				Return Me._strTipoInforme
			End Get
			Set
				If (String.Equals(Me._strTipoInforme, value) = false) Then
					Me.OnstrTipoInformeChanging(value)
					Me.SendPropertyChanging
					Me._strTipoInforme = value
					Me.SendPropertyChanged("strTipoInforme")
					Me.OnstrTipoInformeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strCircularExportar", DbType:="Varchar(80) NOT NULL")>  _
		Public Property strCircularExportar() As String
			Get
				Return Me._strCircularExportar
			End Get
			Set
				If (String.Equals(Me._strCircularExportar, value) = false) Then
					Me.OnstrCircularExportarChanging(value)
					Me.SendPropertyChanging
					Me._strCircularExportar = value
					Me.SendPropertyChanged("strCircularExportar")
					Me.OnstrCircularExportarChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEntidadControl", DbType:="Varchar(80) NOT NULL")>  _
		Public Property strEntidadControl() As String
			Get
				Return Me._strEntidadControl
			End Get
			Set
				If (String.Equals(Me._strEntidadControl, value) = false) Then
					Me.OnstrEntidadControlChanging(value)
					Me.SendPropertyChanging
					Me._strEntidadControl = value
					Me.SendPropertyChanged("strEntidadControl")
					Me.OnstrEntidadControlChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dtmActualizacion", DbType:="Datetime NOT NULL", CanBeNull:=false)>  _
		Public Property dtmActualizacion() As System.Nullable(of System.DateTime)
			Get
				Return Me._dtmActualizacion
			End Get
			Set
				If (Object.Equals(Me._dtmActualizacion, value) = false) Then
					Me.OndtmActualizacionChanging(value)
					Me.SendPropertyChanging
					Me._dtmActualizacion = value
					Me.SendPropertyChanged("dtmActualizacion")
					Me.OndtmActualizacionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strUsuario", DbType:="Varchar(100) NOT NULL")>  _
		Public Property strUsuario() As String
			Get
				Return Me._strUsuario
			End Get
			Set
				If (String.Equals(Me._strUsuario, value) = false) Then
					Me.OnstrUsuarioChanging(value)
					Me.SendPropertyChanging
					Me._strUsuario = value
					Me.SendPropertyChanged("strUsuario")
					Me.OnstrUsuarioChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logSeleccionado", DbType:="Bit NOT NULL", CanBeNull:=true)>  _
		Public Property logSeleccionado() As System.Nullable(of System.Boolean)
			Get
				Return Me._logSeleccionado
			End Get
			Set
				If (Object.Equals(Me._logSeleccionado, value) = false) Then
					Me.OnlogSeleccionadoChanging(value)
					Me.SendPropertyChanging
					Me._logSeleccionado = value
					Me.SendPropertyChanged("logSeleccionado")
					Me.OnlogSeleccionadoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strCodigoISOPais", DbType:="Varchar(2) NULL")>  _
		Public Property strCodigoISOPais() As String
			Get
				Return Me._strCodigoISOPais
			End Get
			Set
				If (String.Equals(Me._strCodigoISOPais, value) = false) Then
					Me.OnstrCodigoISOPaisChanging(value)
					Me.SendPropertyChanging
					Me._strCodigoISOPais = value
					Me.SendPropertyChanged("strCodigoISOPais")
					Me.OnstrCodigoISOPaisChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute()>  _
	Partial Public Class tblEntidadControl
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _strEntidadControl As String
		
		Private _strDescripcion As String
		
		Private _strCodigoISOPais As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnstrEntidadControlChanging(value As String)
    End Sub
    Partial Private Sub OnstrEntidadControlChanged()
    End Sub
    Partial Private Sub OnstrDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnstrDescripcionChanged()
    End Sub
    Partial Private Sub OnstrCodigoISOPaisChanging(value As String)
    End Sub
    Partial Private Sub OnstrCodigoISOPaisChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strEntidadControl", DbType:="Varchar(80) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property strEntidadControl() As String
			Get
				Return Me._strEntidadControl
			End Get
			Set
				If (String.Equals(Me._strEntidadControl, value) = false) Then
					Me.OnstrEntidadControlChanging(value)
					Me.SendPropertyChanging
					Me._strEntidadControl = value
					Me.SendPropertyChanged("strEntidadControl")
					Me.OnstrEntidadControlChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDescripcion", DbType:="Varchar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property strDescripcion() As String
			Get
				Return Me._strDescripcion
			End Get
			Set
				If (String.Equals(Me._strDescripcion, value) = false) Then
					Me.OnstrDescripcionChanging(value)
					Me.SendPropertyChanging
					Me._strDescripcion = value
					Me.SendPropertyChanged("strDescripcion")
					Me.OnstrDescripcionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strCodigoISOPais", DbType:="Varchar(2) NOT NULL", CanBeNull:=false)>  _
		Public Property strCodigoISOPais() As String
			Get
				Return Me._strCodigoISOPais
			End Get
			Set
				If (String.Equals(Me._strCodigoISOPais, value) = false) Then
					Me.OnstrCodigoISOPaisChanging(value)
					Me.SendPropertyChanging
					Me._strCodigoISOPais = value
					Me.SendPropertyChanged("strCodigoISOPais")
					Me.OnstrCodigoISOPaisChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute()>  _
	Partial Public Class tblValoresDefecto
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _intID As Integer
		
		Private _strCodigoDefecto As String
		
		Private _strValorDefecto As String
		
		Private _strDescripcion As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnintIDChanged()
    End Sub
    Partial Private Sub OnstrCodigoDefectoChanging(value As String)
    End Sub
    Partial Private Sub OnstrCodigoDefectoChanged()
    End Sub
    Partial Private Sub OnstrValorDefectoChanging(value As String)
    End Sub
    Partial Private Sub OnstrValorDefectoChanged()
    End Sub
    Partial Private Sub OnstrDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnstrDescripcionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property intID() As Integer
			Get
				Return Me._intID
			End Get
			Set
				If ((Me._intID = value)  _
							= false) Then
					Me.OnintIDChanging(value)
					Me.SendPropertyChanging
					Me._intID = value
					Me.SendPropertyChanged("intID")
					Me.OnintIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strCodigoDefecto", DbType:="Varchar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property strCodigoDefecto() As String
			Get
				Return Me._strCodigoDefecto
			End Get
			Set
				If (String.Equals(Me._strCodigoDefecto, value) = false) Then
					Me.OnstrCodigoDefectoChanging(value)
					Me.SendPropertyChanging
					Me._strCodigoDefecto = value
					Me.SendPropertyChanged("strCodigoDefecto")
					Me.OnstrCodigoDefectoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strValorDefecto", DbType:="Varchar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property strValorDefecto() As String
			Get
				Return Me._strValorDefecto
			End Get
			Set
				If (String.Equals(Me._strValorDefecto, value) = false) Then
					Me.OnstrValorDefectoChanging(value)
					Me.SendPropertyChanging
					Me._strValorDefecto = value
					Me.SendPropertyChanged("strValorDefecto")
					Me.OnstrValorDefectoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDescripcion", DbType:="Varchar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property strDescripcion() As String
			Get
				Return Me._strDescripcion
			End Get
			Set
				If (String.Equals(Me._strDescripcion, value) = false) Then
					Me.OnstrDescripcionChanging(value)
					Me.SendPropertyChanging
					Me._strDescripcion = value
					Me.SendPropertyChanged("strDescripcion")
					Me.OnstrDescripcionChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute()>  _
	Partial Public Class tblCombosReporteria
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _intID As Integer
		
		Private _intIDCodigo As System.Nullable(Of System.Int32)
		
		Private _strTopico As String
		
		Private _strCodigo As String
		
		Private _strDescripcion As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnintIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnintIDChanged()
    End Sub
    Partial Private Sub OnintIDCodigoChanging(value As System.Nullable(Of System.Int32))
    End Sub
    Partial Private Sub OnintIDCodigoChanged()
    End Sub
    Partial Private Sub OnstrTopicoChanging(value As String)
    End Sub
    Partial Private Sub OnstrTopicoChanged()
    End Sub
    Partial Private Sub OnstrCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnstrCodigoChanged()
    End Sub
    Partial Private Sub OnstrDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnstrDescripcionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property intID() As Integer
			Get
				Return Me._intID
			End Get
			Set
				If ((Me._intID = value)  _
							= false) Then
					Me.OnintIDChanging(value)
					Me.SendPropertyChanging
					Me._intID = value
					Me.SendPropertyChanged("intID")
					Me.OnintIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_intIDCodigo", DbType:="Int", CanBeNull:=true)>  _
		Public Property intIDCodigo() As System.Nullable(Of System.Int32)
			Get
				Return Me._intIDCodigo
			End Get
			Set
				If (Object.Equals(Me._intIDCodigo, value) = false) Then
					Me.OnintIDCodigoChanging(value)
					Me.SendPropertyChanging
					Me._intIDCodigo = value
					Me.SendPropertyChanged("intIDCodigo")
					Me.OnintIDCodigoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strTopico", DbType:="Varchar(80) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property strTopico() As String
			Get
				Return Me._strTopico
			End Get
			Set
				If (String.Equals(Me._strTopico, value) = false) Then
					Me.OnstrTopicoChanging(value)
					Me.SendPropertyChanging
					Me._strTopico = value
					Me.SendPropertyChanged("strTopico")
					Me.OnstrTopicoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strCodigo", DbType:="Varchar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property strCodigo() As String
			Get
				Return Me._strCodigo
			End Get
			Set
				If (String.Equals(Me._strCodigo, value) = false) Then
					Me.OnstrCodigoChanging(value)
					Me.SendPropertyChanging
					Me._strCodigo = value
					Me.SendPropertyChanged("strCodigo")
					Me.OnstrCodigoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_strDescripcion", DbType:="Varchar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property strDescripcion() As String
			Get
				Return Me._strDescripcion
			End Get
			Set
				If (String.Equals(Me._strDescripcion, value) = false) Then
					Me.OnstrDescripcionChanging(value)
					Me.SendPropertyChanging
					Me._strDescripcion = value
					Me.SendPropertyChanged("strDescripcion")
					Me.OnstrDescripcionChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
