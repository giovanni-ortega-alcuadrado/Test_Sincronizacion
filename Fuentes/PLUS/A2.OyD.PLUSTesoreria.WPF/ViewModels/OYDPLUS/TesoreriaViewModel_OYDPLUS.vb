Imports Telerik.Windows.Controls
'Plantilla: ViewModelTemplate2010
'Archivo: TesoreriaViewModel.vb
'Generado el : 07/08/2011 15:52:29
'Propiedad de Alcuadrado S.A. 2010

#Region "Bitacora de Modificaciones"
'Modificado Por : Juan David Correa
'Fecha          : 16/Agosto 4:15 pm
'Descripción    : Se agrego el metodo ValidarEdicion y el metodo asincronico TerminoValidarEdicion.

'Modificaciones
'Modificado Por : Juan David Correa
'Fecha          : 17/Agosto 8:20 am
'Descripción    : Se agrego la propiedad Read para controlar la edición del grid y habilitar los scroll.

'Modificado Por : Juan David Correa
'Fecha          : 17/Agosto 9:50 am
'Descripción    : Se modifico el evento de VesionRegistro al codigo se le asigna el ID del documento 
'                 codigo = TesoreriSelected.IDDocumento.

'Modificado Por : Juan David Correa
'Fecha          : 17/Agosto 9:50 am
'Descripción    : Se modifico la propiedad cmbNombreConsecutivoHabilitado para que cuando se le de clic al boton
'                 nuevo la propiedad este en true y cuando se le de editar cambie a false

'Modificado Por : Juan David Correa
'Fecha          : 18/Agosto 8:50 am
'Descripción    : Se agrego la propiedad contador para controlar la vista del detalle cuando se crea un nuevo registro

'Modificado Por : Juan Carlos Soto Cruz
'Fecha          : 18/Agosto 10:24 a.m
'Descripción    : 

'Modificado Por : Juan Carlos Soto Cruz
'Fecha          : 04 Septiembre/2011
'Descripción    : Se

#End Region

Imports System.ComponentModel
Imports System.Linq
Imports System.ComponentModel.DataAnnotations
Imports System.Collections.ObjectModel

Imports System.Windows.Data
Imports System.Web
Imports A2ControlMenu


Imports A2.OyD.OYDServer.RIA.Web
Imports A2.OyD.OYDServer.RIA.Web.OyDPLUSTesoreria
Imports A2ComunesControl
Imports A2Utilidades.Mensajes
Imports System.Text.RegularExpressions
Imports System.Globalization
Imports System.Threading
Imports A2.Notificaciones.Cliente
Imports A2OYDPLUSUtilidades
Imports OpenRiaServices.DomainServices.Client

Public Class TesoreriaViewModel_OYDPLUS
    Inherits A2ControlMenu.A2ViewModel

    Public Event LanzarPopupCargaArchivoCheques(ByVal sender As Object, ByVal e As System.EventArgs, pstrNombreArchivo As String)
    Public Event LanzarPopupCargaArchivoTransferencia(ByVal sender As Object, ByVal e As System.EventArgs, pstrNombreArchivo As String)


#Region "Declaraciones"
    Public logXTesorero As Boolean = False
    Public logEditarGiroPupup As Boolean = False
    Public logEsOrdenPorAprobarPupup As Boolean = False
    Public IdEncabezadoXTesorero As Integer = 0
    Public IdDetalleXTesorero As Integer = 0
    Public logEsTrasladoFondos As Boolean = False
    Dim logLanzarGrabadoRegistro As Boolean = False

    Private objNotificacionGrabacion As A2OYDPLUSUtilidades.clsNotificacionesOYDPLUS
    Dim intIDOrdenTimer As Integer
    Dim num As Integer = 0
    Public strOpcionActualizar As String = String.Empty
    'Public Property cb As New CamposBusquedaTesoreri
    Public logHayEncabezado As Boolean = False
    Dim ValorTotalNOTA_BLOQUEO As Decimal = 0
    Dim ValorTotalNOTA_OperacionesEspeciales As Decimal = 0

    Public objViewModelTesorero As TesoreroViewModel_OYDPLUS
    Public logConfirmoTesorero As Boolean

    Public objWppImportacion As ImportacionCheque

    Public logEsTercero As Boolean = False

    Private TesoreriaOrdenesPlusPorDefecto As TesoreriaOrdenesEncabezado
    Public TesoreriaOrdenesPlusAnterior As New TesoreriaOrdenesEncabezado

    Dim strRegistrosDetalle As String = ""
    Dim cantidadTotalConfirmacion As Integer = 0
    Dim cantidadTotalJustificacion As Integer = 0
    Dim CantidadTotalAprobaciones As Integer = 0
    Dim logReglaDUAl As Boolean = False

    Dim cantidadTotalConfirmacionListasRestrictivas As Integer = 0
    Dim cantidadTotalJustificacionListasRestrictivas As Integer = 0
    Dim CantidadTotalAprobacionesListasRestrictivas As Integer = 0
    Dim strMensajeValidacionListasRestrictiva As String = String.Empty

    Dim strMensajeValidacion As String = String.Empty
    Dim mdtmFechaCierreSistema As DateTime = Now.Date
    Public strReceptor As String
    Public strTipoProducto As String

    Public dcProxy As OYDPLUSTesoreriaDomainContext
    Public dcProxyUtilidades As UtilidadesDomainContext
    Public dcProxyUtilidadesPLUS As OYDPLUSUtilidadesDomainContext
    Public dcProxy2 As OYDPLUSTesoreriaDomainContext 'Este proxy se Utiliza para ejecutar el submitchanges vacio, ya que la insercción de los detalles se hace con el procedimiento de Validar.

    Dim estadoMC As String
    Public TIPODOCUMENTOSIMPORTACION As String
    Public TIPOSCRUCEIMPORTACION As String
    Public TIPOCUENTAOYDPLUS As String
    Public TIPOCONCEPTOCONCOBRO As String

    Public logEsTerceroTransferencia As Boolean
    Public logEsCuentaRegistrada As Boolean
    Public logEsTerceroCartera As Boolean
    Public logEsTerceroOYD As Boolean
    Public logEsTerceroInternos As Boolean

    Public logCancelarRegistro As Boolean
    Public logNuevoRegistro As Boolean
    Public logEditarRegistro As Boolean
    Public logDuplicarRegistro As Boolean
    Public logBuscar As Boolean
    Public logFiltrar As Boolean
    Public logRealizarConsultaPropiedades As Boolean = False

    ''***INSTRUCCIONES***
    Dim logDireccionInscrita_Instrucciones As Boolean = False
    Dim logEsTercero_Instrucciones As Boolean = False
    Dim logEsCtaInscrita_Instrucciones As Boolean = False
    Dim logGrabar As Boolean
    Dim logValidarBorrar As Boolean

    '***EDICION DETALLE***
    Public logNuevoCheque As Boolean = False
    Public logNuevaTrans As Boolean = False
    Public logNuevoCartera As Boolean = False
    Public logNuevoTrasladoFondos As Boolean = False
    Public logNuevoBloqueo As Boolean = False
    Public logNuevoInterno As Boolean = False
    Public logNuevoOperacionesEs = False
    Public logNuevoOYD = False

    Public logEditarCheque As Boolean = False
    Public logEditarTransferencia As Boolean = False
    Public logEditarCarteraColectiva As Boolean = False
    Public logEditarTrasladoFondos As Boolean = False
    Public logEditarOYD As Boolean = False
    Public logEditarInterno As Boolean = False
    Public logEditarBloqueo As Boolean = False
    Public logEditarOperacionesEspeciales As Boolean = False


    'VARIABLE PARA SER UTILIZADA CUANDO SE GRABE LA ORDEN
    Dim intIDOrdenTesoreria As Integer = 0
    Dim intIDORdenTesoreriaEditar As Integer = 0
    Dim logCambiarPropiedadesPOPPUP As Boolean = True
    Public logRecargarPantalla As Boolean = True
    Dim objTipoOrdenNueva As TipoOrdenGiroNueva = TipoOrdenGiroNueva.NINGUNA
    Dim strEspecieDividendosSeleccionada As String = String.Empty

    Dim intCantidadMaximaDetalles As Integer = 1000
    Dim logHabilitarFuncionalidadFondos As Boolean = True
    Dim logRecargarDatosDetalle As Boolean = True
    Dim intIDDetalleEdicion As Integer = 0
    Dim dtmFechaServidor As DateTime

    Dim strParametroTipoCruceGMF As String = String.Empty 'JDOL - Parametro para validar los tipos de cruce que requieren - 20150804
    Public logRequiereGMF As Boolean = False 'JDOL - variable para validar los tipos de cruce que requieren - 20150804
    Public logRequiereGMFCarteras As Boolean = False
    Public logRequiereGMFTrasladoFondos As Boolean = False
    Public logRequiereGMFTranferencias As Boolean = False
    Public logRequiereGMFInternos As Boolean = False
    Public logRequiereGMFCheques As Boolean = False
    Public logRequiereGMFOYD As Boolean = False

    Dim strConceptoDefecto_Fondos As String = String.Empty
    Dim strConceptoDefectoOYD_Fondos As String = String.Empty
    Dim dblValorOrdenAntesModificar As Double = 0
    Public logEsFondosOYD As Boolean = False
    Dim intDiasAplicacionFondosRetiros As Integer = 0
    Dim intDiasAplicacionFondosCancelacion As Integer = 0
    Dim intDiasAplicacionFondosApertura As Integer = 0
    Dim intDiasAplicacionFondosAdicion As Integer = 0
    Dim logFechaAplicacionCarteraEsHabil As Boolean = True
    Dim strTipoGMF_TesoreriaFondosOYD As String = String.Empty
    Dim logUnicoTitular As Boolean = False
    Dim dtmFechaAplicacionCancelacion As DateTime = Now

    Dim ConceptoDefectoFondos_Retiro As Nullable(Of Integer) = Nothing
    Dim ConceptoDescripcionDefectoFondos_Retiro As String = String.Empty
    Dim ConceptoDefectoFondos_Cancelacion As Nullable(Of Integer) = Nothing
    Dim ConceptoDescripcionDefectoFondos_Cancelacion As String = String.Empty

    Dim dtmFechaMenorPermitidaIngreso As Nullable(Of DateTime) = Now.Date
    Dim logValidarFechaAplicacion As Boolean = True
    Dim logValidarFechaOrden As Boolean = True
    Dim log_Cancelacion_SoloPermitirValorEnCero As Boolean = False
    Dim logConsultarRestriccionesTipoCartera As Boolean = True
    Public contadorEdicionCarteraTesorero As Integer = 0

    'MANEJO DE CUENTAS OMNIBUS
    Public logFuncionalidad_CuentaOmnibus As Boolean = False
    Public logEsOrdenOmnibus As Boolean = False
    Public logEsFondosUnity As Boolean = False

    'MANEJO PARA SUBIR DOCUMENTOS JFSB20180517
    Dim ResultadoValidacion As New OyDPLUSTesoreria.tblRespuestaValidaciones
    Dim IdEncabezadoSubirArchivo As Integer
    Dim strEstadoGuardar As String = String.Empty
    Dim logEsOrdenFutura As Boolean = False
    Dim logRecargar As Boolean = False

    Dim pintIDOrdenNueva As Integer = 0
    Dim pstrMensajeExitoso As String = String.Empty

#End Region

#Region "Constantes"

    ''' <summary>
    ''' CE : Comprobantes de Egreso
    ''' RC : Recibos de Caja
    ''' N : Notas Contables
    ''' </summary>
    ''' 
    Public Enum ClasesTesoreria
        CE '// Comprobantes de Egreso
        RC '// Bancos
        N '// Notas Contables
        PlusCE ' //Comprobantes de Egreso OyD Plus
    End Enum

    Public Enum TabFormasPago
        Cheque
        Transferencia
        CarteraColectiva
        OYD
        Internos
        Instrucciones
    End Enum

    Public Enum TipoOrdenGiroNueva
        NORMAL
        PROGRAMADA
        DIVIDENDOS
        NINGUNA
    End Enum

    Private MINT_LONG_MAX_CODIGO_OYD As Byte = 17

    Private Const COLOR_DESHABILITADO As String = "#E2E2E2"
    Private Const COLOR_HABILITADO As String = "#FFFFFFFF"

#End Region

#Region "Inicializacion"
    Public Sub New()
        Try
            IsBusy = True
            If System.Diagnostics.Debugger.IsAttached And Program.ejecutarAppSegunAmbiente() Then
                dcProxy = New OYDPLUSTesoreriaDomainContext()
                dcProxyUtilidades = New UtilidadesDomainContext()
                dcProxyUtilidadesPLUS = New OYDPLUSUtilidadesDomainContext()
                dcProxy2 = New OYDPLUSTesoreriaDomainContext()
            Else
                dcProxy = New OYDPLUSTesoreriaDomainContext(New System.Uri((Program.RutaServicioNegocio)))
                dcProxyUtilidades = New UtilidadesDomainContext(New System.Uri((Program.RutaServicioUtilidadesOYD)))
                dcProxyUtilidadesPLUS = New OYDPLUSUtilidadesDomainContext(New System.Uri((Program.RutaServicioUtilidadesOYDPLUS)))
                dcProxy2 = New OYDPLUSTesoreriaDomainContext(New System.Uri((Program.RutaServicioNegocio)))
            End If

            'SE LLENA EL DICCIONARIO PARA EL CONTROL DE HABILITACIÓN DE LOS TAB Y CADA UNO SE PONE VISIBLE DEPENDIENDO
            'DEL CAMBIO EN PANTALLA
            DiccionarioTabPantalla = New Dictionary(Of String, clsTabHabilitar)
            DiccionarioTabPantalla.Add(GSTR_TABORDENESPAGO_CHEQUE_CODIGO, New clsTabHabilitar With {.Codigo = GSTR_TABORDENESPAGO_CHEQUE_CODIGOINTERNO, .Descripcion = GSTR_TABORDENESPAGO_CHEQUE_DESCRIPCION, .TabVisible = Visibility.Collapsed})
            DiccionarioTabPantalla.Add(GSTR_TABORDENESPAGO_TRANSFERENCIA_CODIGO, New clsTabHabilitar With {.Codigo = GSTR_TABORDENESPAGO_TRANSFERENCIA_CODIGOINTERNO, .Descripcion = GSTR_TABORDENESPAGO_TRANSFERENCIA_DESCRIPCION, .TabVisible = Visibility.Collapsed})
            DiccionarioTabPantalla.Add(GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_CODIGO, New clsTabHabilitar With {.Codigo = GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_CODIGOINTERNO, .Descripcion = GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_DESCRIPCION, .TabVisible = Visibility.Collapsed})
            DiccionarioTabPantalla.Add(GSTR_TABORDENESPAGO_OYD_CODIGO, New clsTabHabilitar With {.Codigo = GSTR_TABORDENESPAGO_OYD_CODIGOINTERNO, .Descripcion = GSTR_TABORDENESPAGO_OYD_DESCRIPCION, .TabVisible = Visibility.Collapsed})
            DiccionarioTabPantalla.Add(GSTR_TABORDENESPAGO_TRASLADOFONDOS_CODIGO, New clsTabHabilitar With {.Codigo = GSTR_TABORDENESPAGO_TRASLADOFONDOS_CODIGOINTERNO, .Descripcion = GSTR_TABORDENESPAGO_TRASLADOFONDOS_DESCRIPCION, .TabVisible = Visibility.Collapsed})
            DiccionarioTabPantalla.Add(GSTR_TABORDENESPAGO_INTERNOS_CODIGO, New clsTabHabilitar With {.Codigo = GSTR_TABORDENESPAGO_INTERNOS_CODIGOINTERNO, .Descripcion = GSTR_TABORDENESPAGO_INTERNOS_DESCRIPCION, .TabVisible = Visibility.Collapsed})
            DiccionarioTabPantalla.Add(GSTR_TABORDENESPAGO_BLOQUEORECURSOS_CODIGO, New clsTabHabilitar With {.Codigo = GSTR_TABORDENESPAGO_BLOQUEORECURSOS_CODIGOINTERNO, .Descripcion = GSTR_TABORDENESPAGO_BLOQUEORECURSOS_DESCRIPCION, .TabVisible = Visibility.Collapsed})
            DiccionarioTabPantalla.Add(GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_CODIGO, New clsTabHabilitar With {.Codigo = GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_CODIGOINTERNO, .Descripcion = GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_DESCRIPCION, .TabVisible = Visibility.Collapsed})

            DirectCast(dcProxy.DomainClient, WebDomainClient(Of A2.OyD.OYDServer.RIA.Web.OYDPLUSTesoreriaDomainContext.IOYDPLUSTesoreriaDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)
            TIPOSCRUCEIMPORTACION = Program.TipoCruceDPlus
            TIPODOCUMENTOSIMPORTACION = Program.TipoDocumentoOyDPlus
            TIPOCUENTAOYDPLUS = Program.TipoCuentaOyDPlus

            GSTR_CLIENTE = Program.Tipo_Cliente_Cliente
            GSTR_TERCERO = Program.Tipo_Cliente_Tercero
            GSTR_CUENTA_NO_REGISTRADA = Program.Tipo_CUENTA_NO_REGISTRADA
            GSTR_CUENTA_REGISTRADA = Program.Tipo_CUENTA_REGISTRADA
            IsBusy = True
            TabItemActual = "Cheques"
            Usuario = Program.Usuario

            DefineCommands()
            HabilitarImportacion = False
            FechaOrden = DateTime.Now

            Dim objListaDatos As New List(Of String)

            objListaDatos = New List(Of String)
            objListaDatos.Add(GSTR_PENDIENTES)
            objListaDatos.Add(GSTR_RECHAZADAS)
            objListaDatos.Add(GSTR_POR_APROBAR)
            objListaDatos.Add(GSTR_ANULADAS)
            objListaDatos.Add(GSTR_FUTURAS)

            ListaDatos = objListaDatos

            HabilitarInstrucciones = False
            VerDuplicar = Visibility.Visible

            CargarReceptoresUsuarioOYDPLUS("INICIO")
            CambiarColorFondoTextoBuscador()
        Catch ex As Exception

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la creación de los objetos",
                                 Me.ToString(), "TesoreriaViewModelOyDPlus.New", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

#End Region

#Region "OyD PLUS"

#Region "Propiedades Command"
    Public Property ImportarCheque As ICommand
    Public Property ImportarTransferencia As ICommand

    Public Property NuevoCheque As ICommand
    Public Property EditarWppCheque As ICommand
    Public Property BorrarCheque As ICommand

    Public Property NuevaTransferencia As ICommand
    Public Property EditarWppTransferencia As ICommand
    Public Property BorrarTransferencia As ICommand

    Public Property NuevaCartera As ICommand
    Public Property EditarWppCartera As ICommand
    Public Property BorrarCartera As ICommand

    Public Property NuevaOYD As ICommand
    Public Property EditarWppOYD As ICommand
    Public Property BorrarOYD As ICommand

    Public Property NuevaInternos As ICommand
    Public Property EditarWppInternos As ICommand
    Public Property BorrarInternos As ICommand

    Public Property NuevaBloqueo As ICommand
    Public Property EditarWppBloqueo As ICommand
    Public Property BorrarBloqueo As ICommand

    Public Property NuevaOperacionesEspeciales As ICommand
    Public Property EditarWppOperacionesEspeciales As ICommand
    Public Property BorrarOperacionesEspeciales As ICommand

    Public Property CalcularSaldo As ICommand

#End Region

#Region "PROPIEDADES OYD PLUS"

    Private _DiccionarioTabPantalla As Dictionary(Of String, clsTabHabilitar)
    Public Property DiccionarioTabPantalla() As Dictionary(Of String, clsTabHabilitar)
        Get
            Return _DiccionarioTabPantalla
        End Get
        Set(ByVal value As Dictionary(Of String, clsTabHabilitar))
            _DiccionarioTabPantalla = value
            MyBase.CambioItem("DiccionarioTabPantalla")
        End Set
    End Property

    Private _ViewOrdenGiroPopPup As OrdenGiroConsultaView
    Public Property ViewOrdenGiroPopPup() As OrdenGiroConsultaView
        Get
            Return _ViewOrdenGiroPopPup
        End Get
        Set(ByVal value As OrdenGiroConsultaView)
            _ViewOrdenGiroPopPup = value
        End Set
    End Property

    Private _MostrarControlMenuGuardar As Boolean
    Public Property MostrarControlMenuGuardar() As Boolean
        Get
            Return _MostrarControlMenuGuardar
        End Get
        Set(ByVal value As Boolean)
            _MostrarControlMenuGuardar = value
            MyBase.CambioItem("MostrarControlMenuGuardar")
        End Set
    End Property

    Private _FondoTextoBuscadores As SolidColorBrush
    Public Property FondoTextoBuscadores() As SolidColorBrush
        Get
            Return _FondoTextoBuscadores
        End Get
        Set(ByVal value As SolidColorBrush)
            _FondoTextoBuscadores = value
            MyBase.CambioItem("FondoTextoBuscadores")
        End Set
    End Property

    Private _FondoTextoBuscadoresHabilitado As SolidColorBrush
    Public Property FondoTextoBuscadoresHabilitado() As SolidColorBrush
        Get
            Return _FondoTextoBuscadoresHabilitado
        End Get
        Set(ByVal value As SolidColorBrush)
            _FondoTextoBuscadoresHabilitado = value
            MyBase.CambioItem("FondoTextoBuscadoresHabilitado")
        End Set
    End Property

    Private _HabilitarConceptoDetalles As Boolean
    Public Property HabilitarConceptoDetalles() As Boolean
        Get
            Return _HabilitarConceptoDetalles
        End Get
        Set(ByVal value As Boolean)
            _HabilitarConceptoDetalles = value
            MyBase.CambioItem("HabilitarConceptoDetalles")
        End Set
    End Property

    Private _HabilitarValorEnDetalle As Boolean = True
    Public Property HabilitarValorEnDetalle() As Boolean
        Get
            Return _HabilitarValorEnDetalle
        End Get
        Set(ByVal value As Boolean)
            _HabilitarValorEnDetalle = value
            MyBase.CambioItem("HabilitarValorEnDetalle")
        End Set
    End Property

    Private _DescripcionBusy As String = "Cargando..."
    Public Property DescripcionBusy() As String
        Get
            Return _DescripcionBusy
        End Get
        Set(ByVal value As String)
            _DescripcionBusy = value
            MyBase.CambioItem("DescripcionBusy")
        End Set
    End Property



#Region "Propiedades Encabezado"

    Private _HabilitarEdicionEncabezado As Boolean
    Public Property HabilitarEdicionEncabezado() As Boolean
        Get
            Return _HabilitarEdicionEncabezado
        End Get
        Set(ByVal value As Boolean)
            _HabilitarEdicionEncabezado = value
            MyBase.CambioItem("HabilitarEdicionEncabezado")
        End Set
    End Property

    Private _HabilitarFecha As Boolean
    Public Property HabilitarFecha() As Boolean
        Get
            Return _HabilitarFecha
        End Get
        Set(ByVal value As Boolean)
            _HabilitarFecha = value
            MyBase.CambioItem("HabilitarFecha")
        End Set
    End Property

    Private _HabilitarFechaAplicacion As Boolean
    Public Property HabilitarFechaAplicacion() As Boolean
        Get
            Return _HabilitarFechaAplicacion
        End Get
        Set(ByVal value As Boolean)
            _HabilitarFechaAplicacion = value
            MyBase.CambioItem("HabilitarFechaAplicacion")
        End Set
    End Property

    Private _HabilitarEncabezado As Boolean
    Public Property HabilitarEncabezado() As Boolean
        Get
            Return _HabilitarEncabezado
        End Get
        Set(ByVal value As Boolean)
            _HabilitarEncabezado = value
            MyBase.CambioItem("HabilitarEncabezado")
        End Set
    End Property

    Private _VerDuplicar As Visibility = Visibility.Visible
    Public Property VerDuplicar() As Visibility
        Get
            Return _VerDuplicar
        End Get
        Set(ByVal value As Visibility)
            _VerDuplicar = value
            MyBase.CambioItem("VerDuplicar")
        End Set
    End Property

    Private _ListaDatos As List(Of String)
    Public Property ListaDatos() As List(Of String)
        Get
            Return _ListaDatos
        End Get
        Set(ByVal value As List(Of String))
            _ListaDatos = value
            MyBase.CambioItem("ListaDatos")
        End Set
    End Property

    Private _VistaSeleccionada As String
    Public Property VistaSeleccionada() As String
        Get
            Return _VistaSeleccionada
        End Get
        Set(ByVal value As String)
            _VistaSeleccionada = value
            If logRecargarPantalla Then
                If Not String.IsNullOrEmpty(VistaSeleccionada) Then
                    TraerOrdenes("", VistaSeleccionada)
                End If
            End If
            MyBase.CambioItem("VistaSeleccionada")
        End Set
    End Property

    Private _cargaAutomaticaActiva As Boolean
    ''' <summary>
    ''' Activa o desactiva la recarga de ordenes mediante temporizador
    ''' </summary>
    ''' <value></value>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Property cargaAutomaticaActiva() As Boolean
        Get
            Return _cargaAutomaticaActiva
        End Get
        Set(ByVal value As Boolean)
            _cargaAutomaticaActiva = value
        End Set
    End Property

    Private _ListaValidacionesListaRestrictiva As List(Of tblRespuestaValidacionesTesoreria)
    Public Property ListaValidacionesListaRestrictiva() As List(Of tblRespuestaValidacionesTesoreria)
        Get
            Return _ListaValidacionesListaRestrictiva
        End Get
        Set(ByVal value As List(Of tblRespuestaValidacionesTesoreria))
            _ListaValidacionesListaRestrictiva = value
            MyBase.CambioItem("ListaValidacionesListaRestrictiva")
        End Set
    End Property

    Private _VerItemActual As Visibility
    Public Property VerItemActual() As Visibility
        Get
            Return _VerItemActual
        End Get
        Set(ByVal value As Visibility)
            _VerItemActual = value
            MyBase.CambioItem("VerItemActual")
        End Set
    End Property

    Private _TabItemActual As String
    Public Property TabItemActual() As String
        Get
            Return _TabItemActual
        End Get
        Set(ByVal value As String)
            _TabItemActual = value
            MyBase.CambioItem("TabItemActual")
        End Set
    End Property

    Private _mobjCtlSubirArchivo As A2DocumentosWPF.A2SubirDocumento

    Private _mstrArchivo As String
    Public Property mstrArchivo() As String
        Get
            Return _mstrArchivo
        End Get
        Set(ByVal value As String)
            _mstrArchivo = value
            MyBase.CambioItem("mstrArchivo")
        End Set
    End Property

    Private _strUsuario As String = Program.Usuario
    Public Property strUsuario() As String
        Get
            Return _strUsuario
        End Get
        Set(ByVal value As String)
            _strUsuario = value
            MyBase.CambioItem("strUsuario")
        End Set
    End Property

    Private _mstrRuta As String
    Public Property mstrRuta() As String
        Get
            Return _mstrRuta
        End Get
        Set(ByVal value As String)
            _mstrRuta = value
            MyBase.CambioItem("mstrRuta")
        End Set
    End Property

    Private _mabytArchivo As Byte()
    Public Property mabytArchivo As Byte()
        Get
            Return _mabytArchivo
        End Get
        Set(ByVal value As Byte())
            _mabytArchivo = value
            MyBase.CambioItem("mabytArchivo")
        End Set
    End Property

    Private _ComprobantesEgresoPLUSView As ComprobantesEgresoPLUSView
    Public Property ComprobantesEgresoPLUSView() As ComprobantesEgresoPLUSView
        Get
            Return _ComprobantesEgresoPLUSView
        End Get
        Set(ByVal value As ComprobantesEgresoPLUSView)
            _ComprobantesEgresoPLUSView = value
            If Not IsNothing(_ComprobantesEgresoPLUSView) Then
                _mobjCtlSubirArchivo = ComprobantesEgresoPLUSView.ctlSubirArchivo
            End If
            MyBase.CambioItem("ComprobantesEgresoPLUSView")
        End Set
    End Property

    Private _BorrarCliente As Boolean
    Public Property BorrarCliente() As Boolean
        Get
            Return _BorrarCliente
        End Get
        Set(ByVal value As Boolean)
            _BorrarCliente = value
            MyBase.CambioItem("BorrarCliente")
        End Set
    End Property

    Private _CodigoOYDControles As String
    Public Property CodigoOYDControles() As String
        Get
            Return _CodigoOYDControles
        End Get
        Set(ByVal value As String)
            _CodigoOYDControles = value
            MyBase.CambioItem("CodigoOYDControles")
        End Set
    End Property

    Private _TipoProductoControles As String
    Public Property TipoProductoControles() As String
        Get
            Return _TipoProductoControles
        End Get
        Set(ByVal value As String)
            _TipoProductoControles = value
            MyBase.CambioItem("TipoProductoControles")
        End Set
    End Property

    Private _CarteraColectivaFondosControles As String
    Public Property CarteraColectivaFondosControles() As String
        Get
            Return _CarteraColectivaFondosControles
        End Get
        Set(ByVal value As String)
            _CarteraColectivaFondosControles = value
            MyBase.CambioItem("CarteraColectivaFondosControles")
            If Not IsNothing(_CarteraColectivaFondosControles) Then
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) And logNuevoRegistro Then
                    HabilitarImportacion = True
                    HabilitarEnEdicion = True
                    If Not IsNothing(_ListaCarterasColectivasCliente) Then
                        If _ListaCarterasColectivasCliente.Where(Function(i) i.CarteraColectiva = _CarteraColectivaFondosControles).Count > 0 Then
                            dtmFechaMenorPermitidaIngreso = _ListaCarterasColectivasCliente.Where(Function(i) i.CarteraColectiva = _CarteraColectivaFondosControles).First.dtmFechaCierre
                        End If
                    End If
                    _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos = _CarteraColectivaFondosControles
                End If
                consultarCombosEspecificosFondo(_CarteraColectivaFondosControles, "ENCABEZADO")
                '  IDCarteraColectiva = _CarteraColectivaFondosControles
            End If

            DescripcionCarteraColectivaFondosControles = String.Empty
            If Not String.IsNullOrEmpty(_CarteraColectivaFondosControles) Then
                If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                    If DiccionarioCombosOYDPlusCompleta.ContainsKey("CARTERACOLECTIVAS") Then
                        If DiccionarioCombosOYDPlusCompleta("CARTERACOLECTIVAS").Where(Function(i) i.Retorno = _CarteraColectivaFondosControles).Count > 0 Then
                            DescripcionCarteraColectivaFondosControles = DiccionarioCombosOYDPlusCompleta("CARTERACOLECTIVAS").Where(Function(i) i.Retorno = _CarteraColectivaFondosControles).First.Descripcion
                        End If
                    End If
                End If
            End If

            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                    VerificarHabilitarTabsOmnibus(_CarteraColectivaFondosControles)
                Else
                    MostrarTabOYD = Visibility.Collapsed
                    MostrarTabTrasladoFondos = Visibility.Collapsed
                End If
            Else
                MostrarTabOYD = Visibility.Collapsed
                MostrarTabTrasladoFondos = Visibility.Collapsed
            End If
        End Set
    End Property

    Private _DescripcionCarteraColectivaFondosControles As String
    Public Property DescripcionCarteraColectivaFondosControles() As String
        Get
            Return _DescripcionCarteraColectivaFondosControles
        End Get
        Set(ByVal value As String)
            _DescripcionCarteraColectivaFondosControles = value
            MyBase.CambioItem("DescripcionCarteraColectivaFondosControles")
        End Set
    End Property

    Private _NroEncargoFondosControles As String
    Public Property NroEncargoFondosControles() As String
        Get
            Return _NroEncargoFondosControles
        End Get
        Set(ByVal value As String)
            _NroEncargoFondosControles = value
            MyBase.CambioItem("NroEncargoFondosControles")
            If Not IsNothing(_NroEncargoFondosControles) And logNuevoRegistro Then
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    HabilitarImportacion = True
                    HabilitarEnEdicion = True
                    _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos = _NroEncargoFondosControles
                End If
            End If
        End Set
    End Property

    Private _ConsultarSaldo As Boolean
    Public Property ConsultarSaldo() As Boolean
        Get
            Return _ConsultarSaldo
        End Get
        Set(ByVal value As Boolean)
            _ConsultarSaldo = value
            MyBase.CambioItem("ConsultarSaldo")
        End Set
    End Property

    Private _cb As CamposBusquedaTesoreriaOyDPLUS = New CamposBusquedaTesoreriaOyDPLUS
    Public Property cb() As CamposBusquedaTesoreriaOyDPLUS
        Get
            Return _cb
        End Get
        Set(ByVal value As CamposBusquedaTesoreriaOyDPLUS)
            _cb = value
            MyBase.CambioItem("cb")
        End Set
    End Property

    Private _HabilitarImportacion As Boolean
    Public Property HabilitarImportacion() As Boolean
        Get
            Return _HabilitarImportacion
        End Get
        Set(ByVal value As Boolean)
            _HabilitarImportacion = value
            MyBase.CambioItem("HabilitarImportacion")
        End Set
    End Property

    Private _HabilitarEnEdicion As Boolean
    Public Property HabilitarEnEdicion() As Boolean
        Get
            Return _HabilitarEnEdicion
        End Get
        Set(ByVal value As Boolean)
            _HabilitarEnEdicion = value
            MyBase.CambioItem("HabilitarEnEdicion")
        End Set
    End Property

    Private _HabilitarReceptor As Boolean = False
    Public Property HabilitarReceptor() As Boolean
        Get
            Return _HabilitarReceptor
        End Get
        Set(ByVal value As Boolean)
            _HabilitarReceptor = value
            MyBase.CambioItem("HabilitarReceptor")
        End Set
    End Property

    Private _HabilitarCamposValidacion As Boolean
    Public Property HabilitarCamposValidacion() As Boolean
        Get
            Return _HabilitarCamposValidacion
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposValidacion = value
            MyBase.CambioItem("HabilitarCamposValidacion")
        End Set
    End Property

    Private _ExpresionRegularNroDocumento As String = "black"
    Public Property ExpresionRegularNroDocumento() As String
        Get
            Return _ExpresionRegularNroDocumento
        End Get
        Set(ByVal value As String)
            _ExpresionRegularNroDocumento = value
            MyBase.CambioItem("ExpresionRegularNroDocumento")
        End Set
    End Property

    Private _ExpresionRegularNombreBeneficiario As String = "black"
    Public Property ExpresionRegularNombreBeneficiario() As String
        Get
            Return _ExpresionRegularNombreBeneficiario
        End Get
        Set(ByVal value As String)
            _ExpresionRegularNombreBeneficiario = value
            MyBase.CambioItem("ExpresionRegularNombreBeneficiario")
        End Set
    End Property

    Private _HabilitarNegocio As Boolean = False
    Public Property HabilitarNegocio() As Boolean
        Get
            Return _HabilitarNegocio
        End Get
        Set(ByVal value As Boolean)
            _HabilitarNegocio = value
            MyBase.CambioItem("HabilitarNegocio")
        End Set
    End Property

    Private _HabilitarBuscadorCliente As Boolean = False
    Public Property HabilitarBuscadorCliente() As Boolean
        Get
            Return _HabilitarBuscadorCliente
        End Get
        Set(ByVal value As Boolean)
            _HabilitarBuscadorCliente = value
            MyBase.CambioItem("HabilitarBuscadorCliente")
        End Set
    End Property

    Private _HabilitarTipoProducto As Boolean = False
    Public Property HabilitarTipoProducto() As Boolean
        Get
            Return _HabilitarTipoProducto
        End Get
        Set(ByVal value As Boolean)
            _HabilitarTipoProducto = value
            MyBase.CambioItem("HabilitarTipoProducto")
        End Set
    End Property

    Private _TextoComboTipoProducto As String
    Public Property TextoComboTipoProducto() As String
        Get
            Return _TextoComboTipoProducto
        End Get
        Set(ByVal value As String)
            _TextoComboTipoProducto = value
            MyBase.CambioItem("TextoComboTipoProducto")
        End Set
    End Property

    Private _ListaParametrosReceptor As List(Of OYDPLUSUtilidades.tblParametrosReceptor)
    Public Property ListaParametrosReceptor() As List(Of OYDPLUSUtilidades.tblParametrosReceptor)
        Get
            Return _ListaParametrosReceptor
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblParametrosReceptor))
            _ListaParametrosReceptor = value
            MyBase.CambioItem("ListaParametrosReceptor")
        End Set
    End Property

    Private _ConfiguracionReceptor As OYDPLUSUtilidades.tblConfiguracionesAdicionalesReceptor
    Public Property ConfiguracionReceptor() As OYDPLUSUtilidades.tblConfiguracionesAdicionalesReceptor
        Get
            Return _ConfiguracionReceptor
        End Get
        Set(ByVal value As OYDPLUSUtilidades.tblConfiguracionesAdicionalesReceptor)
            _ConfiguracionReceptor = value
            MyBase.CambioItem("ConfiguracionReceptor")
        End Set
    End Property

    Private _ListaReceptoresUsuario As List(Of OYDPLUSUtilidades.tblReceptoresUsuario)
    Public Property ListaReceptoresUsuario() As List(Of OYDPLUSUtilidades.tblReceptoresUsuario)
        Get
            Return _ListaReceptoresUsuario
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblReceptoresUsuario))
            _ListaReceptoresUsuario = value
            MyBase.CambioItem("ListaReceptoresUsuario")
        End Set
    End Property

    Private _DiccionarioCombosOYDPlusCompleta As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
    Public Property DiccionarioCombosOYDPlusCompleta() As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
        Get
            Return _DiccionarioCombosOYDPlusCompleta
        End Get
        Set(ByVal value As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor)))
            _DiccionarioCombosOYDPlusCompleta = value
            MyBase.CambioItem("DiccionarioCombosOYDPlusCompleta")
        End Set
    End Property

    Private _DiccionarioCombosOYDPlus As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
    Public Property DiccionarioCombosOYDPlus() As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
        Get
            Return _DiccionarioCombosOYDPlus
        End Get
        Set(ByVal value As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor)))
            _DiccionarioCombosOYDPlus = value
            MyBase.CambioItem("DiccionarioCombosOYDPlus")
        End Set
    End Property



    Private _FechaOrden As DateTime
    Public Property FechaOrden() As DateTime
        Get
            Return _FechaOrden
        End Get
        Set(ByVal value As DateTime)
            _FechaOrden = value
            If Editando And (logNuevoRegistro Or logDuplicarRegistro) Then
                Validarfecha()
                ObtenerFechaAplicacion()
            End If
            MyBase.CambioItem("FechaOrden")
        End Set
    End Property

    Private _FechaAplicacion As Nullable(Of DateTime)
    Public Property FechaAplicacion() As Nullable(Of DateTime)
        Get
            Return _FechaAplicacion
        End Get
        Set(ByVal value As Nullable(Of DateTime))
            _FechaAplicacion = value
            If Editando And (logNuevoRegistro Or logDuplicarRegistro) Then
                Validarfechaaplicacion()
            End If
            MyBase.CambioItem("FechaAplicacion")
        End Set
    End Property

    Private _Usuario As String
    Public Property Usuario() As String
        Get
            Return _Usuario
        End Get
        Set(ByVal value As String)
            _Usuario = value
            MyBase.CambioItem("Usuario")
        End Set
    End Property

    Private _ComitenteSeleccionado As New OYDUtilidades.BuscadorClientes
    Public Property ComitenteSeleccionado As OYDUtilidades.BuscadorClientes
        Get
            Return (_ComitenteSeleccionado)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorClientes)
            Dim logIgual As Boolean = False
            _ComitenteSeleccionado = value

            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                If Not IsNothing(_ComitenteSeleccionado) Then
                    _TesoreriaOrdenesPlusCE_Selected.strNombre = _ComitenteSeleccionado.Nombre
                    _TesoreriaOrdenesPlusCE_Selected.strTipoIdentificacion = _ComitenteSeleccionado.TipoIdentificacion
                    _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion = _ComitenteSeleccionado.CodTipoIdentificacion
                    _TesoreriaOrdenesPlusCE_Selected.strNroDocumento = _ComitenteSeleccionado.NroDocumento
                    _TesoreriaOrdenesPlusCE_Selected.strIDComitente = _ComitenteSeleccionado.CodigoOYD
                    CodigoOYDControles = _TesoreriaOrdenesPlusCE_Selected.strIDComitente

                    HabilitarConsultarSaldo()
                    logHayEncabezado = True

                    If Not IsNothing(dcProxy.TempCuentasClientes) Then
                        dcProxy.TempCuentasClientes.Clear()
                    End If
                    If Not IsNothing(dcProxy.TempDireccionesClientes) Then
                        dcProxy.TempDireccionesClientes.Clear()
                    End If
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        HabilitarImportacion = True
                        HabilitarEnEdicion = True
                        dcProxy.Load(dcProxy.OyDPlusListarDireccionesClientesQuery(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerDireccionesCliente, "")
                        dcProxy.Load(dcProxy.OyDPlusListarCuentasClientesQuery(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerCuentasCliente, "")
                        consultarOrdenantesOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.strIDComitente)
                        'CargarCombosOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor, String.Empty)
                    End If
                    VerInstrucciones = Visibility.Visible
                Else
                    _TesoreriaOrdenesPlusCE_Selected.strNombre = String.Empty
                    _TesoreriaOrdenesPlusCE_Selected.strTipoIdentificacion = String.Empty
                    _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion = String.Empty
                    _TesoreriaOrdenesPlusCE_Selected.strNroDocumento = String.Empty
                    _TesoreriaOrdenesPlusCE_Selected.strIDComitente = String.Empty
                    CodigoOYDControles = String.Empty
                    HabilitarImportacion = False
                    HabilitarEnEdicion = False

                    ListaDireccionesClientes = Nothing
                    ListaCuentasClientes = Nothing
                    ListaOrdenantesOYDPLUS = Nothing
                    OrdenanteSeleccionadoOYDPLUS = Nothing

                    SaldoConsultado = False
                    logHayEncabezado = True
                End If
            End If

            MyBase.CambioItem("ComitenteSeleccionado")
        End Set
    End Property

    Private _ListaTesoreriaOrdenesPlusCE As List(Of TesoreriaOrdenesEncabezado)
    Public Property ListaTesoreriaOrdenesPlusCE() As List(Of TesoreriaOrdenesEncabezado)
        Get
            Return _ListaTesoreriaOrdenesPlusCE
        End Get
        Set(ByVal value As List(Of TesoreriaOrdenesEncabezado))
            _ListaTesoreriaOrdenesPlusCE = value
            If Not IsNothing(value) Then
                ' TesoreriaOrdenesPlusCE_Selected = _ListaTesoreriaOrdenesPlusCE.FirstOrDefault
            End If
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE")
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Paged")
        End Set
    End Property

    Public ReadOnly Property ListaTesoreriaOrdenesPlusCE_Paged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE) Then
                Dim view = New PagedCollectionView(_ListaTesoreriaOrdenesPlusCE)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private WithEvents _TesoreriaOrdenesPlusCE_Selected As TesoreriaOrdenesEncabezado
    Public Property TesoreriaOrdenesPlusCE_Selected() As TesoreriaOrdenesEncabezado
        Get
            Return _TesoreriaOrdenesPlusCE_Selected
        End Get
        Set(ByVal value As TesoreriaOrdenesEncabezado)
            _TesoreriaOrdenesPlusCE_Selected = value

            'JABG20180419
            'Cuando es una orden programada o futura el boton duplicar no es visible para el usuario
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                If _TesoreriaOrdenesPlusCE_Selected.ValorEstado = "R" Or _TesoreriaOrdenesPlusCE_Selected.ValorEstado = "F" Then
                    MostrarBotonDuplicar = False
                Else
                    MostrarBotonDuplicar = True
                End If
            End If

            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                    If logEsFondosOYD Then
                        HabilitarConceptoDetalles = False
                    Else
                        HabilitarConceptoDetalles = True
                    End If
                Else
                    HabilitarConceptoDetalles = True
                End If
            End If

            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) And logRecargarDatosDetalle Then
                FechaOrden = _TesoreriaOrdenesPlusCE_Selected.dtmDocumento
                FechaAplicacion = _TesoreriaOrdenesPlusCE_Selected.dtmFechaAplicacion
                dtmFechaMenorPermitidaIngreso = _TesoreriaOrdenesPlusCE_Selected.dtmFechaCierreFondo

                CodigoOYDControles = _TesoreriaOrdenesPlusCE_Selected.strIDComitente
                TipoProductoControles = _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto
                CarteraColectivaFondosControles = _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos
                NroEncargoFondosControles = _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos

                If String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strNombreOrdenante) Then
                    NombreOrdenanteSeleccionado = "No seleccionado"
                Else
                    NombreOrdenanteSeleccionado = _TesoreriaOrdenesPlusCE_Selected.strNombreOrdenante
                End If

                If _TesoreriaOrdenesPlusCE_Selected.lngID > 0 Then
                    If Not IsNothing(dcProxy.TempCuentasClientes) Then
                        dcProxy.TempCuentasClientes.Clear()
                    End If
                    If Not IsNothing(dcProxy.TempDireccionesClientes) Then
                        dcProxy.TempDireccionesClientes.Clear()
                    End If

                    dcProxy.Load(dcProxy.OyDPlusListarDireccionesClientesQuery(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerDireccionesCliente, "")
                    dcProxy.Load(dcProxy.OyDPlusListarCuentasClientesQuery(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerCuentasCliente, "")
                    LlamarDetalle()
                    HabilitarConsultarSaldo()
                End If

                If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                    MostrarInformacionFondos = Visibility.Visible

                    If Editando And logNuevoRegistro Then
                        HabilitarCategoriaFondos = True
                    Else
                        HabilitarCategoriaFondos = False
                    End If
                Else
                    MostrarInformacionFondos = Visibility.Collapsed
                End If
            ElseIf IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                LimpiarDetalles()
                NombreOrdenanteSeleccionado = "No seleccionado"
            End If

            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                VerificarHabilitarTabsOrdenPago(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos)
            Else
                VerificarHabilitarTabsOrdenPago("C", String.Empty)
            End If
            MyBase.CambioItem("TesoreriaOrdenesPlusCE_Selected")
        End Set
    End Property

    Private _TesoreriaOrdenesPlusCE_DataForm As New TesoreriaOrdenesEncabezado
    Public Property TesoreriaOrdenesPlusCE_DataForm() As TesoreriaOrdenesEncabezado
        Get
            Return _TesoreriaOrdenesPlusCE_DataForm
        End Get
        Set(ByVal value As TesoreriaOrdenesEncabezado)
            _TesoreriaOrdenesPlusCE_DataForm = value
            MyBase.CambioItem("TesoreriaOrdenesPlusCE_DataForm")
        End Set
    End Property

    Private _CuentaRegistradaTesorero As String
    Public Property CuentaRegistradaTesorero() As String
        Get
            Return _CuentaRegistradaTesorero
        End Get
        Set(ByVal value As String)
            _CuentaRegistradaTesorero = value
            MyBase.CambioItem("CuentaRegistradaTesorero")
        End Set
    End Property

    Private _IsBusyEdicionTesorero As Boolean = False
    Public Property IsBusyEdicionTesorero() As Boolean
        Get
            Return _IsBusyEdicionTesorero
        End Get
        Set(ByVal value As Boolean)
            _IsBusyEdicionTesorero = value
            MyBase.CambioItem("IsBusyEdicionTesorero")
        End Set
    End Property

    Private _bolIsBusyReceptor As Boolean
    Public Property IsBusyReceptor() As Boolean
        Get
            Return _bolIsBusyReceptor
        End Get
        Set(ByVal value As Boolean)
            _bolIsBusyReceptor = value
            CambioItem("IsBusyReceptor")
        End Set
    End Property

    Private _IsBusyDetalles As Boolean = False
    Public Property IsBusyDetalles() As Boolean
        Get
            Return _IsBusyDetalles
        End Get
        Set(ByVal value As Boolean)
            _IsBusyDetalles = value
            MyBase.CambioItem("IsBusyDetalles")
        End Set
    End Property

    Private _strOpcionConsutaSaldo As String
    Public Property strOpcionConsutaSaldo() As String
        Get
            Return _strOpcionConsutaSaldo
        End Get
        Set(ByVal value As String)
            _strOpcionConsutaSaldo = value
        End Set
    End Property

    Private _listaSaldoCliente As List(Of OYDPLUSUtilidades.tblSaldosCliente)
    Public Property ListaSaldoCliente() As List(Of OYDPLUSUtilidades.tblSaldosCliente)
        Get
            Return _listaSaldoCliente
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblSaldosCliente))
            _listaSaldoCliente = value
        End Set
    End Property

    Private _dblSaldoConsultado As Decimal
    Public Property SaldoConsultado() As Decimal
        Get
            Return _dblSaldoConsultado
        End Get
        Set(ByVal value As Decimal)
            _dblSaldoConsultado = value
        End Set
    End Property

    Private _VerConsultaLiquidaciones As Visibility = Visibility.Visible
    Public Property VerConsultaLiquidaciones() As Visibility
        Get
            Return _VerConsultaLiquidaciones
        End Get
        Set(ByVal value As Visibility)
            _VerConsultaLiquidaciones = value
            MyBase.CambioItem("VerConsultaLiquidaciones")
        End Set
    End Property

    'Propiedad para almacenar el valor total de las liquidaciones y concatenarlo en los detalles de tesoreria.
    Private _liquidacionesSelecciondas As String
    Public Property liquidacionesSelecciondas() As String
        Get
            Return _liquidacionesSelecciondas
        End Get
        Set(ByVal value As String)
            _liquidacionesSelecciondas = value
        End Set
    End Property

    'Carteras colectivas de fondos
    '**********************************************************************************
    Private _HabilitarCategoriaFondos As Boolean
    Public Property HabilitarCategoriaFondos() As Boolean
        Get
            Return _HabilitarCategoriaFondos
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCategoriaFondos = value
            MyBase.CambioItem("HabilitarCategoriaFondos")
        End Set
    End Property

    Private _MostrarInformacionFondos As Visibility = Visibility.Collapsed
    Public Property MostrarInformacionFondos() As Visibility
        Get
            Return _MostrarInformacionFondos
        End Get
        Set(ByVal value As Visibility)
            _MostrarInformacionFondos = value
            If _MostrarInformacionFondos = Visibility.Visible Then
                If logEsFondosOYD Then
                    MostrarInformacionOperacionesEspeciales = Visibility.Collapsed
                    MostrarCamposAdicionalesFondosOYD = Visibility.Visible
                Else
                    MostrarInformacionOperacionesEspeciales = Visibility.Visible
                End If

                MostrarInformacionEnDetalleFondos = Visibility.Collapsed
            Else
                MostrarInformacionEnDetalleFondos = Visibility.Visible
                MostrarInformacionOperacionesEspeciales = Visibility.Collapsed
                MostrarCamposAdicionalesFondosOYD = Visibility.Collapsed
            End If
            MyBase.CambioItem("MostrarInformacionFondos")
        End Set
    End Property

    Private _MostrarInformacionEnDetalleFondos As Visibility = Visibility.Visible
    Public Property MostrarInformacionEnDetalleFondos() As Visibility
        Get
            Return _MostrarInformacionEnDetalleFondos
        End Get
        Set(ByVal value As Visibility)
            _MostrarInformacionEnDetalleFondos = value
            MyBase.CambioItem("MostrarInformacionEnDetalleFondos")
        End Set
    End Property

    'JABG20180419
    'esta propiedad sirve para no hacer visible el boton duplicar cuando el estado de la orden es programada o futura
    Private _MostrarBotonDuplicar As Visibility = Visibility.Collapsed
    Public Property MostrarBotonDuplicar As Visibility
        Get
            Return _MostrarBotonDuplicar
        End Get
        Set(ByVal value As Visibility)
            _MostrarBotonDuplicar = value
            MyBase.CambioItem("MostrarBotonDuplicar")
        End Set
    End Property

    Private _ListaCarterasColectivasClienteCompleta As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
    Public Property ListaCarterasColectivasClienteCompleta() As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
        Get
            Return _ListaCarterasColectivasClienteCompleta
        End Get
        Set(ByVal value As List(Of OyDPLUSTesoreria.CarterasColectivasClientes))
            _ListaCarterasColectivasClienteCompleta = value
            MyBase.CambioItem("ListaCarterasColectivasClienteCompleta")
        End Set
    End Property

    Private _ListaCarterasColectivasCliente As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
    Public Property ListaCarterasColectivasCliente() As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
        Get
            Return _ListaCarterasColectivasCliente
        End Get
        Set(ByVal value As List(Of OyDPLUSTesoreria.CarterasColectivasClientes))
            _ListaCarterasColectivasCliente = value
            MyBase.CambioItem("ListaCarterasColectivasCliente")
        End Set
    End Property

    Private _ListaEncargosCarteraColectiva As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
    Public Property ListaEncargosCarteraColectiva() As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
        Get
            Return _ListaEncargosCarteraColectiva
        End Get
        Set(ByVal value As List(Of OyDPLUSTesoreria.CarterasColectivasClientes))
            _ListaEncargosCarteraColectiva = value
            MyBase.CambioItem("ListaEncargosCarteraColectiva")
        End Set
    End Property

    Private _HabilitarProgramaciones As Boolean = True
    Public Property HabilitarProgramaciones() As Boolean
        Get
            Return _HabilitarProgramaciones
        End Get
        Set(ByVal value As Boolean)
            _HabilitarProgramaciones = value
            If _HabilitarProgramaciones = False Then
                Dim objListaDatos As New List(Of String)

                objListaDatos = New List(Of String)
                objListaDatos.Add(GSTR_PENDIENTES)
                objListaDatos.Add(GSTR_RECHAZADAS)
                objListaDatos.Add(GSTR_POR_APROBAR)
                objListaDatos.Add(GSTR_ANULADAS)
                objListaDatos.Add(GSTR_FUTURAS)

                ListaDatos = objListaDatos
            Else
                Dim objListaDatos As New List(Of String)

                objListaDatos = New List(Of String)
                objListaDatos.Add(GSTR_PENDIENTES)
                objListaDatos.Add(GSTR_RECHAZADAS)
                objListaDatos.Add(GSTR_POR_APROBAR)
                objListaDatos.Add(GSTR_ANULADAS)
                objListaDatos.Add(GSTR_FUTURAS)
                objListaDatos.Add(GSTR_PROGRAMADAS)
                objListaDatos.Add(GSTR_DIVIDENDOS)

                ListaDatos = objListaDatos
            End If

            MyBase.CambioItem("HabilitarProgramaciones")
        End Set
    End Property

    Private _NombreOrdenanteSeleccionado As String
    Public Property NombreOrdenanteSeleccionado() As String
        Get
            Return _NombreOrdenanteSeleccionado
        End Get
        Set(ByVal value As String)
            _NombreOrdenanteSeleccionado = value
            MyBase.CambioItem("NombreOrdenanteSeleccionado")
        End Set
    End Property

    ''' <summary>
    ''' JAPC20200424-CC20200364:_Tesorero puede editar GMF
    ''' </summary>
    Private _HabilitarTipoGMFTesorero As Boolean = False
    Public Property HabilitarTipoGMFTesorero() As Boolean
        Get
            Return _HabilitarTipoGMFTesorero
        End Get
        Set(ByVal value As Boolean)
            _HabilitarTipoGMFTesorero = value
            MyBase.CambioItem("HabilitarTipoGMF")
        End Set
    End Property

    '**********************************************************************************

#End Region

#Region "Propiedades ValidarIngreso"

    Private _ListaResultadoValidacion As List(Of OyDPLUSTesoreria.tblRespuestaValidaciones)
    Public Property ListaResultadoValidacion() As List(Of OyDPLUSTesoreria.tblRespuestaValidaciones)
        Get
            Return _ListaResultadoValidacion
        End Get
        Set(ByVal value As List(Of OyDPLUSTesoreria.tblRespuestaValidaciones))
            _ListaResultadoValidacion = value
            MyBase.CambioItem("ListaResultadoValidacion")
        End Set
    End Property

    Private _CantidadConfirmaciones As Integer = 0
    Public Property CantidadConfirmaciones() As Integer
        Get
            Return _CantidadConfirmaciones
        End Get
        Set(ByVal value As Integer)
            _CantidadConfirmaciones = value
            If CantidadConfirmaciones > 0 Then
                If CantidadConfirmaciones = cantidadTotalConfirmacion And CantidadJustificaciones = cantidadTotalJustificacion And CantidadAprobaciones = CantidadTotalAprobaciones Then
                    ActualizarOrdenTesoreria()
                End If
            End If
        End Set
    End Property

    Private _CantidadAprobaciones As Integer = 0
    Public Property CantidadAprobaciones() As Integer
        Get
            Return _CantidadAprobaciones
        End Get
        Set(ByVal value As Integer)
            _CantidadAprobaciones = value
            If CantidadAprobaciones > 0 Then
                If CantidadConfirmaciones = cantidadTotalConfirmacion And CantidadJustificaciones = cantidadTotalJustificacion And CantidadAprobaciones = CantidadTotalAprobaciones Then
                    ActualizarOrdenTesoreria()
                End If
            End If
        End Set
    End Property

    Private _Confirmaciones As String = String.Empty
    Public Property Confirmaciones() As String
        Get
            Return _Confirmaciones
        End Get
        Set(ByVal value As String)
            _Confirmaciones = value
            MyBase.CambioItem("Confirmaciones")
        End Set
    End Property

    Private _ConfirmacionesUsuario As String = String.Empty
    Public Property ConfirmacionesUsuario() As String
        Get
            Return _ConfirmacionesUsuario
        End Get
        Set(ByVal value As String)
            _ConfirmacionesUsuario = value
            MyBase.CambioItem("ConfirmacionesUsuario")
        End Set
    End Property

    Private _ConfirmacionesListasRestrictivas As String = String.Empty
    Public Property ConfirmacionesListasRestrictivas() As String
        Get
            Return _ConfirmacionesListasRestrictivas
        End Get
        Set(ByVal value As String)
            _ConfirmacionesListasRestrictivas = value
        End Set
    End Property

    Private _Justificaciones As String = String.Empty
    Public Property Justificaciones() As String
        Get
            Return _Justificaciones
        End Get
        Set(ByVal value As String)
            _Justificaciones = value
            MyBase.CambioItem("Justificaciones")
        End Set
    End Property

    Private _JustificacionesListasRestrictivas As String = String.Empty
    Public Property JustificacionesListasRestrictivas() As String
        Get
            Return _JustificacionesListasRestrictivas
        End Get
        Set(ByVal value As String)
            _JustificacionesListasRestrictivas = value
            MyBase.CambioItem("JustificacionesListasRestrictivas")
        End Set
    End Property

    Private _JustificacionesUsuario As String = String.Empty
    Public Property JustificacionesUsuario() As String
        Get
            Return _JustificacionesUsuario
        End Get
        Set(ByVal value As String)
            _JustificacionesUsuario = value
            MyBase.CambioItem("JustificacionesUsuario")
        End Set
    End Property

    Private _JustificacionesUsuarioListasRestrictivas As String = String.Empty
    Public Property JustificacionesUsuarioListasRestrictivas() As String
        Get
            Return _JustificacionesUsuarioListasRestrictivas
        End Get
        Set(ByVal value As String)
            _JustificacionesUsuarioListasRestrictivas = value
        End Set
    End Property

    Private _Aprobaciones As String
    Public Property Aprobaciones() As String
        Get
            Return _Aprobaciones
        End Get
        Set(ByVal value As String)
            _Aprobaciones = value
            MyBase.CambioItem("Aprobaciones")
        End Set
    End Property

    Private _AprobacionesListasRestrictivas As String
    Public Property AprobacionesListasRestrictivas() As String
        Get
            Return _AprobacionesListasRestrictivas
        End Get
        Set(ByVal value As String)
            _AprobacionesListasRestrictivas = value
        End Set
    End Property

    Private _AprobacionesUsuarioListasRestrictivas As String
    Public Property AprobacionesUsuarioListasRestrictivas() As String
        Get
            Return _AprobacionesUsuarioListasRestrictivas
        End Get
        Set(ByVal value As String)
            _AprobacionesUsuarioListasRestrictivas = value
        End Set
    End Property

    Private _AprobacionesUsuario As String
    Public Property AprobacionesUsuario() As String
        Get
            Return _AprobacionesUsuario
        End Get
        Set(ByVal value As String)
            _AprobacionesUsuario = value
            MyBase.CambioItem("AprobacionesUsuario")
        End Set
    End Property

    Private _CantidadJustificaciones As Integer = 0
    Public Property CantidadJustificaciones() As Integer
        Get
            Return _CantidadJustificaciones
        End Get
        Set(ByVal value As Integer)
            _CantidadJustificaciones = value
            If CantidadJustificaciones > 0 Then
                If CantidadConfirmaciones = cantidadTotalConfirmacion And CantidadJustificaciones = cantidadTotalJustificacion And CantidadAprobaciones = CantidadTotalAprobaciones Then
                    ActualizarOrdenTesoreria()
                End If
            End If
        End Set
    End Property

#End Region

#Region "Propiedades Cheques"

    Private _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques As New List(Of TesoreriaOyDPlusCheques)
    Public Property ListaTesoreriaOrdenesPlusCE_Detalle_Cheques() As List(Of TesoreriaOyDPlusCheques)
        Get
            Return _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
        End Get
        Set(ByVal value As List(Of TesoreriaOyDPlusCheques))
            _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques = value
            If Not IsNothing(value) Then
                If _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected = _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.FirstOrDefault
                End If
            End If
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Cheques")
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Cheques_Paged")
        End Set
    End Property

    Public ReadOnly Property ListaTesoreriaOrdenesPlusCE_Detalle_Cheques_Paged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                Dim view = New PagedCollectionView(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private WithEvents _TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected As TesoreriaOyDPlusCheques
    Public Property TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected() As TesoreriaOyDPlusCheques
        Get
            Return _TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected
        End Get
        Set(ByVal value As TesoreriaOyDPlusCheques)
            _TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected = value
            MyBase.CambioItem("TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected")
        End Set
    End Property

    Public _ValorTotalNota_Cheque As Decimal
    Public Property ValorTotalNota_Cheque() As Decimal
        Get
            Return _ValorTotalNota_Cheque
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNota_Cheque = value
            MyBase.CambioItem("ValorTotalNota_Cheque")
        End Set
    End Property

    Private _ValorGMF As Decimal
    Public Property ValorGMF() As Decimal
        Get
            Return _ValorGMF
        End Get
        Set(ByVal value As Decimal)
            _ValorGMF = value
            MyBase.CambioItem("ValorGMF")
        End Set
    End Property

    Private _IDTipoCliente As String
    Public Property IDTipoCliente() As String
        Get
            Return _IDTipoCliente
        End Get
        Set(ByVal value As String)
            _IDTipoCliente = value
            MyBase.CambioItem("IDTipoCliente")
        End Set
    End Property

    Private _strTipoIDClienteText As String
    Public Property strTipoIDClienteText() As String
        Get
            Return _strTipoIDClienteText
        End Get
        Set(ByVal value As String)
            _strTipoIDClienteText = value
            MyBase.CambioItem("strTipoIDClienteText")
        End Set
    End Property

    Private _strValorTipoDoc As String
    Public Property strValorTipoDoc As String
        Get
            Return _strValorTipoDoc
        End Get
        Set(value As String)
            _strValorTipoDoc = value
            MyBase.CambioItem("strValorTipoDoc")
        End Set
    End Property

    Private _HabilitarCamposPopup As Boolean
    Public Property HabilitarCamposPopup() As Boolean
        Get
            Return _HabilitarCamposPopup
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposPopup = value
            MyBase.CambioItem("HabilitarCamposPopup")
        End Set
    End Property

    Private _HabilitarCampoBeneficiario As Boolean
    Public Property HabilitarCampoBeneficiario() As Boolean
        Get
            Return _HabilitarCampoBeneficiario
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCampoBeneficiario = value
            MyBase.CambioItem("HabilitarCampoBeneficiario")
        End Set
    End Property

    Private _HabilitarCampoNroDocumento As Boolean = True
    Public Property HabilitarCampoNroDocumento() As Boolean
        Get
            Return _HabilitarCampoNroDocumento
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCampoNroDocumento = value
            MyBase.CambioItem("HabilitarCampoNroDocumento")
        End Set
    End Property

    Private _DescripcionTipoIdentificacionCheque As String
    Public Property DescripcionTipoIdentificacionCheque() As String
        Get
            Return _DescripcionTipoIdentificacionCheque
        End Get
        Set(ByVal value As String)
            _DescripcionTipoIdentificacionCheque = value
            MyBase.CambioItem("DescripcionTipoIdentificacionCheque")
        End Set
    End Property

    Private _strTipoIdentificacionWpp As String
    Public Property strTipoIdentificacionWpp() As String
        Get
            Return _strTipoIdentificacionWpp
        End Get
        Set(ByVal value As String)
            _strTipoIdentificacionWpp = value
            MyBase.CambioItem("strTipoIdentificacionWpp")
        End Set
    End Property

    Private _strBeneficiarioWpp As String
    Public Property strBeneficiarioWpp() As String
        Get
            Return _strBeneficiarioWpp
        End Get
        Set(ByVal value As String)
            _strBeneficiarioWpp = value
            MyBase.CambioItem("strBeneficiarioWpp")
        End Set
    End Property

    Private _strNroDocumentoWpp As String
    Public Property strNroDocumentoWpp() As String
        Get
            Return _strNroDocumentoWpp
        End Get
        Set(ByVal value As String)
            _strNroDocumentoWpp = value
            MyBase.CambioItem("strNroDocumentoWpp")
        End Set
    End Property

    Private _HabilitarTipoCruce As Boolean
    Public Property HabilitarTipoCruce() As Boolean
        Get
            Return _HabilitarTipoCruce
        End Get
        Set(ByVal value As Boolean)
            _HabilitarTipoCruce = value





            MyBase.CambioItem("HabilitarTipoCruce")
        End Set
    End Property

    Private _HabilitarConceptoCheque As Boolean
    Public Property HabilitarConceptoCheque() As Boolean
        Get
            Return _HabilitarConceptoCheque
        End Get
        Set(ByVal value As Boolean)
            _HabilitarConceptoCheque = value
            MyBase.CambioItem("HabilitarConceptoCheque")
        End Set
    End Property

    Private _strTipoCheque As String
    Public Property strTipoCheque() As String
        Get
            Return _strTipoCheque
        End Get
        Set(ByVal value As String)
            _strTipoCheque = value
            MyBase.CambioItem("strTipoCheque")
        End Set
    End Property

    Private _TipoChequeDescripcion As String
    Public Property TipoChequeDescripcion() As String
        Get
            Return _TipoChequeDescripcion
        End Get
        Set(ByVal value As String)
            _TipoChequeDescripcion = value
            MyBase.CambioItem("TipoChequeDescripcion")
        End Set
    End Property

    Private _IDTipoCheque As String
    Public Property IDTipoCheque() As String
        Get
            Return _IDTipoCheque
        End Get
        Set(ByVal value As String)
            _IDTipoCheque = value
            MyBase.CambioItem("IDTipoCheque")
        End Set
    End Property

    Private _IDTipoCruce As String
    Public Property IDTipoCruce() As String
        Get
            Return _IDTipoCruce
        End Get
        Set(ByVal value As String)
            _IDTipoCruce = value
            MyBase.CambioItem("IDTipoCruce")
        End Set
    End Property

    Private _DescripcionTipoCruce As String
    Public Property DescripcionTipoCruce() As String
        Get
            Return _DescripcionTipoCruce
        End Get
        Set(ByVal value As String)
            _DescripcionTipoCruce = value
            MyBase.CambioItem("DescripcionTipoCruce")
        End Set
    End Property

    Private _DescripcionComboConceptoCheque As String
    Public Property DescripcionComboConceptoCheque() As String
        Get
            Return _DescripcionComboConceptoCheque
        End Get
        Set(ByVal value As String)
            _DescripcionComboConceptoCheque = value
            MyBase.CambioItem("DescripcionComboConceptoCheque")
        End Set
    End Property

    Private _IdConcepto As Integer
    Public Property IdConcepto() As Integer
        Get
            Return _IdConcepto
        End Get
        Set(ByVal value As Integer)
            _IdConcepto = value
            MyBase.CambioItem("IdConcepto")
        End Set
    End Property

    Private _DescripcionConcepto As String
    Public Property DescripcionConcepto() As String
        Get
            Return _DescripcionConcepto
        End Get
        Set(ByVal value As String)
            _DescripcionConcepto = value
            MyBase.CambioItem("DescripcionConcepto")
        End Set
    End Property

    Public _ValorGenerar As Decimal
    Public Property ValorGenerar() As Decimal
        Get
            Return _ValorGenerar
        End Get
        Set(ByVal value As Decimal)
            _ValorGenerar = value
            If Not IsNothing(_ValorGenerar) Then
                If logCambiarPropiedadesPOPPUP Then
                    CalcularValoresDetalleCheque()
                End If
            End If
            MyBase.CambioItem("ValorGenerar")
        End Set
    End Property

    Public _ValorNeto As Decimal
    Public Property ValorNeto() As Decimal
        Get
            Return _ValorNeto
        End Get
        Set(ByVal value As Decimal)
            _ValorNeto = value
            MyBase.CambioItem("ValorNeto")
        End Set
    End Property

    Private _DescripcionGMF As String
    Public Property DescripcionGMF() As String
        Get
            Return _DescripcionGMF
        End Get
        Set(ByVal value As String)
            _DescripcionGMF = value
            MyBase.CambioItem("DescripcionGMF")
        End Set
    End Property

    Private _strEsTercero As String
    Public Property strEsTercero As String
        Get
            Return _strEsTercero
        End Get
        Set(ByVal value As String)
            _strEsTercero = value
            MyBase.CambioItem("strEsTercero")
        End Set
    End Property

    Private _IDGMF As String
    Public Property IDGMF() As String
        Get
            Return _IDGMF
        End Get
        Set(ByVal value As String)
            _IDGMF = value
            MyBase.CambioItem("IDGMF")
        End Set
    End Property

#End Region

#Region "Propiedades Transferencias"

    Private _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias As List(Of TesoreriaOyDPlusTransferencia)
    Public Property ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias() As List(Of TesoreriaOyDPlusTransferencia)
        Get
            Return _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
        End Get
        Set(ByVal value As List(Of TesoreriaOyDPlusTransferencia))
            _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias = value
            If Not IsNothing(value) Then
                If _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > 0 Then
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.FirstOrDefault
                End If
            End If
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias")
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias_Paged")
        End Set
    End Property

    Public ReadOnly Property ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias_Paged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                Dim view = New PagedCollectionView(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private WithEvents _TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected As TesoreriaOyDPlusTransferencia
    Public Property TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected() As TesoreriaOyDPlusTransferencia
        Get
            Return _TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected
        End Get
        Set(ByVal value As TesoreriaOyDPlusTransferencia)
            _TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = value

            MyBase.CambioItem("TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected")
        End Set
    End Property

    Private _DescripcionBancoTransferencia As String
    Public Property DescripcionBancoTransferencia() As String
        Get
            Return _DescripcionBancoTransferencia
        End Get
        Set(ByVal value As String)
            _DescripcionBancoTransferencia = value
            MyBase.CambioItem("DescripcionBancoTransferencia")
        End Set
    End Property

    Private _IdBancoTransferencia As Integer
    Public Property IdBancoTransferencia() As Integer
        Get
            Return _IdBancoTransferencia
        End Get
        Set(ByVal value As Integer)
            _IdBancoTransferencia = value
            MyBase.CambioItem("IdBancoTransferencia")
        End Set
    End Property

    Public _ValorTotalNota_Transferencia As Decimal
    Public Property ValorTotalNota_Transferencia() As Decimal
        Get
            Return _ValorTotalNota_Transferencia
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNota_Transferencia = value
            MyBase.CambioItem("ValorTotalNota_Transferencia")
        End Set
    End Property

    Private _ValorTotalGenerarTransferencia As Decimal = 0
    Public Property ValorTotalGenerarTransferencia() As Decimal
        Get
            Return _ValorTotalGenerarTransferencia
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerarTransferencia = value
            MyBase.CambioItem("ValorTotalGenerarTransferencia")
        End Set
    End Property

    Private _ValorTotalGMFTransferencia As Decimal = 0
    Public Property ValorTotalGMFTransferencia() As Decimal
        Get
            Return _ValorTotalGMFTransferencia
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGMFTransferencia = value
            MyBase.CambioItem("ValorTotalGMFTransferencia")
        End Set
    End Property

    Private _ValorTotalNETOTransferencia As Decimal = 0
    Public Property ValorTotalNETOTransferencia() As Decimal
        Get
            Return _ValorTotalNETOTransferencia
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNETOTransferencia = value
            MyBase.CambioItem("ValorTotalNETOTransferencia")
        End Set
    End Property

    Private _ValorGenerarTransferencia As Decimal
    Public Property ValorGenerarTransferencia() As Decimal
        Get
            Return _ValorGenerarTransferencia
        End Get
        Set(ByVal value As Decimal)
            _ValorGenerarTransferencia = value
            MyBase.CambioItem("ValorGenerarTransferencia")
        End Set
    End Property

    Private _ValorGMFTransferencia As Decimal
    Public Property ValorGMFTransferencia() As Decimal
        Get
            Return _ValorGMFTransferencia
        End Get
        Set(ByVal value As Decimal)
            _ValorGMFTransferencia = value
            MyBase.CambioItem("ValorGMFTransferencia")
        End Set
    End Property

    Private _DescripcionConceptoTransferencia As String
    Public Property DescripcionConceptoTransferencia() As String
        Get
            Return _DescripcionConceptoTransferencia
        End Get
        Set(ByVal value As String)
            _DescripcionConceptoTransferencia = value
            MyBase.CambioItem("DescripcionConceptoTransferencia")
        End Set
    End Property

    Private _HabilitarCampoGMFTransferencia As Boolean
    Public Property HabilitarCampoGMFTransferencia() As Boolean
        Get
            Return _HabilitarCampoGMFTransferencia
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCampoGMFTransferencia = value
            MyBase.CambioItem("HabilitarCampoGMFTransferencia")
        End Set
    End Property

    Private _DescripcionTipoIdentificacionTitularTransferencia As String
    Public Property DescripcionTipoIdentificacionTitularTransferencia() As String
        Get
            Return _DescripcionTipoIdentificacionTitularTransferencia
        End Get
        Set(ByVal value As String)
            _DescripcionTipoIdentificacionTitularTransferencia = value
            MyBase.CambioItem("DescripcionTipoIdentificacionTitularTransferencia")
        End Set
    End Property

    Private _strTipoIdentificacionTitularWpp As String
    Public Property strTipoIdentificacionTitularWpp() As String
        Get
            Return _strTipoIdentificacionTitularWpp
        End Get
        Set(ByVal value As String)
            _strTipoIdentificacionTitularWpp = value
            MyBase.CambioItem("strTipoIdentificacionTitularWpp")
        End Set
    End Property

    Private _strNombreTitularWpp As String
    Public Property strNombreTitularWpp() As String
        Get
            Return _strNombreTitularWpp
        End Get
        Set(ByVal value As String)
            _strNombreTitularWpp = value
            MyBase.CambioItem("strNombreTitularWpp")
        End Set
    End Property

    Private _strNroDocumentoTitularWpp As String
    Public Property strNroDocumentoTitularWpp() As String
        Get
            Return _strNroDocumentoTitularWpp
        End Get
        Set(ByVal value As String)
            _strNroDocumentoTitularWpp = value
            MyBase.CambioItem("strNroDocumentoTitularWpp")
        End Set
    End Property

    Private _lngCodigoBancoWpp As Integer
    Public Property lngCodigoBancoWpp() As Integer
        Get
            Return _lngCodigoBancoWpp
        End Get
        Set(ByVal value As Integer)
            _lngCodigoBancoWpp = value
            MyBase.CambioItem("lngCodigoBancoWpp")
        End Set
    End Property

    Private _strNroCuentaWpp As String
    Public Property strNroCuentaWpp() As String
        Get
            Return _strNroCuentaWpp
        End Get
        Set(ByVal value As String)
            _strNroCuentaWpp = value
            MyBase.CambioItem("strNroCuentaWpp")
        End Set
    End Property

    Private _DescripcionTipoCuentaTransferencia As String
    Public Property DescripcionTipoCuentaTransferencia() As String
        Get
            Return _DescripcionTipoCuentaTransferencia
        End Get
        Set(ByVal value As String)
            _DescripcionTipoCuentaTransferencia = value
            MyBase.CambioItem("_DescripcionTipoCuentaTransferencia")
        End Set
    End Property

    Private _strValorTipoCuentaWpp As String
    Public Property strValorTipoCuentaWpp() As String
        Get
            Return _strValorTipoCuentaWpp
        End Get
        Set(ByVal value As String)
            _strValorTipoCuentaWpp = value
            MyBase.CambioItem("strValorTipoCuentaWpp")
        End Set
    End Property

    Private _ListaCuentasClientes As List(Of TempCuentasClientes)
    Public Property ListaCuentasClientes() As List(Of TempCuentasClientes)
        Get
            Return _ListaCuentasClientes
        End Get
        Set(ByVal value As List(Of TempCuentasClientes))

            _ListaCuentasClientes = value
            MyBase.CambioItem("ListaCuentasClientes")
        End Set
    End Property

    Private _ListaDireccionesClientes As List(Of TempDireccionesClientes)
    Public Property ListaDireccionesClientes() As List(Of TempDireccionesClientes)
        Get
            Return _ListaDireccionesClientes
        End Get
        Set(ByVal value As List(Of TempDireccionesClientes))

            _ListaDireccionesClientes = value
            MyBase.CambioItem("ListaDireccionesClientes")
        End Set
    End Property

    Private _CuentaRegistrada As Integer
    Public Property CuentaRegistrada() As Integer
        Get
            Return _CuentaRegistrada
        End Get
        Set(ByVal value As Integer)
            _CuentaRegistrada = value
            MyBase.CambioItem("CuentaRegistrada")
        End Set
    End Property

    Private _IdTipoCuentaRegistrada As String
    Public Property IdTipoCuentaRegistrada() As String
        Get
            Return _IdTipoCuentaRegistrada
        End Get
        Set(ByVal value As String)
            _IdTipoCuentaRegistrada = value
            MyBase.CambioItem("IdTipoCuentaRegistrada")
        End Set
    End Property

    Private _strValorTipoDocTransferencia As String
    Public Property strValorTipoDocTransferencia As String
        Get
            Return _strValorTipoDocTransferencia
        End Get
        Set(value As String)
            _strValorTipoDocTransferencia = value
            MyBase.CambioItem("strValorTipoDocTransferencia")
        End Set
    End Property

    Private _IDCuentaInscrita As String
    Public Property IDCuentaInscrita() As String
        Get
            Return _IDCuentaInscrita
        End Get
        Set(ByVal value As String)
            _IDCuentaInscrita = value
            MyBase.CambioItem("IDCuentaInscrita")
        End Set
    End Property

    Private _HabilitarComboCuentasNroCuenta As Boolean
    Public Property HabilitarComboCuentasNroCuenta() As Boolean
        Get
            Return _HabilitarComboCuentasNroCuenta
        End Get
        Set(ByVal value As Boolean)
            _HabilitarComboCuentasNroCuenta = value
            MyBase.CambioItem("HabilitarComboCuentasNroCuenta")
        End Set
    End Property

    Private _HabilitarComboCuentasNroDocumentoTitular As Boolean
    Public Property HabilitarComboCuentasNroDocumentoTitular() As Boolean
        Get
            Return _HabilitarComboCuentasNroDocumentoTitular
        End Get
        Set(ByVal value As Boolean)
            _HabilitarComboCuentasNroDocumentoTitular = value
            MyBase.CambioItem("HabilitarComboCuentasNroDocumentoTitular")
        End Set
    End Property

    Private _HabilitarComboCuentasNombreTitular As Boolean
    Public Property HabilitarComboCuentasNombreTitular() As Boolean
        Get
            Return _HabilitarComboCuentasNombreTitular
        End Get
        Set(ByVal value As Boolean)
            _HabilitarComboCuentasNombreTitular = value
            MyBase.CambioItem("HabilitarComboCuentasNombreTitular")
        End Set
    End Property

    Private _HabilitarComboCuentasCliente As Boolean
    Public Property HabilitarComboCuentasCliente() As Boolean
        Get
            Return _HabilitarComboCuentasCliente
        End Get
        Set(ByVal value As Boolean)
            _HabilitarComboCuentasCliente = value
            MyBase.CambioItem("HabilitarComboCuentasCliente")
        End Set
    End Property

    Private _strCtaRegistrada As String
    Public Property strCtaRegistrada() As String
        Get
            Return _strCtaRegistrada
        End Get
        Set(ByVal value As String)
            _strCtaRegistrada = value
            MyBase.CambioItem("strCtaRegistrada")
        End Set
    End Property

    Private _DescripcionConceptoTransferenciaCombo As String
    Public Property DescripcionConceptoTransferenciaCombo() As String
        Get
            Return _DescripcionConceptoTransferenciaCombo
        End Get
        Set(ByVal value As String)
            _DescripcionConceptoTransferenciaCombo = value
            MyBase.CambioItem("DescripcionConceptoTransferenciaCombo")
        End Set
    End Property

    Private _IdConceptoTransferencia As Nullable(Of Integer)
    Public Property IdConceptoTransferencia() As Nullable(Of Integer)
        Get
            Return _IdConceptoTransferencia
        End Get
        Set(ByVal value As Nullable(Of Integer))
            _IdConceptoTransferencia = value
            DescripcionConceptoTransferenciaCombo = ConcatenarConcepto(_IdConceptoTransferencia)

            MyBase.CambioItem("IdConceptoTransferencia")
        End Set
    End Property

    Public _ValorNetoTransferencia As Decimal
    Public Property ValorNetoTransferencia() As Decimal
        Get
            Return _ValorNetoTransferencia
        End Get
        Set(ByVal value As Decimal)
            _ValorNetoTransferencia = value
            MyBase.CambioItem("ValorNetoTransferencia")
        End Set
    End Property

    Private _strEsCuentaRegistrada As String
    Public Property strEsCuentaRegistrada As String
        Get
            Return _strEsCuentaRegistrada
        End Get
        Set(ByVal value As String)
            _strEsCuentaRegistrada = value
            MyBase.CambioItem("strEsCuentaRegistrada")
        End Set
    End Property

    Private _DescripcionGMFTransferencia As String
    Public Property DescripcionGMFTransferencia() As String
        Get
            Return _DescripcionGMFTransferencia
        End Get
        Set(ByVal value As String)
            _DescripcionGMFTransferencia = value
            MyBase.CambioItem("DescripcionGMFTransferencia")
        End Set
    End Property

    Private _IDGMF_Transferencia As String
    Public Property IDGMF_Transferencia() As String
        Get
            Return _IDGMF_Transferencia
        End Get
        Set(ByVal value As String)
            _IDGMF_Transferencia = value

            If Not IsNothing(_IDGMF_Transferencia) Then
                If logCambiarPropiedadesPOPPUP Then

                    If _IDGMF_Transferencia = GSTR_GMF_ENCIMA Then
                        ValorGMFTransferencia = dblGMF_E * ValorGenerarTransferencia
                        ValorNetoTransferencia = ValorGenerarTransferencia + ValorGMFTransferencia
                        ValorTotalNota_Transferencia = ValorNetoTransferencia
                        If Not IsNothing(DiccionarioCombosOYDPlus) Then
                            If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                                For Each li In DiccionarioCombosOYDPlus("TIPOGMF").Where(Function(i) i.Retorno = _IDGMF_Transferencia)
                                    DescripcionGMFTransferencia = li.Descripcion
                                Next
                            End If
                        End If
                    ElseIf _IDGMF_Transferencia = GSTR_GMF_DEBAJO Then
                        ValorGMFTransferencia = dblGMF_D * ValorGenerarTransferencia
                        ValorNetoTransferencia = ValorGenerarTransferencia - ValorGMFTransferencia
                        ValorTotalNota_Transferencia = ValorGenerarTransferencia
                        If Not IsNothing(DiccionarioCombosOYDPlus) Then
                            If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                                For Each li In DiccionarioCombosOYDPlus("TIPOGMF").Where(Function(i) i.Retorno = _IDGMF_Transferencia)
                                    DescripcionGMFTransferencia = li.Descripcion
                                Next
                            End If
                        End If
                    ElseIf _IDGMF_Transferencia = GSTR_GMF_NOAPLICA Then
                        ValorGMFTransferencia = 0
                        ValorNetoTransferencia = ValorGenerarTransferencia
                        ValorTotalNota_Transferencia = ValorNetoTransferencia
                    End If

                End If
            End If
            MyBase.CambioItem("IDGMF_Transferencia")
        End Set
    End Property

#End Region

#Region "Propiedades Carteras Colectivas"

    Private _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas As List(Of TesoreriaOyDPlusCarterasColectivas)
    Public Property ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas() As List(Of TesoreriaOyDPlusCarterasColectivas)
        Get
            Return _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
        End Get
        Set(ByVal value As List(Of TesoreriaOyDPlusCarterasColectivas))
            _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = value
            If Not IsNothing(value) Then
                If _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.FirstOrDefault
                End If
            End If
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas")
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Paged")
        End Set
    End Property

    Public ReadOnly Property ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Paged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                Dim view = New PagedCollectionView(_ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private WithEvents _TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected As TesoreriaOyDPlusCarterasColectivas
    Public Property TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected() As TesoreriaOyDPlusCarterasColectivas
        Get
            Return _TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected
        End Get
        Set(ByVal value As TesoreriaOyDPlusCarterasColectivas)
            _TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = value

            MyBase.CambioItem("TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected")
        End Set
    End Property

    Public _ValorTotalNota_Carteras As Decimal
    Public Property ValorTotalNota_Carteras() As Decimal
        Get
            Return _ValorTotalNota_Carteras
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNota_Carteras = value
            MyBase.CambioItem("ValorTotalNota_Carteras")
        End Set
    End Property

    Private _ValorTotalGenerarCarterasColectivas As Decimal = 0
    Public Property ValorTotalGenerarCarterasColectivas() As Decimal
        Get
            Return _ValorTotalGenerarCarterasColectivas
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerarCarterasColectivas = value
            MyBase.CambioItem("ValorTotalGenerarCarterasColectivas")
        End Set
    End Property

    Private _ValorTotalGMFCarterasColectivas As Decimal = 0
    Public Property ValorTotalGMFCarterasColectivas() As Decimal
        Get
            Return _ValorTotalGMFCarterasColectivas
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGMFCarterasColectivas = value
            MyBase.CambioItem("ValorTotalGMFCarterasColectivas")
        End Set
    End Property

    Private _ValorTotalNETOCarterasColectivas As Decimal = 0
    Public Property ValorTotalNETOCarterasColectivas() As Decimal
        Get
            Return _ValorTotalNETOCarterasColectivas
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNETOCarterasColectivas = value
            MyBase.CambioItem("ValorTotalNETOCarterasColectivas")
        End Set
    End Property

    Private _DescripcionTipoClienteCarteras As String
    Public Property DescripcionTipoClienteCarteras() As String
        Get
            Return _DescripcionTipoClienteCarteras
        End Get
        Set(ByVal value As String)
            _DescripcionTipoClienteCarteras = value
            MyBase.CambioItem("DescripcionTipoClienteCarteras")
        End Set
    End Property

    Private _IDTipoClienteCarteras As String
    Public Property IDTipoClienteCarteras() As String
        Get
            Return _IDTipoClienteCarteras
        End Get
        Set(ByVal value As String)
            _IDTipoClienteCarteras = value
            MyBase.CambioItem("IDTipoClienteCarteras")
        End Set
    End Property

    Private _strCodigoOYDCarteras As String
    Public Property strCodigoOYDCarteras() As String
        Get
            Return _strCodigoOYDCarteras
        End Get
        Set(ByVal value As String)
            _strCodigoOYDCarteras = value
            MyBase.CambioItem("strCodigoOYDCarteras")
        End Set
    End Property

    Private _strCodigoOYDCarterasConcatenado As String
    Public Property strCodigoOYDCarterasConcatenado() As String
        Get
            Return _strCodigoOYDCarterasConcatenado
        End Get
        Set(ByVal value As String)
            _strCodigoOYDCarterasConcatenado = value
            If logEsTrasladoFondos Then
                VerificarCobro_GMF(GSTR_TRASLADOFONDOS)
            Else
                VerificarCobro_GMF(GSTR_CARTERASCOLECTIVAS)
            End If

            MyBase.CambioItem("strCodigoOYDCarterasConcatenado")
        End Set
    End Property

    Private _DescripcionTipoIdentificacionCarteras As String
    Public Property DescripcionTipoIdentificacionCarteras() As String
        Get
            Return _DescripcionTipoIdentificacionCarteras
        End Get
        Set(ByVal value As String)
            _DescripcionTipoIdentificacionCarteras = value
            MyBase.CambioItem("DescripcionTipoIdentificacionCarteras")
        End Set
    End Property

    Private _strTipoIdentificacionCarterasWpp As String
    Public Property strTipoIdentificacionCarterasWpp() As String
        Get
            Return _strTipoIdentificacionCarterasWpp
        End Get
        Set(ByVal value As String)
            _strTipoIdentificacionCarterasWpp = value
            MyBase.CambioItem("strTipoIdentificacionCarterasWpp")
        End Set
    End Property

    Private _DescripcionComboConceptoCartera As String
    Public Property DescripcionComboConceptoCartera() As String
        Get
            Return _DescripcionComboConceptoCartera
        End Get
        Set(ByVal value As String)
            _DescripcionComboConceptoCartera = value
            MyBase.CambioItem("DescripcionComboConceptoCartera")
        End Set
    End Property

    Private _IDConceptoCartera As Nullable(Of Integer)
    Public Property IDConceptoCartera() As Nullable(Of Integer)
        Get
            Return _IDConceptoCartera
        End Get
        Set(ByVal value As Nullable(Of Integer))
            _IDConceptoCartera = value
            DescripcionComboConceptoCartera = ConcatenarConcepto(_IDConceptoCartera)

            MyBase.CambioItem("IDConceptoCartera")
        End Set
    End Property

    Private _DescripcionConceptoCartera As String
    Public Property DescripcionConceptoCartera() As String
        Get
            Return _DescripcionConceptoCartera
        End Get
        Set(ByVal value As String)
            _DescripcionConceptoCartera = value
            MyBase.CambioItem("DescripcionConceptoCartera")
        End Set
    End Property

    Private _HabilitarConceptoCarteraColectiva As Boolean = False
    Public Property HabilitarConceptoCarteraColectiva() As Boolean
        Get
            Return _HabilitarConceptoCarteraColectiva
        End Get
        Set(ByVal value As Boolean)
            _HabilitarConceptoCarteraColectiva = value
            MyBase.CambioItem("HabilitarConceptoCarteraColectiva")
        End Set
    End Property

    Private _DescripcionTipoGMFCarteras As String
    Public Property DescripcionTipoGMFCarteras() As String
        Get
            Return _DescripcionTipoGMFCarteras
        End Get
        Set(ByVal value As String)
            _DescripcionTipoGMFCarteras = value
            MyBase.CambioItem("DescripcionTipoGMFCarteras")
        End Set
    End Property

    Private _IDGMF_Cartera As String
    Public Property IDGMF_Cartera() As String
        Get
            Return _IDGMF_Cartera
        End Get
        Set(ByVal value As String)
            _IDGMF_Cartera = value
            MyBase.CambioItem("IDGMF_Cartera")
        End Set
    End Property

    Private _HabilitarCamposCarterasNroDocumento As Boolean
    Public Property HabilitarCamposCarterasNroDocumento() As Boolean
        Get
            Return _HabilitarCamposCarterasNroDocumento
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposCarterasNroDocumento = value
            MyBase.CambioItem("HabilitarCamposCarterasNroDocumento")
        End Set
    End Property

    Private _HabilitarCamposCarterasNombreBeneficiario As Boolean
    Public Property HabilitarCamposCarterasNombreBeneficiario() As Boolean
        Get
            Return _HabilitarCamposCarterasNombreBeneficiario
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposCarterasNombreBeneficiario = value
            MyBase.CambioItem("HabilitarCamposCarterasNombreBeneficiario")
        End Set
    End Property

    Private _HabilitarCamposCarterasDemas As Boolean
    Public Property HabilitarCamposCarterasDemas() As Boolean
        Get
            Return _HabilitarCamposCarterasDemas
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposCarterasDemas = value
            MyBase.CambioItem("HabilitarCamposCarterasDemas")
        End Set
    End Property

    Private _HabilitarGMFCartera As Boolean
    Public Property HabilitarGMFCartera() As Boolean
        Get
            Return _HabilitarGMFCartera
        End Get
        Set(ByVal value As Boolean)
            _HabilitarGMFCartera = value
            MyBase.CambioItem("HabilitarGMFCartera")
        End Set
    End Property

    Private _ValorGenerarCartera As Decimal
    Public Property ValorGenerarCartera() As Decimal
        Get
            Return _ValorGenerarCartera
        End Get
        Set(ByVal value As Decimal)
            _ValorGenerarCartera = value
            MyBase.CambioItem("ValorGenerarCartera")
        End Set
    End Property

    Private _ListaCarterasColectivas As List(Of CarterasColectivas)
    Public Property ListaCarterasColectivas() As List(Of CarterasColectivas)
        Get
            Return _ListaCarterasColectivas
        End Get
        Set(ByVal value As List(Of CarterasColectivas))
            _ListaCarterasColectivas = value
            MyBase.CambioItem("ListaCarterasColectivas")
        End Set
    End Property

    Private _ListaCarterasColectivasDetalleCompleta As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
    Public Property ListaCarterasColectivasDetalleCompleta() As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
        Get
            Return _ListaCarterasColectivasDetalleCompleta
        End Get
        Set(ByVal value As List(Of OyDPLUSTesoreria.CarterasColectivasClientes))
            _ListaCarterasColectivasDetalleCompleta = value
            MyBase.CambioItem("ListaCarterasColectivasDetalleCompleta")
        End Set
    End Property


    Private _ListaEncargosCarteraColectivaDetalle As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
    Public Property ListaEncargosCarteraColectivaDetalle() As List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
        Get
            Return _ListaEncargosCarteraColectivaDetalle
        End Get
        Set(ByVal value As List(Of OyDPLUSTesoreria.CarterasColectivasClientes))
            _ListaEncargosCarteraColectivaDetalle = value
            MyBase.CambioItem("ListaEncargosCarteraColectivaDetalle")
        End Set
    End Property

    Private _ListaTiposAccionFondos As List(Of OYDUtilidades.ItemCombo)
    Public Property ListaTiposAccionFondos() As List(Of OYDUtilidades.ItemCombo)
        Get
            Return _ListaTiposAccionFondos
        End Get
        Set(ByVal value As List(Of OYDUtilidades.ItemCombo))
            _ListaTiposAccionFondos = value
            MyBase.CambioItem("ListaTiposAccionFondos")
        End Set
    End Property

    Private _ListaTiposRetirosFondos As List(Of OYDUtilidades.ItemCombo)
    Public Property ListaTiposRetirosFondos() As List(Of OYDUtilidades.ItemCombo)
        Get
            Return _ListaTiposRetirosFondos
        End Get
        Set(ByVal value As List(Of OYDUtilidades.ItemCombo))
            _ListaTiposRetirosFondos = value
            MyBase.CambioItem("ListaTiposRetirosFondos")
        End Set
    End Property


    Private _TipoAccionFondos As String
    Public Property TipoAccionFondos() As String
        Get
            Return _TipoAccionFondos
        End Get
        Set(ByVal value As String)
            _TipoAccionFondos = value
            MyBase.CambioItem("TipoAccionFondos")
        End Set
    End Property

    Private _HabilitarNroEncargo As Boolean
    Public Property HabilitarNroEncargo() As Boolean
        Get
            Return _HabilitarNroEncargo
        End Get
        Set(ByVal value As Boolean)
            _HabilitarNroEncargo = value
            MyBase.CambioItem("HabilitarNroEncargo")

        End Set
    End Property

    Private _NumEncargoCartera As String
    Public Property NumEncargoCartera() As String
        Get
            Return _NumEncargoCartera
        End Get
        Set(ByVal value As String)
            _NumEncargoCartera = value
            If logCambiarPropiedadesPOPPUP Then
                If Editando Then
                    VerificarRestriccionesTipoCartera(True, "DETALLEOORDENGIRO")
                End If
            End If
            MyBase.CambioItem("NumEncargoCartera")
        End Set
    End Property

    Private _DescripcionEncargoFondos As String
    Public Property DescripcionEncargoFondos() As String
        Get
            Return _DescripcionEncargoFondos
        End Get
        Set(ByVal value As String)
            _DescripcionEncargoFondos = value
            MyBase.CambioItem("DescripcionEncargoFondos")
        End Set
    End Property

    Private _IDCarteraColectiva As String
    Public Property IDCarteraColectiva() As String
        Get
            Return _IDCarteraColectiva
        End Get
        Set(ByVal value As String)
            _IDCarteraColectiva = value
            MyBase.CambioItem("IDCarteraColectiva")
        End Set
    End Property

    Private _DescripcionCarteraColectiva As String
    Public Property DescripcionCarteraColectiva() As String
        Get
            Return _DescripcionCarteraColectiva
        End Get
        Set(ByVal value As String)
            _DescripcionCarteraColectiva = value
            MyBase.CambioItem("DescripcionCarteraColectiva")
        End Set
    End Property

    Private _ValorNetoCartera As Decimal
    Public Property ValorNetoCartera() As Decimal
        Get
            Return _ValorNetoCartera
        End Get
        Set(ByVal value As Decimal)
            _ValorNetoCartera = value
            MyBase.CambioItem("ValorNetoCartera")
        End Set
    End Property

    Private _ValorGMFCartera As Decimal
    Public Property ValorGMFCartera() As Decimal
        Get
            Return _ValorGMFCartera
        End Get
        Set(ByVal value As Decimal)
            _ValorGMFCartera = value
            MyBase.CambioItem("ValorGMFCartera")
        End Set
    End Property

    Private _strEsTerceroCartera As String
    Public Property strEsTerceroCartera() As String
        Get
            Return _strEsTerceroCartera
        End Get
        Set(ByVal value As String)
            _strEsTerceroCartera = value
            MyBase.CambioItem("strEsTerceroCartera")
        End Set
    End Property

    Private _strValorTipoDocumentoCarterasWpp As String
    Public Property strValorTipoDocumentoCarterasWpp() As String
        Get
            Return _strValorTipoDocumentoCarterasWpp
        End Get
        Set(ByVal value As String)
            _strValorTipoDocumentoCarterasWpp = value
            MyBase.CambioItem("strValorTipoDocumentoCarterasWpp")
        End Set
    End Property

    Private _strNroDocumentoCarterasWpp As String
    Public Property strNroDocumentoCarterasWpp() As String
        Get
            Return _strNroDocumentoCarterasWpp
        End Get
        Set(ByVal value As String)
            _strNroDocumentoCarterasWpp = value
            MyBase.CambioItem("strNroDocumentoCarterasWpp")
        End Set
    End Property

    Private _strNombreBeneficiarioCarterasWpp As String
    Public Property strNombreBeneficiarioCarterasWpp() As String
        Get
            Return _strNombreBeneficiarioCarterasWpp
        End Get
        Set(ByVal value As String)
            _strNombreBeneficiarioCarterasWpp = value
            MyBase.CambioItem("strNombreBeneficiarioCarterasWpp")
        End Set
    End Property

    Private _HabilitarCamposFondosOYD As Boolean = False
    Public Property HabilitarCamposFondosOYD() As Boolean
        Get
            Return _HabilitarCamposFondosOYD
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposFondosOYD = value
            MyBase.CambioItem("HabilitarCamposFondosOYD")
        End Set
    End Property

    Private _HabilitarFechaAplicacionCarteraFondosOYD As Boolean = False
    Public Property HabilitarFechaAplicacionCarteraFondosOYD() As Boolean
        Get
            Return _HabilitarFechaAplicacionCarteraFondosOYD
        End Get
        Set(ByVal value As Boolean)
            _HabilitarFechaAplicacionCarteraFondosOYD = value
            MyBase.CambioItem("HabilitarFechaAplicacionCarteraFondosOYD")
        End Set
    End Property

    Private _MostrarCamposAdicionalesFondosOYD As Visibility
    Public Property MostrarCamposAdicionalesFondosOYD() As Visibility
        Get
            Return _MostrarCamposAdicionalesFondosOYD
        End Get
        Set(ByVal value As Visibility)
            _MostrarCamposAdicionalesFondosOYD = value
            If _MostrarCamposAdicionalesFondosOYD = Visibility.Visible Then
                MostrarFechaOrden = True
            Else
                MostrarFechaOrden = False
            End If
            MyBase.CambioItem("MostrarCamposAdicionalesFondosOYD")
        End Set
    End Property

    Private _FechaAplicacionCartera As Nullable(Of DateTime)
    Public Property FechaAplicacionCartera() As Nullable(Of DateTime)
        Get
            Return _FechaAplicacionCartera
        End Get
        Set(ByVal value As Nullable(Of DateTime))
            _FechaAplicacionCartera = value
            If Editando And (logNuevoRegistro Or logDuplicarRegistro) Then
                Validarfechaaplicacion(True)
            End If
            MyBase.CambioItem("FechaAplicacionCartera")
        End Set
    End Property


#End Region

#Region "Propiedades Carteras Colectivas"

    Private _ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos As List(Of TesoreriaOyDPlusCarterasColectivas)
    Public Property ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos() As List(Of TesoreriaOyDPlusCarterasColectivas)
        Get
            Return _ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos
        End Get
        Set(ByVal value As List(Of TesoreriaOyDPlusCarterasColectivas))
            _ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = value
            If Not IsNothing(value) Then
                If _ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count > 0 Then
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = _ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.FirstOrDefault
                End If
            End If
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos")
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Paged")
        End Set
    End Property

    Public ReadOnly Property ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Paged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                Dim view = New PagedCollectionView(_ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private WithEvents _TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected As TesoreriaOyDPlusCarterasColectivas
    Public Property TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected() As TesoreriaOyDPlusCarterasColectivas
        Get
            Return _TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected
        End Get
        Set(ByVal value As TesoreriaOyDPlusCarterasColectivas)
            _TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = value

            MyBase.CambioItem("TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected")
        End Set
    End Property

    Public _ValorTotalNota_TrasladoFondos As Decimal
    Public Property ValorTotalNota_TrasladoFondos() As Decimal
        Get
            Return _ValorTotalNota_TrasladoFondos
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNota_TrasladoFondos = value
            MyBase.CambioItem("ValorTotalNota_TrasladoFondos")
        End Set
    End Property

    Private _ValorTotalGenerarTrasladoFondos As Decimal = 0
    Public Property ValorTotalGenerarTrasladoFondos() As Decimal
        Get
            Return _ValorTotalGenerarTrasladoFondos
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerarTrasladoFondos = value
            MyBase.CambioItem("ValorTotalGenerarTrasladoFondos")
        End Set
    End Property

    Private _ValorTotalGMFTrasladoFondos As Decimal = 0
    Public Property ValorTotalGMFTrasladoFondos() As Decimal
        Get
            Return _ValorTotalGMFTrasladoFondos
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGMFTrasladoFondos = value
            MyBase.CambioItem("ValorTotalGMFTrasladoFondos")
        End Set
    End Property

    Private _ValorTotalNETOTrasladoFondos As Decimal = 0
    Public Property ValorTotalNETOTrasladoFondos() As Decimal
        Get
            Return _ValorTotalNETOTrasladoFondos
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNETOTrasladoFondos = value
            MyBase.CambioItem("ValorTotalNETOTrasladoFondos")
        End Set
    End Property

    Private _IDGMF_TrasladoFondos As String
    Public Property IDGMF_TrasladoFondos() As String
        Get
            Return _IDGMF_TrasladoFondos
        End Get
        Set(ByVal value As String)
            _IDGMF_TrasladoFondos = value
            MyBase.CambioItem("IDGMF_TrasladoFondos")
        End Set
    End Property

    Private _DescripcionTipoGMFTrasladoFondos As String
    Public Property DescripcionTipoGMFTrasladoFondos() As String
        Get
            Return _DescripcionTipoGMFTrasladoFondos
        End Get
        Set(ByVal value As String)
            _DescripcionTipoGMFTrasladoFondos = value
            MyBase.CambioItem("DescripcionTipoGMFTrasladoFondos")
        End Set
    End Property

    Private _ValorGenerarTrasladoFondos As Decimal
    Public Property ValorGenerarTrasladoFondos() As Decimal
        Get
            Return _ValorGenerarTrasladoFondos
        End Get
        Set(ByVal value As Decimal)
            _ValorGenerarTrasladoFondos = value
            MyBase.CambioItem("ValorGenerarTrasladoFondos")
        End Set
    End Property

    Private _ValorNetoTrasladoFondos As Decimal
    Public Property ValorNetoTrasladoFondos() As Decimal
        Get
            Return _ValorNetoTrasladoFondos
        End Get
        Set(ByVal value As Decimal)
            _ValorNetoTrasladoFondos = value
            MyBase.CambioItem("ValorNetoTrasladoFondos")
        End Set
    End Property

    Private _ValorGMFTrasladoFondos As Decimal
    Public Property ValorGMFTrasladoFondos() As Decimal
        Get
            Return _ValorGMFTrasladoFondos
        End Get
        Set(ByVal value As Decimal)
            _ValorGMFTrasladoFondos = value
            MyBase.CambioItem("ValorGMFTrasladoFondos")
        End Set
    End Property

#End Region

#Region "Propiedades OYD"

    Private _ListaTesoreriaOrdenesPlusCE_Detalle_OYD As List(Of TesoreriaOyDPlusOYD)
    Public Property ListaTesoreriaOrdenesPlusCE_Detalle_OYD() As List(Of TesoreriaOyDPlusOYD)
        Get
            Return _ListaTesoreriaOrdenesPlusCE_Detalle_OYD
        End Get
        Set(ByVal value As List(Of TesoreriaOyDPlusOYD))
            _ListaTesoreriaOrdenesPlusCE_Detalle_OYD = value
            If Not IsNothing(value) Then
                If _ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > 0 Then
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = _ListaTesoreriaOrdenesPlusCE_Detalle_OYD.FirstOrDefault
                End If
            End If
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_OYD")
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_OYD_Paged")
        End Set
    End Property

    Public ReadOnly Property ListaTesoreriaOrdenesPlusCE_Detalle_OYD_Paged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                Dim view = New PagedCollectionView(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private WithEvents _TesoreriaOrdenesPlusCE_Detalle_OYD_Selected As TesoreriaOyDPlusOYD
    Public Property TesoreriaOrdenesPlusCE_Detalle_OYD_Selected() As TesoreriaOyDPlusOYD
        Get
            Return _TesoreriaOrdenesPlusCE_Detalle_OYD_Selected
        End Get
        Set(ByVal value As TesoreriaOyDPlusOYD)
            _TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = value

            MyBase.CambioItem("TesoreriaOrdenesPlusCE_Detalle_OYD_Selected")
        End Set
    End Property

    Public _ValorTotalNota_OYD As Decimal
    Public Property ValorTotalNota_OYD() As Decimal
        Get
            Return _ValorTotalNota_OYD
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNota_OYD = value
            MyBase.CambioItem("ValorTotalNota_OYD")
        End Set
    End Property

    Private _ValorTotalGenerarOYD As Decimal = 0
    Public Property ValorTotalGenerarOYD() As Decimal
        Get
            Return _ValorTotalGenerarOYD
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerarOYD = value
            MyBase.CambioItem("ValorTotalGenerarOYD")
        End Set
    End Property

    Private _ValorTotalGMFOYD As Decimal = 0
    Public Property ValorTotalGMFOYD() As Decimal
        Get
            Return _ValorTotalGMFOYD
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGMFOYD = value
            MyBase.CambioItem("ValorTotalGMFOYD")
        End Set
    End Property

    Private _ValorTotalNETOOYD As Decimal = 0
    Public Property ValorTotalNETOOYD() As Decimal
        Get
            Return _ValorTotalNETOOYD
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNETOOYD = value
            MyBase.CambioItem("ValorTotalNETOOYD")
        End Set
    End Property

    Private _DescripcionTipoClienteOYD As String
    Public Property DescripcionTipoClienteOYD() As String
        Get
            Return _DescripcionTipoClienteOYD
        End Get
        Set(ByVal value As String)
            _DescripcionTipoClienteOYD = value
            MyBase.CambioItem("DescripcionTipoClienteOYD")
        End Set
    End Property

    Private _IDTipoClienteOYD As String
    Public Property IDTipoClienteOYD() As String
        Get
            Return _IDTipoClienteOYD
        End Get
        Set(ByVal value As String)
            _IDTipoClienteOYD = value
            MyBase.CambioItem("IDTipoClienteOYD")
        End Set
    End Property

    Private _strCodigoOyDWPP As String
    Public Property strCodigoOyDWPP() As String
        Get
            Return _strCodigoOyDWPP
        End Get
        Set(ByVal value As String)
            _strCodigoOyDWPP = value
            MyBase.CambioItem("strCodigoOyDWPP")
        End Set
    End Property

    Private _DescripcionTipoIdentificacionOYD As String
    Public Property DescripcionTipoIdentificacionOYD() As String
        Get
            Return _DescripcionTipoIdentificacionOYD
        End Get
        Set(ByVal value As String)
            _DescripcionTipoIdentificacionOYD = value
            MyBase.CambioItem("DescripcionTipoIdentificacionOYD")
        End Set
    End Property

    Private _strTipoIdentificacionOYD As String
    Public Property strTipoIdentificacionOYD() As String
        Get
            Return _strTipoIdentificacionOYD
        End Get
        Set(ByVal value As String)
            _strTipoIdentificacionOYD = value
            MyBase.CambioItem("strTipoIdentificacionOYD")
        End Set
    End Property

    Private _strNroDocumentoOYD As String
    Public Property strNroDocumentoOYD() As String
        Get
            Return _strNroDocumentoOYD
        End Get
        Set(ByVal value As String)
            _strNroDocumentoOYD = value
            MyBase.CambioItem("strNroDocumentoOYD")
        End Set
    End Property

    Private _strNombreOYD As String
    Public Property strNombreOYD() As String
        Get
            Return _strNombreOYD
        End Get
        Set(ByVal value As String)
            _strNombreOYD = value
            MyBase.CambioItem("strNombreOYD")
        End Set
    End Property

    Private _DescripcionComboConceptoOYD As String
    Public Property DescripcionComboConceptoOYD() As String
        Get
            Return _DescripcionComboConceptoOYD
        End Get
        Set(ByVal value As String)
            _DescripcionComboConceptoOYD = value
            MyBase.CambioItem("DescripcionComboConceptoOYD")
        End Set
    End Property

    Private _IDConceptoOYD As Nullable(Of Integer)
    Public Property IDConceptoOYD() As Nullable(Of Integer)
        Get
            Return _IDConceptoOYD
        End Get
        Set(ByVal value As Nullable(Of Integer))
            _IDConceptoOYD = value
            MyBase.CambioItem("IDConceptoOYD")
        End Set
    End Property

    Private _DescripcionConceptoOYD As String
    Public Property DescripcionConceptoOYD() As String
        Get
            Return _DescripcionConceptoOYD
        End Get
        Set(ByVal value As String)
            _DescripcionConceptoOYD = value
            MyBase.CambioItem("DescripcionConceptoOYD")
        End Set
    End Property

    Private _DescripcionTipoGMFOYD As String
    Public Property DescripcionTipoGMFOYD() As String
        Get
            Return _DescripcionTipoGMFOYD
        End Get
        Set(ByVal value As String)
            _DescripcionTipoGMFOYD = value
            MyBase.CambioItem("DescripcionTipoGMFOYD")
        End Set
    End Property

    Private _IDGMF_OYD As String
    Public Property IDGMF_OYD() As String
        Get
            Return _IDGMF_OYD
        End Get
        Set(ByVal value As String)
            _IDGMF_OYD = value
            MyBase.CambioItem("IDGMF_OYD")
        End Set
    End Property

    Private _HabilitarCamposOYD As Boolean
    Public Property HabilitarCamposOYD() As Boolean
        Get
            Return _HabilitarCamposOYD
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposOYD = value
            MyBase.CambioItem("HabilitarCamposOYD")
        End Set
    End Property

    Private _HabilitarGMFOYD As Boolean
    Public Property HabilitarGMFOYD() As Boolean
        Get
            Return _HabilitarGMFOYD
        End Get
        Set(ByVal value As Boolean)
            _HabilitarGMFOYD = value
            MyBase.CambioItem("HabilitarGMFOYD")
        End Set
    End Property

    Private _ValorGenerarOYD As Decimal
    Public Property ValorGenerarOYD() As Decimal
        Get
            Return _ValorGenerarOYD
        End Get
        Set(ByVal value As Decimal)
            _ValorGenerarOYD = value
            MyBase.CambioItem("ValorGenerarOYD")
        End Set
    End Property

    Private _ValorNetoOYD As Decimal
    Public Property ValorNetoOYD() As Decimal
        Get
            Return _ValorNetoOYD
        End Get
        Set(ByVal value As Decimal)
            _ValorNetoOYD = value
            MyBase.CambioItem("ValorNetoOYD")
        End Set
    End Property

    Private _ValorGMFOYD As Decimal
    Public Property ValorGMFOYD() As Decimal
        Get
            Return _ValorGMFOYD
        End Get
        Set(ByVal value As Decimal)
            _ValorGMFOYD = value
            MyBase.CambioItem("ValorGMFOYD")
        End Set
    End Property

    Private _strEsTerceroOYD As String
    Public Property strEsTerceroOYD() As String
        Get
            Return _strEsTerceroOYD
        End Get
        Set(ByVal value As String)
            _strEsTerceroOYD = value
            MyBase.CambioItem("strEsTerceroOYD")
        End Set
    End Property

    Private _MostrarFechaOrden As Boolean = False
    Public Property MostrarFechaOrden() As Boolean
        Get
            Return _MostrarFechaOrden
        End Get
        Set(ByVal value As Boolean)
            _MostrarFechaOrden = value
            MyBase.CambioItem("MostrarFechaOrden")
        End Set
    End Property

#End Region

#Region "Propiedades Internos"

    Private _ListaTesoreriaOrdenesPlusCE_Detalle_Internos As List(Of TesoreriaOyDPlusInternos)
    Public Property ListaTesoreriaOrdenesPlusCE_Detalle_Internos() As List(Of TesoreriaOyDPlusInternos)
        Get
            Return _ListaTesoreriaOrdenesPlusCE_Detalle_Internos
        End Get
        Set(ByVal value As List(Of TesoreriaOyDPlusInternos))
            _ListaTesoreriaOrdenesPlusCE_Detalle_Internos = value
            If Not IsNothing(value) Then
                If _ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > 0 Then
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = _ListaTesoreriaOrdenesPlusCE_Detalle_Internos.FirstOrDefault
                End If
            End If
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Internos")
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Internos_Paged")
        End Set
    End Property

    Public ReadOnly Property ListaTesoreriaOrdenesPlusCE_Detalle_Internos_Paged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                Dim view = New PagedCollectionView(_ListaTesoreriaOrdenesPlusCE_Detalle_Internos)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private WithEvents _TesoreriaOrdenesPlusCE_Detalle_Internos_Selected As TesoreriaOyDPlusInternos
    Public Property TesoreriaOrdenesPlusCE_Detalle_Internos_Selected() As TesoreriaOyDPlusInternos
        Get
            Return _TesoreriaOrdenesPlusCE_Detalle_Internos_Selected
        End Get
        Set(ByVal value As TesoreriaOyDPlusInternos)
            _TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = value

            MyBase.CambioItem("TesoreriaOrdenesPlusCE_Detalle_Internos_Selected")
        End Set
    End Property

    Public _ValorTotalNota_Internos As Decimal
    Public Property ValorTotalNota_Internos() As Decimal
        Get
            Return _ValorTotalNota_Internos
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNota_Internos = value
            MyBase.CambioItem("ValorTotalNota_Internos")
        End Set
    End Property

    Private _ValorTotalGenerarInternos As Decimal = 0
    Public Property ValorTotalGenerarInternos() As Decimal
        Get
            Return _ValorTotalGenerarInternos
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerarInternos = value
            MyBase.CambioItem("ValorTotalGenerarInternos")
        End Set
    End Property

    Private _ValorTotalGMFInternos As Decimal = 0
    Public Property ValorTotalGMFInternos() As Decimal
        Get
            Return _ValorTotalGMFInternos
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGMFInternos = value
            MyBase.CambioItem("ValorTotalGMFInternos")
        End Set
    End Property

    Private _ValorTotalNETOInternos As Decimal = 0
    Public Property ValorTotalNETOInternos() As Decimal
        Get
            Return _ValorTotalNETOInternos
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNETOInternos = value
            MyBase.CambioItem("ValorTotalNETOInternos")
        End Set
    End Property

    Private _ValorGMFInternos As Decimal
    Public Property ValorGMFInternos() As Decimal
        Get
            Return _ValorGMFInternos
        End Get
        Set(ByVal value As Decimal)
            _ValorGMFInternos = value
            MyBase.CambioItem("ValorGMFInternos")
        End Set
    End Property

    Private _strCodigoOyDInternos As String
    Public Property strCodigoOyDInternos() As String
        Get
            Return _strCodigoOyDInternos
        End Get
        Set(ByVal value As String)
            _strCodigoOyDInternos = value
            MyBase.CambioItem("strCodigoOyDInternos")
        End Set
    End Property

    Private _strCodigoOyDInternosConcatenado As String
    Public Property strCodigoOyDInternosConcatenado() As String
        Get
            Return _strCodigoOyDInternosConcatenado
        End Get
        Set(ByVal value As String)
            _strCodigoOyDInternosConcatenado = value
            MyBase.CambioItem("strCodigoOyDInternosConcatenado")
        End Set
    End Property

    Private _strNombreBeneficiarioInternosWpp As String
    Public Property strNombreBeneficiarioInternosWpp() As String
        Get
            Return _strNombreBeneficiarioInternosWpp
        End Get
        Set(ByVal value As String)
            _strNombreBeneficiarioInternosWpp = value
            MyBase.CambioItem("strNombreBeneficiarioInternosWpp")
        End Set
    End Property

    Private _DescripcionTipoClienteInternos As String
    Public Property DescripcionTipoClienteInternos() As String
        Get
            Return _DescripcionTipoClienteInternos
        End Get
        Set(ByVal value As String)
            _DescripcionTipoClienteInternos = value
            MyBase.CambioItem("DescripcionTipoClienteInternos")
        End Set
    End Property

    Private _IDTipoClienteInternos As String
    Public Property IDTipoClienteInternos() As String
        Get
            Return _IDTipoClienteInternos
        End Get
        Set(ByVal value As String)
            _IDTipoClienteInternos = value
            MyBase.CambioItem("IDTipoClienteInternos")
        End Set
    End Property

    Private _DescripcionTipoIdentificacionInternos As String
    Public Property DescripcionTipoIdentificacionInternos() As String
        Get
            Return _DescripcionTipoIdentificacionInternos
        End Get
        Set(ByVal value As String)
            _DescripcionTipoIdentificacionInternos = value
            MyBase.CambioItem("DescripcionTipoIdentificacionInternos")
        End Set
    End Property

    Private _strTipoIdentificacionInternosWpp As String
    Public Property strTipoIdentificacionInternosWpp() As String
        Get
            Return _strTipoIdentificacionInternosWpp
        End Get
        Set(ByVal value As String)
            _strTipoIdentificacionInternosWpp = value
            MyBase.CambioItem("strTipoIdentificacionInternosWpp")
        End Set
    End Property

    Private _DescripcionComboInternos As String
    Public Property DescripcionComboInternos() As String
        Get
            Return _DescripcionComboInternos
        End Get
        Set(ByVal value As String)
            _DescripcionComboInternos = value
            MyBase.CambioItem("DescripcionComboInternos")
        End Set
    End Property

    Private _IDConceptoInternos As Nullable(Of Integer)
    Public Property IDConceptoInternos() As Nullable(Of Integer)
        Get
            Return _IDConceptoInternos
        End Get
        Set(ByVal value As Nullable(Of Integer))
            _IDConceptoInternos = value
            MyBase.CambioItem("IDConceptoInternos")
        End Set
    End Property

    Private _DescripcionTipoGMFInternos As String
    Public Property DescripcionTipoGMFInternos() As String
        Get
            Return _DescripcionTipoGMFInternos
        End Get
        Set(ByVal value As String)
            _DescripcionTipoGMFInternos = value
            MyBase.CambioItem("DescripcionTipoGMFInternos")
        End Set
    End Property

    Private _IDGMF_Internos As String
    Public Property IDGMF_Internos() As String
        Get
            Return _IDGMF_Internos
        End Get
        Set(ByVal value As String)
            _IDGMF_Internos = value
            MyBase.CambioItem("IDGMF_Internos")
        End Set
    End Property

    Private _HabilitarCamposInternos As Boolean
    Public Property HabilitarCamposInternos() As Boolean
        Get
            Return _HabilitarCamposInternos
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposInternos = value
            MyBase.CambioItem("HabilitarCamposInternos")
        End Set
    End Property

    Private _HabilitarGMFInternos As Boolean
    Public Property HabilitarGMFInternos() As Boolean
        Get
            Return _HabilitarGMFInternos
        End Get
        Set(ByVal value As Boolean)
            _HabilitarGMFInternos = value
            MyBase.CambioItem("HabilitarGMFInternos")
        End Set
    End Property

    Private _strEsTerceroInternos As String
    Public Property strEsTerceroInternos() As String
        Get
            Return _strEsTerceroInternos
        End Get
        Set(ByVal value As String)
            _strEsTerceroInternos = value
            MyBase.CambioItem("strEsTerceroInternos")
        End Set
    End Property

    Private _strValorTipoDocumentoInternosWpp As String
    Public Property strValorTipoDocumentoInternosWpp() As String
        Get
            Return _strValorTipoDocumentoInternosWpp
        End Get
        Set(ByVal value As String)
            _strValorTipoDocumentoInternosWpp = value
            MyBase.CambioItem("strValorTipoDocumentoInternosWpp")
        End Set
    End Property

    Private _HabilitarCamposInternosNroDocumento As Boolean
    Public Property HabilitarCamposInternosNroDocumento() As Boolean
        Get
            Return _HabilitarCamposInternosNroDocumento
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposInternosNroDocumento = value
            MyBase.CambioItem("HabilitarCamposInternosNroDocumento")
        End Set
    End Property

    Private _strNroDocumentoInternosWpp As String
    Public Property strNroDocumentoInternosWpp() As String
        Get
            Return _strNroDocumentoInternosWpp
        End Get
        Set(ByVal value As String)
            _strNroDocumentoInternosWpp = value
            MyBase.CambioItem("strNroDocumentoInternosWpp")
        End Set
    End Property

    Private _HabilitarCamposInternosDemas As Boolean
    Public Property HabilitarCamposInternosDemas() As Boolean
        Get
            Return _HabilitarCamposInternosDemas
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposInternosDemas = value
            MyBase.CambioItem("HabilitarCamposInternosDemas")
        End Set
    End Property

    Private _DescripcionConceptoInternos As String
    Public Property DescripcionConceptoInternos() As String
        Get
            Return _DescripcionConceptoInternos
        End Get
        Set(ByVal value As String)
            _DescripcionConceptoInternos = value
            MyBase.CambioItem("DescripcionConceptoInternos")
        End Set
    End Property

    Public _ValorGenerarInternos As Decimal
    Public Property ValorGenerarInternos() As Decimal
        Get
            Return _ValorGenerarInternos
        End Get
        Set(ByVal value As Decimal)
            _ValorGenerarInternos = value
            MyBase.CambioItem("ValorGenerarInternos")
        End Set
    End Property

    Public _ValorNetoInternos As Decimal
    Public Property ValorNetoInternos() As Decimal
        Get
            Return _ValorNetoInternos
        End Get
        Set(ByVal value As Decimal)
            _ValorNetoInternos = value
            MyBase.CambioItem("ValorNetoInternos")
        End Set
    End Property

    Private _DescripcionGMFInternos As String
    Public Property DescripcionGMFInternos() As String
        Get
            Return _DescripcionGMFInternos
        End Get
        Set(ByVal value As String)
            _DescripcionGMFInternos = value
            MyBase.CambioItem("DescripcionGMFInternos")
        End Set
    End Property

#End Region

#Region "Propiedades Bloqueos"

    Private _ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos As List(Of TesoreriaOyDPlusBloqueos)
    Public Property ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos() As List(Of TesoreriaOyDPlusBloqueos)
        Get
            Return _ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos
        End Get
        Set(ByVal value As List(Of TesoreriaOyDPlusBloqueos))
            _ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos = value
            If Not IsNothing(value) Then
                If _ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count > 0 Then
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = _ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.FirstOrDefault
                End If
            End If
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos")
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos_Paged")
        End Set
    End Property

    Public ReadOnly Property ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos_Paged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                Dim view = New PagedCollectionView(_ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private WithEvents _TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected As TesoreriaOyDPlusBloqueos
    Public Property TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected() As TesoreriaOyDPlusBloqueos
        Get
            Return _TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected
        End Get
        Set(ByVal value As TesoreriaOyDPlusBloqueos)
            _TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = value

            MyBase.CambioItem("TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected")
        End Set
    End Property

    Private _ValorTotalGenerarBloqueo As Decimal = 0
    Public Property ValorTotalGenerarBloqueo() As Decimal
        Get
            Return _ValorTotalGenerarBloqueo
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerarBloqueo = value
            MyBase.CambioItem("ValorTotalGenerarBloqueo")
        End Set
    End Property

    Private _ValorTotalGMFBloqueo As Decimal = 0
    Public Property ValorTotalGMFBloqueo() As Decimal
        Get
            Return _ValorTotalGMFBloqueo
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGMFBloqueo = value
            MyBase.CambioItem("ValorTotalGMFBloqueo")
        End Set
    End Property

    Private _ValorTotalNETOBloqueo As Decimal = 0
    Public Property ValorTotalNETOBloqueo() As Decimal
        Get
            Return _ValorTotalNETOBloqueo
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNETOBloqueo = value
            MyBase.CambioItem("ValorTotalNETOBloqueo")
        End Set
    End Property

    Private _DetalleBloqueo As String
    Public Property DetalleBloqueo() As String
        Get
            Return _DetalleBloqueo
        End Get
        Set(ByVal value As String)
            _DetalleBloqueo = value
            MyBase.CambioItem("DetalleBloqueo")
        End Set
    End Property

    Private _strNaturaleza As String
    Public Property strNaturaleza() As String
        Get
            Return _strNaturaleza
        End Get
        Set(ByVal value As String)
            _strNaturaleza = value
            MyBase.CambioItem("strNaturaleza")
        End Set
    End Property

    Private _strDescripcionNaturaleza As String
    Public Property strDescripcionNaturaleza() As String
        Get
            Return _strDescripcionNaturaleza
        End Get
        Set(ByVal value As String)
            _strDescripcionNaturaleza = value
            MyBase.CambioItem("strDescripcionNaturaleza")
        End Set
    End Property

    Private _ValorBloqueado As Decimal
    Public Property ValorBloqueado() As Decimal
        Get
            Return _ValorBloqueado
        End Get
        Set(ByVal value As Decimal)
            _ValorBloqueado = value
            MyBase.CambioItem("ValorBloqueado")
        End Set
    End Property

    Private _strTipoBloqueo As String
    Public Property strTipoBloqueo() As String
        Get
            Return _strTipoBloqueo
        End Get
        Set(ByVal value As String)
            _strTipoBloqueo = value
            MyBase.CambioItem("strTipoBloqueo")
        End Set
    End Property

    Private _strDescripcionTipoBloqueo As String
    Public Property strDescripcionTipoBloqueo() As String
        Get
            Return _strDescripcionTipoBloqueo
        End Get
        Set(ByVal value As String)
            _strDescripcionTipoBloqueo = value
            MyBase.CambioItem("strDescripcionTipoBloqueo")
        End Set
    End Property

#End Region

#Region "Propiedades Operaciones especiales"

    Private _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales As List(Of TesoreriaOyDPlusOperacionesEspeciales)
    Public Property ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales() As List(Of TesoreriaOyDPlusOperacionesEspeciales)
        Get
            Return _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
        End Get
        Set(ByVal value As List(Of TesoreriaOyDPlusOperacionesEspeciales))
            _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = value
            If Not IsNothing(value) Then
                If _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count > 0 Then
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.FirstOrDefault
                End If
            End If
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales")
            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Paged")
        End Set
    End Property

    Public ReadOnly Property ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Paged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                Dim view = New PagedCollectionView(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private WithEvents _TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected As TesoreriaOyDPlusOperacionesEspeciales
    Public Property TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected() As TesoreriaOyDPlusOperacionesEspeciales
        Get
            Return _TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected
        End Get
        Set(ByVal value As TesoreriaOyDPlusOperacionesEspeciales)
            _TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = value

            MyBase.CambioItem("TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected")
        End Set
    End Property

    Private _ValorTotalGenerarOperacionesEspeciales As Decimal
    Public Property ValorTotalGenerarOperacionesEspeciales() As Decimal
        Get
            Return _ValorTotalGenerarOperacionesEspeciales
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerarOperacionesEspeciales = value
            MyBase.CambioItem("ValorTotalGenerarOperacionesEspeciales")
        End Set
    End Property

    Private _strTipoOperacionesEspeciales As String
    Public Property strTipoOperacionesEspeciales() As String
        Get
            Return _strTipoOperacionesEspeciales
        End Get
        Set(ByVal value As String)
            _strTipoOperacionesEspeciales = value
            MyBase.CambioItem("strTipoOperacionesEspeciales")
        End Set
    End Property

    Private _strDescripcionTipoOperacionesEspeciales As String
    Public Property strDescripcionTipoOperacionesEspeciales() As String
        Get
            Return _strDescripcionTipoOperacionesEspeciales
        End Get
        Set(ByVal value As String)
            _strDescripcionTipoOperacionesEspeciales = value
            MyBase.CambioItem("strDescripcionTipoOperacionesEspeciales")
        End Set
    End Property

    Private _strCodigoOYDComprador As String
    Public Property strCodigoOYDComprador() As String
        Get
            Return _strCodigoOYDComprador
        End Get
        Set(ByVal value As String)
            _strCodigoOYDComprador = value
            MyBase.CambioItem("strCodigoOYDComprador")
        End Set
    End Property

    Private _strNroDocumentoComprador As String
    Public Property strNroDocumentoComprador() As String
        Get
            Return _strNroDocumentoComprador
        End Get
        Set(ByVal value As String)
            _strNroDocumentoComprador = value
            MyBase.CambioItem("strNroDocumentoComprador")
        End Set
    End Property

    Private _strTipoDocumentoComprador As String
    Public Property strTipoDocumentoComprador() As String
        Get
            Return _strTipoDocumentoComprador
        End Get
        Set(ByVal value As String)
            _strTipoDocumentoComprador = value
            MyBase.CambioItem("strTipoDocumentoComprador")
        End Set
    End Property

    Private _strDescripcionTipoDocumentoComprador As String
    Public Property strDescripcionTipoDocumentoComprador() As String
        Get
            Return _strDescripcionTipoDocumentoComprador
        End Get
        Set(ByVal value As String)
            _strDescripcionTipoDocumentoComprador = value
            MyBase.CambioItem("strDescripcionTipoDocumentoComprador")
        End Set
    End Property

    Private _strNombreComprador As String
    Public Property strNombreComprador() As String
        Get
            Return _strNombreComprador
        End Get
        Set(ByVal value As String)
            _strNombreComprador = value
            MyBase.CambioItem("strNombreComprador")
        End Set
    End Property

    Private _strCodigoOYDVendedor As String
    Public Property strCodigoOYDVendedor() As String
        Get
            Return _strCodigoOYDVendedor
        End Get
        Set(ByVal value As String)
            _strCodigoOYDVendedor = value
            MyBase.CambioItem("strCodigoOYDVendedor")
        End Set
    End Property

    Private _strNroDocumentoVendedor As String
    Public Property strNroDocumentoVendedor() As String
        Get
            Return _strNroDocumentoVendedor
        End Get
        Set(ByVal value As String)
            _strNroDocumentoVendedor = value
            MyBase.CambioItem("strNroDocumentoVendedor")
        End Set
    End Property

    Private _strTipoDocumentoVendedor As String
    Public Property strTipoDocumentoVendedor() As String
        Get
            Return _strTipoDocumentoVendedor
        End Get
        Set(ByVal value As String)
            _strTipoDocumentoVendedor = value
            MyBase.CambioItem("strTipoDocumentoVendedor")
        End Set
    End Property

    Private _strDescripcionTipoDocumentoVendedor As String
    Public Property strDescripcionTipoDocumentoVendedor() As String
        Get
            Return _strDescripcionTipoDocumentoVendedor
        End Get
        Set(ByVal value As String)
            _strDescripcionTipoDocumentoVendedor = value
            MyBase.CambioItem("strDescripcionTipoDocumentoVendedor")
        End Set
    End Property

    Private _strNombreVendedor As String
    Public Property strNombreVendedor() As String
        Get
            Return _strNombreVendedor
        End Get
        Set(ByVal value As String)
            _strNombreVendedor = value
            MyBase.CambioItem("strNombreVendedor")
        End Set
    End Property

    Private _strOperacionEspecial As String
    Public Property strOperacionEspecial() As String
        Get
            Return _strOperacionEspecial
        End Get
        Set(ByVal value As String)
            _strOperacionEspecial = value
            MyBase.CambioItem("strOperacionEspecial")
        End Set
    End Property

    Private _strDescripcionOperacionEspecial As String
    Public Property strDescripcionOperacionEspecial() As String
        Get
            Return _strDescripcionOperacionEspecial
        End Get
        Set(ByVal value As String)
            _strDescripcionOperacionEspecial = value
            MyBase.CambioItem("strDescripcionOperacionEspecial")
        End Set
    End Property

    Private _HabilitarOperacionEspecial As Boolean = False
    Public Property HabilitarOperacionEspecial() As Boolean
        Get
            Return _HabilitarOperacionEspecial
        End Get
        Set(ByVal value As Boolean)
            _HabilitarOperacionEspecial = value
            MyBase.CambioItem("HabilitarOperacionEspecial")
        End Set
    End Property

    Private _strProvieneDinero As String
    Public Property strProvieneDinero() As String
        Get
            Return _strProvieneDinero
        End Get
        Set(ByVal value As String)
            _strProvieneDinero = value
            MyBase.CambioItem("strProvieneDinero")
        End Set
    End Property

    Private _strObservacionesOperacionEspecial As String
    Public Property strObservacionesOperacionEspecial() As String
        Get
            Return _strObservacionesOperacionEspecial
        End Get
        Set(ByVal value As String)
            _strObservacionesOperacionEspecial = value
            MyBase.CambioItem("strObservacionesOperacionEspecial")
        End Set
    End Property

    Private _ValorOperacionesEspeciales As Decimal
    Public Property ValorOperacionesEspeciales() As Decimal
        Get
            Return _ValorOperacionesEspeciales
        End Get
        Set(ByVal value As Decimal)
            _ValorOperacionesEspeciales = value
            MyBase.CambioItem("ValorOperacionesEspeciales")
        End Set
    End Property

    Private _MostrarInformacionOperacionesEspeciales As Visibility = Visibility.Collapsed
    Public Property MostrarInformacionOperacionesEspeciales() As Visibility
        Get
            Return _MostrarInformacionOperacionesEspeciales
        End Get
        Set(ByVal value As Visibility)
            _MostrarInformacionOperacionesEspeciales = value
            MyBase.CambioItem("MostrarInformacionOperacionesEspeciales")
        End Set
    End Property




#End Region

#Region "Instrucciones"

    Private _HabilitarInstrucciones As Boolean = False
    Public Property HabilitarInstrucciones() As Boolean
        Get
            Return _HabilitarInstrucciones
        End Get
        Set(ByVal value As Boolean)
            _HabilitarInstrucciones = value

            MyBase.CambioItem("HabilitarInstrucciones")
        End Set
    End Property

    Private _CuentaRegistradaInstrucciones As String
    Public Property CuentaRegistradaInstrucciones() As String
        Get
            Return _CuentaRegistradaInstrucciones
        End Get
        Set(ByVal value As String)
            _CuentaRegistradaInstrucciones = value
            If logNuevoRegistro Or logEditarRegistro Then
                strValorTipoCuentaInstrucciones = Nothing
                strNombreInstrucciones = String.Empty
                strNroDocumentoInstrucciones = String.Empty
                strTipoIdentificacionInstrucciones = String.Empty
                strCuentaInstrucciones = String.Empty
                strCodigoBancoInstrucciones = String.Empty
            End If
            If Not String.IsNullOrEmpty(_CuentaRegistradaInstrucciones) Then
                CuentasInstrucciones = 0
                If _CuentaRegistradaInstrucciones = GSTR_CUENTA_REGISTRADA Then
                    VerCuentasRegistradas = Visibility.Visible
                    HabilitarDocumento = False
                    HabilitarCamposConsignarInstrucciones = False
                    logEsCtaInscrita_Instrucciones = True
                ElseIf _CuentaRegistradaInstrucciones = GSTR_CUENTA_NO_REGISTRADA Then
                    logEsCtaInscrita_Instrucciones = False
                    HabilitarDocumento = True
                    HabilitarCamposConsignarInstrucciones = True

                    VerCuentasRegistradas = Visibility.Collapsed
                End If
            End If

            MyBase.CambioItem("CuentaRegistradaInstrucciones")
        End Set
    End Property

    Private _VerComboCuentasRegistradas As Visibility = Visibility.Collapsed
    Public Property VerComboCuentasRegistradas() As Visibility
        Get
            Return _VerComboCuentasRegistradas
        End Get
        Set(ByVal value As Visibility)
            _VerComboCuentasRegistradas = value
            MyBase.CambioItem("VerComboCuentasRegistradas")
        End Set
    End Property

    Private _HabilitarOtrosInstrucciones As Boolean = False
    Public Property HabilitarOtrosInstrucciones() As Boolean
        Get
            Return _HabilitarOtrosInstrucciones
        End Get
        Set(ByVal value As Boolean)
            _HabilitarOtrosInstrucciones = value
            MyBase.CambioItem("HabilitarOtrosInstrucciones")
        End Set
    End Property

    Private _HabilitarCamposConsignarInstrucciones As Boolean
    Public Property HabilitarCamposConsignarInstrucciones() As Boolean
        Get
            Return _HabilitarCamposConsignarInstrucciones
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCamposConsignarInstrucciones = value
            MyBase.CambioItem("HabilitarCamposConsignarInstrucciones")
        End Set
    End Property


    Private _HabilitarCamposDireccion As Boolean
    Public Property HabilitarCamposDireccion() As String
        Get
            Return _HabilitarCamposDireccion
        End Get
        Set(ByVal value As String)
            _HabilitarCamposDireccion = value
            MyBase.CambioItem("HabilitarCamposDireccion")
        End Set
    End Property


    Private _strCiudadInstrucciones As String
    Public Property strCiudadInstrucciones() As String
        Get
            Return _strCiudadInstrucciones
        End Get
        Set(ByVal value As String)
            _strCiudadInstrucciones = value

            MyBase.CambioItem("strCiudadInstrucciones")
        End Set
    End Property


    Private _strDireccionInstrucciones As String
    Public Property strDireccionInstrucciones() As String
        Get
            Return _strDireccionInstrucciones
        End Get
        Set(ByVal value As String)
            _strDireccionInstrucciones = value

            MyBase.CambioItem("strDireccionInstrucciones")
        End Set
    End Property

    Private _CuentasInstrucciones As Integer
    Public Property CuentasInstrucciones() As Integer
        Get
            Return _CuentasInstrucciones
        End Get
        Set(ByVal value As Integer)
            _CuentasInstrucciones = value
            If _CuentasInstrucciones > 0 Then
                If Not IsNothing(ListaCuentasClientes) Then
                    For Each li In ListaCuentasClientes.Where(Function(i) i.ID = _CuentasInstrucciones)
                        strNroDocumentoInstrucciones = li.strNroDocumento
                        strNombreInstrucciones = li.strNombreTitular
                        strValorTipoCuentaInstrucciones = li.strValorTipoCuenta
                        strTipoIdentificacionInstrucciones = li.strValorTipoDocumento
                        strCuentaInstrucciones = li.strCuenta
                        strCodigoBancoInstrucciones = li.lngIDBanco & "-" & "(" & li.strNombreBanco & ")"
                        HabilitarCamposConsignarInstrucciones = False
                        logEsCtaInscrita_Instrucciones = True
                    Next

                End If
            End If
            MyBase.CambioItem("CuentasInstrucciones")
        End Set
    End Property

    Private _DireccionRegistrada As Integer
    Public Property DireccionRegistrada() As Integer
        Get
            Return _DireccionRegistrada
        End Get
        Set(ByVal value As Integer)
            _DireccionRegistrada = value
            If _DireccionRegistrada > 0 Then
                If Not IsNothing(ListaDireccionesClientes) Then
                    For Each li In ListaDireccionesClientes.Where(Function(i) i.ID = _DireccionRegistrada)
                        strDireccionInstrucciones = li.strDireccion
                        strCiudadInstrucciones = li.strCiudad
                        HabilitarDocumento = False
                    Next
                End If
            Else
                strDireccionInstrucciones = String.Empty
                strCiudadInstrucciones = String.Empty

            End If
            MyBase.CambioItem("DireccionRegistrada")
        End Set
    End Property

    Private _IDTipoClienteInstrucciones As String
    Public Property IDTipoClienteInstrucciones() As String
        Get
            Return _IDTipoClienteInstrucciones
        End Get
        Set(ByVal value As String)
            _IDTipoClienteInstrucciones = value
            If Not String.IsNullOrEmpty(_IDTipoClienteInstrucciones) Then
                If _IDTipoClienteInstrucciones = GSTR_CLIENTE Then
                    strDireccionInstrucciones = String.Empty
                    strCiudadInstrucciones = String.Empty
                    strSectorInstrucciones = String.Empty

                    'If DireccionRegistrada <= 0 Then
                    '    strDireccionInstrucciones = String.Empty
                    '    strCiudadInstrucciones = String.Empty
                    '    'VerLlevarDireccion = Visibility.Collapsed
                    'Else
                    '    'VerLlevarDireccion = Visibility.Visible

                    'End If
                    VerLlevarDireccion = Visibility.Visible

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        strNroDocumentoInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNroDocumento
                        strNombreInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNombre
                        strTipoIdentificacionInstrucciones = _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion
                    End If

                    HabilitarDocumento = False

                    HabilitarCamposDireccion = False
                    logEsTercero_Instrucciones = False
                ElseIf _IDTipoClienteInstrucciones = GSTR_TERCERO Then
                    logEsTercero_Instrucciones = True
                    strNroDocumentoInstrucciones = String.Empty
                    strNombreInstrucciones = String.Empty
                    strTipoIdentificacionInstrucciones = String.Empty
                    HabilitarDocumento = True
                    If LlevarDireccion Then
                        VerDireccionesRegistradas = Visibility.Collapsed
                        VerLlevarDireccion = Visibility.Collapsed
                        strTipoEsDireccionInscrita = Nothing
                        HabilitarCamposDireccion = True
                        strDireccionInstrucciones = String.Empty
                        strCiudadInstrucciones = String.Empty
                        strSectorInstrucciones = String.Empty
                    ElseIf DireccionRegistrada <= 0 Then
                        VerDireccionesRegistradas = Visibility.Collapsed
                        strDireccionInstrucciones = String.Empty
                        strCiudadInstrucciones = String.Empty
                        'VerLlevarDireccion = Visibility.Collapsed
                    Else
                        VerLlevarDireccion = Visibility.Visible
                        'VerDireccionesRegistradas = Visibility.Visible
                    End If

                End If
            End If
            MyBase.CambioItem("IDTipoClienteInstrucciones")
        End Set
    End Property

    Private _strTipoEsDireccionInscrita As String
    Public Property strTipoEsDireccionInscrita() As String
        Get
            Return _strTipoEsDireccionInscrita
        End Get
        Set(ByVal value As String)
            _strTipoEsDireccionInscrita = value
            If Not IsNothing(_strTipoEsDireccionInscrita) Then
                If _strTipoEsDireccionInscrita = GSTR_DIRECCION_INSCRITA Then
                    VerDireccionesRegistradas = Visibility.Visible
                    logDireccionInscrita_Instrucciones = True
                    DireccionRegistrada = Nothing
                    HabilitarCamposDireccion = False
                ElseIf _strTipoEsDireccionInscrita = GSTR_DIRECCION_NO_INSCRITA Then
                    logDireccionInscrita_Instrucciones = False
                    HabilitarCamposDireccion = True
                    DireccionRegistrada = Nothing
                    strDireccionInstrucciones = String.Empty
                    strCiudadInstrucciones = String.Empty
                    VerDireccionesRegistradas = Visibility.Collapsed
                    If IDTipoClienteInstrucciones = GSTR_TERCERO And LlevarDireccion = True Then
                        strNombreInstrucciones = String.Empty
                        strNroDocumentoInstrucciones = String.Empty
                        strTipoIdentificacionInstrucciones = Nothing
                    End If

                    HabilitarCamposDireccion = True
                End If
            End If
            MyBase.CambioItem("strTipoEsDireccionInscrita")
        End Set
    End Property

    Private _strTipoIdentificacionTitularInstruccionesDESCRIPCION As String
    Public Property strTipoIdentificacionTitularInstruccionesDESCRIPCION() As String
        Get
            Return _strTipoIdentificacionTitularInstruccionesDESCRIPCION
        End Get
        Set(ByVal value As String)
            _strTipoIdentificacionTitularInstruccionesDESCRIPCION = value
            MyBase.CambioItem("strTipoIdentificacionTitularInstruccionesDESCRIPCION")
        End Set
    End Property

    Private _DescripcionTipoIdentificacionInstrucciones As String
    Public Property DescripcionTipoIdentificacionInstrucciones() As String
        Get
            Return _DescripcionTipoIdentificacionInstrucciones
        End Get
        Set(ByVal value As String)
            _DescripcionTipoIdentificacionInstrucciones = value
            MyBase.CambioItem("DescripcionTipoIdentificacionInstrucciones")
        End Set
    End Property

    Private _strTipoIdentificacionInstrucciones As String
    Public Property strTipoIdentificacionInstrucciones() As String
        Get
            Return _strTipoIdentificacionInstrucciones
        End Get
        Set(ByVal value As String)
            _strTipoIdentificacionInstrucciones = value
            If Not String.IsNullOrEmpty(_strTipoIdentificacionInstrucciones) Then
                If Not IsNothing(DiccionarioCombosOYDPlus) Then
                    If DiccionarioCombosOYDPlus.ContainsKey("TIPOID") Then
                        For Each li In DiccionarioCombosOYDPlus("TIPOID").Where(Function(i) i.Retorno = _strTipoIdentificacionInstrucciones)
                            DescripcionTipoIdentificacionInstrucciones = li.Descripcion
                        Next
                    End If
                End If
            End If
            MyBase.CambioItem("strTipoIdentificacionInstrucciones")
        End Set
    End Property

    Private _strSectorInstrucciones As String
    Public Property strSectorInstrucciones() As String
        Get
            Return _strSectorInstrucciones
        End Get
        Set(ByVal value As String)
            _strSectorInstrucciones = value
            MyBase.CambioItem("strSectorInstrucciones")
        End Set
    End Property

    Private _strTipoCuentaInstrucciones As String
    Public Property strTipoCuentaInstrucciones() As String
        Get
            Return _strTipoCuentaInstrucciones
        End Get
        Set(ByVal value As String)
            _strTipoCuentaInstrucciones = value
            MyBase.CambioItem("strTipoCuentaInstrucciones")
        End Set
    End Property

    Private _strValorTipoCuentaInstrucciones As String
    Public Property strValorTipoCuentaInstrucciones() As String
        Get
            Return _strValorTipoCuentaInstrucciones
        End Get
        Set(ByVal value As String)
            _strValorTipoCuentaInstrucciones = value
            If (ConsignarCuentaChecked = True And String.IsNullOrEmpty(_strValorTipoCuentaInstrucciones)) Then
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    'strValorTipoCuentaInstrucciones = _TesoreriaOrdenesPlusCE_Selected.ValorTipoCta_Instrucciones
                    _strValorTipoCuentaInstrucciones = _TesoreriaOrdenesPlusCE_Selected.ValorTipoCta_Instrucciones
                End If
            End If
            MyBase.CambioItem("strValorTipoCuentaInstrucciones")
        End Set
    End Property

    Private _strTipoCuentaSeleccionadoInstrucciones As OYDPLUSUtilidades.CombosReceptor
    Public Property strTipoCuentaSeleccionadoInstrucciones() As OYDPLUSUtilidades.CombosReceptor
        Get
            Return _strTipoCuentaSeleccionadoInstrucciones
        End Get
        Set(ByVal value As OYDPLUSUtilidades.CombosReceptor)
            _strTipoCuentaSeleccionadoInstrucciones = value
            If Not IsNothing(_strTipoCuentaSeleccionadoInstrucciones) Then
                strTipoCuentaInstrucciones = _strTipoCuentaSeleccionadoInstrucciones.Descripcion
                strValorTipoCuentaInstrucciones = _strTipoCuentaSeleccionadoInstrucciones.Retorno
            End If
            MyBase.CambioItem("strTipoCuentaSeleccionadoInstrucciones")
        End Set
    End Property

    Private _strNroDocumentoInstrucciones As String
    Public Property strNroDocumentoInstrucciones() As String
        Get
            Return _strNroDocumentoInstrucciones
        End Get
        Set(ByVal value As String)
            _strNroDocumentoInstrucciones = value
            If (ClientePresente = True Or ClienteRecoge = True) And String.IsNullOrEmpty(_strNroDocumentoInstrucciones) Then
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    _strNroDocumentoInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNroDocumento_Instrucciones
                End If
            End If
            MyBase.CambioItem("strNroDocumentoInstrucciones")
        End Set
    End Property

    Private _strNombreInstrucciones As String
    Public Property strNombreInstrucciones() As String
        Get
            Return _strNombreInstrucciones
        End Get
        Set(ByVal value As String)
            _strNombreInstrucciones = value
            If (ClientePresente = True Or ClienteRecoge = True) And String.IsNullOrEmpty(_strNombreInstrucciones) Then
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    _strNombreInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNombre_Instrucciones
                End If
            End If
            MyBase.CambioItem("strNombreInstrucciones")
        End Set
    End Property

    Private _strCodigoBancoInstrucciones As String
    Public Property strCodigoBancoInstrucciones() As String
        Get
            Return _strCodigoBancoInstrucciones
        End Get
        Set(ByVal value As String)
            _strCodigoBancoInstrucciones = value
            MyBase.CambioItem("strCodigoBancoInstrucciones")
        End Set
    End Property

    Private _strDescripcionBancoInstrucciones As String
    Public Property strDescripcionBancoInstrucciones() As String
        Get
            Return _strDescripcionBancoInstrucciones
        End Get
        Set(ByVal value As String)
            _strDescripcionBancoInstrucciones = value
            MyBase.CambioItem("strDescripcionBancoInstrucciones")
        End Set
    End Property

    Private _strCuentaInstrucciones As String
    Public Property strCuentaInstrucciones() As String
        Get
            Return _strCuentaInstrucciones
        End Get
        Set(ByVal value As String)
            _strCuentaInstrucciones = value
            MyBase.CambioItem("strCuentaInstrucciones")
        End Set
    End Property


    Private _VerCamposOpcionalesLlevarDireccion As Visibility = Visibility.Collapsed
    Public Property VerCamposOpcionalesLlevarDireccion() As Visibility
        Get
            Return _VerCamposOpcionalesLlevarDireccion
        End Get
        Set(ByVal value As Visibility)
            _VerCamposOpcionalesLlevarDireccion = value
            MyBase.CambioItem("VerCamposOpcionalesLlevarDireccion")
        End Set
    End Property


    Private _VerCuentasRegistradas As Visibility = Visibility.Collapsed
    Public Property VerCuentasRegistradas() As Visibility
        Get
            Return _VerCuentasRegistradas
        End Get
        Set(ByVal value As Visibility)
            _VerCuentasRegistradas = value
            MyBase.CambioItem("VerCuentasRegistradas")
        End Set
    End Property

    Private _VerConsignarCuenta As Visibility = Visibility.Collapsed
    Public Property VerConsignarCuenta() As Visibility
        Get
            Return _VerConsignarCuenta
        End Get
        Set(ByVal value As Visibility)
            _VerConsignarCuenta = value
            MyBase.CambioItem("VerConsignarCuenta")
        End Set
    End Property

    Private _VerDireccionesRegistradas As Visibility = Visibility.Collapsed
    Public Property VerDireccionesRegistradas() As Visibility
        Get
            Return _VerDireccionesRegistradas
        End Get
        Set(ByVal value As Visibility)
            _VerDireccionesRegistradas = value
            MyBase.CambioItem("VerDireccionesRegistradas")
        End Set
    End Property

    Private _VerLlevarDireccion As Visibility = Visibility.Collapsed
    Public Property VerLlevarDireccion() As Visibility
        Get
            Return _VerLlevarDireccion
        End Get
        Set(ByVal value As Visibility)
            _VerLlevarDireccion = value
            MyBase.CambioItem("VerLlevarDireccion")
        End Set
    End Property
    Private _VerInstrucciones As Visibility = Visibility.Visible
    Public Property VerInstrucciones() As Visibility
        Get
            Return _VerInstrucciones
        End Get
        Set(ByVal value As Visibility)
            _VerInstrucciones = value
            MyBase.CambioItem("VerInstrucciones")
        End Set
    End Property


    Private _VerTipoCliente As Visibility = Visibility.Collapsed
    Public Property VerTipoCliente() As Visibility
        Get
            Return _VerTipoCliente
        End Get
        Set(ByVal value As Visibility)
            _VerTipoCliente = value
            MyBase.CambioItem("VerTipoCliente")
        End Set
    End Property

    Private _HabilitarDocumento As Boolean
    Public Property HabilitarDocumento() As Boolean
        Get
            Return _HabilitarDocumento
        End Get
        Set(ByVal value As Boolean)
            _HabilitarDocumento = value
            MyBase.CambioItem("HabilitarDocumento")
        End Set
    End Property
    Public Sub DeshabilitarOpciones(ByVal lngOpcionSeleccionada As Integer)
        Try
            Select Case lngOpcionSeleccionada
                Case OpcionesInstrucciones.ClienteRecoge
                    ClientePresente = False
                    LlevarDireccion = False
                    RecogeTercero = False
                    ConsignarCuentaChecked = False
                    HabilitarDocumento = False
                    VerCuentasRegistradas = Visibility.Collapsed
                    VerDireccionesRegistradas = Visibility.Collapsed
                Case OpcionesInstrucciones.ClientePresente
                    ClienteRecoge = False
                    LlevarDireccion = False
                    RecogeTercero = False
                    ConsignarCuentaChecked = False
                    HabilitarDocumento = False
                    VerCuentasRegistradas = Visibility.Collapsed
                    VerDireccionesRegistradas = Visibility.Collapsed
                Case OpcionesInstrucciones.LlevarDireccion

                    ClienteRecoge = False
                    ClientePresente = False
                    RecogeTercero = False
                    ConsignarCuentaChecked = False
                    HabilitarDocumento = False
                    VerCuentasRegistradas = Visibility.Collapsed
                Case OpcionesInstrucciones.RecogeTercero
                    ClienteRecoge = False
                    ClientePresente = False
                    LlevarDireccion = False
                    ConsignarCuentaChecked = False
                    VerCuentasRegistradas = Visibility.Collapsed
                    VerDireccionesRegistradas = Visibility.Collapsed
                Case OpcionesInstrucciones.ConsignarCuenta
                    ClienteRecoge = False
                    ClientePresente = False
                    LlevarDireccion = False
                    RecogeTercero = False
                    VerDireccionesRegistradas = Visibility.Collapsed
            End Select
        Catch ex As Exception

        End Try

    End Sub
    Enum OpcionesInstrucciones
        ClienteRecoge
        ClientePresente
        LlevarDireccion
        RecogeTercero
        ConsignarCuenta
    End Enum

    Private _ConsignarCuentaChecked As Boolean
    Public Property ConsignarCuentaChecked() As Boolean
        Get
            Return _ConsignarCuentaChecked
        End Get
        Set(ByVal value As Boolean)
            _ConsignarCuentaChecked = value
            If _ConsignarCuentaChecked Then
                CuentasInstrucciones = 0
                CuentaRegistradaInstrucciones = Nothing
                VerDireccionesRegistradas = Visibility.Collapsed
                VerConsignarCuenta = Visibility.Visible
                VerCamposOpcionalesLlevarDireccion = Visibility.Collapsed
                VerDireccionesRegistradas = Visibility.Collapsed


            Else
                VerConsignarCuenta = Visibility.Collapsed
            End If
            MyBase.CambioItem("ConsignarCuentaChecked")
        End Set
    End Property

    Private _ClienteRecoge As Boolean
    Public Property ClienteRecoge() As Boolean
        Get
            Return _ClienteRecoge
        End Get
        Set(ByVal value As Boolean)
            _ClienteRecoge = value
            If _ClienteRecoge Then
                VerDireccionesRegistradas = Visibility.Collapsed
                VerLlevarDireccion = Visibility.Collapsed
                HabilitarDocumento = False
                VerCuentasRegistradas = Visibility.Collapsed
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    strNroDocumentoInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNroDocumento
                    strNombreInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNombre
                    strTipoIdentificacionInstrucciones = _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion
                End If

                VerCamposOpcionalesLlevarDireccion = Visibility.Collapsed
                VerConsignarCuenta = Visibility.Collapsed
                'DeshabilitarOpciones(OpcionesInstrucciones.ClienteRecoge)
            End If
            MyBase.CambioItem("ClienteRecoge")
        End Set
    End Property

    Private _ClientePresente As Boolean
    Public Property ClientePresente() As Boolean
        Get
            Return _ClientePresente
        End Get
        Set(ByVal value As Boolean)
            _ClientePresente = value
            If _ClientePresente Then
                VerDireccionesRegistradas = Visibility.Collapsed
                VerLlevarDireccion = Visibility.Collapsed
                HabilitarDocumento = False
                VerCuentasRegistradas = Visibility.Collapsed
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    strNroDocumentoInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNroDocumento
                    strNombreInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNombre
                    strTipoIdentificacionInstrucciones = _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion
                End If
                VerCamposOpcionalesLlevarDireccion = Visibility.Collapsed
                VerConsignarCuenta = Visibility.Collapsed

                'DeshabilitarOpciones(OpcionesInstrucciones.ClientePresente)
            End If
            MyBase.CambioItem("ClientePresente")
        End Set
    End Property

    Private _RecogeTercero As Boolean
    Public Property RecogeTercero() As Boolean
        Get
            Return _RecogeTercero
        End Get
        Set(ByVal value As Boolean)
            _RecogeTercero = value
            If _RecogeTercero Then
                VerDireccionesRegistradas = Visibility.Collapsed
                logEsTercero_Instrucciones = True

                If logNuevoRegistro Or logEditarRegistro Then
                    strNombreInstrucciones = String.Empty
                    strNroDocumentoInstrucciones = String.Empty
                    strTipoIdentificacionInstrucciones = Nothing
                    strTipoCuentaInstrucciones = Nothing
                    strCodigoBancoInstrucciones = Nothing
                End If

                HabilitarDocumento = True
                VerCuentasRegistradas = Visibility.Collapsed
                VerCamposOpcionalesLlevarDireccion = Visibility.Collapsed
                'DeshabilitarOpciones(OpcionesInstrucciones.RecogeTercero)
            End If
            MyBase.CambioItem("RecogeTercero")
        End Set
    End Property

    Private _LlevarDireccion As Boolean
    Public Property LlevarDireccion() As Boolean
        Get
            Return _LlevarDireccion
        End Get
        Set(ByVal value As Boolean)
            _LlevarDireccion = value
            If _LlevarDireccion Then
                CuentaRegistradaInstrucciones = 0
                DireccionRegistrada = 0
                If logNuevoRegistro Or logEditarRegistro Then
                    IDTipoClienteInstrucciones = Nothing

                    strTipoEsDireccionInscrita = Nothing
                    strNombreInstrucciones = String.Empty
                    strNroDocumentoInstrucciones = String.Empty
                    strTipoIdentificacionInstrucciones = Nothing
                End If

                VerLlevarDireccion = Visibility.Visible
                VerTipoCliente = Visibility.Visible
                HabilitarCamposDireccion = False
                HabilitarDocumento = False

                VerCuentasRegistradas = Visibility.Collapsed
                VerCamposOpcionalesLlevarDireccion = Visibility.Visible

            Else
                VerLlevarDireccion = Visibility.Collapsed
                VerTipoCliente = Visibility.Collapsed
                VerCamposOpcionalesLlevarDireccion = Visibility.Collapsed
            End If

            MyBase.CambioItem("LlevarDireccion")
        End Set
    End Property

    Private _OtrosChecked As Boolean
    Public Property OtrosChecked() As Boolean
        Get
            Return _OtrosChecked
        End Get
        Set(ByVal value As Boolean)
            _OtrosChecked = value
            If _OtrosChecked Then
                CuentasInstrucciones = 0
                CuentaRegistradaInstrucciones = Nothing
                VerDireccionesRegistradas = Visibility.Collapsed
                VerConsignarCuenta = Visibility.Collapsed
                VerCamposOpcionalesLlevarDireccion = Visibility.Collapsed
                VerDireccionesRegistradas = Visibility.Collapsed
                If logEditarRegistro Or logNuevoRegistro Then
                    HabilitarOtrosInstrucciones = True
                End If
            Else
                HabilitarOtrosInstrucciones = False
            End If
            MyBase.CambioItem("OtrosChecked")
        End Set
    End Property

    Private _strOtrosInstrucciones As String
    Public Property strOtrosInstrucciones() As String
        Get
            Return _strOtrosInstrucciones
        End Get
        Set(ByVal value As String)
            _strOtrosInstrucciones = value
            MyBase.CambioItem("strOtrosInstrucciones")
        End Set
    End Property

#End Region

#Region "VALORES TOTALES"

    Private _ValorTotalGenerarActual As Decimal = 0
    Public Property ValorTotalGenerarActual() As Decimal
        Get
            Return _ValorTotalGenerarActual
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerarActual = value
            MyBase.CambioItem("ValorTotalGenerarActual")
        End Set
    End Property

    Private _ValorTotalGMFActual As Decimal = 0
    Public Property ValorTotalGMFActual() As Decimal
        Get
            Return _ValorTotalGMFActual
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGMFActual = value
            MyBase.CambioItem("ValorTotalGMFActual")
        End Set
    End Property

    Private _ValorTotalNETOActual As Decimal = 0
    Public Property ValorTotalNETOActual() As Decimal
        Get
            Return _ValorTotalNETOActual
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNETOActual = value
            MyBase.CambioItem("ValorTotalNETOActual")
        End Set
    End Property

    Private _ValorTotalGMF As Decimal
    Public Property ValorTotalGMF() As Decimal
        Get
            Return _ValorTotalGMF
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGMF = value
            MyBase.CambioItem("ValorTotalGMF")
        End Set
    End Property

    Private _ValorTotalNETO As Decimal
    Public Property ValorTotalNETO() As Decimal
        Get
            Return _ValorTotalNETO
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNETO = value
            MyBase.CambioItem("ValorTotalNETO")
        End Set
    End Property

    Private _ValorTotalGenerar As Decimal
    Public Property ValorTotalGenerar() As Decimal
        Get
            Return _ValorTotalGenerar
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerar = value
            MyBase.CambioItem("ValorTotalGenerar")
        End Set
    End Property

    Private _ValorTotalGenerarOrden As Decimal
    Public Property ValorTotalGenerarOrden() As Decimal
        Get
            Return _ValorTotalGenerarOrden
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGenerarOrden = value
            MyBase.CambioItem("ValorTotalGenerarOrden")
        End Set
    End Property

    Private _ValorTotalGMFOrden As Decimal
    Public Property ValorTotalGMFOrden() As Decimal
        Get
            Return _ValorTotalGMFOrden
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalGMFOrden = value
            MyBase.CambioItem("ValorTotalGMFOrden")
        End Set
    End Property

    Private _ValorTotalNETOOrden As Decimal
    Public Property ValorTotalNETOOrden() As Decimal
        Get
            Return _ValorTotalNETOOrden
        End Get
        Set(ByVal value As Decimal)
            _ValorTotalNETOOrden = value
            MyBase.CambioItem("ValorTotalNETOOrden")
        End Set
    End Property
    Private _ValorAnteriorDetalle As Decimal = 0
    Public Property ValorAnteriorDetalle() As Decimal
        Get
            Return _ValorAnteriorDetalle
        End Get
        Set(ByVal value As Decimal)
            _ValorAnteriorDetalle = value
            MyBase.CambioItem("ValorAnteriorDetalle")
        End Set
    End Property
    Private _ValorEdicionDetalle As Decimal = 0
    Public Property ValorEdicionDetalle() As Decimal
        Get
            Return _ValorEdicionDetalle
        End Get
        Set(ByVal value As Decimal)
            _ValorEdicionDetalle = value
            MyBase.CambioItem("ValorEdicionDetalle")
        End Set
    End Property
#End Region

#Region "Ancho y Altos"
    Private _ActualAltoPantalla As Double = 500
    Public Property ActualAltoPantalla() As Double
        Get
            Return _ActualAltoPantalla
        End Get
        Set(ByVal value As Double)
            _ActualAltoPantalla = value
            MyBase.CambioItem("ActualAltoPantalla")
        End Set
    End Property

    Private _AnchoMensaje As String
    Public Property AnchoMensaje() As String
        Get
            Return _AnchoMensaje
        End Get
        Set(ByVal value As String)
            _AnchoMensaje = value
            MyBase.CambioItem("AnchoMensaje")
        End Set
    End Property

    Private _ActualAnchoPantalla As Double
    Public Property ActualAnchoPantalla() As Double
        Get
            Return _ActualAnchoPantalla
        End Get
        Set(ByVal value As Double)
            _ActualAnchoPantalla = value
            If Not IsNothing(value) Then
                AnchoMensaje = value.ToString
            End If
            MyBase.CambioItem("ActualAnchoPantalla")
        End Set
    End Property

    Private _MostrarItemCheque As Visibility = Visibility.Collapsed
    Public Property MostrarItemCheque() As Visibility
        Get
            Return _MostrarItemCheque
        End Get
        Set(ByVal value As Visibility)
            _MostrarItemCheque = value
            MyBase.CambioItem("MostrarItemCheque")
        End Set
    End Property
#End Region

#Region "Propiedades para el Ordenante"

    Private _ListaOrdenantesOYDPLUS As List(Of OYDUtilidades.BuscadorOrdenantes)
    Public Property ListaOrdenantesOYDPLUS As List(Of OYDUtilidades.BuscadorOrdenantes)
        Get
            Return (_ListaOrdenantesOYDPLUS)
        End Get
        Set(ByVal value As List(Of OYDUtilidades.BuscadorOrdenantes))
            _ListaOrdenantesOYDPLUS = value
            MyBase.CambioItem("ListaOrdenantesOYDPLUS")
            If Not IsNothing(ListaOrdenantesOYDPLUS) Then
                If logNuevoRegistro = False And logEditarRegistro = False Then
                    If ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = _TesoreriaOrdenesPlusCE_Selected.lngIDOrdenante).Count > 0 Then
                        OrdenanteSeleccionadoOYDPLUS = ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = _TesoreriaOrdenesPlusCE_Selected.lngIDOrdenante).FirstOrDefault
                    End If
                Else
                    If ListaOrdenantesOYDPLUS.Count = 1 Then
                        OrdenanteSeleccionadoOYDPLUS = ListaOrdenantesOYDPLUS.FirstOrDefault
                    Else
                        If ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = _TesoreriaOrdenesPlusCE_Selected.lngIDOrdenante).Count > 0 Then
                            OrdenanteSeleccionadoOYDPLUS = ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = _TesoreriaOrdenesPlusCE_Selected.lngIDOrdenante).FirstOrDefault
                        End If
                    End If
                End If
            End If
        End Set
    End Property

    Private _mobjOrdenanteSeleccionadoOYDPLUS As OYDUtilidades.BuscadorOrdenantes
    Public Property OrdenanteSeleccionadoOYDPLUS() As OYDUtilidades.BuscadorOrdenantes
        Get
            Return (_mobjOrdenanteSeleccionadoOYDPLUS)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorOrdenantes)
            _mobjOrdenanteSeleccionadoOYDPLUS = value
            If Not IsNothing(OrdenanteSeleccionadoOYDPLUS) Then
                If logEditarRegistro Or logNuevoRegistro Then
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        _TesoreriaOrdenesPlusCE_Selected.lngIDOrdenante = OrdenanteSeleccionadoOYDPLUS.IdOrdenante
                    End If
                End If
            End If
            MyBase.CambioItem("OrdenanteSeleccionadoOYDPLUS")
        End Set
    End Property

#End Region

#Region "Propiedades Omnibus"

    Private _MostrarTabTrasladoFondos As Visibility = Visibility.Collapsed
    Public Property MostrarTabTrasladoFondos() As Visibility
        Get
            Return _MostrarTabTrasladoFondos
        End Get
        Set(ByVal value As Visibility)
            _MostrarTabTrasladoFondos = value
            MyBase.CambioItem("MostrarTabTrasladoFondos")
        End Set
    End Property

    Private _MostrarTabOYD As Visibility = Visibility.Collapsed
    Public Property MostrarTabOYD() As Visibility
        Get
            Return _MostrarTabOYD
        End Get
        Set(ByVal value As Visibility)
            _MostrarTabOYD = value
            MyBase.CambioItem("MostrarTabOYD")
        End Set
    End Property

#End Region

#End Region

#Region "Resultados Asincrónicos"

    Public Sub TerminoPreguntarDuplicarOrden(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            IsBusyDetalles = True
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then

                If Not IsNothing(TesoreriaOrdenesPlusCE_Selected) Then
                    Dim objListaDetalleCheques As New List(Of TesoreriaOyDPlusCheques)
                    Dim objListaDetalleTransferencias As New List(Of TesoreriaOyDPlusTransferencia)
                    Dim objListaDetalleCarteras As New List(Of TesoreriaOyDPlusCarterasColectivas)
                    Dim objListaDetalleTrasladoFondos As New List(Of TesoreriaOyDPlusCarterasColectivas)
                    Dim objListaDetalleinternos As New List(Of TesoreriaOyDPlusInternos)
                    Dim objListaDetalleBloqueo As New List(Of TesoreriaOyDPlusBloqueos)
                    Dim objListaDetalleOYD As New List(Of TesoreriaOyDPlusOYD)
                    Dim objListaDetalleOperacionesEspeciales As New List(Of TesoreriaOyDPlusOperacionesEspeciales)

                    If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                        For Each Cheque In ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                            Cheque.strConsecutivo = String.Empty
                            Cheque.strFormaPago = GSTR_CHEQUE
                            Cheque.strEstado = GSTR_PENDIENTE_Plus_Detalle
                            Cheque.lngID = Nothing
                            Cheque.lngIDTesoreriaEncabezado = Nothing
                            Cheque.logEsProcesada = True    ' JRD
                            objListaDetalleCheques.Add(Cheque)
                        Next
                    Else
                        objListaDetalleCheques = ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                    End If

                    If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                        For Each Transferencia In ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                            Transferencia.strConsecutivo = String.Empty
                            Transferencia.strEstado = GSTR_PENDIENTE_Plus_Detalle
                            Transferencia.strFormaPago = GSTR_TRANSFERENCIA
                            Transferencia.lngID = Nothing
                            Transferencia.lngIDTesoreriaEncabezado = Nothing
                            Transferencia.logEsProcesada = True    ' JRD
                            objListaDetalleTransferencias.Add(Transferencia)
                        Next
                    Else
                        objListaDetalleTransferencias = ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                    End If

                    If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                        For Each Carteras In ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                            Carteras.strConsecutivo = String.Empty
                            Carteras.strEstado = GSTR_PENDIENTE_Plus_Detalle
                            Carteras.strFormaPago = GSTR_CARTERASCOLECTIVAS
                            Carteras.lngID = Nothing
                            Carteras.lngIDTesoreriaEncabezado = Nothing
                            Carteras.logEsProcesada = True    ' JRD
                            objListaDetalleCarteras.Add(Carteras)
                        Next
                    Else
                        objListaDetalleCarteras = ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                    End If

                    If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                        For Each Carteras In ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos
                            Carteras.strConsecutivo = String.Empty
                            Carteras.strEstado = GSTR_PENDIENTE_Plus_Detalle
                            Carteras.strFormaPago = GSTR_TRASLADOFONDOS
                            Carteras.lngID = Nothing
                            Carteras.lngIDTesoreriaEncabezado = Nothing
                            Carteras.logEsProcesada = True    ' JRD
                            objListaDetalleTrasladoFondos.Add(Carteras)
                        Next
                    Else
                        objListaDetalleTrasladoFondos = ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos
                    End If

                    If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                        For Each objOYD In ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                            objOYD.strConsecutivo = String.Empty
                            objOYD.strEstado = GSTR_PENDIENTE_Plus_Detalle
                            objOYD.strFormaPago = GSTR_OYD
                            objOYD.lngID = Nothing
                            objOYD.lngIDTesoreriaEncabezado = Nothing
                            objOYD.logEsProcesada = True    ' JRD
                            objListaDetalleOYD.Add(objOYD)
                        Next
                    Else
                        objListaDetalleOYD = ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                    End If

                    If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                        For Each Internos In ListaTesoreriaOrdenesPlusCE_Detalle_Internos
                            Internos.strConsecutivo = String.Empty
                            Internos.strEstado = GSTR_PENDIENTE_Plus_Detalle
                            Internos.strFormaPago = GSTR_INTERNOS
                            Internos.lngID = Nothing
                            Internos.lngIDTesoreriaEncabezado = Nothing
                            Internos.logEsProcesada = True    ' JRD
                            objListaDetalleinternos.Add(Internos)
                        Next
                    Else
                        objListaDetalleinternos = ListaTesoreriaOrdenesPlusCE_Detalle_Internos
                    End If

                    If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                        For Each Bloqueo In ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos
                            Bloqueo.strConsecutivo = String.Empty
                            Bloqueo.strEstado = GSTR_PENDIENTE_Plus_Detalle
                            Bloqueo.strFormaPago = GSTR_BLOQUEO_RECURSOS
                            Bloqueo.lngID = Nothing
                            Bloqueo.lngIDTesoreriaEncabezado = Nothing
                            Bloqueo.logEsProcesada = True    ' JRD
                            objListaDetalleBloqueo.Add(Bloqueo)
                        Next
                    Else
                        objListaDetalleBloqueo = ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos
                    End If

                    If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                        For Each OperacionEspecial In ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                            OperacionEspecial.strConsecutivo = String.Empty
                            OperacionEspecial.strEstado = GSTR_PENDIENTE_Plus_Detalle
                            OperacionEspecial.strFormaPago = GSTR_OPERACIONES_ESPECIALES
                            OperacionEspecial.lngID = Nothing
                            OperacionEspecial.lngIDTesoreriaEncabezado = Nothing
                            OperacionEspecial.logEsProcesada = True    ' JRD
                            objListaDetalleOperacionesEspeciales.Add(OperacionEspecial)
                        Next
                    Else
                        objListaDetalleOperacionesEspeciales = ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                    End If

                    ListaTesoreriaOrdenesPlusCE_Detalle_Internos = Nothing
                    ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = Nothing
                    ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = Nothing
                    ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias = Nothing
                    ListaTesoreriaOrdenesPlusCE_Detalle_Cheques = Nothing
                    ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos = Nothing
                    ListaTesoreriaOrdenesPlusCE_Detalle_OYD = Nothing
                    ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = Nothing

                    dcProxy.TesoreriaOyDPlusCheques.Clear()
                    dcProxy.TesoreriaOyDPlusTransferencias.Clear()
                    dcProxy.TesoreriaOyDPlusCarterasColectivas.Clear()
                    dcProxy.TesoreriaOyDPlusInternos.Clear()
                    dcProxy.TesoreriaOyDPlusBloqueos.Clear()
                    dcProxy.TesoreriaOyDPlusOYDs.Clear()
                    dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Clear()

                    ConfigurarOrdenDuplicada(TesoreriaOrdenesPlusCE_Selected, objListaDetalleCheques, objListaDetalleTransferencias, objListaDetalleCarteras, objListaDetalleTrasladoFondos, objListaDetalleinternos, objListaDetalleBloqueo, objListaDetalleOYD, objListaDetalleOperacionesEspeciales)
                    consultarOrdenantesOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, "EDITAR")

                    If visNavegando = "Collapsed" Then
                        MyBase.CambiarFormulario_Forma_Manual()
                    End If
                End If
            Else
                IsBusy = False
                IsBusyDetalles = False
            End If


        Catch ex As Exception
            IsBusy = False
            IsBusyDetalles = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al duplicar la orden de tesoreria",
                                                             Me.ToString(), "TerminoPreguntarDuplicarOrden", Application.Current.ToString(), Program.Maquina, ex)

        End Try

    End Sub

    Public Sub TerminoValidarFechas(ByVal lo As LoadOperation(Of tblFechasHabiles))
        Try
            IsBusy = False
            If lo.HasError = False Then
                If lo.UserState = "Validarfecha" Then
                    logValidarFechaOrden = True
                    If dcProxy.tblFechasHabiles.Count > 0 Then
                        If dcProxy.tblFechasHabiles.FirstOrDefault.logEsHabil = False Then
                            A2Utilidades.Mensajes.mostrarMensaje("No se puede guardar la orden de tesoreria por que la fecha orden no es una fecha hábil, o esta es menor a la del sistema corrija la fecha para guardar la orden de tesoreria ", "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If
                    End If
                ElseIf lo.UserState = "ValidarFechaCierre" Then
                    logValidarFechaOrden = True

                    If dcProxy.tblFechasHabiles.Count > 0 Then
                        If dcProxy.tblFechasHabiles.FirstOrDefault.logEsHabil = False Then
                            A2Utilidades.Mensajes.mostrarMensaje("No se puede guardar la orden de tesoreria por que la fecha orden no es una fecha hábil, o esta es menor a la del sistema corrija la fecha para guardar la orden de tesoreria ", "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Else
                            If Not IsNothing(dcProxy.tblFechasHabiles.FirstOrDefault.dtmMayorFechaHabil) Then
                                logValidarFechaOrden = False
                                FechaOrden = dcProxy.tblFechasHabiles.FirstOrDefault.dtmMayorFechaHabil
                                logValidarFechaOrden = True
                            End If
                        End If

                        consultarCombosEspecificosFondo(_TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, "ORDENGIROFONDOS")
                    End If
                ElseIf lo.UserState = "Validarfechaaplicacion" Or lo.UserState = "Validarfechaaplicacioncartera" Then
                    If dcProxy.tblFechasHabiles.Count > 0 Then
                        If dcProxy.tblFechasHabiles.FirstOrDefault.logEsHabil = False Then
                            A2Utilidades.Mensajes.mostrarMensaje("No se puede guardar la orden de tesoreria por que la fecha de aplicación que ingresó no es una fecha hábil, o esta es menor a la del sistema corrija la fecha para guardar la orden de tesoreria ", "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            logFechaAplicacionCarteraEsHabil = False
                        Else
                            logFechaAplicacionCarteraEsHabil = True
                        End If

                        If lo.UserState = "Validarfechaaplicacion" Then
                            VerificarRestriccionesTipoCartera(False, "ENCABEZADOORDENGIRO")
                        Else
                            VerificarRestriccionesTipoCartera(True, "DETALLEOORDENGIRO")
                        End If
                    End If
                ElseIf lo.UserState = "FechaHabilPosteriorCierre" Then
                    If dcProxy.tblFechasHabiles.Count > 0 Then
                        If dcProxy.tblFechasHabiles.FirstOrDefault.logEsHabil = False Then
                            logValidarFechaOrden = False
                            FechaOrden = dcProxy.tblFechasHabiles.FirstOrDefault.dtmMayorFechaHabil
                            logValidarFechaOrden = True
                        End If
                    End If

                    consultarCombosEspecificosFondo(_TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, "ORDENGIROFONDOS")
                Else
                    If lo.UserState = "validar_fecha_guardado" Then
                        If dcProxy.tblFechasHabiles.Count > 0 Then
                            If dcProxy.tblFechasHabiles.FirstOrDefault.logEsHabil Then
                                If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD Then

                                    ''JCM20170913, se comenta la validación ya que la fecha de aplicación ya tiene la fecha hábil correcta
                                    'If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                                    '    dcProxy.ObtenerFechaAplicacionValida(FechaAplicacion.Value, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos, Program.Usuario, Program.HashConexion, AddressOf TerminoValidarFechaAplicacionValida, "validar_fechaaplicacion_guardado")
                                    'Else
                                    '    dcProxy.tblFechasHabiles.Clear()
                                    '    dcProxy.Load(dcProxy.CalcularDiaHabilQuery(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, FechaAplicacion, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarFechas, "validar_fechaaplicacion_guardado")
                                    'End If

                                    dcProxy.tblFechasHabiles.Clear()
                                    If IsNothing(FechaAplicacion) Then
                                        FechaAplicacion = _TesoreriaOrdenesPlusCE_Selected.dtmFechaAplicacion
                                    End If

                                    dcProxy.Load(dcProxy.CalcularDiaHabilQuery(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, FechaAplicacion, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarFechas, "validar_fechaaplicacion_guardado")

                                Else
                                    ActualizarOrdenTesoreria()
                                End If
                            Else
                                A2Utilidades.Mensajes.mostrarMensaje("No se puede guardar la orden de tesoreria por que la fecha que ingresó no es una fecha hábil, o esta es menor a la del sistema corrija la fecha para guardar la orden de tesoreria ", "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            End If
                        End If
                    ElseIf lo.UserState = "validar_fechaaplicacion_guardado" Then
                        If dcProxy.tblFechasHabiles.Count > 0 Then
                            If dcProxy.tblFechasHabiles.FirstOrDefault.logEsHabil Then
                                ActualizarOrdenTesoreria()
                            Else
                                A2Utilidades.Mensajes.mostrarMensaje("No se puede guardar la orden de tesoreria por que la fecha de aplicación que ingresó no es una fecha hábil.", "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            End If

                        End If
                    End If

                End If

            Else
                logValidarFechaOrden = True
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar dia habil",
                                                 Me.ToString(), "TerminoValidarFechas", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If

        Catch ex As Exception
            logValidarFechaOrden = True
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar dia habil",
                                                             Me.ToString(), "TerminoValidarFechas", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Sub TerminoValidarFechaAplicacionValida(ByVal lo As InvokeOperation(Of DateTime))
        Try
            IsBusy = False
            If lo.HasError = False Then
                If lo.UserState = "NOMOSTRARMENSAJE" Then
                    If FechaAplicacion.Value <> lo.Value Then
                        logValidarFechaAplicacion = False
                        FechaAplicacion = lo.Value
                        logValidarFechaAplicacion = True
                    End If
                Else
                    If FechaAplicacion.Value < lo.Value Then
                        mostrarMensaje(String.Format("La fecha aplicación seleccionada no es valida para la cancelación la proxima fecha de aplicación es {0:yyyy-MM-dd}.", lo.Value), Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                        logValidarFechaAplicacion = False
                        FechaAplicacion = lo.Value
                        logValidarFechaAplicacion = True
                    End If
                End If

                If lo.UserState = "validar_fechaaplicacion_guardado" Then
                    ActualizarOrdenTesoreria()
                Else
                    VerificarRestriccionesTipoCartera(False, "ENCABEZADOORDENGIRO")
                End If

            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar dia habil",
                                                 Me.ToString(), "TerminoValidarEstadoTesoreria", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar dia habil",
                                                             Me.ToString(), "TerminoValidarEstadoTesoreria", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Sub TerminoCancelarEditarRegistro(ByVal lo As InvokeOperation(Of Integer))
        Try
            LimpiarVariablesConfirmadas()
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cancelar la edición del registro.", Me.ToString(), "TerminoCancelarEditarRegistro", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub TerminoGuardarExitosamente(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            HabilitarFechaAplicacion = False
            logCancelarRegistro = False
            logEditarRegistro = False
            logNuevoRegistro = False
            HabilitarEncabezado = False
            HabilitarFecha = False

            HabilitarNegocio = False
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                If String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.ValorEstado) Then
                    _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTE_Plus
                End If
            End If

            Program.VerificarCambiosProxyServidor(dcProxy)
            dcProxy.SubmitChanges(AddressOf TerminoSubmitChanges, String.Empty)

            VerInstrucciones = Visibility.Visible
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al Guardar Orden.", Me.ToString(), "TerminoGuardarExitosamente", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try

    End Sub

    Private Sub TerminoValidarIngresoOrden(ByVal lo As LoadOperation(Of OyDPLUSTesoreria.tblRespuestaValidaciones))
        Try

            If lo.HasError = False Then
                'JFSB20180516 Se toma el id del documento creado para después usarlo para cargar el documento
                ListaResultadoValidacion = lo.Entities.ToList

                For Each li In ListaResultadoValidacion
                    ResultadoValidacion = li
                Next

                IdEncabezadoSubirArchivo = ResultadoValidacion.IDOrdenIdentity

                IsBusy = False
                If ListaResultadoValidacion.Count > 0 Then
                    Dim logExitoso As Boolean = False
                    Dim logRequiereConfirmacion As Boolean = False
                    Dim logRequiereJustificacion As Boolean = False
                    Dim logRequiereAprobacion As Boolean = False
                    Dim logConsultaListaJustificacion As Boolean = False
                    Dim logError As Boolean = False
                    Dim strMensajeExitoso As String = String.Empty
                    Dim strMensajeError As String = String.Empty
                    Dim intIDOrdenNueva As Integer = 0
                    Dim logEsHtml As Boolean = False
                    Dim strMensajeDetallesHtml As String = String.Empty
                    Dim strMensajeRetornoHtml As String = String.Empty

                    For Each li In ListaResultadoValidacion

                        If li.Exitoso Then
                            logExitoso = True
                            logError = False
                            logRequiereJustificacion = False
                            logRequiereConfirmacion = False
                            logRequiereAprobacion = False
                            strMensajeExitoso = strMensajeExitoso & vbCrLf & li.Mensaje
                            If li.Regla = "CONTROLDUAL" Then logReglaDUAl = True
                            intIDOrdenNueva = li.IDOrdenIdentity
                        ElseIf li.RequiereConfirmacion Then
                            logExitoso = False
                            logError = False
                            logRequiereConfirmacion = True
                        ElseIf li.RequiereJustificacion Then
                            logExitoso = False
                            logError = False
                            logRequiereJustificacion = True
                        ElseIf li.RequiereAprobacion Then
                            logExitoso = False
                            logError = False
                            logRequiereAprobacion = True
                        ElseIf li.DetieneIngreso Then
                            logError = True
                            logExitoso = False
                            logRequiereJustificacion = False
                            logRequiereConfirmacion = False
                            logRequiereAprobacion = False
                            strMensajeError = String.Format("{0}{1}{2}", strMensajeError, vbCrLf, li.Mensaje)
                            strMensajeRetornoHtml = String.Format("{0}{1}", strMensajeRetornoHtml, li.DetalleRegla)
                        Else
                            logError = True
                            logExitoso = False
                            logRequiereJustificacion = False
                            logRequiereConfirmacion = False
                            logRequiereAprobacion = False
                            strMensajeError = String.Format("{0}{1}{2}", strMensajeError, vbCrLf, li.Mensaje)
                            strMensajeRetornoHtml = String.Format("{0}{1}", strMensajeRetornoHtml, li.DetalleRegla)
                        End If

                    Next

                    If logExitoso And
                        logRequiereConfirmacion = False And
                        logRequiereJustificacion = False And
                        logRequiereAprobacion = False Then
                        HabilitarFechaAplicacion = False
                        logCancelarRegistro = False
                        logEditarRegistro = False
                        logNuevoRegistro = False
                        HabilitarEncabezado = False
                        HabilitarFecha = False

                        HabilitarNegocio = False

                        If _TesoreriaOrdenesPlusCE_Selected.ValorEstado <> GSTR_FUTURA_Plus Then
                            If logReglaDUAl Then
                                If _TesoreriaOrdenesPlusCE_Selected.ValorEstado <> GSTR_PENDIENTEAPROBACION_Plus Then
                                    _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTEAPROBACION_Plus
                                End If
                            Else
                                If String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.ValorEstado) Then
                                    _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTE_Plus
                                End If
                            End If
                        End If

                        If intIDOrdenNueva <> 0 And Not IsNothing(intIDOrdenNueva) Then
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusCheques) Then
                                If dcProxy.TesoreriaOyDPlusCheques.Count > 0 Then
                                    For Each li In dcProxy.TesoreriaOyDPlusCheques
                                        li.lngIDTesoreriaEncabezado = intIDOrdenNueva
                                    Next
                                End If
                            End If
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusTransferencias) Then
                                If dcProxy.TesoreriaOyDPlusTransferencias.Count > 0 Then
                                    For Each li In dcProxy.TesoreriaOyDPlusTransferencias
                                        li.lngIDTesoreriaEncabezado = intIDOrdenNueva
                                    Next
                                End If
                            End If
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusCarterasColectivas) Then
                                If dcProxy.TesoreriaOyDPlusCarterasColectivas.Count > 0 Then
                                    For Each li In dcProxy.TesoreriaOyDPlusCarterasColectivas
                                        li.lngIDTesoreriaEncabezado = intIDOrdenNueva
                                    Next
                                End If
                            End If
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusOYDs) Then
                                If dcProxy.TesoreriaOyDPlusOYDs.Count > 0 Then
                                    For Each li In dcProxy.TesoreriaOyDPlusOYDs
                                        li.lngIDTesoreriaEncabezado = intIDOrdenNueva
                                    Next
                                End If
                            End If
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusInternos) Then
                                If dcProxy.TesoreriaOyDPlusInternos.Count > 0 Then
                                    For Each li In dcProxy.TesoreriaOyDPlusInternos
                                        li.lngIDTesoreriaEncabezado = intIDOrdenNueva
                                    Next
                                End If
                            End If
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusBloqueos) Then
                                If dcProxy.TesoreriaOyDPlusBloqueos.Count > 0 Then
                                    For Each li In dcProxy.TesoreriaOyDPlusBloqueos
                                        li.lngIDTesoreriaEncabezado = intIDOrdenNueva
                                    Next
                                End If
                            End If
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusOperacionesEspeciales) Then
                                If dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Count > 0 Then
                                    For Each li In dcProxy.TesoreriaOyDPlusOperacionesEspeciales
                                        li.lngIDTesoreriaEncabezado = intIDOrdenNueva
                                    Next
                                End If
                            End If
                        End If
                        'JFSB20180516 Se toma el id del documento creado para después usarlo para cargar el documento
                        Dim logContinuarGuardadoOrden As Boolean = True
                        pintIDOrdenNueva = intIDOrdenNueva
                        pstrMensajeExitoso = strMensajeExitoso

                        If logXTesorero = False Then

                            If _TesoreriaOrdenesPlusCE_Selected.lngID = 0 Then
                                intIDOrdenTesoreria = 0
                                strEstadoGuardar = "TERMINOGUARDARNUEVO"
                            Else
                                intIDOrdenTesoreria = _TesoreriaOrdenesPlusCE_Selected.lngID
                                strEstadoGuardar = "TERMINOGUARDAREDITAR"
                            End If

                            If Not String.IsNullOrEmpty(mstrArchivo) Then
                                logContinuarGuardadoOrden = False
                                SubirArchivoDocumentos()
                            End If
                        Else
                            If Not String.IsNullOrEmpty(mstrArchivo) Then
                                logContinuarGuardadoOrden = False
                                SubirArchivoDocumentos()
                            End If
                        End If

                        If logContinuarGuardadoOrden Then
                            ContinuarGuardadoOrden()
                        End If

                    ElseIf logError Then
                        If Not String.IsNullOrEmpty(strMensajeRetornoHtml) Then
                            logEsHtml = True
                            strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", strMensajeRetornoHtml)
                        Else
                            logEsHtml = False
                            strMensajeDetallesHtml = String.Empty
                        End If
                        dcProxy.RejectChanges()
                        strMensajeError = String.Format("La orden no fue posible actualizarla: {0}{1}", vbCrLf, strMensajeError)
                        strMensajeError = Replace(strMensajeError, "-", String.Format("{0}", vbCrLf))
                        mostrarMensaje(strMensajeError, "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Advertencia, String.Empty, "Reglas incumplidas en los detalles de las ordenes de Pago", logEsHtml, strMensajeDetallesHtml)
                        IsBusy = False
                        If logXTesorero Then
                            If Not IsNothing(objViewModelTesorero) Then
                                objViewModelTesorero.IsBusy = False
                            End If

                            IsBusyEdicionTesorero = False
                        End If
                    Else
                        If logRequiereConfirmacion Then
                            CantidadConfirmaciones = 0
                        End If

                        If logRequiereJustificacion Then
                            CantidadJustificaciones = 0
                            cantidadTotalJustificacion = ListaResultadoValidacion.Where(Function(i) i.RequiereJustificacion = True).Count
                        End If

                        If logRequiereAprobacion Then
                            CantidadAprobaciones = 0
                            CantidadTotalAprobaciones = ListaResultadoValidacion.Where(Function(i) i.RequiereAprobacion = True).Count
                        End If

                        If logRequiereConfirmacion Then
                            Dim MensajeConfirmacion As String = String.Empty

                            If ListaResultadoValidacion.Where(Function(i) i.RequiereConfirmacion = True).Count > 0 Then
                                cantidadTotalConfirmacion = 1
                            End If

                            strMensajeRetornoHtml = String.Empty

                            For Each li In ListaResultadoValidacion.Where(Function(i) i.RequiereConfirmacion = True).ToList
                                If String.IsNullOrEmpty(Confirmaciones) Then
                                    Confirmaciones = String.Format("'{0}'", li.Confirmacion)
                                    ConfirmacionesUsuario = String.Format("'{0}'**'{1}'**'{2}'", li.NombreRegla, li.Regla, li.Mensaje)
                                    MensajeConfirmacion = String.Format("{0}", li.Mensaje)
                                Else
                                    Confirmaciones = String.Format("{0}|'{1}'", Confirmaciones, li.Confirmacion)
                                    ConfirmacionesUsuario = String.Format("{0}|'{1}'**'{2}'**'{3}'", ConfirmacionesUsuario, li.NombreRegla, li.Regla, li.Mensaje)
                                    MensajeConfirmacion = String.Format("{0}{2}{1}", MensajeConfirmacion, vbCrLf, li.Mensaje)
                                End If

                                strMensajeRetornoHtml = String.Format("{0}{1}", strMensajeRetornoHtml, li.DetalleRegla)
                            Next

                            If Not String.IsNullOrEmpty(strMensajeRetornoHtml) Then
                                logEsHtml = True
                                strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", strMensajeRetornoHtml)
                            Else
                                logEsHtml = False
                                strMensajeDetallesHtml = String.Empty
                            End If

                            mostrarMensajePregunta(MensajeConfirmacion,
                                                   Program.TituloSistema,
                                                   "PREGUNTARCONFIRMACION",
                                                   AddressOf TerminoPreguntarConfirmacion,
                                                   True,
                                                   "¿Desea continuar?",
                                                   False,
                                                   False,
                                                   True,
                                                   True,
                                                   Confirmaciones,
                                                   String.Empty,
                                                   String.Empty,
                                                   Nothing,
                                                   "Reglas incumplidas en los detalles de las ordenes de Pago",
                                                   logEsHtml,
                                                   strMensajeDetallesHtml)
                        End If

                        If logRequiereJustificacion Then
                            Dim ListaJustificacion As New List(Of A2Utilidades.CausasJustificacionMensajePregunta)

                            For Each li In ListaResultadoValidacion.Where(Function(i) i.RequiereJustificacion = True).ToList
                                ListaJustificacion.Clear()

                                If Not String.IsNullOrEmpty(li.CausasJustificacion) Then
                                    For Each item In li.CausasJustificacion.Split("|")
                                        ListaJustificacion.Add(New A2Utilidades.CausasJustificacionMensajePregunta With {.ID = item,
                                                                                                                         .Descripcion = item})
                                    Next
                                End If

                                If Not String.IsNullOrEmpty(li.DetalleRegla) Then
                                    logEsHtml = True
                                    strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", li.DetalleRegla)
                                Else
                                    logEsHtml = False
                                    strMensajeDetallesHtml = String.Empty
                                End If

                                mostrarMensajePregunta(li.Mensaje,
                                                        Program.TituloSistema,
                                                        "PREGUNTARJUSTIFICACION",
                                                        AddressOf TerminoPreguntarJustificacion,
                                                        True,
                                                        "¿Desea continuar?",
                                                        IIf(ListaJustificacion.Count > 0, True, False),
                                                        True,
                                                        IIf(ListaJustificacion.Count > 0, False, True),
                                                        IIf(ListaJustificacion.Count = 0, False, True),
                                                        li.Confirmacion,
                                                        li.Regla,
                                                        li.NombreRegla,
                                                        IIf(ListaJustificacion.Count > 0, ListaJustificacion, Nothing),
                                                        "Reglas incumplidas en los detalles de las ordenes de Pago",
                                                        logEsHtml,
                                                        strMensajeDetallesHtml)
                                Exit For
                            Next
                        End If

                        If logRequiereAprobacion Then
                            Dim ListaJustificacion As New List(Of A2Utilidades.CausasJustificacionMensajePregunta)
                            strMensajeRetornoHtml = String.Empty

                            For Each li In ListaResultadoValidacion.Where(Function(i) i.RequiereAprobacion = True).ToList
                                ListaJustificacion.Clear()

                                If Not String.IsNullOrEmpty(li.CausasJustificacion) Then
                                    For Each item In li.CausasJustificacion.Split("|")
                                        ListaJustificacion.Add(New A2Utilidades.CausasJustificacionMensajePregunta With {.ID = item,
                                                                                                                         .Descripcion = item})
                                    Next
                                End If

                                If Not String.IsNullOrEmpty(li.DetalleRegla) Then
                                    logEsHtml = True
                                    strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", li.DetalleRegla)
                                Else
                                    logEsHtml = False
                                    strMensajeDetallesHtml = String.Empty
                                End If

                                mostrarMensajePregunta(li.Mensaje,
                                                       Program.TituloSistema,
                                                       "PREGUNTARAPROBACION",
                                                       AddressOf TerminoPreguntarAprobacion,
                                                       True,
                                                       "¿Desea continuar?",
                                                       IIf(ListaJustificacion.Count > 0, True, False),
                                                       True,
                                                       IIf(ListaJustificacion.Count > 0, False, True),
                                                       IIf(ListaJustificacion.Count = 0, False, True),
                                                       li.Confirmacion,
                                                       li.Regla,
                                                       li.NombreRegla,
                                                       IIf(ListaJustificacion.Count > 0, ListaJustificacion, Nothing),
                                                       "Reglas incumplidas en los detalles de las ordenes de Pago",
                                                       logEsHtml,
                                                       strMensajeDetallesHtml)
                                Exit For
                            Next
                        End If
                    End If
                End If
            Else
                IsBusy = False
                IsBusyEdicionTesorero = False
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de las validación.", Me.ToString(), "TerminoValidarIngresoOrden", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyEdicionTesorero = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de las validación.", Me.ToString(), "TerminoValidarIngresoOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub ContinuarGuardadoOrden()
        Try
            Program.VerificarCambiosProxyServidor(dcProxy)
            dcProxy2.SubmitChanges(AddressOf TerminoSubmitChanges, String.Empty)
            VerInstrucciones = Visibility.Visible
            IsBusy = False

            IsBusyEdicionTesorero = False
            If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA And pintIDOrdenNueva <> 0 Then
                AbrirProgramacionOrden(pintIDOrdenNueva)
            Else
                If _TesoreriaOrdenesPlusCE_Selected.ValorEstado <> GSTR_FUTURA_Plus Then
                    pstrMensajeExitoso = pstrMensajeExitoso.Replace("++", String.Format("{0}      -> ", vbCrLf))
                    pstrMensajeExitoso = pstrMensajeExitoso.Replace("*|", String.Format("{0}      -> ", vbCrLf))
                    pstrMensajeExitoso = pstrMensajeExitoso.Replace("|", String.Format("{0}   -> ", vbCrLf))

                    If logXTesorero Then 'Mensaje de notificacion de actualizacion de detalle en ordenes de giro
                        If Not IsNothing(objViewModelTesorero) Then
                            objViewModelTesorero.IsBusy = False
                        End If

                        mostrarMensaje("El Registro ha sido actualizado correctamente", "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Exito)
                    Else
                        mostrarMensaje(pstrMensajeExitoso, "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Exito)
                    End If
                Else
                    mostrarMensaje("La orden se creo correctamente.", "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Exito)
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al finalizar el guardado de la orden.", Me.ToString(), "ContinuarGuardadoOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Sub TerminoTraerDireccionesCliente(lo As LoadOperation(Of OyDPLUSTesoreria.TempDireccionesClientes))
        Try
            If lo.HasError = False Then
                If dcProxy.TempDireccionesClientes.Count > 0 Then
                    ListaDireccionesClientes = dcProxy.TempDireccionesClientes.ToList
                Else
                    ListaDireccionesClientes = Nothing
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Direcciones Clientes",
                                                 Me.ToString(), "TerminoTraerDireccionesCliente", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If
            IsBusy = False
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Direcciones Clientes",
                                                             Me.ToString(), "TerminoTraerDireccionesCliente", Application.Current.ToString(), Program.Maquina, ex)
        End Try


    End Sub

    Sub TerminoTraerCuentasCliente(lo As LoadOperation(Of OyDPLUSTesoreria.TempCuentasClientes))
        Try
            If lo.HasError = False Then
                If dcProxy.TempCuentasClientes.Count > 0 Then
                    ListaCuentasClientes = dcProxy.TempCuentasClientes.ToList
                Else
                    ListaCuentasClientes = Nothing
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Cuentas Clientes",
                                                 Me.ToString(), "TerminoTraerCuentasCliente", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If
            IsBusy = False
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Cuentas Clientes",
                                                             Me.ToString(), "TerminoTraerCuentasCliente", Application.Current.ToString(), Program.Maquina, ex)
        End Try


    End Sub

    Private Sub TerminoConsultarReceptoresUsuario(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblReceptoresUsuario))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    ListaReceptoresUsuario = lo.Entities.ToList
                    If lo.UserState <> "INICIO" And lo.UserState <> "EDITAR" Then
                        If logEditarRegistro Or logNuevoRegistro Then
                            ObtenerValoresDefectoOYDPLUS("RECEPTOR")
                        End If
                    ElseIf lo.UserState = "EDITAR" Then
                        CargarCombosOYDPLUS(TesoreriaOrdenesPlusAnterior.strCodigoReceptor, lo.UserState)
                    ElseIf lo.UserState = "INICIO" Then
                        CargarParametrosReceptorOYDPLUS(String.Empty, "INICIO")
                    End If
                Else
                    If logNuevoRegistro Or logEditarRegistro Then
                        CancelarEditarRegistro()
                        mostrarMensaje("No hay ningun receptor configurado para el Usuario Actual Logueado.", "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Editando = False
                        'HabilitarNegocio = False
                    End If
                    IsBusy = False
                    'If lo.UserState = "INICIO" Then
                    '    A2Utilidades.Mensajes.mostrarMensaje("No hay ningun receptor configurado para el usuario.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    '    Editando = False
                    '    'HabilitarNegocio = False
                    '    IsBusy = False
                    'End If
                End If
            Else
                If logNuevoRegistro Or logEditarRegistro Then
                    A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los receptores del usuario.", Me.ToString(), "TerminoConsultarReceptoresUsuario", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                    'HabilitarNegocio = False
                End If
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los receptores del usuario.", Me.ToString(), "TerminoConsultarReceptoresUsuario", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoValidarEstadoTesoreriaDetalle(ByVal lo As LoadOperation(Of TempValidarEstadoOrden))
        Try
            If Not lo.HasError Then
                If lo.Entities.Count > 0 Then
                    For Each li In lo.Entities
                        If li.logExitoso Then
                            Select Case lo.UserState
                                Case GSTR_CHEQUE
                                    If ObjetoEditarCheque() Then
                                        OrdenPago_Cheque_LevantarModal(False)
                                    Else
                                        mostrarMensaje("No se puede editar verifique que el registro tenga un estado válido en el que se pueda Editar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                    End If

                                Case GSTR_TRANSFERENCIA
                                    If ObjetoEditarTransferencia() Then
                                        OrdenPago_Transferencia_LevantarModal(False)
                                    Else
                                        mostrarMensaje("No se puede editar verifique que el registro tenga un estado válido en el que se pueda Editar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                    End If

                                Case GSTR_INTERNOS
                                    If ObjetoEditarInternos() Then
                                        OrdenPago_Internos_LevantarModal(False)
                                    Else
                                        mostrarMensaje("No se puede editar verifique que el registro tenga un estado válido en el que se pueda Editar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                    End If
                                Case GSTR_CARTERASCOLECTIVAS
                                    If ObjetoEditarCarteras() Then
                                        OrdenPago_CarteraColectiva_LevantarModal(False)
                                    Else
                                        mostrarMensaje("No se puede editar verifique que el registro tenga un estado válido en el que se pueda Editar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                                    End If
                                Case GSTR_TRASLADOFONDOS
                                    If ObjetoEditarTrasladoFondos() Then
                                        OrdenPago_TrasladoFondos_LevantarModal(False)
                                    Else
                                        mostrarMensaje("No se puede editar verifique que el registro tenga un estado válido en el que se pueda Editar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                                    End If
                                Case GSTR_OYD
                                    If ObjetoEditarOYD() Then
                                        OrdenPago_OYD_LevantarModal(False)
                                    Else
                                        mostrarMensaje("No se puede editar verifique que el registro tenga un estado válido en el que se pueda Editar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                                    End If
                                Case GSTR_OPERACIONES_ESPECIALES
                                    If ObjetoEditarOperacionesEspeciales() Then
                                        OrdenPago_OperacionesEspeciales_LevantarModal(False)
                                    Else
                                        mostrarMensaje("No se puede editar verifique que el registro tenga un estado válido en el que se pueda Editar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                                    End If
                                Case GSTR_BLOQUEO_RECURSOS
                                    If ObjetoEditarBloqueo() Then
                                        OrdenPago_BloqueoRecursos_LevantarModal(False)
                                    Else
                                        mostrarMensaje("No se puede editar verifique que el registro tenga un estado válido en el que se pueda Editar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                                    End If
                            End Select

                        Else
                            mostrarMensaje(li.strMensajeValidacion, Application.Current.ToString, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If
                    Next


                End If

            Else
                A2Utilidades.Mensajes.mostrarMensaje("La Orden de Tesoreria no se puede modificar.", "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al Validar el estado del detalle de la Orden de Tesoreria.", Me.ToString(), "TerminoValidarEstadoTesoreria", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoValidarEstadoTesoreria(ByVal lo As LoadOperation(Of TempValidarEstadoOrden))
        Try
            If Not lo.HasError Then
                If lo.Entities.Count > 0 Then
                    For Each li In lo.Entities
                        If li.logExitoso Then
                            IsBusy = False

                            ObtenerValoresOrdenAnterior(TesoreriaOrdenesPlusCE_Selected, TesoreriaOrdenesPlusAnterior)

                            HabilitarFechaAplicacion = False
                            Habilitar_Encabezado()
                            HabilitarEdicionEncabezado = False
                            HabilitarEncabezado = False
                            HabilitarFecha = False

                            HabilitarEnEdicion = True
                            HabilitarInstrucciones = True
                            HabilitarTipoProducto = False
                            If HabilitarBuscadorCliente Then
                                HabilitarBuscadorCliente = False
                            End If
                            VerInstrucciones = Visibility.Visible

                            HabilitarReceptor = False
                            logHayEncabezado = True
                            logCancelarRegistro = False
                            logEditarRegistro = True
                            logNuevoRegistro = False
                            logDuplicarRegistro = False
                            logBuscar = False
                            LimpiarVariablesSubirDocumentos(True)
                            VerInstrucciones = Visibility.Visible
                            dblValorOrdenAntesModificar = _TesoreriaOrdenesPlusCE_Selected.curValor

                            Editando = True

                            ValidarHabilitarValorDetalles()

                            consultarCombosEspecificosFondo(_TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, "ORDENGIROFONDOS")
                            VerificarHabilitarFondos()
                            consultarOrdenantesOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, "EDITAR")
                            CargarReceptoresUsuarioOYDPLUS("EDITAR")
                            CambiarColorFondoTextoBuscador()

                            If logEsFondosOYD = False Then
                                If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                                    If log_Cancelacion_SoloPermitirValorEnCero Then
                                        HabilitarValorEnDetalle = False
                                    Else
                                        HabilitarValorEnDetalle = True
                                    End If
                                Else
                                    HabilitarValorEnDetalle = True
                                End If
                            Else
                                HabilitarValorEnDetalle = False
                            End If

                        Else
                            IsBusy = False
                            MyBase.RetornarValorEdicionNavegacion()
                            Editando = False
                            mostrarMensaje(li.strMensajeValidacion, Application.Current.ToString, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If
                    Next
                Else
                    MyBase.RetornarValorEdicionNavegacion()
                    mostrarMensaje("La orden no se puede editar, puede que la orden haya cambiado de estado. Por favor refresque la lista.", Application.Current.ToString, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    IsBusy = False
                End If
            Else
                MyBase.RetornarValorEdicionNavegacion()
                IsBusy = False
                A2Utilidades.Mensajes.mostrarMensaje("La Orden de Tesoreria no se puede modificar.", "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al Validar el estado de la Orden de Tesoreria.", Me.ToString(), "TerminoValidarEstadoTesoreria", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoConsultarParametrosReceptor(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblParametrosReceptor))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    ListaParametrosReceptor = lo.Entities.ToList
                Else
                    ListaParametrosReceptor = Nothing
                End If
                'CargarCombosOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor, "RECEPTOR")
                If lo.UserState = "INICIO" Then
                    CargarCombosOYDPLUS(String.Empty, String.Empty)
                ElseIf logNuevoRegistro Or logEditarRegistro Or logXTesorero Then
                    ObtenerValoresCombos(False)

                    If lo.UserState = "EDITAR" Then

                        LlamarDetalle()
                        Instrucciones()

                        If Not IsNothing(dcProxy.TempCuentasClientes) Then
                            dcProxy.TempCuentasClientes.Clear()
                        End If
                        If Not IsNothing(dcProxy.TempDireccionesClientes) Then
                            dcProxy.TempDireccionesClientes.Clear()
                        End If

                        dcProxy.Load(dcProxy.OyDPlusListarDireccionesClientesQuery(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerDireccionesCliente, "")
                        dcProxy.Load(dcProxy.OyDPlusListarCuentasClientesQuery(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerCuentasCliente, "")

                        ObtenerValoresOrdenAnterior(TesoreriaOrdenesPlusAnterior, TesoreriaOrdenesPlusCE_Selected)

                        _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTE_Plus
                        _TesoreriaOrdenesPlusCE_Selected.strEstado = "Pendiente"

                        ValidarHabilitarValorDetalles()
                    End If
                Else
                    ObtenerValoresCombos(True)
                End If

            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los parametros del receptor.", Me.ToString(), "TerminoConsultarParametrosReceptor", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los parametros del receptor.", Me.ToString(), "TerminoConsultarParametrosReceptor", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoConsultarCombosOYD(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.CombosReceptor))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    IsBusyReceptor = False
                    Dim strNombreCategoria As String = String.Empty
                    Dim objListaNodosCategoria As List(Of OYDPLUSUtilidades.CombosReceptor) = Nothing
                    Dim objDiccionario As New Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))

                    Dim listaCategorias = From lc In lo.Entities Select lc.Categoria Distinct

                    For Each li In listaCategorias
                        strNombreCategoria = li
                        objListaNodosCategoria = (From ln In lo.Entities Where ln.Categoria = strNombreCategoria).ToList
                        objDiccionario.Add(strNombreCategoria, objListaNodosCategoria)
                    Next

                    If Not IsNothing(DiccionarioCombosOYDPlus) Then
                        DiccionarioCombosOYDPlus.Clear()
                    End If

                    DiccionarioCombosOYDPlus = Nothing
                    DiccionarioCombosOYDPlus = objDiccionario

                    If lo.UserState = "CANCELARREGISTRO" Then
                        If Not IsNothing(TesoreriaOrdenesPlusAnterior) Then
                            'TesoreriaOrdenesPlusCE_Selected = TesoreriaOrdenesPlusAnterior
                        End If
                    Else
                        If logNuevoRegistro Then
                            CargarParametrosReceptorOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor, lo.UserState)
                        ElseIf logEditarRegistro Then
                            'HabilitarNegocio = False
                            CargarParametrosReceptorOYDPLUS(TesoreriaOrdenesPlusAnterior.strCodigoReceptor, lo.UserState)
                        Else
                            ObtenerValoresCombos(True)
                        End If
                    End If

                Else
                    A2Utilidades.Mensajes.mostrarMensaje("Señor Usuario, usted no tiene receptores asociados.", "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    IsBusyReceptor = False
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener la lista de Combos de la aplicación.", Me.ToString(), "TerminoConsultarCombosOYD", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusyReceptor = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener la lista de Combos de la aplicación.", Me.ToString(), "TerminoConsultarCombosOYD", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusyReceptor = False
        End Try
        IsBusyReceptor = False
    End Sub

    Private Sub TerminoConsultarCombosOYDCompleta(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.CombosReceptor))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    IsBusyReceptor = False
                    Dim strNombreCategoria As String = String.Empty
                    Dim objListaNodosCategoria As List(Of OYDPLUSUtilidades.CombosReceptor) = Nothing
                    Dim objDiccionarioCompleto As New Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))

                    Dim listaCategorias = From lc In lo.Entities Select lc.Categoria Distinct

                    For Each li In listaCategorias
                        strNombreCategoria = li
                        objListaNodosCategoria = (From ln In lo.Entities Where ln.Categoria = strNombreCategoria).ToList
                        objDiccionarioCompleto.Add(strNombreCategoria, objListaNodosCategoria)
                    Next

                    If Not IsNothing(DiccionarioCombosOYDPlus) Then
                        DiccionarioCombosOYDPlus.Clear()
                    End If

                    DiccionarioCombosOYDPlusCompleta = Nothing
                    DiccionarioCombosOYDPlusCompleta = objDiccionarioCompleto

                    ObtenerValoresCombos(True)

                    If logXTesorero Then
                        logRecargarPantalla = False
                        If logEsOrdenPorAprobarPupup Then
                            VistaSeleccionada = GSTR_POR_APROBAR
                        Else
                            VistaSeleccionada = GSTR_PENDIENTES
                        End If
                        logRecargarPantalla = True
                        FiltroVM = Me.IdEncabezadoXTesorero.ToString
                        Filtrar()
                    Else
                        'Inicia el timer cuando se cargue la pantalla
                        VistaSeleccionada = GSTR_PENDIENTES
                        ReiniciaTimer()
                    End If
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener la lista de Combos de la aplicación.", Me.ToString(), "TerminoConsultarCombosOYD", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusyReceptor = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener la lista de Combos de la aplicación.", Me.ToString(), "TerminoConsultarCombosOYD", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusyReceptor = False
        End Try
        IsBusyReceptor = False
    End Sub

    Sub TerminoTraerTesoreriaOrdenes(ByVal lo As LoadOperation(Of TesoreriaOrdenesEncabezado))
        Try
            If Not lo.HasError Then
                If logXTesorero = False Then
                    If dcProxy.TesoreriaOrdenesEncabezados.Count > 0 Then
                        ListaTesoreriaOrdenesPlusCE = dcProxy.TesoreriaOrdenesEncabezados.ToList

                        If lo.UserState = "TERMINOGUARDAREDITAR" Then
                            If ListaTesoreriaOrdenesPlusCE.Where(Function(i) i.lngID = intIDOrdenTesoreria).Count > 0 Then
                                TesoreriaOrdenesPlusCE_Selected = ListaTesoreriaOrdenesPlusCE.Where(Function(i) i.lngID = intIDOrdenTesoreria).First
                                intIDOrdenTimer = TesoreriaOrdenesPlusCE_Selected.lngID
                                HabilitarConsultarSaldo()
                            End If
                        ElseIf lo.UserState = "TERMINOGUARDARNUEVO" Then
                            TesoreriaOrdenesPlusCE_Selected = ListaTesoreriaOrdenesPlusCE.FirstOrDefault
                            intIDOrdenTimer = TesoreriaOrdenesPlusCE_Selected.lngID
                            HabilitarConsultarSaldo()
                        ElseIf lo.UserState = "REFRESCARPANTALLA" Then
                            If ListaTesoreriaOrdenesPlusCE.Where(Function(i) i.lngID = intIDOrdenTimer).Count > 0 Then
                                TesoreriaOrdenesPlusCE_Selected = ListaTesoreriaOrdenesPlusCE.Where(Function(i) i.lngID = intIDOrdenTimer).First
                                HabilitarConsultarSaldo()
                            End If
                        Else
                            'TesoreriaOrdenesPlusCE_Selected = ListaTesoreriaOrdenesPlusCE.LastOrDefault

                        End If
                        BuscarControlValidacion(ComprobantesEgresoPLUSView, TabItemActual)
                        ReiniciaTimer()
                        IsBusy = False
                    Else
                        IsBusy = False
                        ListaTesoreriaOrdenesPlusCE = Nothing
                        'mostrarMensaje("No se encontro ningún registro", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                End If
            Else
                IsBusy = False
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria Plus",
                                                 Me.ToString(), "TerminoTraerTesoreriaOrdenes", Application.Current.ToString(), Program.Maquina, lo.Error)

            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria Plus",
                                                             Me.ToString(), "TerminoTraerTesoreriaOrdenes", Application.Current.ToString(), Program.Maquina, ex)
        End Try

        logRecargarPantalla = True
    End Sub

    Sub TerminoTraerTesoreriaOrdenesConsultar(ByVal lo As LoadOperation(Of TesoreriaOrdenesEncabezado))
        Try
            logBuscar = False
            If Not lo.HasError Then
                If dcProxy.TesoreriaOrdenesEncabezados.Count > 0 Then
                    ListaTesoreriaOrdenesPlusCE = Nothing
                    ListaTesoreriaOrdenesPlusCE = dcProxy.TesoreriaOrdenesEncabezados.ToList
                    If logXTesorero Then
                        If ListaTesoreriaOrdenesPlusCE.Where(Function(i) i.lngID = IdEncabezadoXTesorero).Count = 0 Then
                            mostrarMensaje("Puede que la orden que está intentado visualizar se ha actualizado de estado. Por favor refresque la pantalla del tesorero y verifique.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If

                        CambiarAForma()
                    Else
                        IsBusy = False
                    End If
                Else
                    ListaTesoreriaOrdenesPlusCE = Nothing
                    TesoreriaOrdenesPlusCE_Selected = Nothing
                    mostrarMensaje("No se encontro ningún registro", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    IsBusy = False
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Tesoreria Ordenes Plus",
                                                 Me.ToString(), "TerminoTraerTesoreriaOrdenes", Application.Current.ToString(), Program.Maquina, lo.Error)
                lo.MarkErrorAsHandled()   '????
                IsBusy = False
            End If

        Catch ex As Exception
            IsBusy = False
            IsBusyEdicionTesorero = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Tesoreria Ordenes Plus",
                                                             Me.ToString(), "TerminoTraerTesoreriaOrdenes", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Sub TerminoTraerTesoreriaOrdenesDetalleCheques(ByVal lo As LoadOperation(Of TesoreriaOyDPlusCheques))
        Try
            If Not lo.HasError Then
                If dcProxy.TesoreriaOyDPlusCheques.Count > 0 Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Cheques = dcProxy.TesoreriaOyDPlusCheques.ToList
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If dcProxy.TesoreriaOyDPlusCheques.First.lngIDTesoreriaEncabezado <> _TesoreriaOrdenesPlusCE_Selected.lngID Then
                            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                                ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Clear()
                            End If
                        End If
                    Else
                        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                            ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Clear()
                        End If
                    End If

                    If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                        TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.First
                    Else
                        TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected = Nothing
                    End If
                End If

                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    If lo.UserState = "CAMBIOSELECTED" Then
                        If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                            dcProxy.Load(dcProxy.TesoreriaOrdenesDetalleListar_OperacionesEspecialesQuery(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesDetalleOperacionesEspeciales, lo.UserState)
                        Else
                            dcProxy.Load(dcProxy.TesoreriaOrdenesDetalleListar_BloqueosQuery(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesDetalleBloqueos, lo.UserState)
                        End If

                        CalcularTotales(GSTR_CHEQUE)
                        Instrucciones()
                    End If
                End If

                IsBusy = False
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria Detalle Plus Cheques",
                                                 Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleCheques", Application.Current.ToString(), Program.Maquina, lo.Error)
                IsBusy = False
                IsBusyDetalles = False
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyDetalles = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria Detalle Plus Cheques",
                                                             Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleCheques", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Sub TerminoTraerTesoreriaOrdenesDetalleTransferencias(ByVal lo As LoadOperation(Of TesoreriaOyDPlusTransferencia))
        Try
            If Not lo.HasError Then
                If dcProxy.TesoreriaOyDPlusTransferencias.Count > 0 Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias = dcProxy.TesoreriaOyDPlusTransferencias.ToList
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If dcProxy.TesoreriaOyDPlusTransferencias.First.lngIDTesoreriaEncabezado <> _TesoreriaOrdenesPlusCE_Selected.lngID Then
                            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                                ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Clear()
                            End If
                        End If
                    Else
                        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                            ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Clear()
                        End If
                    End If

                    If ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > 0 Then
                        TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.First
                    Else
                        TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = Nothing
                    End If
                End If

                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    If lo.UserState = "CAMBIOSELECTED" Then
                        If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                            dcProxy.Load(dcProxy.TesoreriaOrdenesDetalleListar_OYDQuery(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesDetalleOYD, lo.UserState)
                        Else
                            dcProxy.Load(dcProxy.TesoreriaOrdenesDetalleListar_CarterasColectivasQuery(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesDetalleCarterasColectivas, lo.UserState)
                        End If
                    End If
                End If

                CalcularTotales(GSTR_TRANSFERENCIA)
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria Detalle Plus Transferencias",
                                                 Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleTransferencias", Application.Current.ToString(), Program.Maquina, lo.Error)
                lo.MarkErrorAsHandled()   '????
                IsBusy = False
                IsBusyDetalles = False
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyDetalles = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria  Detalle Plus Transferencias",
                                                             Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleTransferencias", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Sub TerminoTraerTesoreriaOrdenesDetalleCarterasColectivas(ByVal lo As LoadOperation(Of TesoreriaOyDPlusCarterasColectivas))
        Try
            If Not lo.HasError Then
                If dcProxy.TesoreriaOyDPlusCarterasColectivas.Count > 0 Then
                    If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                        ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = dcProxy.TesoreriaOyDPlusCarterasColectivas.ToList

                        If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                            If dcProxy.TesoreriaOyDPlusCarterasColectivas.First.lngIDTesoreriaEncabezado <> _TesoreriaOrdenesPlusCE_Selected.lngID Then
                                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                                    ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Clear()
                                End If
                            End If
                        Else
                            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                                ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Clear()
                            End If
                        End If

                        If ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.First
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = Nothing
                        End If
                    Else
                        ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = dcProxy.TesoreriaOyDPlusCarterasColectivas.ToList

                        If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                            If dcProxy.TesoreriaOyDPlusCarterasColectivas.First.lngIDTesoreriaEncabezado <> _TesoreriaOrdenesPlusCE_Selected.lngID Then
                                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                                    ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Clear()
                                End If
                            End If
                        Else
                            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                                ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Clear()
                            End If
                        End If

                        If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.First
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = Nothing
                        End If
                    End If
                End If

                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    If lo.UserState = "CAMBIOSELECTED" And TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto <> GSTR_FONDOS_TIPOPRODUCTO Then
                        dcProxy.Load(dcProxy.TesoreriaOrdenesDetalleListar_InternosQuery(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesDetalleInternos, lo.UserState)
                    ElseIf lo.UserState = "CAMBIOSELECTED" Then
                        IsBusyDetalles = False
                        IsBusyEdicionTesorero = False

                        If logXTesorero Then
                            If MostrarControlMenuGuardar Then
                                If IdEncabezadoXTesorero = _TesoreriaOrdenesPlusCE_Selected.lngID Then
                                    If Editando = False Then
                                        EditarRegistro()
                                        logLanzarGrabadoRegistro = True
                                    Else
                                        If logLanzarGrabadoRegistro Then
                                            ActualizarRegistro()
                                            logLanzarGrabadoRegistro = False
                                        End If
                                    End If
                                End If
                            End If
                        End If

                    End If
                End If

                If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                    CalcularTotales(GSTR_TRASLADOFONDOS)
                Else
                    CalcularTotales(GSTR_CARTERASCOLECTIVAS)
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria  Detalle Plus Carteras Colectivas",
                                                 Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleCarterasColectivas", Application.Current.ToString(), Program.Maquina, lo.Error)
                IsBusy = False
                IsBusyDetalles = False
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyDetalles = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria   Detalle Plus Carteras Colectivas",
                                                             Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleCarterasColectivas", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Sub TerminoTraerTesoreriaOrdenesDetalleOYD(ByVal lo As LoadOperation(Of TesoreriaOyDPlusOYD))
        Try
            If Not lo.HasError Then
                If dcProxy.TesoreriaOyDPlusOYDs.Count > 0 Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_OYD = dcProxy.TesoreriaOyDPlusOYDs.ToList
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If dcProxy.TesoreriaOyDPlusOYDs.First.lngIDTesoreriaEncabezado <> _TesoreriaOrdenesPlusCE_Selected.lngID Then
                            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                                ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Clear()
                            End If
                        End If
                    Else
                        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                            ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Clear()
                        End If
                    End If

                    If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > 0 Then
                        TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_OYD.First
                    Else
                        TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = Nothing
                    End If
                End If

                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    If lo.UserState = "CAMBIOSELECTED" Then
                        dcProxy.Load(dcProxy.TesoreriaOrdenesDetalleListar_InternosQuery(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesDetalleInternos, lo.UserState)
                    End If
                End If

                CalcularTotales(GSTR_OYD)
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria  Detalle Plus OYD",
                                                 Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleOYD", Application.Current.ToString(), Program.Maquina, lo.Error)
                IsBusy = False
                IsBusyDetalles = False
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyDetalles = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria   Detalle Plus OYD",
                                                             Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleOYD", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Sub TerminoTraerTesoreriaOrdenesDetalleBloqueos(ByVal lo As LoadOperation(Of TesoreriaOyDPlusBloqueos))
        Try
            If Not lo.HasError Then
                If dcProxy.TesoreriaOyDPlusBloqueos.Count > 0 Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos = dcProxy.TesoreriaOyDPlusBloqueos.ToList
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If dcProxy.TesoreriaOyDPlusBloqueos.First.lngIDTesoreriaEncabezado <> _TesoreriaOrdenesPlusCE_Selected.lngID Then
                            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                                ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Clear()
                            End If
                        End If
                    Else
                        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                            ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Clear()
                        End If
                    End If

                    If ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count > 0 Then
                        TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.First
                    Else
                        TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = Nothing
                    End If
                End If

                If lo.UserState = "CAMBIOSELECTED" Then
                    IsBusyDetalles = False
                End If

                IsBusy = False
                IsBusyEdicionTesorero = False

                CalcularTotales(GSTR_BLOQUEO_RECURSOS)
                If BorrarCliente Then
                    BorrarCliente = False
                End If
                BorrarCliente = True

                OrganizarDetallesRechazados()

                If logXTesorero Then
                    If MostrarControlMenuGuardar Then
                        If IdEncabezadoXTesorero = _TesoreriaOrdenesPlusCE_Selected.lngID Then
                            If Editando = False Then
                                EditarRegistro()
                                logLanzarGrabadoRegistro = True
                            Else
                                If logLanzarGrabadoRegistro Then
                                    ActualizarRegistro()
                                    logLanzarGrabadoRegistro = False
                                End If
                            End If
                        End If
                    End If
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria  Detalle Plus Bloqueos",
                                                 Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleBloqueos", Application.Current.ToString(), Program.Maquina, lo.Error)
                IsBusy = False
                IsBusyDetalles = False
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyDetalles = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria   Detalle Plus Bloqueos",
                                                             Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleBloqueos", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Sub TerminoTraerTesoreriaOrdenesDetalleOperacionesEspeciales(ByVal lo As LoadOperation(Of TesoreriaOyDPlusOperacionesEspeciales))
        Try
            If Not lo.HasError Then
                If dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Count > 0 Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = dcProxy.TesoreriaOyDPlusOperacionesEspeciales.ToList
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If dcProxy.TesoreriaOyDPlusOperacionesEspeciales.First.lngIDTesoreriaEncabezado <> _TesoreriaOrdenesPlusCE_Selected.lngID Then
                            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                                ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Clear()
                            End If
                        End If
                    Else
                        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                            ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Clear()
                        End If
                    End If

                    If ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count > 0 Then
                        TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.First
                    Else
                        TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = Nothing
                    End If
                End If

                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    If lo.UserState = "CAMBIOSELECTED" Then
                        If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                            dcProxy.Load(dcProxy.TesoreriaOrdenesDetalleListar_CarterasColectivasQuery(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesDetalleCarterasColectivas, lo.UserState)
                        End If
                    End If
                End If
                IsBusy = False

                CalcularTotales(GSTR_OPERACIONES_ESPECIALES)
                If BorrarCliente Then
                    BorrarCliente = False
                End If
                BorrarCliente = True

                OrganizarDetallesRechazados()

            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria  Detalle Plus Bloqueos",
                                                 Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleBloqueos", Application.Current.ToString(), Program.Maquina, lo.Error)
                IsBusy = False
                IsBusyDetalles = False
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyDetalles = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria   Detalle Plus Bloqueos",
                                                             Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleBloqueos", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Sub TerminoTraerTesoreriaOrdenesDetalleInternos(ByVal lo As LoadOperation(Of TesoreriaOyDPlusInternos))
        Try
            If Not lo.HasError Then
                If dcProxy.TesoreriaOyDPlusInternos.Count > 0 Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Internos = dcProxy.TesoreriaOyDPlusInternos.ToList
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If dcProxy.TesoreriaOyDPlusInternos.First.lngIDTesoreriaEncabezado <> _TesoreriaOrdenesPlusCE_Selected.lngID Then
                            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                                ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Clear()
                            End If
                        End If
                    Else
                        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                            ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Clear()
                        End If
                    End If

                    If ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > 0 Then
                        TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Internos.First
                    Else
                        TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = Nothing
                    End If
                End If
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    If lo.UserState = "CAMBIOSELECTED" Then
                        dcProxy.Load(dcProxy.TesoreriaOrdenesDetalleListar_ChequeQuery(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesDetalleCheques, lo.UserState)
                    End If
                End If

                CalcularTotales(GSTR_INTERNOS)
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria  Detalle Plus Internos",
                                                 Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleInternos", Application.Current.ToString(), Program.Maquina, lo.Error)
                IsBusy = False
                IsBusyDetalles = False
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyDetalles = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes Tesoreria  Detalle Plus Internos",
                                                             Me.ToString(), "TerminoTraerTesoreriaOrdenesDetalleInternos", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoEliminarEncabezado(lo As InvokeOperation(Of Integer))
        Try

            If Not lo.HasError Then
                If lo.Value > 0 Then

                    ListaTesoreriaOrdenesPlusCE.Remove(_TesoreriaOrdenesPlusCE_Selected)
                    ListaTesoreriaOrdenesPlusCE = ListaTesoreriaOrdenesPlusCE
                    MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE")
                    IsBusy = False
                    A2Utilidades.Mensajes.mostrarMensaje("El registro se anuló correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)
                Else
                    IsBusy = False

                    If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                        A2Utilidades.Mensajes.mostrarMensaje("El registro no se pudo eliminar, verifique que el estado de la orden de tesoreria y los detalles no esten en un estado donde no se permita eliminar. Tenga en cuenta que sí es una orden de cancelación de fondos y ya se generaron movimientos no se puede eliminar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    Else
                        A2Utilidades.Mensajes.mostrarMensaje("El registro no se pudo eliminar, verifique que el estado de la orden de tesoreria y los detalles no esten en un estado donde no se permita eliminar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                End If
            Else
                IsBusy = False
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un error al Eliminar registro",
                                            Me.ToString(), "TerminoEliminarEncabezado", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If



            IsBusy = False
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la Eliminación de la lista de Ordenes Tesoreria Plus ",
                                                             Me.ToString(), "TerminoEliminarEncabezado", Application.Current.ToString(), Program.Maquina, ex)
        End Try

    End Sub

    Private Sub TerminoVerificarBorrarEncabezado(lo As InvokeOperation(Of String))
        Try
            Dim strMsg As String = String.Empty

            If Not lo.HasError Then
                If Not String.IsNullOrEmpty(lo.Value.ToString()) Then
                    strMsg = String.Format("{0}{1} + {2}", strMsg, vbCrLf, lo.Value.ToString())
                    logValidarBorrar = True

                    If Not String.IsNullOrEmpty(strMsg) Then
                        A2Utilidades.Mensajes.mostrarMensaje("Por favor verifique las siguientes inconsistencias: " & vbNewLine & strMsg, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                Else
                    mostrarMensajePregunta("¿Está Seguro que desea eliminar el Registro?",
                                           Program.TituloSistema,
                                           "BORRARREGISTRO",
                                           AddressOf TerminoPreguntarBorrarRegistro, False)

                End If

            Else
                IsBusy = False
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un error al Eliminar registro",
                                            Me.ToString(), "TerminoVerificarBorrarEncabezado", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If



            IsBusy = False
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la verificación de encargos creados de la lista de Ordenes Tesoreria Plus ",
                                                             Me.ToString(), "TerminoVerificarBorrarEncabezado", Application.Current.ToString(), Program.Maquina, ex)
        End Try

    End Sub




    Private Sub TerminoEliminarDetalle(lo As InvokeOperation(Of Integer))
        Try

            If Not lo.HasError Then
                If lo.Value > 0 Then
                    Select Case lo.UserState.ToString()
                        Case Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarCheque.ToString
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusCheques) Then
                                If dcProxy.TesoreriaOyDPlusCheques.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngID).Count() > 0 Then
                                    dcProxy.TesoreriaOyDPlusCheques.Remove(dcProxy.TesoreriaOyDPlusCheques.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngID).First())
                                End If
                            End If
                            ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Remove(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Cheques")

                            If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                                TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.FirstOrDefault
                            End If

                            'A2Utilidades.Mensajes.mostrarMensaje("El registro se Eliminó correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)
                            CalcularTotales(GSTR_CHEQUE)
                        Case Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarTransferencia.ToString
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusTransferencias) Then
                                If dcProxy.TesoreriaOyDPlusTransferencias.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngID).Count() > 0 Then
                                    dcProxy.TesoreriaOyDPlusTransferencias.Remove(dcProxy.TesoreriaOyDPlusTransferencias.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngID).First())
                                End If
                            End If
                            ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Remove(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias")
                            If ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > 0 Then
                                TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.FirstOrDefault
                            Else
                                TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = Nothing
                            End If

                            'A2Utilidades.Mensajes.mostrarMensaje("El registro se Eliminó correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)
                            CalcularTotales(GSTR_TRANSFERENCIA)
                        Case Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarInternos.ToString
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusInternos) Then
                                If dcProxy.TesoreriaOyDPlusInternos.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngID).Count() > 0 Then
                                    dcProxy.TesoreriaOyDPlusInternos.Remove(dcProxy.TesoreriaOyDPlusInternos.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngID).First())
                                End If
                            End If
                            ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Remove(TesoreriaOrdenesPlusCE_Detalle_Internos_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Internos")
                            If ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > 0 Then
                                TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Internos.FirstOrDefault
                            Else
                                TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = Nothing
                            End If
                            'A2Utilidades.Mensajes.mostrarMensaje("El registro se Eliminó correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)
                            CalcularTotales(GSTR_INTERNOS)
                        Case Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarBloqueos.ToString
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusBloqueos) Then
                                If dcProxy.TesoreriaOyDPlusBloqueos.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngID).Count() > 0 Then
                                    dcProxy.TesoreriaOyDPlusBloqueos.Remove(dcProxy.TesoreriaOyDPlusBloqueos.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngID).First())
                                End If
                            End If
                            ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Remove(TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos")
                            If ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count > 0 Then
                                TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.FirstOrDefault
                            Else
                                TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = Nothing
                            End If
                            'A2Utilidades.Mensajes.mostrarMensaje("El registro se Eliminó correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)

                        Case Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarCarterasColectivas.ToString
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusCarterasColectivas) Then
                                If dcProxy.TesoreriaOyDPlusCarterasColectivas.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngID).Count() > 0 Then
                                    dcProxy.TesoreriaOyDPlusCarterasColectivas.Remove(dcProxy.TesoreriaOyDPlusCarterasColectivas.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngID).First)
                                End If
                            End If
                            ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Remove(TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas")
                            If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count() > 0 Then
                                TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.FirstOrDefault
                            Else
                                TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = Nothing
                            End If

                            'A2Utilidades.Mensajes.mostrarMensaje("El registro se Eliminó correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)
                            CalcularTotales(GSTR_CARTERASCOLECTIVAS)
                        Case Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarTrasladoFondos.ToString
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusCarterasColectivas) Then
                                If dcProxy.TesoreriaOyDPlusCarterasColectivas.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngID).Count() > 0 Then
                                    dcProxy.TesoreriaOyDPlusCarterasColectivas.Remove(dcProxy.TesoreriaOyDPlusCarterasColectivas.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngID).First)
                                End If
                            End If
                            ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Remove(TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos")
                            If ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count() > 0 Then
                                TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.FirstOrDefault
                            Else
                                TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = Nothing
                            End If

                            'A2Utilidades.Mensajes.mostrarMensaje("El registro se Eliminó correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)
                            CalcularTotales(GSTR_TRASLADOFONDOS)
                        Case Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarOYD.ToString
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusOYDs) Then
                                If dcProxy.TesoreriaOyDPlusOYDs.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngID).Count() > 0 Then
                                    dcProxy.TesoreriaOyDPlusOYDs.Remove(dcProxy.TesoreriaOyDPlusOYDs.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngID).First())
                                End If
                            End If
                            ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Remove(TesoreriaOrdenesPlusCE_Detalle_OYD_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_OYD")
                            If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count() > 0 Then
                                TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_OYD.FirstOrDefault
                            Else
                                TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = Nothing
                            End If

                            'A2Utilidades.Mensajes.mostrarMensaje("El registro se Eliminó correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)
                            CalcularTotales(GSTR_OYD)
                        Case Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarOperacionesEspeciales.ToString
                            If Not IsNothing(dcProxy.TesoreriaOyDPlusOperacionesEspeciales) Then
                                If dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngID).Count() > 0 Then
                                    dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Remove(dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Where(Function(i) i.lngID = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngID).First())
                                End If
                            End If
                            ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Remove(TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales")
                            If ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count() > 0 Then
                                TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.FirstOrDefault
                            Else
                                TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = Nothing
                            End If

                            'A2Utilidades.Mensajes.mostrarMensaje("El registro se Eliminó correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)
                            CalcularTotales(GSTR_OPERACIONES_ESPECIALES)
                    End Select
                    Habilitar_Encabezado()
                Else
                    A2Utilidades.Mensajes.mostrarMensaje("El registro no se pudo eliminar, verifique que este en un estado en que se pueda eliminar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un error al Eliminar registro del Detalle",
                                            Me.ToString(), "TerminoEliminarDetalle", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If

            'lo.MarkErrorAsHandled()   '????

            IsBusy = False
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la Eliminación de la lista de Ordenes Tesoreria  Detalle Plus ",
                                                             Me.ToString(), "TerminoEliminarDetalle", Application.Current.ToString(), Program.Maquina, ex)
        End Try

    End Sub

    Private Sub TerminoActualizarDetalle(lo As InvokeOperation(Of Integer))
        Try

            If Not lo.HasError Then
                If lo.Value > 0 Then
                    Select Case lo.UserState.ToString()
                        Case Program.TipoActualizadoOrdenesTesoreriaOyDPlus.ActualizarCheque.ToString
                            ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Add(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Cheques")


                        Case Program.TipoActualizadoOrdenesTesoreriaOyDPlus.ActualizarTransferencia.ToString
                            ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Add(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias")

                        Case Program.TipoActualizadoOrdenesTesoreriaOyDPlus.ActualizarInternos.ToString
                            ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Add(TesoreriaOrdenesPlusCE_Detalle_Internos_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Internos")

                        Case Program.TipoActualizadoOrdenesTesoreriaOyDPlus.ActualizarCarterasColectivas.ToString
                            ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Add(TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas")

                        Case Program.TipoActualizadoOrdenesTesoreriaOyDPlus.ActualizarOYD.ToString
                            ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Add(TesoreriaOrdenesPlusCE_Detalle_OYD_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_OYD")

                        Case Program.TipoActualizadoOrdenesTesoreriaOyDPlus.ActualizarBloqueo.ToString
                            ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Add(TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos")

                        Case Program.TipoActualizadoOrdenesTesoreriaOyDPlus.ActualizarOperacionesEspeciales.ToString
                            ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Add(TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected)
                            MyBase.CambioItem("ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales")
                    End Select

                    A2Utilidades.Mensajes.mostrarMensaje("El registro se Actualizó correctamente", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)

                Else
                    A2Utilidades.Mensajes.mostrarMensaje("El Registro no se pudo Actualizar", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Personalizado)

                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un error al Actualizar registro del Detalle",
                                            Me.ToString(), "TerminoActualizarDetalle", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If

            'lo.MarkErrorAsHandled()   '????

            IsBusy = False
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la Actualización del Detalle de Ordenes Tesoreria ",
                                                             Me.ToString(), "TerminoActualizarDetalle", Application.Current.ToString(), Program.Maquina, ex)
        End Try

    End Sub

    Private Sub TerminoPreguntarConfirmacionCarteraColectiva(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            Dim logCheque As Boolean = False
            Dim logTransferencia As Boolean = False
            Dim logInternos As Boolean = False
            Dim logBloqueo As Boolean = False
            Dim logOYD As Boolean = False
            Dim logOperacionesEspeciales As Boolean = False

            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                logCheque = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count <= 0 Then
                logCheque = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                logTransferencia = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count <= 0 Then
                logTransferencia = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                logInternos = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count <= 0 Then
                logInternos = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                logBloqueo = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count <= 0 Then
                logBloqueo = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                logOYD = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count <= 0 Then
                logOYD = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                logOperacionesEspeciales = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count <= 0 Then
                logOperacionesEspeciales = True
            End If

            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count <> 0 And Not TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected Is Nothing Then
                    If TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngID = 0 Or TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngID Is Nothing Then
                        If Not IsNothing(dcProxy.TesoreriaOyDPlusCarterasColectivas) Then
                            If dcProxy.TesoreriaOyDPlusCarterasColectivas.Contains(TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected) Then
                                dcProxy.TesoreriaOyDPlusCarterasColectivas.Remove(TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected)
                            End If
                        End If
                        ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Remove(TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected)

                        If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.FirstOrDefault
                            'JFSB 20180507 Se limpia el seleccionado de la pestaña de carteras colectivas para que no quede información fantasma
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = Nothing
                        End If


                        IsBusy = False
                        Habilitar_Encabezado()
                        CalcularValoresDetalleCartera()
                        CalcularTotales(GSTR_CARTERASCOLECTIVAS)
                    Else
                        dcProxy.TesoreriaOrdenesDetalle_ValidarEstado(TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngIDTesoreriaEncabezado,
                                                                          TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngID,
                                                                          GSTR_CARTERASCOLECTIVAS,
                                                                          Program.Usuario, Program.HashConexion, AddressOf TerminoEliminarDetalle, Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarCarterasColectivas.ToString)
                    End If
                End If
            Else
                IsBusy = False
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacionCarteraColectiva", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarConfirmacionTrasladoFondos(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            Dim logCheque As Boolean = False
            Dim logTransferencia As Boolean = False
            Dim logInternos As Boolean = False
            Dim logBloqueo As Boolean = False
            Dim logOYD As Boolean = False
            Dim logOperacionesEspeciales As Boolean = False

            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                logCheque = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count <= 0 Then
                logCheque = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                logTransferencia = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count <= 0 Then
                logTransferencia = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                logInternos = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count <= 0 Then
                logInternos = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                logBloqueo = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count <= 0 Then
                logBloqueo = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                logOYD = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count <= 0 Then
                logOYD = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                logOperacionesEspeciales = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count <= 0 Then
                logOperacionesEspeciales = True
            End If

            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count <> 0 And Not TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected Is Nothing Then
                    If TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngID = 0 Or TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngID Is Nothing Then
                        If Not IsNothing(dcProxy.TesoreriaOyDPlusCarterasColectivas) Then
                            If dcProxy.TesoreriaOyDPlusCarterasColectivas.Contains(TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected) Then
                                dcProxy.TesoreriaOyDPlusCarterasColectivas.Remove(TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected)
                            End If
                        End If
                        ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Remove(TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected)

                        If ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.FirstOrDefault
                            'JFSB 20180507 Se limpia el seleccionado de la pestaña de carteras colectivas para que no quede información fantasma
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = Nothing
                        End If


                        IsBusy = False
                        Habilitar_Encabezado()
                        CalcularValoresDetalleTrasladoFondos()
                        CalcularTotales(GSTR_TRASLADOFONDOS)
                    Else
                        dcProxy.TesoreriaOrdenesDetalle_ValidarEstado(TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngIDTesoreriaEncabezado,
                                                                          TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngID,
                                                                          GSTR_TRASLADOFONDOS,
                                                                          Program.Usuario, Program.HashConexion, AddressOf TerminoEliminarDetalle, Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarTrasladoFondos.ToString)
                    End If
                End If
            Else
                IsBusy = False
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacionCarteraColectiva", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarConfirmacionOYD(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            Dim logCheque As Boolean = False
            Dim logTransferencia As Boolean = False
            Dim logCarteraColectiva As Boolean = False
            Dim logInternos As Boolean = False
            Dim logBloqueo As Boolean = False
            Dim logOperacionesEspeciales As Boolean = False
            Dim logOYD As Boolean = False

            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                logCheque = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count <= 0 Then
                logCheque = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                logTransferencia = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count <= 0 Then
                logTransferencia = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                logCarteraColectiva = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count <= 0 Then
                logCarteraColectiva = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                logInternos = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count <= 0 Then
                logInternos = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                logBloqueo = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count <= 0 Then
                logBloqueo = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                logOperacionesEspeciales = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count <= 0 Then
                logOperacionesEspeciales = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                logOYD = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count <= 0 Then
                logOYD = True
            End If

            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count <> 0 And Not TesoreriaOrdenesPlusCE_Detalle_OYD_Selected Is Nothing Then
                    If TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngID = 0 Or TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngID Is Nothing Then
                        If Not IsNothing(dcProxy.TesoreriaOyDPlusOYDs) Then
                            If dcProxy.TesoreriaOyDPlusOYDs.Contains(TesoreriaOrdenesPlusCE_Detalle_OYD_Selected) Then
                                dcProxy.TesoreriaOyDPlusOYDs.Remove(TesoreriaOrdenesPlusCE_Detalle_OYD_Selected)
                            End If
                        End If
                        ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Remove(TesoreriaOrdenesPlusCE_Detalle_OYD_Selected)

                        If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_OYD.FirstOrDefault
                            'JFSB 20180507 Se limpia el seleccionado de la pestaña de Detalle_OYD para que no quede información fantasma
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = Nothing
                        End If


                        IsBusy = False
                        Habilitar_Encabezado()
                        CalcularValoresDetalleOYD()
                        CalcularTotales(GSTR_OYD)
                    Else
                        dcProxy.TesoreriaOrdenesDetalle_ValidarEstado(TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngIDTesoreriaEncabezado,
                                                                          TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngID,
                                                                          GSTR_OYD,
                                                                          Program.Usuario, Program.HashConexion, AddressOf TerminoEliminarDetalle, Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarOYD.ToString)
                    End If
                End If
            Else
                IsBusy = False
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacionOYD", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarConfirmacionTransferencias(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            Dim logCheque As Boolean = False
            Dim logCarteraColectiva As Boolean = False
            Dim logInternos As Boolean = False
            Dim logBloqueo As Boolean = False
            Dim logOYD As Boolean = False
            Dim logOperacionesEspeciales As Boolean = False

            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                logCarteraColectiva = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count <= 0 Then

                logCarteraColectiva = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                logCheque = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count <= 0 Then
                logCheque = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                logInternos = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count <= 0 Then
                logInternos = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                logBloqueo = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count <= 0 Then
                logBloqueo = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                logOYD = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count <= 0 Then
                logOYD = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                logOperacionesEspeciales = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count <= 0 Then
                logOperacionesEspeciales = True
            End If

            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count <> 0 And Not TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected Is Nothing Then
                    If TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngID = 0 Or TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngID Is Nothing Then
                        If Not IsNothing(dcProxy.TesoreriaOyDPlusTransferencias) Then
                            If dcProxy.TesoreriaOyDPlusTransferencias.Contains(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected) Then
                                dcProxy.TesoreriaOyDPlusTransferencias.Remove(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected)
                            End If
                        End If
                        ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Remove(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected)

                        If ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.FirstOrDefault
                            'JFSB 20180507 Se limpia el seleccionado de la pestaña de transferencia para que no quede información fantasma
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = Nothing
                        End If


                        IsBusy = False
                        Habilitar_Encabezado()
                        CalcularValoresDetalleTransferencia()
                        CalcularTotales(GSTR_TRANSFERENCIA)
                    Else
                        dcProxy.TesoreriaOrdenesDetalle_ValidarEstado(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngIDTesoreriaEncabezado,
                                                                          TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngID,
                                                                          GSTR_TRANSFERENCIA,
                                                                          Program.Usuario, Program.HashConexion, AddressOf TerminoEliminarDetalle, Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarTransferencia.ToString)
                    End If
                End If
            Else
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacionTransferencias", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarConfirmacionInternos(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            Dim logCheque As Boolean = False
            Dim logTransferencia As Boolean = False
            Dim logCarteras As Boolean = False
            Dim logBloqueo As Boolean = False
            Dim logOYD As Boolean = False
            Dim logOperacionesEspeciales As Boolean = False

            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                logCheque = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count <= 0 Then
                logCheque = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                logTransferencia = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count <= 0 Then
                logTransferencia = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                logCarteras = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count <= 0 Then
                logCarteras = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                logBloqueo = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count <= 0 Then
                logBloqueo = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                logOYD = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count <= 0 Then
                logOYD = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                logOperacionesEspeciales = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count <= 0 Then
                logOperacionesEspeciales = True
            End If

            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count <> 0 And Not TesoreriaOrdenesPlusCE_Detalle_Internos_Selected Is Nothing Then
                    If TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngID = 0 Or TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngID Is Nothing Then
                        If Not IsNothing(dcProxy.TesoreriaOyDPlusInternos) Then
                            If dcProxy.TesoreriaOyDPlusInternos.Contains(TesoreriaOrdenesPlusCE_Detalle_Internos_Selected) Then
                                dcProxy.TesoreriaOyDPlusInternos.Remove(TesoreriaOrdenesPlusCE_Detalle_Internos_Selected)
                            End If
                        End If
                        ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Remove(TesoreriaOrdenesPlusCE_Detalle_Internos_Selected)

                        If ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Internos.FirstOrDefault
                            'JFSB 20180507 Se limpia el seleccionado de la pestaña de Internos para que no quede información fantasma
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = Nothing
                        End If


                        IsBusy = False
                        Habilitar_Encabezado()
                        CalcularValoresDetalleInterno()
                        CalcularTotales(GSTR_INTERNOS)
                    Else
                        dcProxy.TesoreriaOrdenesDetalle_ValidarEstado(TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngIDTesoreriaEncabezado,
                                                                          TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngID,
                                                                          GSTR_INTERNOS,
                                                                          Program.Usuario, Program.HashConexion, AddressOf TerminoEliminarDetalle, Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarInternos.ToString)
                    End If
                End If
            Else
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacionInternos", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarConfirmacionBloqueo(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            Dim logCheque As Boolean = False
            Dim logTransferencia As Boolean = False
            Dim logCarteras As Boolean = False
            Dim logInternos As Boolean = False
            Dim logOYD As Boolean = False
            Dim logOperacionesEspeciales As Boolean = False

            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                logCheque = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count <= 0 Then
                logCheque = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                logTransferencia = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count <= 0 Then
                logTransferencia = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                logCarteras = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count <= 0 Then
                logCarteras = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                logInternos = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count <= 0 Then
                logInternos = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                logOYD = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count <= 0 Then
                logOYD = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                logOperacionesEspeciales = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count <= 0 Then
                logOperacionesEspeciales = True
            End If

            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count <> 0 And Not TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected Is Nothing Then
                    If TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngID = 0 Or TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngID Is Nothing Then
                        If Not IsNothing(dcProxy.TesoreriaOyDPlusBloqueos) Then
                            If dcProxy.TesoreriaOyDPlusBloqueos.Contains(TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected) Then
                                dcProxy.TesoreriaOyDPlusBloqueos.Remove(TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected)
                            End If
                        End If
                        ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Remove(TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected)

                        If ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.FirstOrDefault
                            'JFSB 20180507 Se limpia el seleccionado de la pestaña de Bloqueos o liberar recuros para que no quede información fantasma
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = Nothing
                        End If


                        IsBusy = False
                        Habilitar_Encabezado()
                    Else
                        dcProxy.TesoreriaOrdenesDetalle_ValidarEstado(TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngIDTesoreriaEncabezado,
                                                                          TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngID,
                                                                          GSTR_INTERNOS,
                                                                          Program.Usuario, Program.HashConexion, AddressOf TerminoEliminarDetalle, Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarBloqueos.ToString)
                    End If

                End If


            Else
                IsBusy = False
            End If


        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacionBloqueo", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarConfirmacionOperacionesEspeciales(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            Dim logCheque As Boolean = False
            Dim logTransferencia As Boolean = False
            Dim logCarteras As Boolean = False
            Dim logInternos As Boolean = False
            Dim logOYD As Boolean = False
            Dim logBloqueos As Boolean = False

            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                logCheque = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count <= 0 Then
                logCheque = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                logTransferencia = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count <= 0 Then
                logTransferencia = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                logCarteras = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count <= 0 Then
                logCarteras = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                logInternos = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count <= 0 Then
                logInternos = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                logOYD = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count <= 0 Then
                logOYD = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                logBloqueos = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count <= 0 Then
                logBloqueos = True
            End If

            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count <> 0 And Not TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected Is Nothing Then
                    If TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngID = 0 Or TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngID Is Nothing Then
                        If Not IsNothing(dcProxy.TesoreriaOyDPlusOperacionesEspeciales) Then
                            If dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Contains(TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected) Then
                                dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Remove(TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected)
                            End If
                        End If
                        ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Remove(TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected)

                        If ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.FirstOrDefault
                            'JFSB 20180507 Se limpia el seleccionado de la pestaña de Operaciones Especiales para que no quede información fantasma
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = Nothing
                        End If


                        IsBusy = False
                        Habilitar_Encabezado()
                        CalcularTotales(GSTR_OPERACIONES_ESPECIALES)
                    Else
                        dcProxy.TesoreriaOrdenesDetalle_ValidarEstado(TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngIDTesoreriaEncabezado,
                                                                          TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngID,
                                                                          GSTR_OPERACIONES_ESPECIALES,
                                                                          Program.Usuario, Program.HashConexion, AddressOf TerminoEliminarDetalle, Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarOperacionesEspeciales.ToString)
                    End If

                End If


            Else
                IsBusy = False
            End If


        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacionOperacionesEspeciales", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarConfirmacionCheque(ByVal sender As Object, ByVal e As EventArgs)
        Try
            IsBusy = True
            Dim logTransferencia As Boolean = False
            Dim logCarteraColectiva As Boolean = False
            Dim logInternos As Boolean = False
            Dim logBloqueo As Boolean = False
            Dim logOYD As Boolean = False
            Dim logOperacionesEspeciales As Boolean = False

            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                logCarteraColectiva = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count <= 0 Then

                logCarteraColectiva = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                logTransferencia = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count <= 0 Then
                logTransferencia = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                logInternos = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count <= 0 Then
                logInternos = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                logBloqueo = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count <= 0 Then
                logBloqueo = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                logOYD = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count <= 0 Then
                logOYD = True
            End If
            If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                logOperacionesEspeciales = True
            ElseIf ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count <= 0 Then
                logOperacionesEspeciales = True
            End If

            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count <> 0 And Not TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected Is Nothing Then
                    If TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngID = 0 Or TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngID Is Nothing Then
                        If Not IsNothing(dcProxy.TesoreriaOyDPlusCheques) Then
                            If dcProxy.TesoreriaOyDPlusCheques.Contains(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected) Then
                                dcProxy.TesoreriaOyDPlusCheques.Remove(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected)
                            End If
                        End If
                        ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Remove(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected)

                        If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                            TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.FirstOrDefault
                            'JFSB 20180507 Se limpia el seleccionado de la pestaña de cheques para que no quede información fantasma
                        Else
                            TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected = Nothing
                        End If


                        IsBusy = False
                        Habilitar_Encabezado()
                        CalcularValoresDetalleCheque()
                        CalcularTotales(GSTR_CHEQUE)
                    Else
                        dcProxy.TesoreriaOrdenesDetalle_ValidarEstado(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngIDTesoreriaEncabezado,
                                                                          TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngID,
                                                                          GSTR_CHEQUE,
                                                                          Program.Usuario, Program.HashConexion, AddressOf TerminoEliminarDetalle, Program.TipoBorradoOrdenesTesoreriaOyDPlus.BorrarCheque.ToString)
                    End If

                End If


            Else
                IsBusy = False
            End If


        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarConfirmacion(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                CantidadConfirmaciones = CantidadConfirmaciones + 1
                _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTE_Plus
            Else
                IsBusy = False
                IsBusyEdicionTesorero = False

                If logXTesorero Then
                    If Not IsNothing(objViewModelTesorero) Then
                        objViewModelTesorero.IsBusy = False
                    End If

                End If

                LimpiarVariablesConfirmadas()
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarJustificacion(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If String.IsNullOrEmpty(Justificaciones) Then
                    Justificaciones = objResultado.CodConfirmacion
                    JustificacionesUsuario = String.Format("'{0}'**'{1}'**'{2}'**'{3}'", objResultado.NombreRegla, objResultado.CodRegla, objResultado.MensajeRegla, String.Format("{0}++{1}", objResultado.Observaciones, objResultado.TextoConfirmacion.Replace("|", "++")))
                Else
                    Justificaciones = String.Format("{0}|{1}", Justificaciones, objResultado.CodConfirmacion)
                    JustificacionesUsuario = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'", JustificacionesUsuario, objResultado.NombreRegla, objResultado.CodRegla, objResultado.MensajeRegla, String.Format("{0}++{1}", objResultado.Observaciones, objResultado.TextoConfirmacion.Replace("|", "++")))
                End If

                Dim ListaJustificacion As New List(Of A2Utilidades.CausasJustificacionMensajePregunta)
                Dim logEsHtml As Boolean = False
                Dim strMensajeDetallesHtml As String = String.Empty
                Dim strMensajeRetornoHtml As String = String.Empty

                For Each li In ListaResultadoValidacion.Where(Function(i) i.RequiereJustificacion = True).ToList
                    If Not Justificaciones.Contains(li.Confirmacion) Then

                        ListaJustificacion.Clear()

                        If Not String.IsNullOrEmpty(li.CausasJustificacion) Then
                            For Each item In li.CausasJustificacion.Split("|")
                                ListaJustificacion.Add(New A2Utilidades.CausasJustificacionMensajePregunta With {.ID = item,
                                                                                                                 .Descripcion = item})
                            Next
                        End If

                        If Not String.IsNullOrEmpty(li.DetalleRegla) Then
                            logEsHtml = True
                            strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", li.DetalleRegla)
                        Else
                            logEsHtml = False
                            strMensajeDetallesHtml = String.Empty
                        End If

                        mostrarMensajePregunta(li.Mensaje,
                                                Program.TituloSistema,
                                                "PREGUNTARJUSTIFICACION",
                                                AddressOf TerminoPreguntarJustificacion,
                                                True,
                                                "¿Desea continuar?",
                                                IIf(ListaJustificacion.Count > 0, True, False),
                                                True,
                                                IIf(ListaJustificacion.Count > 0, False, True),
                                                IIf(ListaJustificacion.Count = 0, False, True),
                                                li.Confirmacion,
                                                li.Regla,
                                                li.NombreRegla,
                                                IIf(ListaJustificacion.Count > 0, ListaJustificacion, Nothing),
                                                "Reglas incumplidas en los detalles de las ordenes de Pago",
                                                logEsHtml,
                                                strMensajeDetallesHtml)
                        Exit For
                    End If
                Next

                CantidadJustificaciones = CantidadJustificaciones + 1
                _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTE_Plus
            Else
                IsBusy = False
                IsBusyEdicionTesorero = False
                If logXTesorero Then
                    If Not IsNothing(objViewModelTesorero) Then
                        objViewModelTesorero.IsBusy = False
                    End If
                End If

                LimpiarVariablesConfirmadas()
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarJustificacion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadJustificaciones = 0
        End Try
    End Sub

    Private Sub TerminoPreguntarAprobacion(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If String.IsNullOrEmpty(Aprobaciones) Then
                    Aprobaciones = objResultado.CodConfirmacion
                    AprobacionesUsuario = String.Format("'{0}'**'{1}'**'{2}'**'{3}'", objResultado.NombreRegla, objResultado.CodRegla, objResultado.MensajeRegla, String.Format("{0}++{1}", objResultado.Observaciones, objResultado.TextoConfirmacion.Replace("|", "++")))
                Else
                    Aprobaciones = String.Format("{0}|{1}", Aprobaciones, objResultado.CodConfirmacion)
                    AprobacionesUsuario = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'", AprobacionesUsuario, objResultado.NombreRegla, objResultado.CodRegla, objResultado.MensajeRegla, String.Format("{0}++{1}", objResultado.Observaciones, objResultado.TextoConfirmacion.Replace("|", "++")))
                End If

                Dim ListaJustificacion As New List(Of A2Utilidades.CausasJustificacionMensajePregunta)
                Dim logEsHtml As Boolean = False
                Dim strMensajeDetallesHtml As String = String.Empty
                Dim strMensajeRetornoHtml As String = String.Empty

                For Each li In ListaResultadoValidacion.Where(Function(i) i.RequiereAprobacion = True).ToList
                    If Not IsNothing(li.Confirmacion) Then
                        If Not Aprobaciones.Contains(li.Confirmacion) Then

                            ListaJustificacion.Clear()

                            If Not String.IsNullOrEmpty(li.CausasJustificacion) Then
                                For Each item In li.CausasJustificacion.Split("|")
                                    ListaJustificacion.Add(New A2Utilidades.CausasJustificacionMensajePregunta With {.ID = item,
                                                                                                                     .Descripcion = item})
                                Next
                            End If

                            If Not String.IsNullOrEmpty(li.DetalleRegla) Then
                                logEsHtml = True
                                strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", li.DetalleRegla)
                            Else
                                logEsHtml = False
                                strMensajeDetallesHtml = String.Empty
                            End If

                            mostrarMensajePregunta(li.Mensaje,
                                                   Program.TituloSistema,
                                                   "PREGUNTARAPROBACION",
                                                   AddressOf TerminoPreguntarAprobacion,
                                                   True,
                                                   "¿Desea continuar?",
                                                   IIf(ListaJustificacion.Count > 0, True, False),
                                                   True,
                                                   IIf(ListaJustificacion.Count > 0, False, True),
                                                   IIf(ListaJustificacion.Count = 0, False, True),
                                                   li.Confirmacion,
                                                   li.Regla,
                                                   li.NombreRegla,
                                                   IIf(ListaJustificacion.Count > 0, ListaJustificacion, Nothing),
                                                   "Reglas incumplidas en los detalles de las ordenes de Pago",
                                                   logEsHtml,
                                                   strMensajeDetallesHtml)
                            Exit For
                        End If
                    End If
                Next
                _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTEAPROBACION_Plus
                CantidadAprobaciones = CantidadAprobaciones + 1
                IsBusy = True
            Else
                IsBusy = False
                IsBusyEdicionTesorero = False
                If logXTesorero Then
                    If Not IsNothing(objViewModelTesorero) Then
                        objViewModelTesorero.IsBusy = False
                    End If
                End If

                LimpiarVariablesConfirmadas()
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la aprobación.", Me.ToString(), "TerminoPreguntarAprobacion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadAprobaciones = 0
        End Try
    End Sub

    ''' <summary>
    ''' Se ejecuta cuando termina de consultar el saldo del cliente
    ''' </summary>
    ''' <param name="lo"></param>
    ''' <remarks>EOMC -- 02-26-2013</remarks>
    ''' 
    Private Sub TerminoConsultarSaldoCliente(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblSaldosCliente))
        Try
            If lo.HasError = False Then
                If logNuevoRegistro = True Then
                    ListaSaldoCliente = lo.Entities.ToList
                    'Dim SaldoClienteSelected As OYDUtilidades.tblSaldosCliente = ListaSaldoCliente.FirstOrDefault

                    Dim dblValorDecimal As Decimal = ListaSaldoCliente.FirstOrDefault.Valor - ValorTotalNETOOrden - ValorAnteriorDetalle
                    SaldoConsultado = Decimal.Round(dblValorDecimal, 2)
                    Select Case strOpcionConsutaSaldo
                        Case "Cheque"
                            'If Not TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected Is Nothing Then SaldoConsultado += TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValorNeto
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerar = SaldoConsultado
                                CalcularValoresDetalleCheque()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                        Case "Transferencia"
                            'If Not TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected Is Nothing Then SaldoConsultado += TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValorNeto
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerarTransferencia = SaldoConsultado
                                CalcularValoresDetalleTransferencia()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                        Case "Cartera"
                            'If Not TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected Is Nothing Then SaldoConsultado += TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValorNeto
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerarCartera = SaldoConsultado
                                CalcularValoresDetalleCartera()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                        Case "Traslado Fondos"
                            'If Not TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected Is Nothing Then SaldoConsultado += TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValorNeto
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerarCartera = SaldoConsultado
                                CalcularValoresDetalleCartera()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                        Case "Interno"
                            'If Not TesoreriaOrdenesPlusCE_Detalle_Internos_Selected Is Nothing Then SaldoConsultado += TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.curValorNeto
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerarInternos = SaldoConsultado
                                CalcularValoresDetalleOYD()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                        Case "OYD"
                            'If Not TesoreriaOrdenesPlusCE_Detalle_OYD_Selected Is Nothing Then SaldoConsultado += TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValorNeto
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerarOYD = SaldoConsultado
                                CalcularValoresDetalleOYD()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                    End Select

                Else
                    ListaSaldoCliente = lo.Entities.ToList
                    CalcularValorEdicionDetalle()
                    Dim dblValorDecimal2 As Decimal = ListaSaldoCliente.FirstOrDefault.Valor - ValorEdicionDetalle + ValorAnteriorDetalle
                    SaldoConsultado = Decimal.Round(dblValorDecimal2, 2)
                    Select Case strOpcionConsutaSaldo
                        Case "Cheque"
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerar = SaldoConsultado
                                CalcularValoresDetalleCheque()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                        Case "Transferencia"
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerarTransferencia = SaldoConsultado
                                CalcularValoresDetalleTransferencia()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                        Case "Cartera"
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerarCartera = SaldoConsultado
                                CalcularValoresDetalleCartera()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                        Case "Interno"
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerarInternos = SaldoConsultado
                                CalcularValoresDetalleInterno()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                        Case "OYD"
                            If SaldoConsultado <= 0 Then
                                A2Utilidades.Mensajes.mostrarMensaje("No hay saldo disponible", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                ValorGenerarOYD = SaldoConsultado
                                CalcularValoresDetalleOYD()
                                'JCM20160801
                                If IDGMF = "E" Then
                                    ValorGenerar = ValorGenerar - ValorGMF
                                End If
                            End If
                    End Select
                End If
                'Sí se consulta saldo la variable de las liquidaciones queda vacia
                If SaldoConsultado > 0 Then liquidacionesSelecciondas = String.Empty
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener el saldo del cliente.", Me.ToString(), "TerminoConsultarSaldoCliente", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener el saldo del cliente.", Me.ToString(), "TerminoConsultarSaldoCliente", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub HabilitarConsultarSaldo()
        Try
            If ConsultarSaldo Then
                ConsultarSaldo = False
            End If
            ConsultarSaldo = True
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al habilitar la consulta del saldo.", Me.ToString(), "HabilitarConsultarSaldo", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub TerminoConsultarCarterasColectivasClientes(ByVal lo As LoadOperation(Of OyDPLUSTesoreria.CarterasColectivasClientes))
        Try
            If lo.HasError = False Then
                If lo.UserState = "DETALLE" Then
                    ListaCarterasColectivasDetalleCompleta = lo.Entities.ToList

                    Dim objListaNuevaCarteras As New List(Of OyDPLUSTesoreria.CarterasColectivasClientes)

                    For Each li In _ListaCarterasColectivasDetalleCompleta
                        If objListaNuevaCarteras.Where(Function(i) i.CarteraColectiva = li.CarteraColectiva).Count = 0 Then
                            objListaNuevaCarteras.Add(New OyDPLUSTesoreria.CarterasColectivasClientes With {.ID = li.ID,
                                                                                                        .CarteraColectiva = li.CarteraColectiva,
                                                                                                        .NombreCarteraColectiva = li.NombreCarteraColectiva,
                                                                                                        .CodigoOYD = li.CodigoOYD,
                                                                                                        .NroEncargo = li.NroEncargo,
                                                                                                        .Saldo = li.Saldo,
                                                                                                            .SaldoDisponible = li.SaldoDisponible,
                                                                                                            .dtmFechaCierre = li.dtmFechaCierre,
                                                                                                            .intDiasPagoRetiro = li.intDiasPagoRetiro,
                                                                                                            .intDiasPagoCancel = li.intDiasPagoCancel})
                        End If
                    Next

                    ListaEncargosCarteraColectivaDetalle = Nothing

                    If logEsFondosOYD Then
                        Dim objListaNueva As New List(Of CarterasColectivas)
                        For Each li In _ListaCarterasColectivasDetalleCompleta
                            If objListaNueva.Where(Function(i) i.ID = li.CarteraColectiva).Count = 0 Then
                                objListaNueva.Add(New CarterasColectivas With {.ID = li.CarteraColectiva, .Descripcion = li.NombreCarteraColectiva})
                            End If
                        Next

                        ListaCarterasColectivas = objListaNueva
                    End If

                    TipoAccionFondos = Nothing
                    IDCarteraColectiva = Nothing
                    NumEncargoCartera = Nothing
                    TipoAccionFondos = Nothing
                ElseIf lo.UserState = "EDITARDETALLE" Then
                    ListaCarterasColectivasDetalleCompleta = lo.Entities.ToList

                    If logEsFondosOYD Then
                        Dim objListaNueva As New List(Of CarterasColectivas)
                        If Not IsNothing(_ListaCarterasColectivasDetalleCompleta) Then
                            For Each li In _ListaCarterasColectivasDetalleCompleta
                                If objListaNueva.Where(Function(i) i.ID = li.CarteraColectiva).Count = 0 Then
                                    objListaNueva.Add(New CarterasColectivas With {.ID = li.CarteraColectiva, .Descripcion = li.NombreCarteraColectiva})
                                End If
                            Next
                        End If
                        If _TipoAccionFondos = GSTR_FONDOS_TIPOACCION_CONSTITUCION Then
                            HabilitarNroEncargo = False
                            NumEncargoCartera = Nothing
                        Else
                            HabilitarNroEncargo = True
                        End If

                        ListaCarterasColectivas = objListaNueva
                    Else
                        Dim objListaNueva As New List(Of CarterasColectivas)
                        If Not IsNothing(_ListaCarterasColectivasDetalleCompleta) Then
                            For Each li In _ListaCarterasColectivasDetalleCompleta
                                If objListaNueva.Where(Function(i) i.ID = li.CarteraColectiva).Count = 0 Then
                                    objListaNueva.Add(New CarterasColectivas With {.ID = li.CarteraColectiva, .Descripcion = li.NombreCarteraColectiva})
                                End If
                            Next
                        End If

                        If _TipoAccionFondos = GSTR_FONDOS_TIPOACCION_CONSTITUCION Then
                            HabilitarNroEncargo = False
                            NumEncargoCartera = Nothing
                        Else
                            HabilitarNroEncargo = True
                        End If
                        ListaCarterasColectivas = Nothing
                        ListaCarterasColectivas = objListaNueva
                    End If

                    logCambiarPropiedadesPOPPUP = False

                    IDCarteraColectiva = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.ValorCarteraColectiva

                    If logXTesorero = False Then
                        IsBusyEdicionTesorero = True
                    End If

                    logCambiarPropiedadesPOPPUP = True

                    consultarCombosEspecificosFondo(IDCarteraColectiva, "EDITARDETALLE")

                    If logEsFondosOYD Then
                        If Not IsNothing(dcProxy.CarterasColectivasClientes) Then
                            dcProxy.CarterasColectivasClientes.Clear()
                        End If
                        If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                dcProxy.Load(dcProxy.ConsultarCarterasColectivasClienteQuery(_TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strCodigoOyD, False, Program.Usuario, Program.HashConexion, "DETALLE_TRASLADOS"), AddressOf TerminoConsultarCarterasColectivasClientes, "ENCARGOSDETALLEEDICION")
                            Else
                                dcProxy.Load(dcProxy.ConsultarCarterasColectivasClienteQuery(_TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strCodigoOyD, False, Program.Usuario, Program.HashConexion, "DETALLE_CARTERAS"), AddressOf TerminoConsultarCarterasColectivasClientes, "ENCARGOSDETALLEEDICION")
                            End If
                        End If
                    End If
                ElseIf lo.UserState = "ENCARGOSDETALLE" Or lo.UserState = "ENCARGOSDETALLEEDICION" Then
                    ListaCarterasColectivasDetalleCompleta = lo.Entities.ToList

                    Dim objNuevaListaEncargos As New List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
                    For Each li In _ListaCarterasColectivasDetalleCompleta
                        If li.CarteraColectiva = IDCarteraColectiva And Not String.IsNullOrEmpty(li.NroEncargo) Then
                            If objNuevaListaEncargos.Where(Function(i) i.NroEncargo = li.NroEncargo).Count = 0 Then
                                objNuevaListaEncargos.Add(New OyDPLUSTesoreria.CarterasColectivasClientes With {.CarteraColectiva = li.CarteraColectiva,
                                                                                                            .CodigoOYD = li.CodigoOYD,
                                                                                                            .ID = li.ID,
                                                                                                            .NroEncargo = li.NroEncargo,
                                                                                                                .Saldo = li.Saldo,
                                                                                                                .dtmFechaCierre = li.dtmFechaCierre})
                            End If
                        End If
                    Next

                    ListaEncargosCarteraColectivaDetalle = objNuevaListaEncargos

                    If lo.UserState = "ENCARGOSDETALLE" Or lo.UserState = "ENCARGOSDETALLEEDICION" Then
                        If Not IsNothing(_TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected) Then
                            NumEncargoCartera = _TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngNroEncargo
                        End If
                    End If
                Else
                    ListaCarterasColectivasClienteCompleta = lo.Entities.ToList

                    Dim objListaNuevaCarteras As New List(Of OyDPLUSTesoreria.CarterasColectivasClientes)

                    For Each li In _ListaCarterasColectivasClienteCompleta
                        If objListaNuevaCarteras.Where(Function(i) i.CarteraColectiva = li.CarteraColectiva).Count = 0 Then
                            objListaNuevaCarteras.Add(New OyDPLUSTesoreria.CarterasColectivasClientes With {.ID = li.ID,
                                                                                                        .CarteraColectiva = li.CarteraColectiva,
                                                                                                        .NombreCarteraColectiva = li.NombreCarteraColectiva,
                                                                                                        .CodigoOYD = li.CodigoOYD,
                                                                                                        .NroEncargo = li.NroEncargo,
                                                                                                        .Saldo = li.Saldo,
                                                                                                            .SaldoDisponible = li.SaldoDisponible,
                                                                                                            .dtmFechaCierre = li.dtmFechaCierre})
                        End If
                    Next

                    ListaCarterasColectivasCliente = objListaNuevaCarteras

                    _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos = Nothing
                    _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos = Nothing

                    ListaEncargosCarteraColectiva = Nothing
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al verificar sí se habilitaban los campos de fondos.",
                               Me.ToString(), "TerminoConsultarCarterasColectivasClientes", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar las carteras colectivas del cliente.",
                               Me.ToString(), "TerminoConsultarCarterasColectivasClientes", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub


    Private Sub TerminoTraerOrdenantes(ByVal lo As LoadOperation(Of OYDUtilidades.BuscadorOrdenantes))
        Try
            If Not lo.HasError Then
                Dim objOrdenante As String = String.Empty
                If lo.UserState = "EDITAR" Then
                    objOrdenante = _TesoreriaOrdenesPlusCE_Selected.lngIDOrdenante
                End If

                ListaOrdenantesOYDPLUS = lo.Entities.ToList

                If lo.UserState = "EDITAR" Then
                    If _ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = objOrdenante).Count > 0 Then
                        OrdenanteSeleccionadoOYDPLUS = _ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = objOrdenante).FirstOrDefault
                    End If
                ElseIf logNuevoRegistro Or logEditarRegistro Then
                    If Not IsNothing(DiccionarioCombosOYDPlus) Then
                        If DiccionarioCombosOYDPlus.ContainsKey("COLOCARORDENANTELIDER") Then
                            If DiccionarioCombosOYDPlus("COLOCARORDENANTELIDER").Where(Function(i) i.Retorno.ToUpper = "SI").Count > 0 Then
                                If _ListaOrdenantesOYDPLUS.Where(Function(i) i.Lider).Count > 0 Then
                                    OrdenanteSeleccionadoOYDPLUS = _ListaOrdenantesOYDPLUS.Where(Function(i) i.Lider).First()
                                End If
                            End If
                        End If
                    End If
                End If

            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de ordenantes",
                                                 Me.ToString(), "TerminoTraerOrdenantes", Program.TituloSistema, Program.Maquina, lo.Error)
                'lo.MarkErrorAsHandled()   '????
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de ordenantes",
                                                 Me.ToString(), "TerminoTraerOrdenantes", Program.TituloSistema, Program.Maquina, ex)
        End Try


    End Sub

    Private Sub TerminoTraerCombosEspecificosCartera(ByVal lo As LoadOperation(Of OYDUtilidades.ItemCombo))
        Try
            If Not lo.HasError Then
                If lo.UserState = "ORDENGIROFONDOS" Then
                    Dim objListaTipoAccionFondos As New List(Of OYDUtilidades.ItemCombo)

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPORETIROFONDOS").Count > 0 Then
                                objListaTipoAccionFondos = lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPORETIROFONDOS").ToList
                            End If

                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "CONCEPTODEFECTO_RETIRO").Count > 0 Then
                                ConceptoDefectoFondos_Retiro = lo.Entities.ToList.Where(Function(i) i.Categoria = "CONCEPTODEFECTO_RETIRO").First.intID
                                ConceptoDescripcionDefectoFondos_Retiro = lo.Entities.ToList.Where(Function(i) i.Categoria = "CONCEPTODEFECTO_RETIRO").First.Descripcion
                            Else
                                ConceptoDefectoFondos_Retiro = Nothing
                                ConceptoDescripcionDefectoFondos_Retiro = Nothing
                            End If

                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "CONCEPTODEFECTO_CANCELACION").Count > 0 Then
                                ConceptoDefectoFondos_Cancelacion = lo.Entities.ToList.Where(Function(i) i.Categoria = "CONCEPTODEFECTO_CANCELACION").First.intID
                                ConceptoDescripcionDefectoFondos_Cancelacion = lo.Entities.ToList.Where(Function(i) i.Categoria = "CONCEPTODEFECTO_CANCELACION").First.Descripcion
                            Else
                                ConceptoDefectoFondos_Cancelacion = Nothing
                                ConceptoDescripcionDefectoFondos_Cancelacion = Nothing
                            End If
                        Else
                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").Count > 0 Then
                                objListaTipoAccionFondos = lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").ToList
                            End If
                        End If

                        ListaTiposRetirosFondos = objListaTipoAccionFondos

                        If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "RETIROS_DIASAPLICACION").Count > 0 Then
                                intDiasAplicacionFondosRetiros = CInt(lo.Entities.ToList.Where(Function(i) i.Categoria = "RETIROS_DIASAPLICACION").First.ID)
                            End If

                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "CANCELACIONES_DIASAPLICACION").Count > 0 Then
                                intDiasAplicacionFondosCancelacion = CInt(lo.Entities.ToList.Where(Function(i) i.Categoria = "CANCELACIONES_DIASAPLICACION").First.ID)
                            End If
                        End If

                        If Editando Then
                            If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_RETIRO Then
                                FechaAplicacion = DateAdd(DateInterval.Day, intDiasAplicacionFondosRetiros, FechaOrden)
                            ElseIf _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                                FechaAplicacion = DateAdd(DateInterval.Day, intDiasAplicacionFondosCancelacion, FechaOrden)
                            End If
                        End If

                    End If
                ElseIf lo.UserState = "DETALLEGIROFONDOS" Then
                    Dim objListaTipoAccionFondos As New List(Of OYDUtilidades.ItemCombo)

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").Count > 0 Then
                                objListaTipoAccionFondos = lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").ToList
                            End If
                        Else
                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").Count > 0 Then
                                objListaTipoAccionFondos = lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").ToList
                            End If
                        End If

                        ListaTiposAccionFondos = objListaTipoAccionFondos

                        If lo.Entities.ToList.Where(Function(i) i.Categoria = "ADICIONES_DIASAPLICACION").Count > 0 Then
                            intDiasAplicacionFondosAdicion = CInt(lo.Entities.ToList.Where(Function(i) i.Categoria = "ADICIONES_DIASAPLICACION").First.ID)
                        End If
                        If lo.Entities.ToList.Where(Function(i) i.Categoria = "APERTURAS_DIASAPLICACION").Count > 0 Then
                            intDiasAplicacionFondosApertura = CInt(lo.Entities.ToList.Where(Function(i) i.Categoria = "APERTURAS_DIASAPLICACION").First.ID)
                        End If

                        If TipoAccionFondos = GSTR_FONDOS_TIPOACCION_ADICION Then
                            FechaAplicacionCartera = DateAdd(DateInterval.Day, intDiasAplicacionFondosAdicion, FechaOrden)
                        ElseIf TipoAccionFondos = GSTR_FONDOS_TIPOACCION_CONSTITUCION Then
                            FechaAplicacionCartera = DateAdd(DateInterval.Day, intDiasAplicacionFondosApertura, FechaOrden)
                        End If

                    End If
                ElseIf lo.UserState = "EDITARDETALLE" Then
                    Dim objListaTipoAccionFondos As New List(Of OYDUtilidades.ItemCombo)

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").Count > 0 Then
                                objListaTipoAccionFondos = lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").ToList
                            End If
                        Else
                            If lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").Count > 0 Then
                                objListaTipoAccionFondos = lo.Entities.ToList.Where(Function(i) i.Categoria = "TIPOACCIONFONDOS").ToList
                            End If
                        End If

                        ListaTiposAccionFondos = objListaTipoAccionFondos

                        logCambiarPropiedadesPOPPUP = False
                        TipoAccionFondos = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strTipoAccionFondos
                        logCambiarPropiedadesPOPPUP = True
                    End If
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de los combos de la cartera",
                                                 Me.ToString(), "TerminoTraerCombosEspecificosCartera", Program.TituloSistema, Program.Maquina, lo.Error)
                'lo.MarkErrorAsHandled()   '????
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de los combos de la cartera",
                                                 Me.ToString(), "TerminoTraerCombosEspecificosCartera", Program.TituloSistema, Program.Maquina, ex)
        End Try


    End Sub

    Private Sub TerminoVerificarRestriccionesTipoCartera(ByVal lo As InvokeOperation(Of String))
        Try
            If Not lo.HasError Then
                If Not String.IsNullOrEmpty(lo.Value) Then
                    mostrarMensaje(lo.Value, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar las restriccione del tipo de cartera",
                                                 Me.ToString(), "TerminoVerificarRestriccionesTipoCartera", Program.TituloSistema, Program.Maquina, lo.Error)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar las restriccione del tipo de cartera",
                                                 Me.ToString(), "TerminoVerificarRestriccionesTipoCartera", Program.TituloSistema, Program.Maquina, ex)
        End Try


    End Sub

    Private Sub TerminoTraerBancosNacionalesCartera(ByVal lo As LoadOperation(Of OYDUtilidades.ItemCombo))
        Try
            If Not lo.HasError Then
                Dim logBancoRegistradoCompania As Boolean = False

                For Each li In lo.Entities.ToList
                    If li.ID = lo.UserState Then
                        logBancoRegistradoCompania = True
                    End If
                Next

                VerificarCobro_GMF(GSTR_TRANSFERENCIA, True, logBancoRegistradoCompania)
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de los combos de la cartera",
                                                 Me.ToString(), "TerminoTraerBancosNacionalesCartera", Program.TituloSistema, Program.Maquina, lo.Error)
                'lo.MarkErrorAsHandled()   '????
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de los combos de la cartera",
                                                 Me.ToString(), "TerminoTraerBancosNacionalesCartera", Program.TituloSistema, Program.Maquina, ex)
        End Try


    End Sub

    Private Sub TerminoConsultarBancosNacionales_Cartera(ByVal lo As LoadOperation(Of OYDUtilidades.ItemCombo))
        Try
            If Not lo.HasError Then
                Dim logBancoExistente As Boolean = False

                If lo.Entities.Where(Function(i) i.Categoria = "BANCOSNACIONALES_CARTERA").Count > 0 Then
                    For Each li In lo.Entities.Where(Function(i) i.Categoria = "BANCOSNACIONALES_CARTERA")
                        If li.intID = lngCodigoBancoWpp Then
                            logBancoExistente = True
                            Exit For
                        End If
                    Next
                End If

                VerificarCobro_GMF(GSTR_TRANSFERENCIA, True, logBancoExistente)
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar los bancos nacionales de las carteras.",
                                                 Me.ToString(), "TerminoConsultarBancosNacionales_Cartera", Program.TituloSistema, Program.Maquina, lo.Error)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar los bancos nacionales de las carteras.",
                                                 Me.ToString(), "TerminoConsultarBancosNacionales_Cartera", Program.TituloSistema, Program.Maquina, ex)
        End Try


    End Sub

#End Region

#Region "Metodos"
    Sub CargarConceptosPorDefecto(pstrFormaPago As String)
        Try
            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD Then
                If pstrFormaPago = GSTR_CHEQUE Then
                    If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                        If Not IsNothing(ConceptoDefectoFondos_Cancelacion) Then
                            IdConcepto = ConceptoDefectoFondos_Cancelacion
                            DescripcionComboConceptoCheque = ConceptoDescripcionDefectoFondos_Cancelacion
                        Else
                            IdConcepto = Nothing
                            DescripcionComboConceptoCheque = String.Empty
                        End If
                    Else
                        If Not IsNothing(ConceptoDefectoFondos_Retiro) Then
                            IdConcepto = ConceptoDefectoFondos_Retiro
                            DescripcionComboConceptoCheque = ConceptoDescripcionDefectoFondos_Retiro
                        Else
                            IdConcepto = Nothing
                            DescripcionComboConceptoCheque = String.Empty
                        End If
                    End If
                ElseIf pstrFormaPago = GSTR_TRANSFERENCIA Then
                    If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                        If Not IsNothing(ConceptoDefectoFondos_Cancelacion) Then
                            IdConceptoTransferencia = ConceptoDefectoFondos_Cancelacion
                            DescripcionConceptoTransferenciaCombo = ConceptoDescripcionDefectoFondos_Cancelacion
                        Else
                            IdConceptoTransferencia = Nothing
                            DescripcionConceptoTransferenciaCombo = String.Empty
                        End If
                    Else
                        If Not IsNothing(ConceptoDefectoFondos_Retiro) Then
                            IdConceptoTransferencia = ConceptoDefectoFondos_Retiro
                            DescripcionConceptoTransferenciaCombo = ConceptoDescripcionDefectoFondos_Retiro
                        Else
                            IdConceptoTransferencia = Nothing
                            DescripcionConceptoTransferenciaCombo = String.Empty
                        End If
                    End If
                ElseIf pstrFormaPago = GSTR_CARTERASCOLECTIVAS Or pstrFormaPago = GSTR_TRASLADOFONDOS Then
                    If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                        If Not IsNothing(ConceptoDefectoFondos_Cancelacion) Then
                            IDConceptoCartera = ConceptoDefectoFondos_Cancelacion
                            DescripcionComboConceptoCartera = ConceptoDescripcionDefectoFondos_Cancelacion
                        Else
                            IDConceptoCartera = Nothing
                            DescripcionComboConceptoCartera = String.Empty
                        End If
                    Else
                        If Not IsNothing(ConceptoDefectoFondos_Retiro) Then
                            IDConceptoCartera = ConceptoDefectoFondos_Retiro
                            DescripcionComboConceptoCartera = ConceptoDescripcionDefectoFondos_Retiro
                        Else
                            IDConceptoCartera = Nothing
                            DescripcionComboConceptoCartera = String.Empty
                        End If
                    End If
                ElseIf pstrFormaPago = GSTR_OYD Then
                    If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                        If Not IsNothing(ConceptoDefectoFondos_Cancelacion) Then
                            IDConceptoOYD = ConceptoDefectoFondos_Cancelacion
                            DescripcionComboConceptoOYD = ConceptoDescripcionDefectoFondos_Cancelacion
                        Else
                            IDConceptoOYD = Nothing
                            DescripcionComboConceptoOYD = String.Empty
                        End If
                    Else
                        If Not IsNothing(ConceptoDefectoFondos_Retiro) Then
                            IDConceptoOYD = ConceptoDefectoFondos_Retiro
                            DescripcionComboConceptoOYD = ConceptoDescripcionDefectoFondos_Retiro
                        Else
                            IDConceptoOYD = Nothing
                            DescripcionComboConceptoOYD = String.Empty
                        End If
                    End If
                Else
                    IdConcepto = Nothing
                    IdConceptoTransferencia = Nothing
                    IDConceptoCartera = Nothing
                    IDConceptoInternos = Nothing
                    IDConceptoOYD = Nothing

                    DescripcionComboConceptoCheque = String.Empty
                    DescripcionConceptoTransferenciaCombo = ConceptoDescripcionDefectoFondos_Retiro
                    DescripcionComboConceptoCartera = String.Empty
                    DescripcionComboInternos = String.Empty
                    DescripcionComboConceptoOYD = String.Empty
                End If
            Else
                If Not IsNothing(DiccionarioCombosOYDPlus) Then
                    If DiccionarioCombosOYDPlus.ContainsKey("CONCEPTOS") Then
                        If DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS").Count = 1 _
                            And (pstrFormaPago = GSTR_CHEQUE Or pstrFormaPago = GSTR_TRANSFERENCIA) _
                            And DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").Count = 0 Then 'Cuando solo hay 1 concepto de Egreso registrado al receptor
                            IdConcepto = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS").FirstOrDefault.IntId
                            IdConceptoTransferencia = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS").FirstOrDefault.IntId
                            DescripcionComboConceptoCheque = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS").FirstOrDefault.Descripcion
                            DescripcionConceptoTransferenciaCombo = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS").FirstOrDefault.Descripcion
                        ElseIf DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").Count = 1 _
                            And (pstrFormaPago = GSTR_CHEQUE Or pstrFormaPago = GSTR_TRANSFERENCIA) _
                            And DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS").Count = 0 Then 'Cuando solo hay 1 concepto de Egreso TODOS registrado al receptor
                            IdConcepto = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.IntId
                            IdConceptoTransferencia = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.IntId
                            DescripcionComboConceptoCheque = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.Descripcion
                            DescripcionConceptoTransferenciaCombo = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.Descripcion

                        ElseIf DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").Count = 1 _
                          And (pstrFormaPago = GSTR_CHEQUE_GERENCIA Or pstrFormaPago = GSTR_CARTERASCOLECTIVAS Or
                               pstrFormaPago = GSTR_INTERNOS Or pstrFormaPago = GSTR_OYD) _
                            And DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").Count = 0 Then 'Cuando solo hay 1 concepto de Nota registrado al receptor

                            IdConcepto = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").FirstOrDefault.IntId
                            IDConceptoCartera = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").FirstOrDefault.IntId
                            IDConceptoInternos = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").FirstOrDefault.IntId
                            IDConceptoOYD = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").FirstOrDefault.IntId

                            DescripcionComboConceptoCheque = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").FirstOrDefault.Descripcion
                            DescripcionComboConceptoCartera = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").FirstOrDefault.Descripcion
                            DescripcionComboInternos = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").FirstOrDefault.Descripcion
                            DescripcionComboConceptoOYD = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").FirstOrDefault.Descripcion

                        ElseIf DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").Count = 1 _
                            And DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").Count = 0 _
                            And (pstrFormaPago = GSTR_CHEQUE_GERENCIA Or pstrFormaPago = GSTR_CARTERASCOLECTIVAS Or
                                 pstrFormaPago = GSTR_INTERNOS Or pstrFormaPago = GSTR_OYD) Then 'Cuando solo hay 1 concepto de Nota TODOS registrado al receptor

                            IdConcepto = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.IntId
                            IDConceptoCartera = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.IntId
                            IDConceptoInternos = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.IntId
                            IDConceptoOYD = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.IntId

                            DescripcionComboConceptoCheque = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.Descripcion
                            DescripcionComboConceptoCartera = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.Descripcion
                            DescripcionComboInternos = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.Descripcion
                            DescripcionComboConceptoOYD = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "TODOS").FirstOrDefault.Descripcion
                        ElseIf pstrFormaPago = GSTR_CHEQUE Or pstrFormaPago = GSTR_TRANSFERENCIA Then
                            If logEsFondosUnity Then
                                If DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS").Count > 1 Then 'Cuando  hay muchos conceptos de Egresos sin receptor
                                    If DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And (i.Prioridad = 0 Or i.Prioridad = -1)).Count > 0 Then
                                        IdConcepto = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And (i.Prioridad = 0 Or i.Prioridad = -1)).FirstOrDefault.IntId
                                        IdConceptoTransferencia = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And (i.Prioridad = 0 Or i.Prioridad = -1)).FirstOrDefault.IntId
                                        DescripcionComboConceptoCheque = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And (i.Prioridad = 0 Or i.Prioridad = -1)).FirstOrDefault.Descripcion
                                        DescripcionConceptoTransferenciaCombo = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And (i.Prioridad = 0 Or i.Prioridad = -1)).FirstOrDefault.Descripcion
                                    End If
                                End If
                            Else
                                If DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And i.Prioridad = 0).Count > 1 Then 'Cuando  hay muchos conceptos de Egresos sin receptor
                                    IdConcepto = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And i.Prioridad = 0).FirstOrDefault.IntId
                                    IdConceptoTransferencia = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And i.Prioridad = 0).FirstOrDefault.IntId
                                    DescripcionComboConceptoCheque = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And i.Prioridad = 0).FirstOrDefault.Descripcion
                                    DescripcionConceptoTransferenciaCombo = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "EGRESOS" And i.Prioridad = 0).FirstOrDefault.Descripcion
                                End If
                            End If
                        ElseIf (pstrFormaPago = GSTR_CHEQUE_GERENCIA Or pstrFormaPago = GSTR_CARTERASCOLECTIVAS Or
                               pstrFormaPago = GSTR_INTERNOS Or pstrFormaPago = GSTR_OYD) Then
                            If logEsFondosUnity Then
                                If DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS").Count > 1 Then
                                    If DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And (i.Prioridad = 0)).Count > 0 Then
                                        IdConcepto = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And (i.Prioridad = 0)).FirstOrDefault.IntId
                                        IdConceptoTransferencia = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And (i.Prioridad = 0)).FirstOrDefault.IntId
                                        DescripcionComboConceptoCheque = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And (i.Prioridad = 0)).FirstOrDefault.Descripcion
                                        DescripcionConceptoTransferenciaCombo = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And (i.Prioridad = 0)).FirstOrDefault.Descripcion
                                    End If
                                End If
                            Else
                                If DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And i.Prioridad = 0).Count > 1 Then
                                    IdConcepto = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And i.Prioridad = 0).FirstOrDefault.IntId
                                    IdConceptoTransferencia = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And i.Prioridad = 0).FirstOrDefault.IntId
                                    DescripcionComboConceptoCheque = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And i.Prioridad = 0).FirstOrDefault.Descripcion
                                    DescripcionConceptoTransferenciaCombo = DiccionarioCombosOYDPlus("CONCEPTOS").Where(Function(i) i.Retorno.ToUpper = "NOTAS" And i.Prioridad = 0).FirstOrDefault.Descripcion
                                End If
                            End If
                        Else
                            IdConcepto = Nothing
                            IDConceptoCartera = Nothing
                            IDConceptoInternos = Nothing
                            IDConceptoOYD = Nothing

                            DescripcionComboConceptoCheque = String.Empty
                            DescripcionComboConceptoCartera = String.Empty
                            DescripcionComboInternos = String.Empty
                            DescripcionComboConceptoOYD = String.Empty
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar el concepto por defecto",
                                                 Me.ToString(), "CargarConceptosPorDefecto", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub ConfigurarOrdenDuplicada(pOrdenTesoreriaEncabezado As TesoreriaOrdenesEncabezado, pListaDetallesCheques As List(Of TesoreriaOyDPlusCheques),
                                        pListaDetallesTransferencias As List(Of TesoreriaOyDPlusTransferencia), pListaDetalleCarteras As List(Of TesoreriaOyDPlusCarterasColectivas), pListaDetalleTraslado As List(Of TesoreriaOyDPlusCarterasColectivas),
                                        pListaDetallesInternos As List(Of TesoreriaOyDPlusInternos), plistaDetallesBloqueo As List(Of TesoreriaOyDPlusBloqueos),
                                        plistaDetallesOYD As List(Of TesoreriaOyDPlusOYD), plistaDetallesOperacionesEspeciales As List(Of TesoreriaOyDPlusOperacionesEspeciales))
        Try

            Editando = True
            LimpiarVariablesSubirDocumentos(True)
            Dim xDefecto As New TesoreriaOrdenesEncabezado

            ObtenerValoresOrdenAnterior(pOrdenTesoreriaEncabezado, xDefecto)

            xDefecto.lngID = Nothing
            xDefecto.lngIDDocumento = Nothing
            xDefecto.strNombreConsecutivo = String.Empty
            xDefecto.dtmActualizacion = dtmFechaServidor
            xDefecto.lngSecuencia = 0
            xDefecto.strUsuario = Program.Usuario
            xDefecto.ValorTipo = GSTR_ORDENGIRO
            If xDefecto.ValorTipoProducto <> GSTR_FONDOS_TIPOPRODUCTO Or (xDefecto.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD = False) Then
                xDefecto.dtmDocumento = Date.Today
            End If
            xDefecto.ValorEstado = String.Empty
            xDefecto.strEstado = String.Empty

            ListaTesoreriaOrdenesPlusCE_Detalle_Cheques = pListaDetallesCheques
            ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias = pListaDetallesTransferencias
            ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = pListaDetalleCarteras
            ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = pListaDetalleTraslado
            ListaTesoreriaOrdenesPlusCE_Detalle_Internos = pListaDetallesInternos
            ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos = plistaDetallesBloqueo
            ListaTesoreriaOrdenesPlusCE_Detalle_OYD = plistaDetallesOYD
            ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = plistaDetallesOperacionesEspeciales

            HabilitarConsultarSaldo()
            logHayEncabezado = True
            logDuplicarRegistro = True
            logEditarRegistro = True
            logNuevoRegistro = False
            HabilitarEnEdicion = True
            HabilitarImportacion = True
            FechaAplicacion = _TesoreriaOrdenesPlusCE_Selected.dtmFechaAplicacion
            logRecargarDatosDetalle = False
            ObtenerValoresOrdenAnterior(xDefecto, TesoreriaOrdenesPlusCE_Selected)
            logRecargarDatosDetalle = True

            FechaOrden = _TesoreriaOrdenesPlusCE_Selected.dtmDocumento

            CodigoOYDControles = _TesoreriaOrdenesPlusCE_Selected.strIDComitente
            TipoProductoControles = _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto
            CarteraColectivaFondosControles = _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos
            NroEncargoFondosControles = _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos

            If String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strNombreOrdenante) Then
                NombreOrdenanteSeleccionado = "No seleccionado"
            Else
                NombreOrdenanteSeleccionado = _TesoreriaOrdenesPlusCE_Selected.strNombreOrdenante
            End If


            If Not IsNothing(dcProxy.TempCuentasClientes) Then
                dcProxy.TempCuentasClientes.Clear()
            End If
            If Not IsNothing(dcProxy.TempDireccionesClientes) Then
                dcProxy.TempDireccionesClientes.Clear()
            End If

            dcProxy.Load(dcProxy.OyDPlusListarDireccionesClientesQuery(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerDireccionesCliente, "")
            dcProxy.Load(dcProxy.OyDPlusListarCuentasClientesQuery(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerCuentasCliente, "")
            HabilitarConsultarSaldo()

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                MostrarInformacionFondos = Visibility.Visible
            Else
                MostrarInformacionFondos = Visibility.Collapsed
            End If
            HabilitarCategoriaFondos = False

            VerDuplicar = Visibility.Collapsed
            CalcularTotales(GSTR_CHEQUE)
            CalcularTotales(GSTR_TRANSFERENCIA)
            CalcularTotales(GSTR_INTERNOS)
            CalcularTotales(GSTR_CARTERASCOLECTIVAS)
            CalcularTotales(GSTR_TRASLADOFONDOS)
            CalcularTotales(GSTR_BLOQUEO_RECURSOS)
            CalcularTotales(GSTR_OYD)
            CalcularTotales(GSTR_OPERACIONES_ESPECIALES)
            HabilitarFechaAplicacion = True

            Instrucciones()

            objTipoOrdenNueva = TipoOrdenGiroNueva.NORMAL
            CambiarColorFondoTextoBuscador()

            ValidarHabilitarValorDetalles()

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                If logEsFondosOYD Then
                    HabilitarConceptoDetalles = False
                Else
                    HabilitarConceptoDetalles = True
                End If
            Else
                HabilitarConceptoDetalles = True
            End If

            HabilitarFecha = True

            IsBusy = False
            IsBusyDetalles = False
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al intentar configurar el duplicar datos de la orden", Me.ToString(), "ConfigurarOrdenDuplicada", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            IsBusyDetalles = False
        End Try
    End Sub

    Public Sub Duplicar()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE) Then
                If ListaTesoreriaOrdenesPlusCE.Count > 0 Then
                    If Not IsNothing(TesoreriaOrdenesPlusCE_Selected) Then
                        mostrarMensajePregunta("¿Está Seguro que desea duplicar la orden?",
                                               Program.TituloSistema,
                                               "DUPLICARORDEN",
                                               AddressOf TerminoPreguntarDuplicarOrden, False)
                    Else
                        mostrarMensaje("No es posible duplicar una orden de Pago, verifique que tenga selecionado un registro.", "Duplicar Orden", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                Else
                    mostrarMensaje("No es posible duplicar una orden de Pago, verifique que minimo exista una orden de giro previamente creada", "Duplicar Orden", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If
            Else
                mostrarMensaje("No es posible duplicar una orden de Pago, verifique que minimo exista una orden de Pago previamente creada", "Duplicar Orden", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al iniciar la duplicación de la orden", Me.ToString(), "duplicarOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub validarDuplicarOrden(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then

            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al confirmar el duplicar una orden", Me.ToString(), "validarDuplicarOrden", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub TraerOrdenes(Optional pstrOpcion As String = "", Optional pstrEstado As String = "")
        Try
            If logXTesorero = False Then
                IsBusy = True
                If Not IsNothing(dcProxy.TesoreriaOrdenesEncabezados) Then
                    dcProxy.TesoreriaOrdenesEncabezados.Clear()
                End If

                If pstrEstado = GSTR_ANULADAS Then
                    dcProxy.Load(dcProxy.TesoreriaOrdenesListarQuery(GSTR_ORDENGIRO, GSTR_ANULADA_Plus, "", "", 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenes, pstrOpcion)
                ElseIf pstrEstado = GSTR_PENDIENTES Then
                    dcProxy.Load(dcProxy.TesoreriaOrdenesListarQuery(GSTR_ORDENGIRO, GSTR_PENDIENTE_Plus, "", "", 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenes, pstrOpcion)
                ElseIf pstrEstado = GSTR_RECHAZADAS Then
                    dcProxy.Load(dcProxy.TesoreriaOrdenesListarQuery(GSTR_ORDENGIRO, GSTR_RECHAZADAS_Plus, "", "", 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenes, pstrOpcion)
                ElseIf pstrEstado = GSTR_POR_APROBAR Then
                    dcProxy.Load(dcProxy.TesoreriaOrdenesListarQuery(GSTR_ORDENGIRO, GSTR_PENDIENTEAPROBACION_Plus, "", "", 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenes, pstrOpcion)
                ElseIf pstrEstado = GSTR_FUTURAS Then
                    dcProxy.Load(dcProxy.TesoreriaOrdenesListarQuery(GSTR_ORDENGIRO, GSTR_FUTURA_Plus, "", "", 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenes, pstrOpcion)
                ElseIf pstrEstado = GSTR_PROGRAMADAS Then
                    dcProxy.Load(dcProxy.TesoreriaOrdenesListarQuery(GSTR_ORDENGIRO, GSTR_PROGRAMADA_Plus, "", "", 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenes, pstrOpcion)
                ElseIf pstrEstado = GSTR_DIVIDENDOS Then
                    dcProxy.Load(dcProxy.TesoreriaOrdenesListarQuery(GSTR_ORDENGIRO, GSTR_DIVIDENDOS_Plus, "", "", 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenes, pstrOpcion)
                Else
                    IsBusy = False
                    logRecargarPantalla = True
                End If
            End If


        Catch ex As Exception
            IsBusy = False
        End Try
    End Sub

    Public Sub PorDefectoInstrucciones()
        Try
            strNombreInstrucciones = String.Empty
            strNroDocumentoInstrucciones = String.Empty
            strTipoIdentificacionInstrucciones = String.Empty
            strDireccionInstrucciones = String.Empty
            strCiudadInstrucciones = String.Empty
            ClientePresente = False
            ClienteRecoge = False
            strCodigoBancoInstrucciones = String.Empty
            LlevarDireccion = False
            RecogeTercero = False
            ConsignarCuentaChecked = False
        Catch ex As Exception

        End Try
    End Sub

    Public Sub Habilitar_Encabezado()

        Try

            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                    HabilitarEncabezado = False
                    HabilitarFecha = False
                    HabilitarFechaAplicacion = False
                    HabilitarBuscadorCliente = False
                    HabilitarTipoProducto = False 'JCM20181126
                Else
                    HabilitarEncabezado = True

                    If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Or objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                        HabilitarFecha = False
                        HabilitarFechaAplicacion = False
                    Else
                        HabilitarFecha = True
                        HabilitarFechaAplicacion = True
                    End If

                    HabilitarBuscadorCliente = True
                    HabilitarTipoProducto = True 'JCM20181126
                End If
            End If
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > 0 Then
                    HabilitarEncabezado = False
                    HabilitarFecha = False
                    HabilitarFechaAplicacion = False
                    HabilitarBuscadorCliente = False
                    HabilitarTipoProducto = False 'JCM20181126
                Else
                    HabilitarEncabezado = True

                    If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Or objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                        HabilitarFecha = False
                        HabilitarFechaAplicacion = False
                    Else
                        HabilitarFecha = True
                        HabilitarFechaAplicacion = True
                    End If

                    HabilitarBuscadorCliente = True
                    HabilitarTipoProducto = True 'JCM20181126
                End If
            End If



            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > 0 Then
                    HabilitarEncabezado = False
                    HabilitarFecha = False
                    HabilitarFechaAplicacion = False
                    HabilitarBuscadorCliente = False
                    HabilitarTipoProducto = False 'JCM20181126
                Else
                    HabilitarEncabezado = True

                    If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Or objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                        HabilitarFecha = False
                        HabilitarFechaAplicacion = False
                    Else
                        HabilitarFecha = True
                        HabilitarFechaAplicacion = True
                    End If

                    HabilitarBuscadorCliente = True
                    HabilitarTipoProducto = True 'JCM20181126
                End If
            End If

            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count > 0 Then
                    HabilitarEncabezado = False
                    HabilitarFecha = False
                    HabilitarFechaAplicacion = False
                    HabilitarBuscadorCliente = False
                    HabilitarTipoProducto = False 'JCM20181126
                Else
                    HabilitarEncabezado = True

                    If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Or objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                        HabilitarFecha = False
                        HabilitarFechaAplicacion = False
                    Else
                        HabilitarFecha = True
                        HabilitarFechaAplicacion = True
                    End If

                    HabilitarBuscadorCliente = True
                    HabilitarTipoProducto = True 'JCM20181126
                End If
            End If

            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > 0 Then
                    HabilitarEncabezado = False
                    HabilitarFecha = False
                    HabilitarFechaAplicacion = False
                    HabilitarBuscadorCliente = False
                    HabilitarTipoProducto = False 'JCM20181126
                Else
                    HabilitarEncabezado = True

                    If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Or objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                        HabilitarFecha = False
                        HabilitarFechaAplicacion = False
                    Else
                        HabilitarFecha = True
                        HabilitarFechaAplicacion = True
                    End If

                    HabilitarBuscadorCliente = True
                    HabilitarTipoProducto = True 'JCM20181126
                End If
            End If



            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                    HabilitarEncabezado = False
                    HabilitarFecha = False
                    HabilitarFechaAplicacion = False
                    HabilitarBuscadorCliente = False
                    HabilitarTipoProducto = False 'JCM20181126
                Else
                    HabilitarEncabezado = True

                    If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Or objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                        HabilitarFecha = False
                        HabilitarFechaAplicacion = False
                    Else
                        HabilitarFecha = True
                        HabilitarFechaAplicacion = True
                    End If

                    HabilitarBuscadorCliente = True
                    HabilitarTipoProducto = True 'JCM20181126
                End If
            End If




            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count > 0 Then
                    HabilitarEncabezado = False
                    HabilitarFecha = False
                    HabilitarFechaAplicacion = False
                    HabilitarBuscadorCliente = False
                    HabilitarTipoProducto = False 'JCM20181126
                Else
                    HabilitarEncabezado = True

                    If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Or objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                        HabilitarFecha = False
                        HabilitarFechaAplicacion = False
                    Else
                        HabilitarFecha = True
                        HabilitarFechaAplicacion = True
                    End If

                    HabilitarBuscadorCliente = True
                    HabilitarTipoProducto = True 'JCM20181126
                End If
            End If




            If logDuplicarRegistro Then
                HabilitarFecha = True
                HabilitarFechaAplicacion = True
            End If

        Catch ex As Exception

        End Try
    End Sub

    Public Sub MostrarMensajeGMF(pstrTipoGMF As String)
        If pstrTipoGMF = GSTR_GMF_ENCIMA Then
            A2Utilidades.Mensajes.mostrarMensaje("No se puede calcular el valor del GMF por encima ya que no esta configurado correctamente, o este tiene un valor igual a CERO", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
        ElseIf pstrTipoGMF = GSTR_GMF_DEBAJO Then
            A2Utilidades.Mensajes.mostrarMensaje("No se puede calcular el valor del GMF por debajo ya que no esta configurado correctamente, o este tiene un valor igual a CERO", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
        End If
    End Sub

    Public Sub BuscarControlValidacion(ByVal pViewOrdenesTesoreria As ComprobantesEgresoPLUSView, ByVal pstrOpcion As String)
        Try
            If Not IsNothing(pViewOrdenesTesoreria) Then

                If TypeOf pViewOrdenesTesoreria.stackpEdicion.FindName(pstrOpcion) Is TabItem Then

                    CType(pViewOrdenesTesoreria.stackpEdicion.FindName(pstrOpcion), TabItem).IsSelected = True
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al buscar el control dentro de la orden.", Me.ToString, "BuscarControlValidacion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Public Sub OrganizarNuevaBusqueda()
        Try
            Dim objBusqueda As New CamposBusquedaTesoreriaOyDPLUS
            objBusqueda.lngID = 0
            objBusqueda.strIDComitente = String.Empty
            objBusqueda.strCodigoReceptor = String.Empty
            objBusqueda.strEstado = String.Empty
            objBusqueda.strNroDocumento = String.Empty

            cb = objBusqueda

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al organizar la nueva busqueda.", Me.ToString(), "OrganizarNuevaBusqueda", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub Filtrar()
        Try
            IsBusy = True
            If Not IsNothing(dcProxy.TesoreriaOrdenesEncabezados) Then
                dcProxy.TesoreriaOrdenesEncabezados.Clear()
            End If

            If FiltroVM.Length > 0 Then
                Dim objValidacion = clsExpresiones.ValidarCaracteresEnCadena(FiltroVM, clsExpresiones.TipoExpresion.LetrasNumeros)
                Dim logConsultar As Boolean = True
                Dim strEstadoFiltro As String = String.Empty

                If VistaSeleccionada = GSTR_ANULADAS Then
                    strEstadoFiltro = GSTR_ANULADA_Plus
                ElseIf VistaSeleccionada = GSTR_PENDIENTES Then
                    strEstadoFiltro = GSTR_PENDIENTE_Plus
                ElseIf VistaSeleccionada = GSTR_RECHAZADAS Then
                    strEstadoFiltro = GSTR_RECHAZADAS_Plus
                ElseIf VistaSeleccionada = GSTR_POR_APROBAR Then
                    strEstadoFiltro = GSTR_PENDIENTEAPROBACION_Plus
                ElseIf VistaSeleccionada = GSTR_FUTURAS Then
                    strEstadoFiltro = GSTR_FUTURA_Plus
                ElseIf VistaSeleccionada = GSTR_PROGRAMADAS Then
                    strEstadoFiltro = GSTR_PROGRAMADA_Plus
                ElseIf VistaSeleccionada = GSTR_DIVIDENDOS Then
                    strEstadoFiltro = GSTR_DIVIDENDOS_Plus
                End If

                If Not IsNothing(objValidacion) Then
                    If objValidacion.TextoValido = False Then
                        logConsultar = False
                    End If
                End If

                If logConsultar Then
                    logFiltrar = True
                    If logXTesorero Then
                        dcProxy.Load(dcProxy.TesoreriaOrdenesConsultarQuery(Nothing, Nothing, strEstadoFiltro, Nothing, Nothing, Nothing, FiltroVM, Program.Usuario, "TESORERO",
                                                                        GSTR_ORDENGIRO, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesConsultar, "FILTRAR")
                    Else
                        dcProxy.Load(dcProxy.TesoreriaOrdenesConsultarQuery(Nothing, Nothing, strEstadoFiltro, Nothing, Nothing, Nothing, FiltroVM, Program.Usuario, "",
                                                                        GSTR_ORDENGIRO, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesConsultar, "FILTRAR")
                    End If
                Else
                    IsBusy = False
                    FiltroVM = String.Empty
                    mostrarMensaje("¡La opción filtrar no se puede realizar, el filtro que ingreso posee caracteres NO válidos!", "Filtrar", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If
            Else
                IsBusy = False
                IsBusyDetalles = False
                TraerOrdenes("", VistaSeleccionada)
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la implementación del filtro", Me.ToString(), "Filtrar", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub AbrirAccionesOrdenGiro()
        Try
            If (VistaSeleccionada = GSTR_PENDIENTES _
                Or VistaSeleccionada = GSTR_RECHAZADAS _
                Or VistaSeleccionada = GSTR_POR_APROBAR _
                Or VistaSeleccionada = GSTR_ANULADAS _
                Or VistaSeleccionada = GSTR_FUTURAS) _
                And Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then

                Dim viewEstadosDocumento As New ConsultarEstadoDocumentoView
                viewEstadosDocumento.IDDocumento = _TesoreriaOrdenesPlusCE_Selected.lngID
                viewEstadosDocumento.IDNumeroUnico = _TesoreriaOrdenesPlusCE_Selected.lngID
                viewEstadosDocumento.Modulo = "ORDENES TESORERIA"
                viewEstadosDocumento.ConsultarEstados = True
                viewEstadosDocumento.Top = (Application.Current.MainWindow.ActualHeight / 2) - 120
                viewEstadosDocumento.Left = 50

                Program.Modal_OwnerMainWindowsPrincipal(viewEstadosDocumento)
                viewEstadosDocumento.ShowDialog()
            ElseIf VistaSeleccionada = GSTR_PROGRAMADAS Then
                AbrirProgramacionOrden()
            ElseIf VistaSeleccionada = GSTR_DIVIDENDOS Then
                Dim objEspecieDividendos As New EspecieDividendos(_TesoreriaOrdenesPlusCE_Selected.strEspecieDividendos)
                Program.Modal_OwnerMainWindowsPrincipal(objEspecieDividendos)
                objEspecieDividendos.ShowDialog()
            End If
        Catch ex As Exception

        End Try
    End Sub

    Public Overrides Sub Buscar()
        Try
            OrganizarNuevaBusqueda()
            MyBase.Buscar()
            MyBase.CambioItem("visBuscando")
            MyBase.CambioItem("visNavegando")
            HabilitarProgramaciones = False
            MostrarBotonDuplicar = False
        Catch ex As Exception
            IsBusy = False
            HabilitarProgramaciones = True
            MostrarBotonDuplicar = True
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la implementación de busqueda", Me.ToString(), "Buscar", Program.TituloSistema, Program.Maquina, ex)

        End Try

    End Sub

    Public Overrides Sub CancelarBuscar()
        MyBase.CancelarBuscar()
        HabilitarProgramaciones = True
        MostrarBotonDuplicar = True
    End Sub

    Public Overrides Sub ConfirmarBuscar()
        Try
            HabilitarProgramaciones = True
            MostrarBotonDuplicar = True

            If cb.lngID <> 0 Or Not String.IsNullOrEmpty(cb.strNroDocumento) Or
                    Not String.IsNullOrEmpty(cb.strEstado) Or Not String.IsNullOrEmpty(cb.strIDComitente) Or
                    Not String.IsNullOrEmpty(cb.strCodigoReceptor) Or Not String.IsNullOrEmpty(cb.strTipoProducto) Then
                IsBusy = True
                ErrorForma = ""
                logBuscar = True
                TesoreriaOrdenesPlusAnterior = Nothing
                If Not IsNothing(dcProxy.TesoreriaOrdenesEncabezados) Then
                    dcProxy.TesoreriaOrdenesEncabezados.Clear()
                End If

                dcProxy.Load(dcProxy.TesoreriaOrdenesConsultarQuery(cb.lngID, cb.strNroDocumento, cb.strEstado, cb.strIDComitente, cb.strCodigoReceptor, cb.strTipoProducto, Nothing, Program.Usuario, "CON", GSTR_ORDENGIRO, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesConsultar, "")
                MyBase.ConfirmarBuscar()
                cb = New CamposBusquedaTesoreriaOyDPLUS
            Else
                mostrarMensaje("Para Realizar la Busqueda ingrese los Datos Correspondientes", "Confirmar Buscar", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusy = False
        End Try

    End Sub

    Public Sub actualizarComitenteOrden(objComitente As OYDUtilidades.BuscadorClientes)
        Try
            ComitenteSeleccionado = objComitente
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la actualización del Cliente",
                                                         Me.ToString(), "actualizarComitenteOrden", Application.Current.ToString(), Program.Maquina, ex)

        End Try
    End Sub

    Public Sub LimpiarVariablesSubirDocumentos(ByVal plogLimpiarVariablesArchivos As Boolean)
        Try
            If Not IsNothing(_mobjCtlSubirArchivo) Then
                _mobjCtlSubirArchivo.inicializarControl()
            End If

            configurarDocumentos()
            If plogLimpiarVariablesArchivos Then
                mstrArchivo = String.Empty
                mstrRuta = String.Empty
                mabytArchivo = Nothing
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al actualizar la variables de subir los documentos.",
                                                         Me.ToString(), "LimpiarVariablesSubirDocumentos", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Sub configurarDocumentos(Optional ByVal pobjCtlSubirArchivos As A2DocumentosWPF.A2SubirDocumento = Nothing)
        Try
            If IsNothing(pobjCtlSubirArchivos) Then
                If Not IsNothing(_mobjCtlSubirArchivo) Then
                    _mobjCtlSubirArchivo.URLServicioDocumentos = GSTR_SERVICIO_DOCUMENTOS
                    _mobjCtlSubirArchivo.Aplicacion = Program.Aplicacion
                    _mobjCtlSubirArchivo.Version = Program.VersionAplicacion
                    _mobjCtlSubirArchivo.SoloCapturarRutaArchivo = "True"
                    _mobjCtlSubirArchivo.AnchoNombreArchivo = "200"
                    _mobjCtlSubirArchivo.Modulo = "OT"
                    _mobjCtlSubirArchivo.Tema = "OrdenesGiro"
                    _mobjCtlSubirArchivo.Subtema = ""
                    If logEditarRegistro Then
                        If Not IsNothing(TesoreriaOrdenesPlusCE_Selected) Then
                            _mobjCtlSubirArchivo.ClaveUnica = TesoreriaOrdenesPlusCE_Selected.lngID
                        End If
                    End If
                    _mobjCtlSubirArchivo.TagsBusqueda = "Carta, autorización, pagos, giro, orden"
                    _mobjCtlSubirArchivo.Titulo = "Carta de Autorización de pagos ordenes de giro"
                    _mobjCtlSubirArchivo.Descripcion = "Servicio documentos Ordenes de giro OyD Plus"
                    _mobjCtlSubirArchivo.UsuarioActivo = Program.Usuario
                    _mobjCtlSubirArchivo.FiltroArchivos = "Todos los archivos (*.*)|*.*|Texto (*.txt)|*.txt|Excel 2010 (*.xlsx)|*.xlsx|Word 2010 (*.docx)|*.docx|Excel 2003 (.xls)|*.xls|Word 2003 (*.doc)|*.doc"
                    _mobjCtlSubirArchivo.MostrarLog = "False"
                    _mobjCtlSubirArchivo.TituloSistema = "Ordenes de Giro"
                    _mobjCtlSubirArchivo.TextoBotonSubirArchivo = "Cargar archivo"

                    Dim logMensaje As Boolean = False
                    If Not String.IsNullOrEmpty(Program.MostrarMensajeLog) Then
                        If Program.MostrarMensajeLog = "1" Then
                            logMensaje = True
                        End If
                    End If

                    _mobjCtlSubirArchivo.MostrarMensajeFinalizacion = logMensaje
                    _mobjCtlSubirArchivo.MostrarNombreArchivo = True
                    _mobjCtlSubirArchivo.MostrarLog = logMensaje
                End If
            Else
                If Not IsNothing(pobjCtlSubirArchivos) Then
                    pobjCtlSubirArchivos.URLServicioDocumentos = GSTR_SERVICIO_DOCUMENTOS
                    pobjCtlSubirArchivos.Aplicacion = Program.Aplicacion
                    pobjCtlSubirArchivos.Version = Program.VersionAplicacion
                    pobjCtlSubirArchivos.SoloCapturarRutaArchivo = "True"
                    pobjCtlSubirArchivos.AnchoNombreArchivo = "200"
                    pobjCtlSubirArchivos.Modulo = "OT"
                    pobjCtlSubirArchivos.Tema = "OrdenesGiro"
                    pobjCtlSubirArchivos.Subtema = ""
                    If logEditarRegistro Then
                        If Not IsNothing(TesoreriaOrdenesPlusCE_Selected) Then
                            pobjCtlSubirArchivos.ClaveUnica = TesoreriaOrdenesPlusCE_Selected.lngID
                        End If
                    End If
                    pobjCtlSubirArchivos.TagsBusqueda = "Carta, autorización, pagos, giro, orden"
                    pobjCtlSubirArchivos.Titulo = "Carta de Autorización de pagos ordenes de giro"
                    pobjCtlSubirArchivos.Descripcion = "Servicio documentos Ordenes de giro OyD Plus"
                    pobjCtlSubirArchivos.UsuarioActivo = Program.Usuario
                    pobjCtlSubirArchivos.FiltroArchivos = "Todos los archivos (*.*)|*.*|Texto (*.txt)|*.txt|Excel 2010 (*.xlsx)|*.xlsx|Word 2010 (*.docx)|*.docx|Excel 2003 (.xls)|*.xls|Word 2003 (*.doc)|*.doc"
                    pobjCtlSubirArchivos.MostrarLog = "False"
                    pobjCtlSubirArchivos.TituloSistema = "Ordenes de Giro"
                    pobjCtlSubirArchivos.TextoBotonSubirArchivo = "Cargar archivo"

                    Dim logMensaje As Boolean = False
                    If Not String.IsNullOrEmpty(Program.MostrarMensajeLog) Then
                        If Program.MostrarMensajeLog = "1" Then
                            logMensaje = True
                        End If
                    End If

                    pobjCtlSubirArchivos.MostrarMensajeFinalizacion = logMensaje
                    pobjCtlSubirArchivos.MostrarNombreArchivo = True
                    pobjCtlSubirArchivos.MostrarLog = logMensaje
                End If
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al configurar la subida de archivo.", Me.ToString(), "configurarDocumentos", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Public Overrides Async Sub NuevoRegistro()
        Try
            If dcProxy.IsLoading Then
                FechaAplicacion = dtmFechaServidor

            End If

            dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
            FechaOrden = dtmFechaServidor


            objTipoOrdenNueva = TipoOrdenGiroNueva.NORMAL
            NuevaOrdenGiro()
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la creación de un nuevo registro",
                                                         Me.ToString(), "NuevoRegistro", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Sub NuevaOrdenGiro()

        If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Or objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
            HabilitarFecha = False
            HabilitarFechaAplicacion = False
        Else
            HabilitarFecha = True
            HabilitarFechaAplicacion = True
        End If

        Try
            LimpiarVariablesSubirDocumentos(True)
            VerDuplicar = Visibility.Collapsed
            HabilitarInstrucciones = False
            HabilitarEnEdicion = True
            HabilitarEncabezado = True
            HabilitarEdicionEncabezado = True
            CodigoOYDControles = Nothing
            TipoProductoControles = Nothing
            CarteraColectivaFondosControles = Nothing
            NroEncargoFondosControles = Nothing
            'ConsultarSaldo = True
            logNuevoRegistro = True
            logEditarRegistro = False
            logDuplicarRegistro = False
            logBuscar = False
            HabilitarReceptor = True
            HabilitarBuscadorCliente = False
            If BorrarCliente Then
                BorrarCliente = False
            End If
            ValorEdicionDetalle = 0
            BorrarCliente = True
            Dim xDefecto As New TesoreriaOrdenesEncabezado
            CuentaRegistradaInstrucciones = Nothing

            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                ObtenerValoresOrdenAnterior(_TesoreriaOrdenesPlusCE_Selected, TesoreriaOrdenesPlusAnterior)
            End If

            LimpiarDetalles()
            '*****

            xDefecto.strNombre = String.Empty
            xDefecto.lngNroDocumento = 0
            xDefecto.strIDComitente = Nothing
            xDefecto.strEstado = String.Empty
            xDefecto.strNroDocumento = String.Empty
            xDefecto.curValor = 0
            xDefecto.strCuentaCliente = String.Empty
            xDefecto.strTipoIdentificacion = String.Empty
            xDefecto.strTipoProducto = String.Empty
            xDefecto.ValorTipoProducto = String.Empty
            xDefecto.strCodigoReceptor = String.Empty
            xDefecto.strNombreConsecutivo = String.Empty
            xDefecto.dtmActualizacion = dtmFechaServidor
            xDefecto.dtmDocumento = dtmFechaServidor
            xDefecto.strTipo = GSTR_ORDENGIRO
            xDefecto.strUsuario = Program.Usuario
            xDefecto.strUsuarioWindows = Program.UsuarioWindows

            TesoreriaOrdenesPlusCE_Selected = xDefecto
            _TesoreriaOrdenesPlusCE_Selected.strNombre = xDefecto.strNombre
            _TesoreriaOrdenesPlusCE_Selected.lngNroDocumento = xDefecto.lngNroDocumento
            _TesoreriaOrdenesPlusCE_Selected.lngIDDocumento = xDefecto.lngIDDocumento
            _TesoreriaOrdenesPlusCE_Selected.strIDComitente = xDefecto.strIDComitente

            _TesoreriaOrdenesPlusCE_Selected.strEstado = xDefecto.strEstado
            _TesoreriaOrdenesPlusCE_Selected.strNroDocumento = xDefecto.strNroDocumento
            _TesoreriaOrdenesPlusCE_Selected.curValor = xDefecto.curValor
            _TesoreriaOrdenesPlusCE_Selected.strCuentaCliente = xDefecto.strCuentaCliente
            _TesoreriaOrdenesPlusCE_Selected.strTipoIdentificacion = xDefecto.strTipoIdentificacion
            _TesoreriaOrdenesPlusCE_Selected.strTipoProducto = xDefecto.strTipoProducto
            _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = xDefecto.ValorTipoProducto
            _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor = xDefecto.strCodigoReceptor
            _TesoreriaOrdenesPlusCE_Selected.ValorTipo = GSTR_ORDENGIRO
            _TesoreriaOrdenesPlusCE_Selected.lngIDOrdenante = xDefecto.lngIDOrdenante
            _TesoreriaOrdenesPlusCE_Selected.strNombreOrdenante = xDefecto.strNombreOrdenante
            _TesoreriaOrdenesPlusCE_Selected.strUsuarioWindows = xDefecto.strUsuarioWindows

            ListaOrdenantesOYDPLUS = Nothing
            OrdenanteSeleccionadoOYDPLUS = Nothing

            _TesoreriaOrdenesPlusCE_Selected.strEspecieDividendos = Nothing

            If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                If Not String.IsNullOrEmpty(strEspecieDividendosSeleccionada) And strEspecieDividendosSeleccionada <> "TODAS" Then
                    _TesoreriaOrdenesPlusCE_Selected.strEspecieDividendos = strEspecieDividendosSeleccionada
                End If
            End If

            ValidarHabilitarValorDetalles()

            strNombreInstrucciones = String.Empty
            strNroDocumentoInstrucciones = String.Empty
            strTipoIdentificacionInstrucciones = String.Empty
            strDireccionInstrucciones = String.Empty
            strCiudadInstrucciones = String.Empty
            ClientePresente = False
            ClienteRecoge = False
            strCodigoBancoInstrucciones = String.Empty
            strOtrosInstrucciones = String.Empty
            OtrosChecked = False

            LlevarDireccion = False
            RecogeTercero = False
            ConsignarCuentaChecked = False
            CalcularTotales(GSTR_CHEQUE)
            CalcularTotales(GSTR_TRANSFERENCIA)
            CalcularTotales(GSTR_INTERNOS)
            CalcularTotales(GSTR_CARTERASCOLECTIVAS)
            CalcularTotales(GSTR_TRASLADOFONDOS)
            CalcularTotales(GSTR_BLOQUEO_RECURSOS)
            CalcularTotales(GSTR_OYD)
            CalcularTotales(GSTR_OPERACIONES_ESPECIALES)
            HabilitarConsultarSaldo()
            Editando = True

            VerificarPrimerTabHabilitado()
            MyBase.CambioItem("Editando")
            CargarReceptoresUsuarioOYDPLUS("")

            dblValorOrdenAntesModificar = 0
            CambiarColorFondoTextoBuscador()

            If visNavegando = "Collapsed" Then
                MyBase.CambiarFormulario_Forma_Manual()
            End If
            'BotonesOrdenes = True 'JRP se cambia el valor a la variable para que muestre los botones de las operaciones de Ordenes
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la creación de un nuevo registro",
                                                        Me.ToString(), "NuevaOrdenPago", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub LimpiarDetalles()
        If Not IsNothing(dcProxy.TesoreriaOyDPlusCheques) Then
            dcProxy.TesoreriaOyDPlusCheques.Clear()
        End If
        If Not IsNothing(dcProxy.TesoreriaOyDPlusTransferencias) Then
            dcProxy.TesoreriaOyDPlusTransferencias.Clear()
        End If
        If Not IsNothing(dcProxy.TesoreriaOyDPlusCarterasColectivas) Then
            dcProxy.TesoreriaOyDPlusCarterasColectivas.Clear()
        End If
        If Not IsNothing(dcProxy.TesoreriaOyDPlusInternos) Then
            dcProxy.TesoreriaOyDPlusInternos.Clear()
        End If
        If Not IsNothing(dcProxy.TesoreriaOyDPlusBloqueos) Then
            dcProxy.TesoreriaOyDPlusBloqueos.Clear()
        End If
        If Not IsNothing(dcProxy.TesoreriaOyDPlusOYDs) Then
            dcProxy.TesoreriaOyDPlusOYDs.Clear()
        End If
        If Not IsNothing(dcProxy.TesoreriaOyDPlusOperacionesEspeciales) Then
            dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Clear()
        End If

        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
            ListaTesoreriaOrdenesPlusCE_Detalle_Cheques = Nothing
            TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected = Nothing
        End If
        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
            ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias = Nothing
            TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = Nothing
        End If
        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
            ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = Nothing
            TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = Nothing
        End If
        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
            ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = Nothing
            TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = Nothing
        End If
        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
            ListaTesoreriaOrdenesPlusCE_Detalle_Internos = Nothing
            TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = Nothing
        End If
        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
            ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos = Nothing
            TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = Nothing
        End If
        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
            ListaTesoreriaOrdenesPlusCE_Detalle_OYD = Nothing
            TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = Nothing
        End If
        If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
            ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = Nothing
            TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = Nothing
        End If
    End Sub

    Public Sub AbrirProgramacionOrden(Optional ByVal pintIDOrdenGiro As Integer = 0)
        Try
            Dim objProgramaciones As New ucProgramacionesView()
            AddHandler objProgramaciones.Closed, AddressOf TerminoSeleccionarProgramacion
            objProgramaciones.Modulo = "OT"
            If pintIDOrdenGiro <> 0 Then
                objProgramaciones.NroDocumento = pintIDOrdenGiro
            Else
                objProgramaciones.NroDocumento = TesoreriaOrdenesPlusCE_Selected.lngID
            End If

            Program.Modal_OwnerMainWindowsPrincipal(objProgramaciones)
            objProgramaciones.ShowDialog()
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abrir ",
                                                        Me.ToString(), "AbrirProgramacionOrden", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Sub NuevaOrdenPrograma()
        Try
            Dim objTipoOrden As New TipoOrdenGiro()
            AddHandler objTipoOrden.Closed, AddressOf TerminoPreguntarTipoOrdenProgramada
            Program.Modal_OwnerMainWindowsPrincipal(objTipoOrden)
            objTipoOrden.ShowDialog()
            logNuevoRegistro = True
        Catch ex As Exception
            IsBusy = False
            logNuevoRegistro = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear la nueva orden programada.",
                                                         Me.ToString(), "NuevaOrdenPrograma", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Function ValidarCreacionDetalleOrdenDividendos() As Boolean
        Dim logPuedeEditar As Boolean = True
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) And logNuevoRegistro Then
                If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                        If _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                            logPuedeEditar = False
                            mostrarMensaje("Ya se creó un detalle para la programación de dividendos en la pestaña de cheques, sí desea crear otro detalle elimine el detalle y cree el detalle que necesite.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If
                    End If
                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                        If _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > 0 Then
                            logPuedeEditar = False
                            mostrarMensaje("Ya se creó un detalle para la programación de dividendos en la pestaña de transferencias, sí desea crear otro detalle elimine el detalle y cree el detalle que necesite.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If
                    End If
                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                        If _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                            logPuedeEditar = False
                            mostrarMensaje("Ya se creó un detalle para la programación de dividendos en la pestaña de carteras colectivas, sí desea crear otro detalle elimine el detalle y cree el detalle que necesite.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If
                    End If
                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                        If _ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > 0 Then
                            logPuedeEditar = False
                            mostrarMensaje("Ya se creó un detalle para la programación de dividendos en la pestaña de internos, sí desea crear otro detalle elimine el detalle y cree el detalle que necesite.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar los detalles de las ordenes de Pago.",
                                                         Me.ToString(), "ValidarCreacionDetalleOrdenDividendos", Application.Current.ToString(), Program.Maquina, ex)
            logPuedeEditar = False
        End Try
        Return logPuedeEditar
    End Function

    Public Function ValidarHabilitarValorDetalle() As Boolean
        Dim logHabilitarValor As Boolean = True
        Try
            If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                logHabilitarValor = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar los detalles de las ordenes de Pago.",
                                                         Me.ToString(), "ValidarCreacionDetalleOrdenDividendos", Application.Current.ToString(), Program.Maquina, ex)
            logHabilitarValor = False
        End Try
        Return logHabilitarValor
    End Function

    Public Function ValidarTieneOrdenEnCero() As Boolean
        Dim logTieneValorEnCero As Boolean = True
        Try
            Dim intCantidadOrdenEnCero As Integer = 0

            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                    If li.curValor = 0 Then
                        intCantidadOrdenEnCero += 1
                    End If
                Next
                'JAPC20200504: S-45740 : se realiza validacion  para detectar si el detalle de cheques para cancelaciones de fondos a editar es el unico que tiene valor 0 y posteriormente dejar hacer esta edicion en view model controlando que no se ingresen mas detalles en 0
                If intCantidadOrdenEnCero = 1 And _TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValor = 0 And logEditarCheque = True Then
                    intCantidadOrdenEnCero = 0
                End If
            End If

            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                    If li.curValor = 0 Then
                        intCantidadOrdenEnCero += 1
                    End If
                Next
                'JAPC20200504: S-45740 : se realiza validacion  para detectar si el detalle de transferencias para cancelaciones de fondos a editar es el unico que tiene valor 0 y posteriormente dejar hacer esta edicion en view model controlando que no se ingresen mas detalles en 0
                If intCantidadOrdenEnCero = 1 And _TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValor = 0 And logEditarTransferencia = True Then
                    intCantidadOrdenEnCero = 0
                End If
            End If

            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                    If li.curValor = 0 Then
                        intCantidadOrdenEnCero += 1
                    End If
                Next
                'JAPC20200504: S-45740 : se realiza validacion  para detectar si el detalle de OyD para cancelaciones de fondos a editar es el unico que tiene valor 0 y posteriormente dejar hacer esta edicion en view model controlando que no se ingresen mas detalles en 0
                If intCantidadOrdenEnCero = 1 And _TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValor = 0 And logEditarOYD = True Then
                    intCantidadOrdenEnCero = 0
                End If
            End If

            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos
                    If li.curValor = 0 Then
                        intCantidadOrdenEnCero += 1
                    End If
                Next
                'JAPC20200504: S-45740 : se realiza validacion  para detectar si el detalle de traslado fondos para cancelaciones de fondos a editar es el unico que tiene valor 0 y posteriormente dejar hacer esta edicion en view model controlando que no se ingresen mas detalles en 0
                If intCantidadOrdenEnCero = 1 And _TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.curValor = 0 And logEditarTrasladoFondos = True Then
                    intCantidadOrdenEnCero = 0
                End If
            End If

            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                    If li.curValor = 0 Then
                        intCantidadOrdenEnCero += 1
                    End If
                Next
                'JAPC20200504: S-45740 : se realiza validacion  para detectar si el detalle de operaciones especiales para cancelaciones de fondos a editar es el unico que tiene valor 0 y posteriormente dejar hacer esta edicion en view model controlando que no se ingresen mas detalles en 0
                If intCantidadOrdenEnCero = 1 And _TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.curValor = 0 And logEditarBloqueo = True Then
                    intCantidadOrdenEnCero = 0
                End If
            End If

            If intCantidadOrdenEnCero > 0 Then
                logTieneValorEnCero = True
            Else
                logTieneValorEnCero = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar los detalles de las ordenes de Pago.",
                                                         Me.ToString(), "ValidarCreacionDetalleOrdenDividendos", Application.Current.ToString(), Program.Maquina, ex)
            logTieneValorEnCero = False
        End Try
        Return logTieneValorEnCero
    End Function

    Private Sub TerminoPreguntarTipoOrdenProgramada(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objRespuesta As TipoOrdenGiro = CType(sender, TipoOrdenGiro)

            If objRespuesta.DialogResult Then
                If objRespuesta.rbtTipoOrdenRecurrente.IsChecked Then
                    objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA
                    NuevaOrdenGiro()
                ElseIf objRespuesta.rbtTipoOrdenDividendos.IsChecked Then
                    Dim objEspecieDividendos As New EspecieDividendos()
                    AddHandler objEspecieDividendos.Closed, AddressOf TerminoSeleccionarEspecieDividendos
                    Program.Modal_OwnerMainWindowsPrincipal(objEspecieDividendos)
                    objEspecieDividendos.ShowDialog()
                End If
            Else
                logNuevoRegistro = False
            End If
        Catch ex As Exception
            logNuevoRegistro = False
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta de la orden programada.",
                                                         Me.ToString(), "TerminoPreguntarTipoOrdenProgramada", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoSeleccionarEspecieDividendos(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objRespuesta As EspecieDividendos = CType(sender, EspecieDividendos)

            If objRespuesta.DialogResult Then
                objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS
                strEspecieDividendosSeleccionada = objRespuesta.EspecieSeleccionada

                NuevaOrdenGiro()
            Else
                logNuevoRegistro = False
            End If
        Catch ex As Exception
            IsBusy = False
            logNuevoRegistro = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al seleccionar la orden de dividendos.",
                                                         Me.ToString(), "TerminoSeleccionarEspecieDividendos", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoSeleccionarProgramacion(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objRespuesta As ucProgramacionesView = CType(sender, ucProgramacionesView)

            If objRespuesta.DialogResult Then
            End If
        Catch ex As Exception
            IsBusy = False
            logNuevoRegistro = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al seleccionar la programacion de la orden.",
                                                         Me.ToString(), "TerminoSeleccionarProgramacion", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Sub GuardarInstrucciones()
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                Dim intPosicion As Integer = 0
                _TesoreriaOrdenesPlusCE_Selected.logClienteRecoge = ClienteRecoge
                _TesoreriaOrdenesPlusCE_Selected.logClientePresente = ClientePresente
                _TesoreriaOrdenesPlusCE_Selected.logllevarDireccion = LlevarDireccion
                _TesoreriaOrdenesPlusCE_Selected.logRecogeTercero = RecogeTercero
                _TesoreriaOrdenesPlusCE_Selected.logConsignarCta = ConsignarCuentaChecked
                _TesoreriaOrdenesPlusCE_Selected.logEsCtaInscrita_Instrucciones = logEsCtaInscrita_Instrucciones
                _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion_Instrucciones = strTipoIdentificacionInstrucciones
                _TesoreriaOrdenesPlusCE_Selected.strNroDocumento_Instrucciones = strNroDocumentoInstrucciones
                _TesoreriaOrdenesPlusCE_Selected.strNombre_Instrucciones = strNombreInstrucciones
                _TesoreriaOrdenesPlusCE_Selected.logDireccionInscrita_Instrucciones = logDireccionInscrita_Instrucciones
                _TesoreriaOrdenesPlusCE_Selected.strCuenta_Instrucciones = strCuentaInstrucciones
                _TesoreriaOrdenesPlusCE_Selected.strDireccion_Instrucciones = strDireccionInstrucciones
                _TesoreriaOrdenesPlusCE_Selected.strCiudad_Instrucciones = strCiudadInstrucciones
                _TesoreriaOrdenesPlusCE_Selected.strSector_Instrucciones = strSectorInstrucciones
                _TesoreriaOrdenesPlusCE_Selected.logEsTercero_Instrucciones = logEsTercero_Instrucciones
                _TesoreriaOrdenesPlusCE_Selected.logEsCtaInscrita_Instrucciones = logEsCtaInscrita_Instrucciones
                _TesoreriaOrdenesPlusCE_Selected.ValorTipoCta_Instrucciones = strValorTipoCuentaInstrucciones
                _TesoreriaOrdenesPlusCE_Selected.logOtra_Instrucciones = OtrosChecked
                _TesoreriaOrdenesPlusCE_Selected.strOtros_Instrucciones = strOtrosInstrucciones

                If Not String.IsNullOrEmpty(strCodigoBancoInstrucciones) Then
                    Dim a = Split(strCodigoBancoInstrucciones, "-")
                    Try
                        _TesoreriaOrdenesPlusCE_Selected.lngIDBanco = a(0)
                    Catch ex As Exception

                    End Try
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyEdicionTesorero = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema guardando Instrucciones", Me.ToString(), "GuardarInstrucciones", Program.TituloSistema, Program.Maquina, ex)

        End Try
    End Sub

    Public Sub ValidarListarRestrictivas(pstrRegistros As String)
        Try
            IsBusy = True
            If Not IsNothing(dcProxy.tblRespuestaValidacionesTesorerias) Then
                dcProxy.tblRespuestaValidacionesTesorerias.Clear()
            End If
            'dcProxy.Load(dcProxy.ValidarListaRestrictivaQuery(pstrRegistros, Program.Usuario, 0), AddressOf TerminoValidarListasRestrictivas, "")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema Validar Listas Restrictivas", Me.ToString(), "ValidarListarRestrictivas", Program.TituloSistema, Program.Maquina, ex)

        End Try
    End Sub

    Public Sub Validarfecha()
        Try
            If logValidarFechaOrden Then
                logValidarFechaOrden = False
                dcProxy.tblFechasHabiles.Clear()
                dcProxy.Load(dcProxy.CalcularDiaHabilQuery(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, FechaOrden.ToShortDateString, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarFechas, "Validarfecha")
            End If
        Catch ex As Exception
            logValidarFechaOrden = True
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar fechas.", Me.ToString(), "Validarfecha", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub ObtenerProximaFechaHabilFondo(ByVal pdtmFechaCierre As Nullable(Of DateTime))
        Try
            Dim pdtmFechaConsulta As DateTime = Nothing

            If Not IsNothing(pdtmFechaCierre) Then
                pdtmFechaConsulta = pdtmFechaCierre.Value.AddDays(1)
                logValidarFechaOrden = False
                FechaOrden = pdtmFechaConsulta
            Else
                pdtmFechaConsulta = FechaOrden
            End If

            dcProxy.tblFechasHabiles.Clear()
            dcProxy.Load(dcProxy.CalcularDiaHabilQuery(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, pdtmFechaConsulta.ToShortDateString, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarFechas, "ValidarFechaCierre")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar fechas.", Me.ToString(), "Validarfecha", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub Validarfechaaplicacion(Optional ByVal plogEsDesdeCartera As Boolean = False)
        Try
            If logValidarFechaAplicacion Then
                Dim logTieneMensajeValidacion As Boolean = False

                If plogEsDesdeCartera = False Then
                    If logNuevoRegistro Or logDuplicarRegistro Then
                        If logEsFondosOYD Then
                            If Not IsNothing(FechaAplicacion) And Not IsNothing(FechaOrden) Then
                                If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_RETIRO Then
                                    If FechaAplicacion.Value.Date < FechaOrden.Date Then
                                        mostrarMensaje("La fecha de aplicación no puede ser menor a la fecha de orden.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                        logTieneMensajeValidacion = True
                                        logValidarFechaAplicacion = False
                                        FechaAplicacion = FechaOrden
                                        logValidarFechaAplicacion = True
                                    End If
                                End If
                            ElseIf _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                                If FechaAplicacion.Value.Date < FechaOrden.Date Then
                                    mostrarMensaje("La fecha de aplicación no puede ser menor a la fecha de orden.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                    logTieneMensajeValidacion = True
                                    logValidarFechaAplicacion = False
                                    FechaAplicacion = FechaOrden
                                    logValidarFechaAplicacion = True
                                End If
                            End If

                            If logTieneMensajeValidacion = False Then
                                If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                                    dcProxy.ObtenerFechaAplicacionValida(FechaOrden.Date, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos, Program.Usuario, Program.HashConexion, AddressOf TerminoValidarFechaAplicacionValida, "")
                                Else
                                    dcProxy.tblFechasHabiles.Clear()
                                    dcProxy.Load(dcProxy.CalcularDiaHabilQuery(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, FechaAplicacion.Value.ToShortDateString, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarFechas, "Validarfechaaplicacion")
                                End If
                            End If
                        End If
                    End If
                Else
                    If logEsFondosOYD And logEsTrasladoFondos = False Then
                        If Not IsNothing(FechaAplicacionCartera) And Not IsNothing(FechaOrden) Then
                            If TipoAccionFondos = GSTR_FONDOS_TIPOACCION_ADICION Then
                                If FechaAplicacionCartera.Value.Date < FechaOrden.Date Then
                                    mostrarMensaje("La fecha de aplicación no puede ser menor a la fecha de orden.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                    logTieneMensajeValidacion = True
                                ElseIf FechaAplicacionCartera.Value.Date < DateAdd(DateInterval.Day, intDiasAplicacionFondosAdicion, FechaOrden.Date) Then
                                    mostrarMensaje(String.Format("La fecha de aplicación no puede ser menor a la fecha de orden + los días de aplicación {0:yyyy-MM-dd}", DateAdd(DateInterval.Day, intDiasAplicacionFondosAdicion, FechaOrden.Date)), Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                    logTieneMensajeValidacion = True
                                End If
                            ElseIf TipoAccionFondos = GSTR_FONDOS_TIPOACCION_CONSTITUCION Then
                                If FechaAplicacionCartera.Value.Date < FechaOrden.Date Then
                                    mostrarMensaje("La fecha de aplicación no puede ser menor a la fecha de orden.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                    logTieneMensajeValidacion = True
                                ElseIf FechaAplicacionCartera.Value.Date < DateAdd(DateInterval.Day, intDiasAplicacionFondosApertura, FechaOrden.Date) Then
                                    mostrarMensaje(String.Format("La fecha de aplicación no puede ser menor a la fecha de orden + los días de aplicación {0:yyyy-MM-dd}", DateAdd(DateInterval.Day, intDiasAplicacionFondosApertura, FechaOrden.Date)), Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                    logTieneMensajeValidacion = True
                                End If
                            End If

                            If logTieneMensajeValidacion = False Then
                                dcProxy.tblFechasHabiles.Clear()
                                dcProxy.Load(dcProxy.CalcularDiaHabilQuery(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, FechaAplicacionCartera.Value.ToShortDateString, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarFechas, "Validarfechaaplicacioncartera")
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar fechas.", Me.ToString(), "Validarfechaaplicacion", Program.TituloSistema, Program.Maquina, ex)

        End Try
    End Sub

    Public Overrides Async Sub ActualizarRegistro()
        Try
            If IsBusyDetalles = False Then
                CalcularTotales(GSTR_CHEQUE)
                CalcularTotales(GSTR_TRANSFERENCIA)
                CalcularTotales(GSTR_CARTERASCOLECTIVAS)
                CalcularTotales(GSTR_TRASLADOFONDOS)
                CalcularTotales(GSTR_OYD)
                CalcularTotales(GSTR_INTERNOS)
                CalcularTotales(GSTR_BLOQUEO_RECURSOS)
                CalcularTotales(GSTR_OPERACIONES_ESPECIALES)
                LimpiarVariablesConfirmadas()

                If logNuevoRegistro Or logDuplicarRegistro Then
                    dblValorOrdenAntesModificar = _TesoreriaOrdenesPlusCE_Selected.curValor
                End If

                If ValidarGuardadoOrden(_TesoreriaOrdenesPlusCE_Selected) Then
                    IsBusy = True
                    dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()

                    LimpiarVariablesConfirmadas()
                    dcProxy.tblFechasHabiles.Clear()
                    dcProxy.Load(dcProxy.CalcularDiaHabilQuery(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, FechaOrden, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarFechas, "validar_fecha_guardado")
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la actualización de la orden.", Me.ToString(), "ActualizarRegistro", Program.TituloSistema, Program.Maquina, ex)

        End Try
    End Sub

    Public Sub ActualizarOrdenTesoreria()
        Try
            Dim strDetalleCheques As String = String.Empty
            Dim strDetalleTransferencia As String = String.Empty
            Dim strDetalleCarteras As String = String.Empty
            Dim strDetalleOYD As String = String.Empty
            Dim strDetalleInternos As String = String.Empty
            Dim strDetalleBloqueos As String = String.Empty
            Dim strDetalleOperacionesEspeciales As String = String.Empty

            logGrabar = True
            IsBusy = True
            ValorTotalNOTA_BLOQUEO = 0
            ValorTotalNOTA_OperacionesEspeciales = 0
            strRegistrosDetalle = String.Empty

            Dim origen = "uptate"

            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                GuardarInstrucciones()

                If dcProxy.TesoreriaOrdenesEncabezados.Where(Function(i) i.lngID = _TesoreriaOrdenesPlusCE_Selected.lngID).Count = 0 Then
                    origen = "insert"
                    dcProxy.TesoreriaOrdenesEncabezados.Add(_TesoreriaOrdenesPlusCE_Selected)
                End If


                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                        For Each li In ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                ValorTotalNOTA_OperacionesEspeciales = ValorTotalNOTA_OperacionesEspeciales + li.ValorTotalNota
                            Else
                                ValorTotalNOTA_BLOQUEO = ValorTotalNOTA_BLOQUEO + li.ValorTotalNota
                            End If


                            If Not dcProxy.TesoreriaOyDPlusCheques.Contains(li) Then
                                dcProxy.TesoreriaOyDPlusCheques.Add(li)
                            End If

                            If String.IsNullOrEmpty(strDetalleCheques) Then
                                strDetalleCheques = String.Format("'{0}'**'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'",
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNroDocumento, li.strNombre,
                                                                  li.strTipoDocumento, li.ValorTipoDocumento, li.strDetalleConcepto, li.strTipoCheque, li.ValorTipoCheque,
                                                                  li.strTipoCruce, li.ValorTipoCruce, li.curValor, li.strTipoCobroGMF, li.ValorTipoGMF,
                                                                  li.lngIDConcepto, li.logEsTercero, li.strEsTercero, li.curValorGMF, li.dtmFechaActualizacion,
                                                                  li.strFormaPago, li.curValorNeto, li.strIDTipoCliente, li.ValorTotalNota, li.strEstado,
                                                                  li.curValorSaldoConsultado, li.logEsProcesada, li.strCodigoOyD)
                            Else
                                strDetalleCheques = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'",
                                                                  strDetalleCheques,
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNroDocumento, li.strNombre,
                                                                  li.strTipoDocumento, li.ValorTipoDocumento, li.strDetalleConcepto, li.strTipoCheque, li.ValorTipoCheque,
                                                                  li.strTipoCruce, li.ValorTipoCruce, li.curValor, li.strTipoCobroGMF, li.ValorTipoGMF,
                                                                  li.lngIDConcepto, li.logEsTercero, li.strEsTercero, li.curValorGMF, li.dtmFechaActualizacion,
                                                                  li.strFormaPago, li.curValorNeto, li.strIDTipoCliente, li.ValorTotalNota, li.strEstado,
                                                                  li.curValorSaldoConsultado, li.logEsProcesada, li.strCodigoOyD)
                            End If

                            If String.IsNullOrEmpty(strRegistrosDetalle) Then
                                strRegistrosDetalle = String.Format("%{0}%**%{1}%**%{2}%", li.strNroDocumento, li.strNombre, GSTR_CHEQUE)
                            Else
                                strRegistrosDetalle = String.Format("{0}|%{1}%**%{2}%**%{3}%", strRegistrosDetalle, li.strNroDocumento, li.strNombre, GSTR_CHEQUE)
                            End If
                        Next
                    End If
                End If


                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > 0 Then

                        For Each li In ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                ValorTotalNOTA_OperacionesEspeciales = ValorTotalNOTA_OperacionesEspeciales + li.ValorTotalNota
                            Else
                                ValorTotalNOTA_BLOQUEO = ValorTotalNOTA_BLOQUEO + li.ValorTotalNota
                            End If

                            If Not dcProxy.TesoreriaOyDPlusTransferencias.Contains(li) Then
                                dcProxy.TesoreriaOyDPlusTransferencias.Add(li)
                            End If

                            If String.IsNullOrEmpty(strDetalleTransferencia) Then
                                strDetalleTransferencia = String.Format("'{0}'**'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'**'{30}'**'{31}'**'{32}'",
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNroDocumento, li.strNombreTitular,
                                                                  li.strNroDocumentoTitular, li.strTipoDocumentoTitular, li.strValorTipoDocumentoTitular,
                                                                  li.strDetalleConcepto, li.curValor, li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto,
                                                                  li.logEsTercero, li.strEsTercero, li.strEsCuentaRegistrada, li.logEsCuentaRegistrada,
                                                                  li.strCuenta, li.strTipoCuenta, li.strValorTipoCuenta, li.lngIdBanco, li.curValorGMF,
                                                                  li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo, li.strFormaPago, li.curValorNeto,
                                                                  li.strEsCtaRegistrada, li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.logEsProcesada, li.strCodigoOyD)
                            Else
                                strDetalleTransferencia = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'**'{30}'**'{31}'**'{32}'**'{33}'",
                                                                  strDetalleTransferencia,
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNroDocumento, li.strNombreTitular,
                                                                  li.strNroDocumentoTitular, li.strTipoDocumentoTitular, li.strValorTipoDocumentoTitular,
                                                                  li.strDetalleConcepto, li.curValor, li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto,
                                                                  li.logEsTercero, li.strEsTercero, li.strEsCuentaRegistrada, li.logEsCuentaRegistrada,
                                                                  li.strCuenta, li.strTipoCuenta, li.strValorTipoCuenta, li.lngIdBanco, li.curValorGMF,
                                                                  li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo, li.strFormaPago, li.curValorNeto,
                                                                  li.strEsCtaRegistrada, li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.logEsProcesada, li.strCodigoOyD)
                            End If

                            If String.IsNullOrEmpty(strRegistrosDetalle) Then
                                strRegistrosDetalle = String.Format("%{0}%**%{1}%**%{2}%", li.strNroDocumentoTitular, li.strNombreTitular, GSTR_TRANSFERENCIA)
                            Else
                                strRegistrosDetalle = String.Format("{0}|%{1}%**%{2}%**%{3}%", strRegistrosDetalle, li.strNroDocumentoTitular, li.strNombreTitular, GSTR_TRANSFERENCIA)
                            End If
                        Next
                    End If
                End If


                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                        Dim strFechaAplicacion As String = String.Empty

                        For Each li In ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                ValorTotalNOTA_OperacionesEspeciales = ValorTotalNOTA_OperacionesEspeciales + li.ValorTotalNota
                            Else
                                ValorTotalNOTA_BLOQUEO = ValorTotalNOTA_BLOQUEO + li.ValorTotalNota
                            End If

                            If Not dcProxy.TesoreriaOyDPlusCarterasColectivas.Contains(li) Then
                                dcProxy.TesoreriaOyDPlusCarterasColectivas.Add(li)
                            End If

                            If Not IsNothing(li.dtmFechaAplicacion) Then
                                strFechaAplicacion = li.dtmFechaAplicacion.Value.ToString("yyyy-MM-dd")
                            Else
                                strFechaAplicacion = Nothing
                            End If

                            If String.IsNullOrEmpty(strDetalleCarteras) Then
                                strDetalleCarteras = String.Format("'{0}'**'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'**'{30}'**'{31}'",
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNombre, li.strTipoDocumento,
                                                                  li.ValorTipoDocumento, li.strNroDocumento, li.strDetalleConcepto, li.curValor,
                                                                  li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero, li.strEsTerceroCartera,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo, li.lngNroEncargo,
                                                                  li.ValorCarteraColectiva, li.strFormaPago, li.curValorNeto, li.strIDTipoCliente, li.strNombreCarteraColectiva,
                                                                  li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.strTipoAccionFondos,
                                                                  strFechaAplicacion, li.logEsProcesada, li.strCodigoOyD, li.DescripcionEncargoFondos)
                            Else
                                strDetalleCarteras = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'**'{30}'**'{31}'**'{32}'",
                                                                  strDetalleCarteras,
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNombre, li.strTipoDocumento,
                                                                  li.ValorTipoDocumento, li.strNroDocumento, li.strDetalleConcepto, li.curValor,
                                                                  li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero, li.strEsTerceroCartera,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo, li.lngNroEncargo,
                                                                  li.ValorCarteraColectiva, li.strFormaPago, li.curValorNeto, li.strIDTipoCliente, li.strNombreCarteraColectiva,
                                                                  li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.strTipoAccionFondos,
                                                                  strFechaAplicacion, li.logEsProcesada, li.strCodigoOyD, li.DescripcionEncargoFondos)
                            End If

                            If String.IsNullOrEmpty(strRegistrosDetalle) Then
                                strRegistrosDetalle = String.Format("%{0}%**%{1}%**%{2}%", li.strNroDocumento, li.strNombre, GSTR_CARTERASCOLECTIVAS)
                            Else
                                strRegistrosDetalle = String.Format("{0}|%{1}%**%{2}%**%{3}%", strRegistrosDetalle, li.strNroDocumento, li.strNombre, GSTR_CARTERASCOLECTIVAS)
                            End If
                        Next
                    End If
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count > 0 Then
                        Dim strFechaAplicacion As String = String.Empty

                        For Each li In ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos
                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                ValorTotalNOTA_OperacionesEspeciales = ValorTotalNOTA_OperacionesEspeciales + li.ValorTotalNota
                            Else
                                ValorTotalNOTA_BLOQUEO = ValorTotalNOTA_BLOQUEO + li.ValorTotalNota
                            End If

                            If Not dcProxy.TesoreriaOyDPlusCarterasColectivas.Contains(li) Then
                                dcProxy.TesoreriaOyDPlusCarterasColectivas.Add(li)
                            End If

                            If Not IsNothing(li.dtmFechaAplicacion) Then
                                strFechaAplicacion = li.dtmFechaAplicacion.Value.ToString("yyyy-MM-dd")
                            Else
                                strFechaAplicacion = Nothing
                            End If

                            If String.IsNullOrEmpty(strDetalleCarteras) Then
                                strDetalleCarteras = String.Format("'{0}'**'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'**'{30}'**'{31}'",
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNombre, li.strTipoDocumento,
                                                                  li.ValorTipoDocumento, li.strNroDocumento, li.strDetalleConcepto, li.curValor,
                                                                  li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero, li.strEsTerceroCartera,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo, li.lngNroEncargo,
                                                                  li.ValorCarteraColectiva, li.strFormaPago, li.curValorNeto, li.strIDTipoCliente, li.strNombreCarteraColectiva,
                                                                  li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.strTipoAccionFondos,
                                                                  strFechaAplicacion, li.logEsProcesada, li.strCodigoOyD, li.DescripcionEncargoFondos)
                            Else
                                strDetalleCarteras = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'**'{30}'**'{31}'**'{32}'",
                                                                  strDetalleCarteras,
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNombre, li.strTipoDocumento,
                                                                  li.ValorTipoDocumento, li.strNroDocumento, li.strDetalleConcepto, li.curValor,
                                                                  li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero, li.strEsTerceroCartera,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo, li.lngNroEncargo,
                                                                  li.ValorCarteraColectiva, li.strFormaPago, li.curValorNeto, li.strIDTipoCliente, li.strNombreCarteraColectiva,
                                                                  li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.strTipoAccionFondos,
                                                                  strFechaAplicacion, li.logEsProcesada, li.strCodigoOyD, li.DescripcionEncargoFondos)
                            End If

                            If String.IsNullOrEmpty(strRegistrosDetalle) Then
                                strRegistrosDetalle = String.Format("%{0}%**%{1}%**%{2}%", li.strNroDocumento, li.strNombre, GSTR_CARTERASCOLECTIVAS)
                            Else
                                strRegistrosDetalle = String.Format("{0}|%{1}%**%{2}%**%{3}%", strRegistrosDetalle, li.strNroDocumento, li.strNombre, GSTR_CARTERASCOLECTIVAS)
                            End If
                        Next
                    End If
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > 0 Then
                        For Each li In ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                ValorTotalNOTA_OperacionesEspeciales = ValorTotalNOTA_OperacionesEspeciales + li.ValorTotalNota
                            Else
                                ValorTotalNOTA_BLOQUEO = ValorTotalNOTA_BLOQUEO + li.ValorTotalNota
                            End If

                            If Not dcProxy.TesoreriaOyDPlusOYDs.Contains(li) Then
                                dcProxy.TesoreriaOyDPlusOYDs.Add(li)
                            End If

                            If String.IsNullOrEmpty(strDetalleOYD) Then
                                strDetalleOYD = String.Format("'{0}'**'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'",
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNombre, li.strTipoDocumento,
                                                                  li.ValorTipoDocumento, li.strNroDocumento, li.strDetalleConcepto, li.curValor,
                                                                  li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero, li.strEsTerceroCartera,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo,
                                                                  li.strFormaPago, li.curValorNeto, li.strIDTipoCliente, li.ValorTotalNota,
                                                                  li.strEstado, li.curValorSaldoConsultado, li.logEsProcesada, li.strCodigoOyD)
                            Else
                                strDetalleOYD = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'",
                                                                  strDetalleOYD,
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strNombre, li.strTipoDocumento,
                                                                  li.ValorTipoDocumento, li.strNroDocumento, li.strDetalleConcepto, li.curValor,
                                                                  li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero, li.strEsTerceroCartera,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo,
                                                                  li.strFormaPago, li.curValorNeto, li.strIDTipoCliente,
                                                                  li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.logEsProcesada, li.strCodigoOyD)
                            End If

                            If String.IsNullOrEmpty(strRegistrosDetalle) Then
                                strRegistrosDetalle = String.Format("%{0}%**%{1}%**%{2}%", li.strNroDocumento, li.strNombre, GSTR_OYD)
                            Else
                                strRegistrosDetalle = String.Format("{0}|%{1}%**%{2}%**%{3}%", strRegistrosDetalle, li.strNroDocumento, li.strNombre, GSTR_OYD)
                            End If
                        Next
                    End If
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > 0 Then
                        For Each li In ListaTesoreriaOrdenesPlusCE_Detalle_Internos
                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                ValorTotalNOTA_OperacionesEspeciales = ValorTotalNOTA_OperacionesEspeciales + li.ValorTotalNota
                            Else
                                ValorTotalNOTA_BLOQUEO = ValorTotalNOTA_BLOQUEO + li.ValorTotalNota
                            End If

                            If Not dcProxy.TesoreriaOyDPlusInternos.Contains(li) Then
                                dcProxy.TesoreriaOyDPlusInternos.Add(li)
                            End If

                            If String.IsNullOrEmpty(strDetalleInternos) Then
                                strDetalleInternos = String.Format("'{0}'**'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'",
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.ValorTipoDocumento, li.strNombre,
                                                                  li.strCodigoOyD, li.strTipoDocumento, li.strNroDocumento, li.strDetalleConcepto,
                                                                  li.curValor, li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo,
                                                                  li.strFormaPago, li.strEsTerceroInternos, li.curValorNeto, li.strIDTipoCliente,
                                                                  li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.logEsProcesada)
                            Else
                                strDetalleInternos = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'",
                                                                  strDetalleInternos,
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.ValorTipoDocumento, li.strNombre,
                                                                  li.strCodigoOyD, li.strTipoDocumento, li.strNroDocumento, li.strDetalleConcepto,
                                                                  li.curValor, li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo,
                                                                  li.strFormaPago, li.strEsTerceroInternos, li.curValorNeto, li.strIDTipoCliente,
                                                                  li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.logEsProcesada)
                            End If

                            If String.IsNullOrEmpty(strRegistrosDetalle) Then
                                strRegistrosDetalle = String.Format("%{0}%**%{1}%**%{2}%", li.strNroDocumento, li.strNombre, GSTR_INTERNOS)
                            Else
                                strRegistrosDetalle = String.Format("{0}|%{1}%**%{2}%**%{3}%", strRegistrosDetalle, li.strNroDocumento, li.strNombre, GSTR_INTERNOS)
                            End If
                        Next
                    End If
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count > 0 Then
                        For Each li In ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos
                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                ValorTotalNOTA_OperacionesEspeciales = ValorTotalNOTA_OperacionesEspeciales + li.ValorTotalNota
                            Else
                                ValorTotalNOTA_BLOQUEO = ValorTotalNOTA_BLOQUEO + li.ValorTotalNota
                            End If

                            If Not dcProxy.TesoreriaOyDPlusBloqueos.Contains(li) Then
                                dcProxy.TesoreriaOyDPlusBloqueos.Add(li)
                            End If

                            If String.IsNullOrEmpty(strDetalleBloqueos) Then
                                strDetalleBloqueos = String.Format("'{0}'**'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'",
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.ValorTipoDocumento, li.strNombre,
                                                                  li.strCodigoOyD, li.strTipoDocumento, li.strNroDocumento, li.strDetalleConcepto,
                                                                  li.curValor, li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo,
                                                                  li.strFormaPago, li.strEsTerceroInternos, li.curValorNeto, li.strIDTipoCliente,
                                                                  li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.strValorNaturaleza,
                                                                  li.strValorMotivo, li.strDetalleBloqueo, li.curValorBloqueado, li.logEsProcesada)
                            Else
                                strDetalleBloqueos = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'**'{30}'",
                                                                  strDetalleBloqueos,
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.ValorTipoDocumento, li.strNombre,
                                                                  li.strCodigoOyD, li.strTipoDocumento, li.strNroDocumento, li.strDetalleConcepto,
                                                                  li.curValor, li.strTipoCobroGMF, li.ValorTipoGMF, li.lngIDConcepto, li.logEsTercero,
                                                                  li.curValorGMF, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.strTipo,
                                                                  li.strFormaPago, li.strEsTerceroInternos, li.curValorNeto, li.strIDTipoCliente,
                                                                  li.ValorTotalNota, li.strEstado, li.curValorSaldoConsultado, li.strValorNaturaleza,
                                                                  li.strValorMotivo, li.strDetalleBloqueo, li.curValorBloqueado, li.logEsProcesada)
                            End If

                            If String.IsNullOrEmpty(strRegistrosDetalle) Then
                                strRegistrosDetalle = String.Format("%{0}%**%{1}%**%{2}%", li.strNroDocumento, li.strNombre, GSTR_BLOQUEO_RECURSOS)
                            Else
                                strRegistrosDetalle = String.Format("{0}|%{1}%**%{2}%**%{3}%", strRegistrosDetalle, li.strNroDocumento, li.strNombre, GSTR_BLOQUEO_RECURSOS)
                            End If
                        Next
                    End If
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count > 0 Then
                        For Each li In ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                ValorTotalNOTA_OperacionesEspeciales = ValorTotalNOTA_OperacionesEspeciales + li.ValorTotalNota
                            Else
                                ValorTotalNOTA_BLOQUEO = ValorTotalNOTA_BLOQUEO + li.ValorTotalNota
                            End If

                            If Not dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Contains(li) Then
                                dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Add(li)
                            End If

                            If String.IsNullOrEmpty(strDetalleOperacionesEspeciales) Then
                                strDetalleOperacionesEspeciales = String.Format("'{0}'**'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'",
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strCodigoOyD, li.strNroDocumento,
                                                                  li.ValorTipoDocumento, li.strTipoDocumento, li.strNombre, li.strCodigoOyDOtro,
                                                                  li.strNroDocumentoTitular, li.ValorTipoDocumentoTitular, li.strTipoDocumentoTitular, li.strNombreTitular,
                                                                  li.lngIDConcepto, li.strDetalleConcepto, li.curValor, li.strTipoOperacionEspecial,
                                                                  li.ValorTipoOperacionEspecial, li.strOperacionEspecial, li.ValorOperacionEspecial,
                                                                  li.strProvieneDinero, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.curValorNeto,
                                                                  li.curValor, li.strEstado, li.strTipo, li.strFormaPago, li.curValorSaldoConsultado, li.logEsProcesada)
                            Else
                                strDetalleOperacionesEspeciales = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'**'{5}'**'{6}'**'{7}'**'{8}'**'{9}'**'{10}'**'{11}'**'{12}'**'{13}'**'{14}'**'{15}'**'{16}'**'{17}'**'{18}'**'{19}'**'{20}'**'{21}'**'{22}'**'{23}'**'{24}'**'{25}'**'{26}'**'{27}'**'{28}'**'{29}'**'{30}'",
                                                                  strDetalleOperacionesEspeciales,
                                                                  li.lngID, li.lngIDDetalle, li.strConsecutivo, li.strCodigoOyD, li.strNroDocumento,
                                                                  li.ValorTipoDocumento, li.strTipoDocumento, li.strNombre, li.strCodigoOyDOtro,
                                                                  li.strNroDocumentoTitular, li.ValorTipoDocumentoTitular, li.strTipoDocumentoTitular, li.strNombreTitular,
                                                                  li.lngIDConcepto, li.strDetalleConcepto, li.curValor, li.strTipoOperacionEspecial,
                                                                  li.ValorTipoOperacionEspecial, li.strOperacionEspecial, li.ValorOperacionEspecial,
                                                                  li.strProvieneDinero, li.dtmFechaDocumento, li.dtmFechaActualizacion, li.curValorNeto,
                                                                  li.curValor, li.strEstado, li.strTipo, li.strFormaPago, li.curValorSaldoConsultado, li.logEsProcesada)
                            End If

                            If String.IsNullOrEmpty(strRegistrosDetalle) Then
                                strRegistrosDetalle = String.Format("%{0}%**%{1}%**%{2}%", li.strNroDocumento, li.strNombre, GSTR_OPERACIONES_ESPECIALES)
                            Else
                                strRegistrosDetalle = String.Format("{0}|%{1}%**%{2}%**%{3}%", strRegistrosDetalle, li.strNroDocumento, li.strNombre, GSTR_OPERACIONES_ESPECIALES)
                            End If
                        Next
                    End If
                End If

                'ValidarListarRestrictivas(strRegistrosDetalle)
                If IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) And
                    IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) And
                    IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) And
                    IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) And
                    IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) And
                    IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) And
                    IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) And
                    IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                    IsBusy = False
                    mostrarMensaje("Para realizar el proceso de Grabado debe existir al menos un Registro en el detalle", "Validar Grabar", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Else
                    If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                        _TesoreriaOrdenesPlusCE_Selected.curValorNota = ValorTotalNOTA_OperacionesEspeciales
                    Else
                        _TesoreriaOrdenesPlusCE_Selected.curValorNota = ValorTotalNOTA_BLOQUEO
                    End If

                    _TesoreriaOrdenesPlusCE_Selected.curValor = Decimal.Round(ValorTotalNETOOrden, 2)

                    If Not IsNothing(dcProxy.tblRespuestaValidaciones) Then
                        dcProxy.tblRespuestaValidaciones.Clear()
                    End If
                    If (objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Or
                        _TesoreriaOrdenesPlusCE_Selected.curValor > 0 Or
                        (_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION)) Then

                        If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                            _TesoreriaOrdenesPlusCE_Selected.curValorNota = ValorTotalNOTA_OperacionesEspeciales
                        Else
                            _TesoreriaOrdenesPlusCE_Selected.curValorNota = ValorTotalNOTA_BLOQUEO
                        End If

                        _TesoreriaOrdenesPlusCE_Selected.curValor = Decimal.Round(ValorTotalNETOOrden, 2)

                        If Not IsNothing(dcProxy.tblRespuestaValidaciones) Then
                            dcProxy.tblRespuestaValidaciones.Clear()
                        End If

                        If (objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Or
                            _TesoreriaOrdenesPlusCE_Selected.curValor > 0) Or
                        (_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And
                         _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION) Then

                            If logNuevoRegistro Or logDuplicarRegistro Then
                                strOpcionActualizar = "ING"
                            Else
                                strOpcionActualizar = "MOD"
                            End If

                            If logNuevoRegistro Or logDuplicarRegistro Then
                                If objTipoOrdenNueva = TipoOrdenGiroNueva.NORMAL Then
                                    If FechaOrden.Date = dtmFechaServidor.Date Then
                                        _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTE_Plus
                                    ElseIf FechaOrden.Date > dtmFechaServidor.Date Then
                                        _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_FUTURA_Plus
                                    Else
                                        If _TesoreriaOrdenesPlusCE_Selected.ValorEstado <> GSTR_PENDIENTEAPROBACION_Plus Then
                                            _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTE_Plus
                                        End If
                                    End If
                                Else
                                    If objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Then
                                        _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PROGRAMADA_Plus
                                    ElseIf objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                                        _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_DIVIDENDOS_Plus
                                    End If
                                End If
                            End If

                            Dim EsFondoOYD As Boolean = False
                            Dim EsOrdenFutura As Boolean = False
                            Dim logXValidarXTesorero As Boolean = False

                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                If logEsFondosOYD Then
                                    EsFondoOYD = True
                                End If
                            ElseIf Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                                If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                                    If logEsFondosOYD Then
                                        EsFondoOYD = True
                                    End If
                                End If
                            End If

                            If FechaOrden.Date > Date.Today Then
                                EsOrdenFutura = True
                            End If

                            'If logXTesorero Then
                            '    logXValidarXTesorero = True
                            'Else
                            '    logXValidarXTesorero = False
                            'End If
                            logXValidarXTesorero = False

                            dcProxy.Load(dcProxy.OYDPLUS_ValidarIngresoOrdenTesoreriaQuery(
                                           _TesoreriaOrdenesPlusCE_Selected.lngID,
                                           FechaOrden,
                                           _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                           _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                           _TesoreriaOrdenesPlusCE_Selected.curValor,
                                           _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                           _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                           _TesoreriaOrdenesPlusCE_Selected.lngNroDocumento,
                                           _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                           _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                           GSTR_ORDENGIRO,
                                           Confirmaciones,
                                           ConfirmacionesUsuario,
                                           Justificaciones,
                                           JustificacionesUsuario,
                                           Aprobaciones, AprobacionesUsuario, Program.Usuario, strOpcionActualizar, _TesoreriaOrdenesPlusCE_Selected.ValorEstado,
                                           _TesoreriaOrdenesPlusCE_Selected.logClienteRecoge,
                                           _TesoreriaOrdenesPlusCE_Selected.logClientePresente,
                                           _TesoreriaOrdenesPlusCE_Selected.logllevarDireccion,
                                           _TesoreriaOrdenesPlusCE_Selected.logRecogeTercero,
                                           _TesoreriaOrdenesPlusCE_Selected.logConsignarCta,
                                           _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.strNroDocumento_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.strNombre_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.logDireccionInscrita_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.strCuenta_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.strDireccion_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.strCiudad_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.strSector_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.logEsTercero_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.logEsCtaInscrita_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.ValorTipoCta_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.lngIDBanco, strRegistrosDetalle, True, _TesoreriaOrdenesPlusCE_Selected.curValorNota, False,
                                           _TesoreriaOrdenesPlusCE_Selected.strEspecieDividendos,
                                           _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                           _TesoreriaOrdenesPlusCE_Selected.logOtra_Instrucciones, _TesoreriaOrdenesPlusCE_Selected.strOtros_Instrucciones,
                                           _TesoreriaOrdenesPlusCE_Selected.lngIDOrdenante,
                                       strDetalleCheques, strDetalleTransferencia, strDetalleCarteras, strDetalleInternos, strDetalleBloqueos, strDetalleOYD, strDetalleOperacionesEspeciales,
                                       _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                       _TesoreriaOrdenesPlusCE_Selected.strUsuarioWindows, logXValidarXTesorero,
                                       dblValorOrdenAntesModificar,
                                       _TesoreriaOrdenesPlusCE_Selected.dblValorPenalizado,
                                       EsFondoOYD,
                                       FechaAplicacion,
                                       EsOrdenFutura,
                                       _TesoreriaOrdenesPlusCE_Selected.strObservaciones,
                                       ValorTotalGenerarOrden,
                                       ValorTotalGMF,
                                       logConfirmoTesorero, Program.HashConexion),
                                       AddressOf TerminoValidarIngresoOrden, String.Empty)
                        Else
                            IsBusy = False
                            IsBusyEdicionTesorero = False
                            mostrarMensaje("El Valor total de toda la Orden de Tesoreria debe ser mayor que Cero", "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If
                    Else
                        IsBusy = False
                        IsBusyEdicionTesorero = False
                        mostrarMensaje("Para realizar el proceso de Grabado por favor ingrese todos los campos correspondientes", "Validar Grabar", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusyEdicionTesorero = False
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Actualizar Registro",
                                 Me.ToString(), "ActualizarOrdenTesoreria", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub TerminoSubmitChanges(So As SubmitOperation)
        Try
            If So.HasError Then
                IsBusy = False
                Editando = False
                MyBase.CambioItem("Editando")
                Dim strMsg As String = String.Empty
                If So.EntitiesInError.Count > 0 Then
                    For intI As Integer = 0 To So.EntitiesInError(0).ValidationErrors.Count - 1
                        strMsg &= So.EntitiesInError(0).ValidationErrors(intI).ErrorMessage & vbNewLine
                    Next

                    If Not strMsg.Equals(String.Empty) Then
                        A2Utilidades.Mensajes.mostrarMensaje(strMsg, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        So.MarkErrorAsHandled()
                    End If
                Else
                    If (So.Error.Message.Contains("ErrorPersonalizado,") = True) And ((So.UserState = "insert") Or (So.UserState = "update")) Then
                        Dim Mensaje1 = Split(So.Error.Message, "ErrorPersonalizado,")
                        Dim Mensaje = Split(Mensaje1(1), vbCr)
                        A2Utilidades.Mensajes.mostrarMensaje(Mensaje(0), Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        So.MarkErrorAsHandled()
                    Else
                        A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al reflejar en el servidor los cambios realizados",
                                                       Me.ToString(), "TerminoSubmitChanges" & So.UserState.ToString(), Application.Current.ToString(), Program.Maquina, So.Error)
                        So.MarkErrorAsHandled()
                    End If
                End If
            Else
                If logRecargar Then
                    Thread.Sleep(2000)
                    logRecargar = False
                End If
                IsBusy = False
                IsBusyEdicionTesorero = False
                HabilitarImportacion = False
                HabilitarReceptor = False
                HabilitarTipoProducto = False
                HabilitarBuscadorCliente = False
                HabilitarEnEdicion = False
                'TesoreriaOrdenesPlusCE_Selected = Nothing
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Clear()
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Clear()
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Clear()
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Clear()
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Clear()
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Clear()
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Clear()
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Clear()
                End If


                If Not IsNothing(dcProxy.TesoreriaOyDPlusCheques) Then
                    dcProxy.TesoreriaOyDPlusCheques.Clear()
                End If
                If Not IsNothing(dcProxy.TesoreriaOyDPlusTransferencias) Then
                    dcProxy.TesoreriaOyDPlusTransferencias.Clear()
                End If
                If Not IsNothing(dcProxy.TesoreriaOyDPlusInternos) Then
                    dcProxy.TesoreriaOyDPlusInternos.Clear()
                End If
                If Not IsNothing(dcProxy.TesoreriaOyDPlusCarterasColectivas) Then
                    dcProxy.TesoreriaOyDPlusCarterasColectivas.Clear()
                End If
                If Not IsNothing(dcProxy.TesoreriaOyDPlusBloqueos) Then
                    dcProxy.TesoreriaOyDPlusBloqueos.Clear()
                End If
                If Not IsNothing(dcProxy.TesoreriaOyDPlusOYDs) Then
                    dcProxy.TesoreriaOyDPlusOYDs.Clear()
                End If
                If Not IsNothing(dcProxy.TesoreriaOyDPlusOperacionesEspeciales) Then
                    dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Clear()
                End If

                'Modificado por Juan David Correa.
                'Se obtiene el id del selected al momento de guardar la orden.
                '******************************************************************************************************************
                If _TesoreriaOrdenesPlusCE_Selected.lngID = 0 Then
                    intIDOrdenTesoreria = 0
                    strEstadoGuardar = "TERMINOGUARDARNUEVO"
                Else
                    intIDOrdenTesoreria = _TesoreriaOrdenesPlusCE_Selected.lngID
                    strEstadoGuardar = "TERMINOGUARDAREDITAR"
                End If

                If _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_FUTURA_Plus Then
                    logEsOrdenFutura = True
                End If

                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.lngID) Then
                    dcProxy.OYDPLUS_CancelarOrdenOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.lngID, "ENCABEZADOORDENGIRO", Program.Usuario, Program.HashConexion, AddressOf TerminoCancelarEditarRegistro, String.Empty)
                Else
                    LimpiarVariablesConfirmadas()
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE) Then
                    ListaTesoreriaOrdenesPlusCE.Clear()
                    ListaTesoreriaOrdenesPlusCE = Nothing
                End If

                dcProxy.TesoreriaOrdenesEncabezados.Clear()
                MyBase.QuitarFiltroDespuesGuardar()
                logRecargarPantalla = False

                If logXTesorero = False Then
                    If logEsOrdenFutura Then
                        VistaSeleccionada = GSTR_FUTURAS
                        TraerOrdenes(strEstadoGuardar, GSTR_FUTURAS)
                    ElseIf objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA Then
                        VistaSeleccionada = GSTR_PROGRAMADAS
                        TraerOrdenes(strEstadoGuardar, GSTR_PROGRAMADAS)
                    ElseIf objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                        VistaSeleccionada = GSTR_DIVIDENDOS
                        TraerOrdenes(strEstadoGuardar, GSTR_DIVIDENDOS)
                    Else
                        If CantidadAprobaciones > 0 Or logReglaDUAl Then
                            VistaSeleccionada = GSTR_POR_APROBAR
                            TraerOrdenes(strEstadoGuardar, GSTR_POR_APROBAR)
                        Else
                            VistaSeleccionada = GSTR_PENDIENTES
                            TraerOrdenes(strEstadoGuardar, GSTR_PENDIENTES)
                        End If
                    End If
                    'dcProxy.Load(dcProxy.TesoreriaOrdenesListarQuery("", "", "", "", 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenes, strEstadoGuardar);
                    '******************************************************************************************************************
                    LimpiarVariablesSubirDocumentos(False)
                    HabilitarOtrosInstrucciones = False
                    Editando = False
                    MyBase.CambioItem("Editando")
                    VerDuplicar = Visibility.Visible
                    logDuplicarRegistro = False
                Else
                    If Not IsNothing(ViewOrdenGiroPopPup) Then
                        ViewOrdenGiroPopPup.Close()
                    End If
                    If Not IsNothing(objViewModelTesorero) Then
                        objViewModelTesorero.ConsultarDocumentos()
                    End If
                End If

                CambiarColorFondoTextoBuscador()
                strEstadoGuardar = String.Empty
                logEsOrdenFutura = False
                IdEncabezadoSubirArchivo = Nothing
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar la actualización de Datos.", Me.ToString, "TerminoSubmitChanges", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            Editando = False
            MyBase.CambioItem("Editando")
            IsBusy = False
            IsBusyEdicionTesorero = False
        End Try
    End Sub

    Public Function ValidarGuardadoOrden(ByVal pobjOrden As OyDPLUSTesoreria.TesoreriaOrdenesEncabezado) As Boolean
        Try
            'Valida los campos que son requeridos por el sistema de OYDPLUS.
            Dim logTieneError As Boolean = False
            strMensajeValidacion = String.Empty

            If Not IsNothing(pobjOrden) Then
                'If Not IsNothing(TesoreriaOrdenesPlusCE_Selected.strTipoProducto) Then

                'End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                        For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                            If x.ValorCarteraColectiva = TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos And x.lngNroEncargo = TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos Then
                                strMensajeValidacion = String.Format("{0}{1} - Número Encargo y el nombre de la cartera no pueden ser igual al del detalle", strMensajeValidacion, vbCrLf)
                                logTieneError = True

                                Exit For
                            End If
                        Next
                    End If
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count > 0 Then
                        For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos
                            If x.ValorCarteraColectiva = TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos And x.lngNroEncargo = TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos Then
                                strMensajeValidacion = String.Format("{0}{1} - Número Encargo y el nombre de la cartera no pueden ser igual al del detalle", strMensajeValidacion, vbCrLf)
                                logTieneError = True

                                Exit For
                            End If
                        Next
                    End If
                End If

                'If TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strNombreCarteraColectiva And TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngNroEncargo Then
                '    strMensajeValidacion = String.Format("{0}{1} - Número Encargo y el nombre de la cartera no pueden ser igual al del detalle", strMensajeValidacion, vbCrLf)
                '    logTieneError = True
                'End If

                'Valida el campo de Receptor
                If logNuevoRegistro Then
                    If String.IsNullOrEmpty(pobjOrden.strCodigoReceptor) Then
                        strMensajeValidacion = String.Format("{0}{1} - Receptor", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If

                'Valida el campo de Tipo de producto
                If String.IsNullOrEmpty(pobjOrden.ValorTipoProducto) Then
                    strMensajeValidacion = String.Format("{0}{1} - Tipo producto", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If

                'Valida el campo del cliente
                If String.IsNullOrEmpty(pobjOrden.strIDComitente) Then
                    strMensajeValidacion = String.Format("{0}{1} - Cliente", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If

                'Valida el campo fecha de recepción
                If IsNothing(FechaOrden) Then
                    strMensajeValidacion = String.Format("{0}{1} - Fecha Orden", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If

                If pobjOrden.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                    If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                        strMensajeValidacion = String.Format("{0}{1} - Cuando la orden es de tipo dividendos el tipo de producto no puede ser fondos.", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    Else
                        Dim logValidarCartera As Boolean = True

                        If logEsFondosOYD = False Then
                            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                                If Not DiccionarioCombosOYDPlus.ContainsKey("CARTERACOLECTIVASCLIENTES") And String.IsNullOrEmpty(pobjOrden.strCarteraColectivaFondos) Then
                                    strMensajeValidacion = String.Format("{0}{1} - Para el día de hoy no ha sido cargado el archivo de las carteras colectivas de los clientes, sí ya fue cargado por favor clic en cancelar y vuelva a crear la orden.", strMensajeValidacion, vbCrLf)
                                    logValidarCartera = False
                                    logTieneError = True
                                End If
                            End If
                        End If

                        If logValidarCartera Then
                            If String.IsNullOrEmpty(pobjOrden.strCarteraColectivaFondos) Then
                                strMensajeValidacion = String.Format("{0}{1} - Cartera colectiva", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                                logValidarCartera = False
                            End If

                            If String.IsNullOrEmpty(pobjOrden.intNroEncargoFondos) Then
                                strMensajeValidacion = String.Format("{0}{1} - Nro de encargo", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                                logValidarCartera = False
                            End If

                            If String.IsNullOrEmpty(pobjOrden.strCarteraColectivaFondos) Then
                                strMensajeValidacion = String.Format("{0}{1} - Tipo acción", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                                logValidarCartera = False
                            End If
                        End If

                        'If logValidarCartera Then
                        If logValidarCartera And logEsFondosOYD Then 'Se corrige condicion para que solamente valide fondos de OyD JABG20180614
                            If Not IsNothing(FechaAplicacion) Then
                                If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_RETIRO Then
                                    If FechaAplicacion.Value.Date < FechaOrden.Date Then
                                        strMensajeValidacion = "La fecha de aplicación no puede ser menor a la fecha de orden."
                                        logTieneError = True
                                        logValidarCartera = False
                                    ElseIf Not IsNothing(dtmFechaMenorPermitidaIngreso) Then
                                        If FechaAplicacion.Value.Date < DateAdd(DateInterval.Day, intDiasAplicacionFondosRetiros, dtmFechaMenorPermitidaIngreso.Value.Date) Then
                                            strMensajeValidacion = String.Format("La fecha de aplicación no puede ser menor a la fecha de cierre + los días de aplicación {0:yyyy-MM-dd}", DateAdd(DateInterval.Day, intDiasAplicacionFondosRetiros, dtmFechaMenorPermitidaIngreso.Value.Date))
                                            logTieneError = True
                                            logValidarCartera = False
                                        End If
                                    End If
                                ElseIf _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                                    If FechaAplicacion.Value.Date < FechaOrden.Date Then
                                        strMensajeValidacion = "La fecha de aplicación no puede ser menor a la fecha de orden."
                                        logTieneError = True
                                        logValidarCartera = False
                                    ElseIf Not IsNothing(dtmFechaMenorPermitidaIngreso) Then
                                        If FechaAplicacion.Value.Date < DateAdd(DateInterval.Day, intDiasAplicacionFondosCancelacion, dtmFechaMenorPermitidaIngreso.Value.Date) Then
                                            strMensajeValidacion = String.Format("La fecha de aplicación no puede ser menor a la fecha de cierre + los días de aplicación {0:yyyy-MM-dd}", DateAdd(DateInterval.Day, intDiasAplicacionFondosRetiros, dtmFechaMenorPermitidaIngreso.Value.Date))
                                            logTieneError = True
                                            logValidarCartera = False
                                        End If
                                    End If
                                End If
                            End If
                        End If

                        If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                            Dim intCantidadOrdenEnCero As Integer = 0
                            Dim intCantidadOrdenConValor As Integer = 0

                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                                    If li.curValor = 0 Then
                                        intCantidadOrdenEnCero += 1
                                    Else
                                        intCantidadOrdenConValor += 1
                                    End If
                                Next
                            End If

                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                                    If li.curValor = 0 Then
                                        intCantidadOrdenEnCero += 1
                                    Else
                                        intCantidadOrdenConValor += 1
                                    End If
                                Next
                            End If

                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                                    If li.curValor = 0 Then
                                        intCantidadOrdenEnCero += 1
                                    Else
                                        intCantidadOrdenConValor += 1
                                    End If
                                Next
                            End If

                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos
                                    If li.curValor = 0 Then
                                        intCantidadOrdenEnCero += 1
                                    Else
                                        intCantidadOrdenConValor += 1
                                    End If
                                Next
                            End If

                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                                    If li.curValor = 0 Then
                                        intCantidadOrdenEnCero += 1
                                    Else
                                        intCantidadOrdenConValor += 1
                                    End If
                                Next
                            End If

                            If intCantidadOrdenEnCero > 1 And logEsFondosUnity = False Then
                                strMensajeValidacion = String.Format("{0}{1} - Cuando es una orden de cancelación solo debe existir 1 solo registro con valor cero.", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            ElseIf intCantidadOrdenEnCero = 0 Then
                                strMensajeValidacion = String.Format("{0}{1} - Cuando es una orden de cancelación debe existir 1 registro con valor cero.", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            ElseIf intCantidadOrdenConValor > 1 And logEsFondosUnity = False Then
                                strMensajeValidacion = String.Format("{0}{1} - Cuando es una orden de cancelación solo debe existir 1 solo registro con valor.", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If
                        ElseIf _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_RETIRO Then
                            Dim intCantidadOrdenEnCero As Integer = 0

                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                                    If li.curValor = 0 Then
                                        intCantidadOrdenEnCero += 1
                                    End If
                                Next
                            End If

                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                                    If li.curValor = 0 Then
                                        intCantidadOrdenEnCero += 1
                                    End If
                                Next
                            End If

                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                                    If li.curValor = 0 Then
                                        intCantidadOrdenEnCero += 1
                                    End If
                                Next
                            End If

                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                                For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                                    If li.curValor = 0 Then
                                        intCantidadOrdenEnCero += 1
                                    End If
                                Next
                            End If

                            If intCantidadOrdenEnCero > 0 Then
                                strMensajeValidacion = String.Format("{0}{1} - Cuando es una orden de retiro no debe existir registros con valor cero.", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If
                        End If

                    End If
                End If
            Else
                mostrarMensaje("Señor Usuario, la orden tiene que tener un dato como minimo.", "Ordenes Tesoreria ", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            End If

            If logTieneError Then
                strMensajeValidacion = String.Format("Por favor corrija las siguientes inconsistencias antes de guardar:{0}{1}", vbCrLf, strMensajeValidacion)
                mostrarMensaje(strMensajeValidacion, "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            Else
                'Valida la cantidad maxima de detalles
                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    If _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > intCantidadMaximaDetalles Then
                        mostrarMensaje(String.Format("Señor Usuario, la cantidad máxima de registros permitida por detalle es ({0}), por favor valide el detalle de cheques.", intCantidadMaximaDetalles), "Ordenes Tesoreria ", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    End If
                End If

                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                    If _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > intCantidadMaximaDetalles Then
                        mostrarMensaje(String.Format("Señor Usuario, la cantidad máxima de registros permitida por detalle es ({0}), por favor valide el detalle de transferencias.", intCantidadMaximaDetalles), "Ordenes Tesoreria ", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    End If
                End If

                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                    If _ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > intCantidadMaximaDetalles Then
                        mostrarMensaje(String.Format("Señor Usuario, la cantidad máxima de registros permitida por detalle es ({0}), por favor valide el detalle de internos.", intCantidadMaximaDetalles), "Ordenes Tesoreria ", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    End If
                End If

                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                    If _ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count > intCantidadMaximaDetalles Then
                        mostrarMensaje(String.Format("Señor Usuario, la cantidad máxima de registros permitida por detalle es ({0}), por favor valide el detalle de bloqueos.", intCantidadMaximaDetalles), "Ordenes Tesoreria ", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    End If
                End If

                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                    If _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > intCantidadMaximaDetalles Then
                        mostrarMensaje(String.Format("Señor Usuario, la cantidad máxima de registros permitida por detalle es ({0}), por favor valide el detalle de carteras colectivas.", intCantidadMaximaDetalles), "Ordenes Tesoreria ", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    End If
                End If

                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                    If _ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count > intCantidadMaximaDetalles Then
                        mostrarMensaje(String.Format("Señor Usuario, la cantidad máxima de registros permitida por detalle es ({0}), por favor valide el detalle de carteras colectivas.", intCantidadMaximaDetalles), "Ordenes Tesoreria ", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    End If
                End If

                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                    If _ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > intCantidadMaximaDetalles Then
                        mostrarMensaje(String.Format("Señor Usuario, la cantidad máxima de registros permitida por detalle es ({0}), por favor valide el detalle de OYD.", intCantidadMaximaDetalles), "Ordenes Tesoreria ", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    End If
                End If

                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                    If _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count > intCantidadMaximaDetalles Then
                        mostrarMensaje(String.Format("Señor Usuario, la cantidad máxima de registros permitida por detalle es ({0}), por favor valide el detalle de operaciones especiales.", intCantidadMaximaDetalles), "Ordenes Tesoreria ", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    End If
                End If

                Dim logValidarInstrucciones As Boolean = False

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                        logValidarInstrucciones = True
                    End If
                End If
                'Se quita validacion de instrucciones para OYD x BTG
                'If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                '    If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > 0 Then
                '        logValidarInstrucciones = True
                '    End If
                'End If

                If logValidarInstrucciones Then
                    If ClienteRecoge Or ClientePresente Or RecogeTercero Or LlevarDireccion Or ConsignarCuentaChecked Or OtrosChecked Then

                        If OtrosChecked = False Then
                            If String.IsNullOrEmpty(strNombreInstrucciones) Then
                                strMensajeValidacion = String.Format("{0}{1} - Nombre", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If

                            If String.IsNullOrEmpty(strNroDocumentoInstrucciones) Then
                                strMensajeValidacion = String.Format("{0}{1} - Nro documento", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If

                            If String.IsNullOrEmpty(strTipoIdentificacionInstrucciones) Then
                                strMensajeValidacion = String.Format("{0}{1} - Tipo identificación", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If

                            If LlevarDireccion Then
                                If String.IsNullOrEmpty(strDireccionInstrucciones) Then
                                    strMensajeValidacion = String.Format("{0}{1} - Dirección", strMensajeValidacion, vbCrLf)
                                    logTieneError = True
                                End If

                                If String.IsNullOrEmpty(strCiudadInstrucciones) Then
                                    strMensajeValidacion = String.Format("{0}{1} - Ciudad", strMensajeValidacion, vbCrLf)
                                    logTieneError = True
                                End If
                            ElseIf ConsignarCuentaChecked Then
                                If String.IsNullOrEmpty(strCodigoBancoInstrucciones) Then
                                    strMensajeValidacion = String.Format("{0}{1} - Banco", strMensajeValidacion, vbCrLf)
                                    logTieneError = True
                                End If

                                If String.IsNullOrEmpty(strValorTipoCuentaInstrucciones) Then
                                    strMensajeValidacion = String.Format("{0}{1} - Tipo cuenta", strMensajeValidacion, vbCrLf)
                                    logTieneError = True
                                End If

                                If String.IsNullOrEmpty(strCuentaInstrucciones) Then
                                    strMensajeValidacion = String.Format("{0}{1} - Numero cuenta", strMensajeValidacion, vbCrLf)
                                    logTieneError = True
                                End If

                            End If
                        Else
                            If String.IsNullOrEmpty(strOtrosInstrucciones) Then
                                strMensajeValidacion = String.Format("{0}{1} - Otras", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If
                        End If


                        If logTieneError Then
                            strMensajeValidacion = String.Format("Por favor corrija las siguientes inconsistencias en las instrucciones antes de guardar:{0}{1}", vbCrLf, strMensajeValidacion)
                            mostrarMensaje(strMensajeValidacion, "Ordenes Tesoreria", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Return False
                        Else
                            strMensajeValidacion = String.Empty
                            Return True
                        End If
                    Else
                        mostrarMensaje("Para realizar el proceso de Grabado por favor ingrese la información en la opción Instrucciones", "Validar Grabar", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemInstrucciones")
                        Return False
                    End If
                Else
                    strMensajeValidacion = String.Empty
                    Return True
                End If
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar la valición de la orden.", Me.ToString, "ValidarGuardadoOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            Return False
        End Try
    End Function

    Public Sub ValidarEstadoOrdenServidor(plngIDOrden As Integer, pstrEstadoOrdenCliente As String)
        Try
            dcProxy.TempValidarEstadoOrdens.Clear()
            dcProxy.Load(dcProxy.ValidarEstadoOrdenTesoreriaEncabezadoQuery(_TesoreriaOrdenesPlusCE_Selected.lngID.ToString(), _TesoreriaOrdenesPlusCE_Selected.ValorEstado, Program.Usuario, "E", Program.HashConexion), AddressOf TerminoValidarEstadoTesoreria, "")

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al Validar Estado de la Orden de Tesoreria.", Me.ToString, "ValidarEstadoOrdenServidor", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Public Sub ValidarEstadoOrdenDetalleServidor(plngIDOrden As Integer, pstrEstadoOrdenCliente As String, pstrFormaPago As String)
        Try
            dcProxy.TempValidarEstadoOrdens.Clear()
            dcProxy.Load(dcProxy.ValidarEstadoOrdenTesoreriaEncabezadoQuery(plngIDOrden.ToString(), pstrEstadoOrdenCliente.Substring(0, 1), Program.Usuario, "D", Program.HashConexion), AddressOf TerminoValidarEstadoTesoreriaDetalle, pstrFormaPago)

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al Validar Estado de la Orden de Tesoreria.", Me.ToString, "ValidarEstadoOrdenServidor", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Public Overrides Async Sub EditarRegistro()
        Try
            If dcProxy.IsLoading Then
                MyBase.RetornarValorEdicionNavegacion()
                A2Utilidades.Mensajes.mostrarMensaje("Por favor espere, el sistema no ha terminado de cargar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Exit Sub
            End If
            VerDuplicar = Visibility.Collapsed
            logBuscar = False

            If logXTesorero And MostrarControlMenuGuardar Then
                IsBusy = True
                dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
                FechaOrden = dtmFechaServidor

                'Valida el estado de la Orden de Tesoreria en el Servidor que No haya sido actualizada
                ValidarEstadoOrdenServidor(_TesoreriaOrdenesPlusCE_Selected.lngID, _TesoreriaOrdenesPlusCE_Selected.ValorEstado)
            Else
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    If ((_TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTE_Plus _
                         Or _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_INCONSISTENCIAS_Plus) _
                     And _TesoreriaOrdenesPlusCE_Selected.dtmDocumento.Value.Date >= Date.Today) _
                 Or ((_TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_PENDIENTE_Plus _
                      Or _TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_INCONSISTENCIAS_Plus) _
                  And _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO) _
                 Or (_TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_FUTURA_Plus And _TesoreriaOrdenesPlusCE_Selected.dtmDocumento.Value.Date = Date.Today) Or
                        (_TesoreriaOrdenesPlusCE_Selected.ValorEstado = GSTR_FUTURA_Plus And _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And _TesoreriaOrdenesPlusCE_Selected.dtmDocumento.Value.Date < Date.Today) Then
                        If _TesoreriaOrdenesPlusCE_Selected.lngID > 0 Then

                            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                If logEsFondosOYD Then
                                    HabilitarConceptoDetalles = False
                                Else
                                    HabilitarConceptoDetalles = True
                                End If
                            Else
                                HabilitarConceptoDetalles = True
                            End If

                            IsBusy = True
                            dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
                            FechaOrden = dtmFechaServidor

                            'Valida el estado de la Orden de Tesoreria en el Servidor que No haya sido actualizada
                            ValidarEstadoOrdenServidor(_TesoreriaOrdenesPlusCE_Selected.lngID, _TesoreriaOrdenesPlusCE_Selected.ValorEstado)
                        End If
                    Else
                        IsBusy = False
                        Dim strMensaje = ""

                        mostrarMensaje("La Orden de Pago no se puede editar por alguna de las siguientes razones: " & vbCrLf & vbCrLf &
                                       "-El estado de la orden es diferente a un estado pendiente." & vbCrLf &
                                       "-El estado de la orden es futura pero la fecha es diferente a la actual." & vbCrLf &
                                       "-La orden es de tipo producto fondos y tiene fecha menor a la fecha actual.", "Editar Registro.", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        logEditarRegistro = False
                        logNuevoRegistro = False
                        logDuplicarRegistro = True
                        VerDuplicar = Visibility.Visible
                        MyBase.RetornarValorEdicionNavegacion()
                        Editando = False
                        MyBase.CambioItem("Editando")
                    End If
                Else
                    IsBusy = False
                    mostrarMensaje("No es posible Editar asegurese que existan registros en la lista", "Editar Registro", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    logEditarRegistro = False
                    logNuevoRegistro = False
                    MyBase.RetornarValorEdicionNavegacion()
                    Editando = False
                    MyBase.CambioItem("Editando")
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la edición del registro",
                                 Me.ToString(), "EditarRegistro", Application.Current.ToString(), Program.Maquina, ex)
        End Try

    End Sub

    Public Sub Instrucciones()
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                Dim logValidarInstrucciones As Boolean = True

                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                        logValidarInstrucciones = True
                    End If
                End If

                If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                    If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > 0 Then
                        logValidarInstrucciones = True
                    End If
                End If


                If logValidarInstrucciones Then
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logRecogeTercero) Then
                        RecogeTercero = _TesoreriaOrdenesPlusCE_Selected.logRecogeTercero
                    Else
                        RecogeTercero = False
                    End If

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logConsignarCta) Then
                        If _TesoreriaOrdenesPlusCE_Selected.logConsignarCta Then
                            ConsignarCuentaChecked = _TesoreriaOrdenesPlusCE_Selected.logConsignarCta
                            If _TesoreriaOrdenesPlusCE_Selected.logEsCtaInscrita_Instrucciones Then
                                If Not IsNothing(ListaCuentasClientes) Then
                                    If ListaCuentasClientes.Where(Function(i) i.strCuenta = _TesoreriaOrdenesPlusCE_Selected.strCuenta_Instrucciones And i.strNombreTitular = _TesoreriaOrdenesPlusCE_Selected.strNombre_Instrucciones And i.strNroDocumento = _TesoreriaOrdenesPlusCE_Selected.strNroDocumento_Instrucciones).Count > 0 Then
                                        For Each li In ListaCuentasClientes.Where(Function(i) i.strCuenta = _TesoreriaOrdenesPlusCE_Selected.strCuenta_Instrucciones And i.strNombreTitular = _TesoreriaOrdenesPlusCE_Selected.strNombre_Instrucciones And i.strNroDocumento = _TesoreriaOrdenesPlusCE_Selected.strNroDocumento_Instrucciones)
                                            CuentasInstrucciones = li.ID
                                        Next
                                    End If
                                End If
                            Else
                                strNroDocumentoInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNroDocumento_Instrucciones
                                strNombreInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNombre_Instrucciones
                                strValorTipoCuentaInstrucciones = _TesoreriaOrdenesPlusCE_Selected.ValorTipoCta_Instrucciones
                                strTipoIdentificacionInstrucciones = _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion_Instrucciones
                                strCuentaInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strCuenta_Instrucciones
                                If IsNothing(_TesoreriaOrdenesPlusCE_Selected.lngIDBanco) Then
                                    strCodigoBancoInstrucciones = String.Empty
                                Else
                                    strCodigoBancoInstrucciones = _TesoreriaOrdenesPlusCE_Selected.lngIDBanco.ToString
                                End If

                            End If
                        End If

                    Else
                        ConsignarCuentaChecked = False
                    End If

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logEsCtaInscrita_Instrucciones) Then
                        logEsCtaInscrita_Instrucciones = _TesoreriaOrdenesPlusCE_Selected.logEsCtaInscrita_Instrucciones
                    Else
                        logEsCtaInscrita_Instrucciones = False
                    End If
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logDireccionInscrita_Instrucciones) Then
                        logDireccionInscrita_Instrucciones = _TesoreriaOrdenesPlusCE_Selected.logDireccionInscrita_Instrucciones
                    Else
                        logDireccionInscrita_Instrucciones = False
                    End If


                    If _TesoreriaOrdenesPlusCE_Selected.logEsCtaInscrita_Instrucciones Then
                        CuentaRegistradaInstrucciones = GSTR_CUENTA_REGISTRADA
                    Else
                        CuentaRegistradaInstrucciones = GSTR_CUENTA_NO_REGISTRADA
                    End If

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logllevarDireccion) Then
                        If _TesoreriaOrdenesPlusCE_Selected.logllevarDireccion Then
                            LlevarDireccion = _TesoreriaOrdenesPlusCE_Selected.logllevarDireccion
                            If Not IsNothing(ListaDireccionesClientes) Then
                                If ListaDireccionesClientes.Where(Function(i) i.strDireccion = _TesoreriaOrdenesPlusCE_Selected.strDireccion_Instrucciones And i.strCiudad = _TesoreriaOrdenesPlusCE_Selected.strCiudad_Instrucciones).Count > 0 Then
                                    For Each li In ListaDireccionesClientes.Where(Function(i) i.strDireccion = _TesoreriaOrdenesPlusCE_Selected.strDireccion_Instrucciones And i.strCiudad = _TesoreriaOrdenesPlusCE_Selected.strCiudad_Instrucciones)
                                        DireccionRegistrada = li.ID
                                    Next
                                End If
                            End If
                        End If
                    Else
                        LlevarDireccion = False
                    End If

                    If _TesoreriaOrdenesPlusCE_Selected.logDireccionInscrita_Instrucciones Then
                        strTipoEsDireccionInscrita = GSTR_DIRECCION_INSCRITA
                    Else
                        strTipoEsDireccionInscrita = GSTR_DIRECCION_NO_INSCRITA
                    End If

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logClientePresente) Then
                        ClientePresente = _TesoreriaOrdenesPlusCE_Selected.logClientePresente
                        VerCuentasRegistradas = Visibility.Collapsed
                        VerLlevarDireccion = Visibility.Collapsed
                    Else
                        ClientePresente = False
                    End If
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logClienteRecoge) Then
                        ClienteRecoge = _TesoreriaOrdenesPlusCE_Selected.logClienteRecoge
                        VerCuentasRegistradas = Visibility.Collapsed
                        VerLlevarDireccion = Visibility.Collapsed
                    Else
                        ClienteRecoge = False
                    End If

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logEsTercero_Instrucciones) Then
                        logEsTercero_Instrucciones = _TesoreriaOrdenesPlusCE_Selected.logEsTercero_Instrucciones
                        IDTipoClienteInstrucciones = GSTR_TERCERO
                    Else
                        logEsTercero_Instrucciones = False
                        IDTipoClienteInstrucciones = GSTR_CLIENTE
                    End If
                    'cc
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logllevarDireccion) Then
                        If _TesoreriaOrdenesPlusCE_Selected.logEsTercero_Instrucciones Then
                            IDTipoClienteInstrucciones = GSTR_TERCERO


                        Else
                            IDTipoClienteInstrucciones = GSTR_CLIENTE
                            'VerLlevarDireccion = GSTR_DIRECCION_INSCRITA
                            'VerCamposOpcionalesLlevarDireccion = _TesoreriaOrdenesPlusCE_Selected.strDireccion_Instrucciones


                            If logDireccionInscrita_Instrucciones Then
                                strTipoEsDireccionInscrita = GSTR_DIRECCION_INSCRITA
                            Else
                                strTipoEsDireccionInscrita = GSTR_DIRECCION_NO_INSCRITA
                            End If

                            VerDireccionesRegistradas = Visibility.Collapsed

                        End If





                    End If


                    strTipoIdentificacionInstrucciones = _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion_Instrucciones
                    strNroDocumentoInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNroDocumento_Instrucciones
                    strNombreInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNombre_Instrucciones
                    strCiudadInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strCiudad_Instrucciones
                    strSectorInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strSector_Instrucciones

                    strValorTipoCuentaInstrucciones = _TesoreriaOrdenesPlusCE_Selected.ValorTipoCta_Instrucciones
                    strDireccionInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strDireccion_Instrucciones
                    'strDireccionInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strNombre_Instrucciones




                    If IsNothing(_TesoreriaOrdenesPlusCE_Selected.lngIDBanco) Then
                        strCodigoBancoInstrucciones = String.Empty
                    Else
                        strCodigoBancoInstrucciones = _TesoreriaOrdenesPlusCE_Selected.lngIDBanco.ToString
                    End If
                    strCuentaInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strCuenta_Instrucciones

                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.logOtra_Instrucciones) Then
                        OtrosChecked = _TesoreriaOrdenesPlusCE_Selected.logOtra_Instrucciones
                        strOtrosInstrucciones = _TesoreriaOrdenesPlusCE_Selected.strOtros_Instrucciones
                    Else
                        OtrosChecked = False
                        strOtrosInstrucciones = String.Empty
                    End If

                    If logEditarRegistro = False And logNuevoRegistro = False Then
                        HabilitarDocumento = False
                        HabilitarCamposDireccion = False
                        HabilitarCamposConsignarInstrucciones = False
                    Else
                        If RecogeTercero _
                        Or (ConsignarCuentaChecked And CuentaRegistradaInstrucciones = GSTR_CUENTA_NO_REGISTRADA) _
                        Or (IDTipoClienteInstrucciones = GSTR_TERCERO) Then
                            HabilitarDocumento = True
                        End If
                        If LlevarDireccion Or strTipoEsDireccionInscrita = GSTR_DIRECCION_NO_INSCRITA Then
                            HabilitarCamposDireccion = True
                        End If

                        If ConsignarCuentaChecked And CuentaRegistradaInstrucciones = GSTR_CUENTA_NO_REGISTRADA Then
                            HabilitarCamposConsignarInstrucciones = True
                        End If
                    End If

                Else
                    LimpiarInscripcion()
                End If
            Else
                LimpiarInscripcion()
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar las instrucciones.",
                                 Me.ToString(), "Instrucciones", Application.Current.ToString(), Program.Maquina, ex)
        End Try

    End Sub

    Public Sub LimpiarInscripcion()
        Try
            logEsCtaInscrita_Instrucciones = False
            logDireccionInscrita_Instrucciones = False
            CuentaRegistradaInstrucciones = String.Empty
            RecogeTercero = False
            ConsignarCuentaChecked = Nothing
            CuentasInstrucciones = 0
            ConsignarCuentaChecked = False
            DireccionRegistrada = 0
            LlevarDireccion = False

            strTipoEsDireccionInscrita = String.Empty
            VerCuentasRegistradas = Visibility.Collapsed
            VerLlevarDireccion = Visibility.Collapsed
            ClientePresente = False
            logEsTercero_Instrucciones = False
            IDTipoClienteInstrucciones = String.Empty

            strTipoIdentificacionInstrucciones = String.Empty
            strNroDocumentoInstrucciones = String.Empty
            strNombreInstrucciones = String.Empty
            strCiudadInstrucciones = String.Empty
            strSectorInstrucciones = String.Empty

            strValorTipoCuentaInstrucciones = String.Empty
            strDireccionInstrucciones = String.Empty
            strCodigoBancoInstrucciones = String.Empty
            strCuentaInstrucciones = String.Empty

            OtrosChecked = False
            strOtrosInstrucciones = String.Empty

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al limpiar las instrucciones.",
                                 Me.ToString(), "LimpiarInscripcion", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub CambiarAForma()
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                ObtenerValoresOrdenAnterior(_TesoreriaOrdenesPlusCE_Selected, TesoreriaOrdenesPlusAnterior)
                HabilitarConsultarSaldo()
                HabilitarImportacion = False
                HabilitarEnEdicion = False
                HabilitarEncabezado = False
                HabilitarFecha = False
                HabilitarFechaAplicacion = False
                VerInstrucciones = Visibility.Visible
                TabItemActual = "Cheques"
                CalcularTotales(GSTR_CHEQUE)
                CalcularTotales(GSTR_TRANSFERENCIA)
                CalcularTotales(GSTR_INTERNOS)
                CalcularTotales(GSTR_CARTERASCOLECTIVAS)
                CalcularTotales(GSTR_TRASLADOFONDOS)
                CalcularTotales(GSTR_BLOQUEO_RECURSOS)
                CalcularTotales(GSTR_OYD)
                CalcularTotales(GSTR_OPERACIONES_ESPECIALES)
                'BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemCheque")
            End If

            MyBase.CambiarAForma()

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cambiar a la forma",
                                 Me.ToString(), "CambiarAForma", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub CancelarEditarRegistro()
        Try
            If logXTesorero Then
                ViewOrdenGiroPopPup.Close()
                dcProxy.OYDPLUS_CancelarOrdenOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.lngID, "ENCABEZADOORDENGIRO", Program.Usuario, Program.HashConexion, AddressOf TerminoCancelarEditarRegistro, String.Empty)
                Exit Sub
            End If

            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then

                dcProxy.RejectChanges()
                ObtenerValoresCombos(True)

                LimpiarVariablesSubirDocumentos(True)

                VerDuplicar = Visibility.Visible
                HabilitarImportacion = False
                logEditarRegistro = False
                logDuplicarRegistro = False
                HabilitarFechaAplicacion = False
                HabilitarTipoProducto = False
                logNuevoRegistro = False
                logCancelarRegistro = True
                HabilitarReceptor = False
                HabilitarEnEdicion = False
                HabilitarInstrucciones = False
                HabilitarEncabezado = False
                HabilitarFecha = False

                ErrorForma = ""
                dcProxy.TesoreriaOyDPlusCheques.Clear()
                dcProxy.TesoreriaOyDPlusTransferencias.Clear()
                dcProxy.TesoreriaOyDPlusCarterasColectivas.Clear()
                dcProxy.TesoreriaOyDPlusInternos.Clear()
                dcProxy.TesoreriaOyDPlusBloqueos.Clear()
                HabilitarBuscadorCliente = False
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Cheques = Nothing
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias = Nothing
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = Nothing
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = Nothing
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Internos = Nothing
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos = Nothing
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_OYD = Nothing
                End If
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = Nothing
                End If

                If Not (TesoreriaOrdenesPlusAnterior) Is Nothing And Not TesoreriaOrdenesPlusAnterior.dtmDocumento Is Nothing Then
                    'TesoreriaOrdenesPlusCE_Selected = TesoreriaOrdenesPlusAnterior
                    If _TesoreriaOrdenesPlusCE_Selected.EntityState = EntityState.Detached Then
                        TesoreriaOrdenesPlusCE_Selected = TesoreriaOrdenesPlusAnterior
                    End If

                    FechaOrden = TesoreriaOrdenesPlusAnterior.dtmDocumento

                    ObtenerValoresOrdenAnterior(TesoreriaOrdenesPlusAnterior, _TesoreriaOrdenesPlusCE_Selected)

                    CodigoOYDControles = TesoreriaOrdenesPlusAnterior.strIDComitente
                    TipoProductoControles = _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto
                    CarteraColectivaFondosControles = _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos
                    NroEncargoFondosControles = _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos

                    If TesoreriaOrdenesPlusAnterior.logEsCtaInscrita_Instrucciones Then
                        CuentaRegistradaInstrucciones = GSTR_CUENTA_REGISTRADA
                    Else
                        CuentaRegistradaInstrucciones = GSTR_CUENTA_NO_REGISTRADA
                    End If
                    If Not IsNothing(TesoreriaOrdenesPlusAnterior.logEsTercero_Instrucciones) Then
                        IDTipoClienteInstrucciones = GSTR_TERCERO
                    Else
                        logEsTercero_Instrucciones = False
                        IDTipoClienteInstrucciones = GSTR_CLIENTE
                    End If
                    If Not IsNothing(ListaDireccionesClientes) Then
                        For Each li In ListaDireccionesClientes.Where(Function(i) i.strDireccion = TesoreriaOrdenesPlusAnterior.strDireccion_Instrucciones And i.strCiudad = TesoreriaOrdenesPlusAnterior.strCiudad_Instrucciones)
                            DireccionRegistrada = li.ID
                        Next
                    End If

                    LlamarDetalle()

                    Instrucciones()
                    dcProxy.OYDPLUS_CancelarOrdenOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.lngID, "ENCABEZADOORDENGIRO", Program.Usuario, Program.HashConexion, AddressOf TerminoCancelarEditarRegistro, String.Empty)
                End If

            End If

            Editando = False
            If logCancelarRegistro Then
                HabilitarDocumento = False
                HabilitarCamposDireccion = False
                HabilitarCamposConsignarInstrucciones = False
                HabilitarOtrosInstrucciones = False
            End If
            CambiarColorFondoTextoBuscador()

            dblValorOrdenAntesModificar = 0
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cancelar la edición del registro",
                     Me.ToString(), "CancelarEditarRegistro", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub BorrarRegistro()
        Try
            If dcProxy.IsLoading Then
                MyBase.RetornarValorEdicionNavegacion()
                A2Utilidades.Mensajes.mostrarMensaje("Por favor espere, el sistema no ha terminado de cargar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Exit Sub
            End If

            'JCM20170919, se realiza validación para verificar si existen encargos creadis co fechas anteriores a la última fecha de cierre del fondo
            logValidarBorrar = False

            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then

                If _TesoreriaOrdenesPlusCE_Selected.strEstado = "PENDIENTE POR APROBAR" Then 'JABG20101101
                    mostrarMensaje("La orden no se puede eliminar porque está en estado pendiente por aprobar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Else

                    If _TesoreriaOrdenesPlusCE_Selected.logEsFondoOYD = True Then
                        dcProxy.VerificarAnulacionOrdenFondosOyD(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion, AddressOf TerminoVerificarBorrarEncabezado, "")
                    Else
                        mostrarMensajePregunta("¿Está Seguro que desea eliminar el Registro?",
                                               Program.TituloSistema,
                                               "BORRARREGISTRO",
                                               AddressOf TerminoPreguntarBorrarRegistro, False)

                    End If
                End If
            End If


            'If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
            '    mostrarMensajePregunta("¿Esta Seguro que desea eliminar el Registro?",
            '                           Program.TituloSistema,
            '                           "BORRARREGISTRO",
            '                           AddressOf TerminoPreguntarBorrarRegistro, False)
            'End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Borrar el registro",
                                 Me.ToString(), "BorrarRegistro", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoPreguntarBorrarRegistro(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)
            If objResultado.DialogResult Then
                IsBusy = True
                dcProxy.TesoreriaOrdenesEncabezado_Elminar(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion, AddressOf TerminoEliminarEncabezado, "")
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarBorrarRegistro", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Public Overrides Sub QuitarFiltro()
        logFiltrar = False
        logRecargarPantalla = False
        VistaSeleccionada = GSTR_PENDIENTES
        logRecargarPantalla = True

        MyBase.QuitarFiltro()
    End Sub

    Public Sub LlamarDetalle()
        Try
            IsBusyDetalles = True
            'IsBusy = True

            dcProxy.TesoreriaOyDPlusCheques.Clear()
            dcProxy.TesoreriaOyDPlusTransferencias.Clear()
            dcProxy.TesoreriaOyDPlusCarterasColectivas.Clear()
            dcProxy.TesoreriaOyDPlusOYDs.Clear()
            dcProxy.TesoreriaOyDPlusInternos.Clear()
            dcProxy.TesoreriaOyDPlusBloqueos.Clear()
            dcProxy.TesoreriaOyDPlusOperacionesEspeciales.Clear()

            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                ListaTesoreriaOrdenesPlusCE_Detalle_Cheques = Nothing
            End If
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias = Nothing
            End If
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = Nothing
            End If
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = Nothing
            End If
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                ListaTesoreriaOrdenesPlusCE_Detalle_OYD = Nothing
            End If
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                ListaTesoreriaOrdenesPlusCE_Detalle_Internos = Nothing
            End If
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos = Nothing
            End If
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = Nothing
            End If


            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                dcProxy.Load(dcProxy.TesoreriaOrdenesDetalleListar_TransferenciaQuery(_TesoreriaOrdenesPlusCE_Selected.lngID, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenesDetalleTransferencias, "CAMBIOSELECTED")
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyDetalles = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema Mientras se consultaba el Detalle de la Orden ", Me.ToString(), "LlamarDetalle", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub ValidarEncabezado()
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                If Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strNombre) And
                   Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor) And
                   Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto) And
                   Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strNroDocumento) Then

                    If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                        If Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos) And
                            Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos) And
                            Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos) Then
                            logHayEncabezado = True
                            HabilitarImportacion = True
                            HabilitarEnEdicion = True
                        Else
                            HabilitarImportacion = False
                            HabilitarEnEdicion = False
                            logHayEncabezado = False
                        End If
                    Else
                        logHayEncabezado = True
                        HabilitarImportacion = True
                        HabilitarEnEdicion = True
                    End If
                Else
                    HabilitarImportacion = False
                    HabilitarEnEdicion = False
                    logHayEncabezado = False
                End If
            Else
                HabilitarImportacion = False
                HabilitarEnEdicion = False
                logHayEncabezado = False
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema Mientras al Validar datos de Encabezado", Me.ToString(), "ValidarEncabezado", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub DefineCommands()

        Try
            '''''''''''''''''''''''''''''''''''''''''CHEQUES'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            NuevoCheque = New DelegateCommandGenerico(Of String)(AddressOf NuevoWppSubCheque, AddressOf PuedeEjecutar)
            EditarWppCheque = New DelegateCommandGenerico(Of String)(AddressOf EditarWppSubCheque, AddressOf PuedeEjecutar)
            BorrarCheque = New DelegateCommandGenerico(Of String)(AddressOf BorrarChequewpp, AddressOf PuedeEjecutar)
            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

            '''''''''''''''''''''''''''''''''''''''''Transferencias'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            NuevaTransferencia = New DelegateCommandGenerico(Of String)(AddressOf NuevoWppSubTransferencia, AddressOf PuedeEjecutar)
            EditarWppTransferencia = New DelegateCommandGenerico(Of String)(AddressOf EditarWppSubTransferencia, AddressOf PuedeEjecutar)
            BorrarTransferencia = New DelegateCommandGenerico(Of String)(AddressOf BorrarTransferencias, AddressOf PuedeEjecutar)
            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

            '''''''''''''''''''''''''''''''''''''''''Carteras Colectivas'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            NuevaCartera = New DelegateCommandGenerico(Of String)(AddressOf NuevoWppSubCarterasColectivas, AddressOf PuedeEjecutar)
            EditarWppCartera = New DelegateCommandGenerico(Of String)(AddressOf EditarWppSubCarteraColectiva, AddressOf PuedeEjecutar)
            BorrarCartera = New DelegateCommandGenerico(Of String)(AddressOf BorrarCarterasColectivas, AddressOf PuedeEjecutar)

            '''''''''''''''''''''''''''''''''''''''''OYD'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            NuevaOYD = New DelegateCommandGenerico(Of String)(AddressOf NuevoWppSubOYD, AddressOf PuedeEjecutar)
            EditarWppOYD = New DelegateCommandGenerico(Of String)(AddressOf EditarWppSubOYD, AddressOf PuedeEjecutar)
            BorrarOYD = New DelegateCommandGenerico(Of String)(AddressOf BorrarOYDWPP, AddressOf PuedeEjecutar)

            '''''''''''''''''''''''''''''''''''''''''INTERNOS'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            NuevaInternos = New DelegateCommandGenerico(Of String)(AddressOf NuevoWppSubInternos, AddressOf PuedeEjecutar)
            EditarWppInternos = New DelegateCommandGenerico(Of String)(AddressOf EditarWppSubInternos, AddressOf PuedeEjecutar)
            BorrarInternos = New DelegateCommandGenerico(Of String)(AddressOf BorrarInternosWpp, AddressOf PuedeEjecutar)

            '''''''''''''''''''''''''''''''''''''''''Bloqueo'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            NuevaBloqueo = New DelegateCommandGenerico(Of String)(AddressOf NuevoWppSubBloqueoRecursos, AddressOf PuedeEjecutar)
            EditarWppBloqueo = New DelegateCommandGenerico(Of String)(AddressOf EditarWppSubBloqueo, AddressOf PuedeEjecutar)
            BorrarBloqueo = New DelegateCommandGenerico(Of String)(AddressOf BorrarBloqueoWpp, AddressOf PuedeEjecutar)

            '''''''''''''''''''''''''''''''''''''''''Operaciones Especiales'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
            NuevaOperacionesEspeciales = New DelegateCommandGenerico(Of String)(AddressOf NuevoWppSubOperacionesEspeciales, AddressOf PuedeEjecutar)
            EditarWppOperacionesEspeciales = New DelegateCommandGenerico(Of String)(AddressOf EditarWppSubOperacionesEspeciales, AddressOf PuedeEjecutar)
            BorrarOperacionesEspeciales = New DelegateCommandGenerico(Of String)(AddressOf BorrarOperacionesEspecialesWpp, AddressOf PuedeEjecutar)

            '******************************************IMPORTACIONES*************************************************************
            ImportarCheque = New DelegateCommandGenerico(Of String)(AddressOf AbrirPopupCargaArchivosCheques, AddressOf PuedeEjecutar)
            ImportarTransferencia = New DelegateCommandGenerico(Of String)(AddressOf AbrirPopupCargaArchivosTransferencia, AddressOf PuedeEjecutar)

            '******************************************************************************************************************


            '******************************************  Consulta de saldos  ***********************************************
            CalcularSaldo = New DelegateCommandGenerico(Of String)(AddressOf ConsultarSaldos, AddressOf PuedeEjecutar)
        Catch ex As Exception

            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la Carga de Comandos",
                                 Me.ToString(), "DefineCommands", Application.Current.ToString(), Program.Maquina, ex)

        End Try

    End Sub

    Public Sub CalcularValorEdicionDetalle()
        Try

            'Cheques
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Where(Function(i) i.lngID Is Nothing Or i.lngID <= 0) ' Or (i.lngID > 0 And i.curValorNeto <> i.curValorAnteriorDetalle))
                    ValorEdicionDetalle = ValorEdicionDetalle + x.curValorNeto
                Next
            End If

            'Transferencias
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Where(Function(i) i.lngID Is Nothing Or i.lngID <= 0)
                    ValorEdicionDetalle = ValorEdicionDetalle + x.curValorNeto
                Next
            End If

            'Internos
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Where(Function(i) i.lngID Is Nothing Or i.lngID <= 0)
                    ValorEdicionDetalle = ValorEdicionDetalle + x.curValorNeto
                Next
            End If

            'Carteras
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Where(Function(i) i.lngID Is Nothing Or i.lngID <= 0)
                    ValorEdicionDetalle = ValorEdicionDetalle + x.curValorNeto
                Next
            End If

            'Traslado fondos
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Where(Function(i) i.lngID Is Nothing Or i.lngID <= 0)
                    ValorEdicionDetalle = ValorEdicionDetalle + x.curValorNeto
                Next
            End If

            'OYD
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Where(Function(i) i.lngID Is Nothing Or i.lngID <= 0)
                    ValorEdicionDetalle = ValorEdicionDetalle + x.curValorNeto
                Next
            End If

            'Bloqueos
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Where(Function(i) i.lngID Is Nothing Or i.lngID <= 0)
                    ValorEdicionDetalle = ValorEdicionDetalle + x.curValorNeto
                Next
            End If

            'Operaciones
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Where(Function(i) i.lngID Is Nothing Or i.lngID <= 0)
                    ValorEdicionDetalle = ValorEdicionDetalle + x.curValorNeto
                Next
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Calcular Totales", Me.ToString(), "CalcularTotales", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub


    Public Sub CalcularTotales(strFormaPago As String)
        Try
            If strFormaPago = GSTR_CHEQUE Then
                ValorTotalGenerar = 0
                ValorTotalGMF = 0
                ValorTotalNETO = 0

                If TabItemActual = "Cheques" Then
                    ValorTotalGenerarActual = 0
                    ValorTotalGMFActual = 0
                    ValorTotalNETOActual = 0
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                        ValorTotalGenerar = ValorTotalGenerar + x.curValor
                        ValorTotalGMF = ValorTotalGMF + x.curValorGMF
                        ValorTotalNETO = ValorTotalNETO + x.curValorNeto
                    Next
                    If TabItemActual = "Cheques" Then
                        ValorTotalGenerarActual = ValorTotalGenerar
                        ValorTotalGMFActual = ValorTotalGMF
                        ValorTotalNETOActual = ValorTotalNETO
                    End If
                End If
            ElseIf strFormaPago = GSTR_TRANSFERENCIA Then
                ValorTotalGenerarTransferencia = 0
                ValorTotalGMFTransferencia = 0
                ValorTotalNETOTransferencia = 0

                If TabItemActual = "Transferencias" Then
                    ValorTotalGenerarActual = 0
                    ValorTotalGMFActual = 0
                    ValorTotalNETOActual = 0
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then

                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                        ValorTotalGenerarTransferencia = ValorTotalGenerarTransferencia + x.curValor
                        ValorTotalGMFTransferencia = ValorTotalGMFTransferencia + x.curValorGMF
                        ValorTotalNETOTransferencia = ValorTotalNETOTransferencia + x.curValorNeto
                    Next
                    If TabItemActual = "Transferencias" Then
                        ValorTotalGenerarActual = ValorTotalGenerarTransferencia
                        ValorTotalGMFActual = ValorTotalGMFTransferencia
                        ValorTotalNETOActual = ValorTotalNETOTransferencia
                    End If
                End If
            ElseIf strFormaPago = GSTR_CARTERASCOLECTIVAS Then
                ValorTotalGenerarCarterasColectivas = 0
                ValorTotalGMFCarterasColectivas = 0
                ValorTotalNETOCarterasColectivas = 0

                ValorTotalGenerarActual = 0
                ValorTotalGMFActual = 0
                ValorTotalNETOActual = 0

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then

                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                        ValorTotalGenerarCarterasColectivas = ValorTotalGenerarCarterasColectivas + x.curValor
                        ValorTotalGMFCarterasColectivas = ValorTotalGMFCarterasColectivas + x.curValorGMF
                        ValorTotalNETOCarterasColectivas = ValorTotalNETOCarterasColectivas + x.curValorNeto
                    Next

                    ValorTotalGenerarActual = ValorTotalGenerarCarterasColectivas
                    ValorTotalGMFActual = ValorTotalGMFCarterasColectivas
                    ValorTotalNETOActual = ValorTotalNETOCarterasColectivas
                End If
            ElseIf strFormaPago = GSTR_TRASLADOFONDOS Then
                ValorTotalGenerarTrasladoFondos = 0
                ValorTotalGMFTrasladoFondos = 0
                ValorTotalNETOTrasladoFondos = 0

                ValorTotalGenerarActual = 0
                ValorTotalGMFActual = 0
                ValorTotalNETOActual = 0

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos
                        ValorTotalGenerarTrasladoFondos = ValorTotalGenerarTrasladoFondos + x.curValor
                        ValorTotalGMFTrasladoFondos = ValorTotalGMFTrasladoFondos + x.curValorGMF
                        ValorTotalNETOTrasladoFondos = ValorTotalNETOTrasladoFondos + x.curValorNeto
                    Next

                    ValorTotalGenerarActual = ValorTotalGenerarTrasladoFondos
                    ValorTotalGMFActual = ValorTotalGMFTrasladoFondos
                    ValorTotalNETOActual = ValorTotalNETOTrasladoFondos
                End If
            ElseIf strFormaPago = GSTR_OYD Then
                ValorTotalGenerarOYD = 0
                ValorTotalGMFOYD = 0
                ValorTotalNETOOYD = 0

                If TabItemActual = "OYD" Then
                    ValorTotalGenerarActual = 0
                    ValorTotalGMFActual = 0
                    ValorTotalNETOActual = 0
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                        ValorTotalGenerarOYD = ValorTotalGenerarOYD + x.curValor
                        ValorTotalGMFOYD = ValorTotalGMFOYD + x.curValorGMF
                        ValorTotalNETOOYD = ValorTotalNETOOYD + x.curValorNeto
                    Next
                    If TabItemActual = "OYD" Then
                        ValorTotalGenerarActual = ValorTotalGenerarOYD
                        ValorTotalGMFActual = ValorTotalGMFOYD
                        ValorTotalNETOActual = ValorTotalNETOOYD
                    End If
                End If
            ElseIf strFormaPago = GSTR_INTERNOS Then
                ValorTotalGenerarInternos = 0
                ValorTotalGMFInternos = 0
                ValorTotalNETOInternos = 0

                If TabItemActual = "Internos" Then
                    ValorTotalGenerarActual = 0
                    ValorTotalGMFActual = 0
                    ValorTotalNETOActual = 0
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then

                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Internos
                        ValorTotalGenerarInternos = ValorTotalGenerarInternos + x.curValor
                        ValorTotalGMFInternos = ValorTotalGMFInternos + x.curValorGMF
                        ValorTotalNETOInternos = ValorTotalNETOInternos + x.curValorNeto
                    Next
                    If TabItemActual = "Internos" Then
                        ValorTotalGenerarActual = ValorTotalGenerarInternos
                        ValorTotalGMFActual = ValorTotalGMFInternos
                        ValorTotalNETOActual = ValorTotalNETOInternos
                    End If
                End If
            ElseIf strFormaPago = GSTR_BLOQUEO_RECURSOS Then
                ValorTotalGenerarBloqueo = 0
                ValorTotalGMFBloqueo = 0
                ValorTotalNETOBloqueo = 0

                If TabItemActual = "Bloqueo" Then
                    ValorTotalGenerarActual = 0
                    ValorTotalGMFActual = 0
                    ValorTotalNETOActual = 0
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then

                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos
                        ValorTotalGenerarBloqueo = ValorTotalGenerarBloqueo + x.curValor
                        ValorTotalGMFBloqueo = ValorTotalGMFBloqueo + 0
                        ValorTotalNETOBloqueo = ValorTotalNETOBloqueo + x.curValorNeto
                    Next
                    If TabItemActual = "Bloqueo" Then
                        ValorTotalGenerarActual = ValorTotalGenerarBloqueo
                        ValorTotalGMFActual = ValorTotalGMFBloqueo
                        ValorTotalNETOActual = ValorTotalNETOBloqueo
                    End If
                End If
            ElseIf strFormaPago = GSTR_OPERACIONES_ESPECIALES Then
                ValorTotalGenerarOperacionesEspeciales = 0

                If TabItemActual = "OperacionesEspeciales" Then
                    ValorTotalGenerarActual = 0
                    ValorTotalGMFActual = 0
                    ValorTotalNETOActual = 0
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                        ValorTotalGenerarOperacionesEspeciales = ValorTotalGenerarOperacionesEspeciales + x.curValor
                    Next
                    If TabItemActual = "OperacionesEspeciales" Then
                        ValorTotalGenerarActual = ValorTotalGenerarOperacionesEspeciales
                        ValorTotalGMFActual = 0
                        ValorTotalNETOActual = ValorTotalGenerarOperacionesEspeciales
                    End If
                End If

            End If
            ValorTotalGenerarOrden = Decimal.Round(ValorTotalGenerar + ValorTotalGenerarTransferencia + ValorTotalGenerarCarterasColectivas + ValorTotalGenerarTrasladoFondos + ValorTotalGenerarOYD + ValorTotalGenerarInternos + ValorTotalGenerarBloqueo + ValorTotalGenerarOperacionesEspeciales, 2)
            ValorTotalGMFOrden = Decimal.Round(ValorTotalGMF + ValorTotalGMFTransferencia + ValorTotalGMFCarterasColectivas + ValorTotalGMFTrasladoFondos + ValorTotalGMFOYD + ValorTotalGMFInternos + ValorTotalGMFBloqueo, 2)
            ValorTotalNETOOrden = Decimal.Round(ValorTotalNETO + ValorTotalNETOTransferencia + ValorTotalNETOCarterasColectivas + ValorTotalNETOTrasladoFondos + ValorTotalNETOOYD + ValorTotalNETOInternos + ValorTotalNETOBloqueo + ValorTotalGenerarOperacionesEspeciales, 2)

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Calcular Totales", Me.ToString(), "CalcularTotales", Program.TituloSistema, Program.Maquina, ex)
        End Try

    End Sub

    Private Function PuedeEjecutar(ByVal s As String) As Boolean
        Return True
    End Function

    Public Sub RecargarPantalla()
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                intIDOrdenTimer = _TesoreriaOrdenesPlusCE_Selected.lngID
                TraerOrdenes("REFRESCARPANTALLA", VistaSeleccionada)

            Else
                intIDOrdenTimer = 0
                TraerOrdenes("REFRESCARPANTALLA", VistaSeleccionada)
            End If


        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recargar la pantalla de Ordenes de Tesoreria.", Me.ToString(), "RecargarPantalla", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Sub LimpiarControlesOYDPLUS(ByVal pstrOpcion As String)
        Try
            Select Case pstrOpcion.ToUpper
                Case "RECEPTOR"

            End Select
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al limpiar los controles.",
                                 Me.ToString(), "LimpiarControles", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try

    End Sub

    Public Sub CargarReceptoresUsuarioOYDPLUS(ByVal pstrUserState As String)
        Try
            IsBusy = True
            If Not IsNothing(dcProxyUtilidadesPLUS.tblReceptoresUsuarios) Then
                dcProxyUtilidadesPLUS.tblReceptoresUsuarios.Clear()
            End If
            If pstrUserState = "INICIO" Then
                dcProxyUtilidadesPLUS.Load(dcProxyUtilidadesPLUS.OYDPLUS_ConsultarReceptoresUsuarioQuery(False, Program.Usuario, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarReceptoresUsuario, pstrUserState)
            Else
                dcProxyUtilidadesPLUS.Load(dcProxyUtilidadesPLUS.OYDPLUS_ConsultarReceptoresUsuarioQuery(True, Program.Usuario, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarReceptoresUsuario, pstrUserState)
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó cargar los receptores del usuario.",
                                 Me.ToString(), "CargarReceptoresUsuario", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Public Sub CargarParametrosReceptorOYDPLUS(ByVal pstrCodigoReceptor As String, ByVal pUserState As String)
        Try
            If logNuevoRegistro Then
                IsBusy = True
            End If
            If Not IsNothing(dcProxyUtilidadesPLUS.tblParametrosReceptors) Then
                dcProxyUtilidadesPLUS.tblParametrosReceptors.Clear()
            End If
            If Not String.IsNullOrEmpty(pstrCodigoReceptor) Then
                dcProxyUtilidadesPLUS.Load(dcProxyUtilidadesPLUS.OYDPLUS_ConsultarParametrosReceptorQuery(pstrCodigoReceptor, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarParametrosReceptor, pUserState)
            Else
                dcProxyUtilidadesPLUS.Load(dcProxyUtilidadesPLUS.OYDPLUS_ConsultarParametrosReceptorQuery("", Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarParametrosReceptor, pUserState)

            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar los parametros del receptor.",
                                 Me.ToString(), "CargarParametrosReceptor", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Public Sub ObtenerValoresDefectoOYDPLUS(ByVal pstrOpcion As String)
        Try
            If logNuevoRegistro Or logEditarRegistro Or logXTesorero Then
                Select Case pstrOpcion.ToUpper
                    Case "RECEPTOR"
                        If ListaReceptoresUsuario.Count > 1 Then
                            If ListaReceptoresUsuario.Where(Function(i) i.Prioridad = 0).Count > 0 Then
                                _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor = ListaReceptoresUsuario.Where(Function(i) i.Prioridad = 0).FirstOrDefault.CodigoReceptor
                            End If
                        ElseIf ListaReceptoresUsuario.Count = 1 Then
                            _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor = ListaReceptoresUsuario.FirstOrDefault.CodigoReceptor
                        End If

                        If String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor) Then
                            IsBusyReceptor = False
                        End If
                    Case "COMBOSRECEPTOR"
                        If Not IsNothing(ListaParametrosReceptor) Then
                            logRealizarConsultaPropiedades = False

                            'Obtiene los valores por defecto del receptor de la tabla de Parametros receptor.
                            If ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0).Count > 0 Then
                                For Each li In ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0)
                                    Select Case li.Topico.ToUpper
                                        Case "TIPOPRODUCTO"
                                            If logNuevoRegistro Then
                                                If DiccionarioCombosOYDPlus.ContainsKey("TIPOPRODUCTOTESORERIA") Then
                                                    If DiccionarioCombosOYDPlus("TIPOPRODUCTOTESORERIA").Where(Function(i) i.Retorno = li.Valor).Count > 0 Then
                                                        _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = li.Valor
                                                    End If
                                                End If
                                            End If
                                    End Select
                                Next

                                'Valida los datos que no tienen valor y lleva los valores por Defecto siempre y cuando la lista tenga solamente un valor.
                                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                                    If String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto) Then
                                        If DiccionarioCombosOYDPlus.ContainsKey("TIPOPRODUCTOTESORERIA") Then
                                            If DiccionarioCombosOYDPlus("TIPOPRODUCTOTESORERIA").Count = 1 Then
                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = DiccionarioCombosOYDPlus("TIPOPRODUCTOTESORERIA").FirstOrDefault.Retorno
                                            End If
                                        Else
                                            mostrarMensaje("El Receptor seleccionado no contiene ningún tipo de producto configurado", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                            BorrarCliente = True
                                        End If
                                    End If
                                End If

                                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected) Then
                                    If String.IsNullOrEmpty(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strTipoCobroGMF) Then
                                        If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                                            If DiccionarioCombosOYDPlus("TIPOGMF").Count = 1 Then
                                                If IDTipoCliente = GSTR_TERCERO Then
                                                    IDGMF = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Retorno
                                                Else
                                                    IDGMF = String.Empty
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected) Then
                                    If String.IsNullOrEmpty(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strTipoCobroGMF) Then
                                        If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                                            If DiccionarioCombosOYDPlus("TIPOGMF").Count = 1 Then
                                                If IDTipoCliente = GSTR_TERCERO Then
                                                    IDGMF_Transferencia = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Retorno
                                                Else
                                                    IDGMF_Transferencia = String.Empty
                                                End If
                                            End If
                                        End If
                                    End If
                                End If

                            End If

                            logRealizarConsultaPropiedades = True
                        End If

                        IsBusyReceptor = False
                End Select
                IsBusy = False

            End If
            If DiccionarioCombosOYDPlus.ContainsKey("GMF_E") Then
                If DiccionarioCombosOYDPlus("GMF_E").Count = 1 Then
                    If CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator = "." Then
                        dblGMF_E = Decimal.Parse((DiccionarioCombosOYDPlus("GMF_E").FirstOrDefault.Descripcion).Replace(",", "."))
                    Else
                        dblGMF_E = Decimal.Parse((DiccionarioCombosOYDPlus("GMF_E").FirstOrDefault.Descripcion).Replace(".", ","))
                    End If
                End If
            End If
            If DiccionarioCombosOYDPlus.ContainsKey("GMF_D") Then
                If DiccionarioCombosOYDPlus("GMF_D").Count = 1 Then
                    If CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator = "." Then
                        dblGMF_D = Decimal.Parse((DiccionarioCombosOYDPlus("GMF_D").FirstOrDefault.Descripcion).Replace(",", "."))
                    Else
                        dblGMF_D = Decimal.Parse((DiccionarioCombosOYDPlus("GMF_D").FirstOrDefault.Descripcion).Replace(".", ","))
                    End If
                End If
            End If
            If DiccionarioCombosOYDPlus.ContainsKey("SERVICIO_DOCUMENTOS") Then
                If DiccionarioCombosOYDPlus("SERVICIO_DOCUMENTOS").Count = 1 Then
                    GSTR_SERVICIO_DOCUMENTOS = DiccionarioCombosOYDPlus("SERVICIO_DOCUMENTOS").FirstOrDefault.Descripcion
                End If
            End If
            If DiccionarioCombosOYDPlus.ContainsKey("PARAMETROTIPOCRUCE_GMF") Then 'Parametro Tipos Cruce que requieren GMF - JDOL 20150804
                If DiccionarioCombosOYDPlus("PARAMETROTIPOCRUCE_GMF").Count = 1 Then
                    strParametroTipoCruceGMF = DiccionarioCombosOYDPlus("PARAMETROTIPOCRUCE_GMF").FirstOrDefault.Retorno
                End If
            End If


        Catch ex As Exception
            IsBusyEdicionTesorero = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al obtener los valores por defecto.",
                                 Me.ToString(), "ObtenerValoresDefectoOYDPLUS", Application.Current.ToString(), Program.Maquina, ex)
            IsBusyReceptor = False
        End Try
    End Sub

    Public Sub ObtenerValoresCombos(ByVal ValoresCompletos As Boolean)
        Try
            Dim objDiccionario As New Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
            Dim objListaCategoria As New List(Of OYDPLUSUtilidades.CombosReceptor)
            Dim objListaCategoria1 As New List(Of OYDPLUSUtilidades.CombosReceptor)

            If ValoresCompletos Then
                '************************************************************************************
                If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                    For Each li In DiccionarioCombosOYDPlusCompleta
                        objDiccionario.Add(li.Key, li.Value)
                    Next
                End If

                If Not IsNothing(objListaCategoria) Then
                    objListaCategoria.Clear()
                End If

                If Not IsNothing(objDiccionario) Then
                    If objDiccionario.ContainsKey("CANTIDADMAXDETALLETESORERIA") Then
                        If objDiccionario("CANTIDADMAXDETALLETESORERIA").Count > 0 Then
                            intCantidadMaximaDetalles = CInt(objDiccionario("CANTIDADMAXDETALLETESORERIA").First.Retorno)
                        End If
                    End If

                    If objDiccionario.ContainsKey("HABILITARFONDOS") Then
                        If objDiccionario("HABILITARFONDOS").Count > 0 Then
                            If objDiccionario("HABILITARFONDOS").First.Retorno = "1" Then
                                logHabilitarFuncionalidadFondos = True
                            Else
                                logHabilitarFuncionalidadFondos = False
                            End If
                        End If
                    End If

                    If objDiccionario.ContainsKey("HABILITARPROGRAMACIONES") Then
                        If objDiccionario("HABILITARPROGRAMACIONES").Count > 0 Then
                            If objDiccionario("HABILITARPROGRAMACIONES").First.Retorno = "1" Then
                                HabilitarProgramaciones = True
                            Else
                                HabilitarProgramaciones = False
                            End If
                        End If
                    End If

                    If objDiccionario.ContainsKey("FECHAACTUAL_SERVIDOR") Then
                        If objDiccionario("FECHAACTUAL_SERVIDOR").Count > 0 Then
                            Try
                                dtmFechaServidor = DateTime.ParseExact(objDiccionario("FECHAACTUAL_SERVIDOR").First.Retorno, "yyyy-MM-dd hh:mm:ss", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None)
                            Catch ex As Exception
                                dtmFechaServidor = Now
                            End Try

                            FechaOrden = dtmFechaServidor
                        End If
                    End If

                    If objDiccionario.ContainsKey("CONCEPTODEFECTO_ORDENGIRO_FONDOS") Then
                        If objDiccionario("CONCEPTODEFECTO_ORDENGIRO_FONDOS").Count > 0 Then
                            strConceptoDefecto_Fondos = objDiccionario("CONCEPTODEFECTO_ORDENGIRO_FONDOS").First.Retorno
                        End If
                    End If

                    If objDiccionario.ContainsKey("CONCEPTODEFECTO_OYD_FONDOS") Then
                        If objDiccionario("CONCEPTODEFECTO_OYD_FONDOS").Count > 0 Then
                            strConceptoDefectoOYD_Fondos = objDiccionario("CONCEPTODEFECTO_OYD_FONDOS").First.Retorno
                        End If
                    End If

                    If objDiccionario.ContainsKey("CF_UTILIZAPASIVA_A2") Then
                        If objDiccionario("CF_UTILIZAPASIVA_A2").Count > 0 Then
                            If objDiccionario("CF_UTILIZAPASIVA_A2").First.Retorno = "SI" Then
                                logEsFondosOYD = True
                                HabilitarCamposFondosOYD = True
                            Else
                                logEsFondosOYD = False
                                HabilitarCamposFondosOYD = False
                            End If
                        End If
                    End If

                    If objDiccionario.ContainsKey("TIPOGMF_FONDOSOYD") Then
                        If objDiccionario("TIPOGMF_FONDOSOYD").Count > 0 Then
                            strTipoGMF_TesoreriaFondosOYD = objDiccionario("TIPOGMF_FONDOSOYD").First.Retorno
                        End If
                    End If

                    If objDiccionario.ContainsKey("OYDPLUS_CONCEPTOSCONFIGURADOSCOBROGMF") Then
                        If objDiccionario("OYDPLUS_CONCEPTOSCONFIGURADOSCOBROGMF").Count > 0 Then
                            TIPOCONCEPTOCONCOBRO = objDiccionario("OYDPLUS_CONCEPTOSCONFIGURADOSCOBROGMF").First.Retorno
                        End If
                    End If

                    If objDiccionario.ContainsKey("OYDPLUS_ORDENCANCELACION_SOLOVALORCERO") Then
                        If objDiccionario("OYDPLUS_ORDENCANCELACION_SOLOVALORCERO").First.Retorno = "SI" Then
                            log_Cancelacion_SoloPermitirValorEnCero = True
                        End If
                    End If

                    If objDiccionario.ContainsKey("MANEJA_OMNIBUS") Then
                        If objDiccionario("MANEJA_OMNIBUS").First.Retorno = "SI" Then
                            logFuncionalidad_CuentaOmnibus = True
                        End If
                    End If

                    If objDiccionario.ContainsKey("A2_UTILIZAUNITY") Then
                        If objDiccionario("A2_UTILIZAUNITY").Count > 0 Then
                            If objDiccionario("A2_UTILIZAUNITY").First.Retorno = "SI" Then
                                logEsFondosUnity = True
                            Else
                                logEsFondosUnity = False
                            End If
                        End If
                    End If

                End If
            Else
                If Not IsNothing(DiccionarioCombosOYDPlus) Then
                    For Each li In DiccionarioCombosOYDPlus
                        objDiccionario.Add(li.Key, li.Value)
                    Next
                End If

                If Not IsNothing(objListaCategoria) Then
                    objListaCategoria.Clear()
                End If

            End If

            DiccionarioCombosOYDPlus = objDiccionario

            ObtenerValoresDefectoOYDPLUS("COMBOSRECEPTOR")
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al obtener los valores de la clasificación.",
                                 Me.ToString(), "ObtenerValoresCombos", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Public Sub CargarConfiguracionReceptorOYDPLUS(ByVal pUserState As String)
        Try
            If logNuevoRegistro Then
                IsBusy = True
            End If
            If Not IsNothing(dcProxyUtilidadesPLUS.tblConfiguracionesAdicionalesReceptors) Then
                dcProxyUtilidadesPLUS.tblConfiguracionesAdicionalesReceptors.Clear()
            End If
            CargarParametrosReceptorOYDPLUS(String.Empty, String.Empty)

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar la configuración del receptor.",
                                 Me.ToString(), "CargarConfiguracionReceptor", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Public Sub CargarCombosOYDPLUS(ByVal pstrIDReceptor As String, ByVal pstrUserState As String)

        Try
            If logNuevoRegistro Or logEditarRegistro Then
                IsBusyReceptor = True
            End If

            If Not IsNothing(dcProxyUtilidadesPLUS.CombosReceptors) Then
                dcProxyUtilidadesPLUS.CombosReceptors.Clear()
            End If

            If String.IsNullOrEmpty(pstrIDReceptor) Then
                dcProxyUtilidadesPLUS.Load(dcProxyUtilidadesPLUS.OYDPLUS_ConsultarCombosReceptorQuery(String.Empty, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarCombosOYDCompleta, pstrUserState)
            Else
                dcProxyUtilidadesPLUS.Load(dcProxyUtilidadesPLUS.OYDPLUS_ConsultarCombosReceptorQuery(pstrIDReceptor, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarCombosOYD, pstrUserState)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar los combos de la pantalla.",
                                 Me.ToString(), "CargarCombosOYDPLUS", Application.Current.ToString(), Program.Maquina, ex)
            IsBusyReceptor = False
        End Try
    End Sub

    Private Sub LimpiarVariablesConfirmadas()
        Try
            CantidadAprobaciones = 0
            CantidadConfirmaciones = 0
            CantidadJustificaciones = 0

            CantidadTotalAprobaciones = 0
            cantidadTotalConfirmacion = 0
            cantidadTotalJustificacion = 0

            Aprobaciones = String.Empty
            AprobacionesUsuario = String.Empty
            Confirmaciones = String.Empty
            Justificaciones = String.Empty
            JustificacionesUsuario = String.Empty

            logReglaDUAl = False
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al limpiar los valores de las confirmaciones.", Me.ToString(), "LimpiarVariablesConfirmadas", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub ObtenerValoresOrdenAnterior(ByVal pobjOrden As OyDPLUSTesoreria.TesoreriaOrdenesEncabezado, ByRef pobjOrdenSalvarDatos As OyDPLUSTesoreria.TesoreriaOrdenesEncabezado)
        Try
            If Not IsNothing(pobjOrden) Then
                Dim objNewOrdenOYD As New OyDPLUSTesoreria.TesoreriaOrdenesEncabezado

                objNewOrdenOYD.curValor = pobjOrden.curValor
                objNewOrdenOYD.curValorNota = pobjOrden.curValorNota
                objNewOrdenOYD.dtmDocumento = pobjOrden.dtmDocumento
                objNewOrdenOYD.strTipo = pobjOrden.strTipo
                objNewOrdenOYD.lngID = pobjOrden.lngID
                objNewOrdenOYD.lngIDBanco = pobjOrden.lngIDBanco
                objNewOrdenOYD.lngIDPadre = pobjOrden.lngIDPadre
                objNewOrdenOYD.lngSecuencia = pobjOrden.lngSecuencia
                objNewOrdenOYD.ValorTipo = pobjOrden.ValorTipo
                objNewOrdenOYD.ValorTipoProducto = pobjOrden.ValorTipoProducto
                objNewOrdenOYD.strCodigoReceptor = pobjOrden.strCodigoReceptor
                objNewOrdenOYD.ValorEstado = pobjOrden.ValorEstado
                objNewOrdenOYD.strEstado = pobjOrden.strEstado
                objNewOrdenOYD.strNroDocumento = pobjOrden.strNroDocumento
                objNewOrdenOYD.strCuentaCliente = pobjOrden.strCuentaCliente
                objNewOrdenOYD.strTipoIdentificacion = pobjOrden.strTipoIdentificacion
                objNewOrdenOYD.strDescripcionURL = pobjOrden.strDescripcionURL
                objNewOrdenOYD.strEspecieDividendos = pobjOrden.strEspecieDividendos
                objNewOrdenOYD.strNombre = pobjOrden.strNombre
                objNewOrdenOYD.lngNroDocumento = pobjOrden.lngNroDocumento
                objNewOrdenOYD.lngIDDocumento = pobjOrden.lngIDDocumento
                objNewOrdenOYD.strIDComitente = pobjOrden.strIDComitente
                objNewOrdenOYD.lngIDOrdenante = pobjOrden.lngIDOrdenante
                objNewOrdenOYD.strDescripcionTipoRetiroFondos = pobjOrden.strDescripcionTipoRetiroFondos
                objNewOrdenOYD.strNombreConsecutivo = pobjOrden.strNombreConsecutivo
                objNewOrdenOYD.strTipoCliente = pobjOrden.strTipoCliente
                objNewOrdenOYD.strTipoProducto = pobjOrden.strTipoProducto
                objNewOrdenOYD.strUrlArchivo = pobjOrden.strUrlArchivo
                objNewOrdenOYD.strUsuario = pobjOrden.strUsuario
                objNewOrdenOYD.strCarteraColectivaFondos = pobjOrden.strCarteraColectivaFondos
                objNewOrdenOYD.intNroEncargoFondos = pobjOrden.intNroEncargoFondos
                objNewOrdenOYD.strTipoRetiroFondos = pobjOrden.strTipoRetiroFondos

                objNewOrdenOYD.logClientePresente = pobjOrden.logClientePresente
                objNewOrdenOYD.logClienteRecoge = pobjOrden.logClienteRecoge
                objNewOrdenOYD.logRecogeTercero = pobjOrden.logRecogeTercero
                objNewOrdenOYD.logConsignarCta = pobjOrden.logConsignarCta
                objNewOrdenOYD.logllevarDireccion = pobjOrden.logllevarDireccion
                objNewOrdenOYD.strTipoIdentificacion_Instrucciones = pobjOrden.strTipoIdentificacion_Instrucciones
                objNewOrdenOYD.strNroDocumento_Instrucciones = pobjOrden.strNroDocumento_Instrucciones
                objNewOrdenOYD.strNombre_Instrucciones = pobjOrden.strNombre_Instrucciones
                objNewOrdenOYD.logDireccionInscrita_Instrucciones = pobjOrden.logDireccionInscrita_Instrucciones
                objNewOrdenOYD.strCiudad_Instrucciones = pobjOrden.strCiudad_Instrucciones
                objNewOrdenOYD.strSector_Instrucciones = pobjOrden.strSector_Instrucciones
                objNewOrdenOYD.logEsTercero_Instrucciones = pobjOrden.logEsTercero_Instrucciones
                objNewOrdenOYD.logEsCtaInscrita_Instrucciones = pobjOrden.logEsCtaInscrita_Instrucciones
                objNewOrdenOYD.logEsFondoOYD = pobjOrden.logEsFondoOYD
                objNewOrdenOYD.dtmFechaAplicacion = pobjOrden.dtmFechaAplicacion
                objNewOrdenOYD.dblValorPenalizado = pobjOrden.dblValorPenalizado
                objNewOrdenOYD.strCuenta_Instrucciones = pobjOrden.strCuenta_Instrucciones
                objNewOrdenOYD.logOtra_Instrucciones = pobjOrden.logOtra_Instrucciones
                objNewOrdenOYD.strOtros_Instrucciones = pobjOrden.strOtros_Instrucciones
                objNewOrdenOYD.strDireccion_Instrucciones = pobjOrden.strDireccion_Instrucciones
                objNewOrdenOYD.ValorTipoCta_Instrucciones = pobjOrden.ValorTipoCta_Instrucciones
                objNewOrdenOYD.ValorTipoIdentificacion = pobjOrden.ValorTipoIdentificacion
                objNewOrdenOYD.ValorTipoIdentificacion_Instrucciones = pobjOrden.ValorTipoIdentificacion_Instrucciones
                objNewOrdenOYD.strUsuarioWindows = Program.UsuarioWindows
                objNewOrdenOYD.strObservaciones = pobjOrden.strObservaciones
                'CodigoOYDControles = pobjOrden.strIDComitente
                'TipoProductoControles = pobjOrden.ValorTipoProducto

                HabilitarConsultarSaldo()

                pobjOrdenSalvarDatos = objNewOrdenOYD
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener los datos de la orden anterior.", Me.ToString(), "ObtenerValoresOrdenAnterior", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Consulta el valor real del saldo actual para el cliente
    ''' </summary>
    ''' <param name="pstrOpcion">Parámetro para identificar desde cuál control se está lanzando la consulta para asiganr la propiedad correspondiente</param>
    ''' <remarks>EOMC -- 02-26-2013</remarks>
    ''' 
    Private Sub ConsultarSaldos(ByVal pstrOpcion As String)
        Try
            strOpcionConsutaSaldo = pstrOpcion
            If ConsultarSaldo Then
                If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.strIDComitente) Then
                        If Not IsNothing(dcProxyUtilidadesPLUS.tblSaldosClientes) Then
                            dcProxyUtilidadesPLUS.tblSaldosClientes.Clear()
                        End If
                        dcProxyUtilidadesPLUS.Load(dcProxyUtilidadesPLUS.OYDPLUS_ConsultarSaldoClienteQuery(TesoreriaOrdenesPlusCE_Selected.strIDComitente, Program.Usuario, _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos, Program.HashConexion), AddressOf TerminoConsultarSaldoCliente, String.Empty)
                    Else
                        LimpiarSaldo(pstrOpcion)
                    End If
                Else
                    LimpiarSaldo(pstrOpcion)
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar el saldo del cliente.",
                                 Me.ToString(), "ConsultarSaldoCliente", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Limpia el saldo según la opción en el parámetro
    ''' </summary>
    ''' <param name="pstrOpcion"></param>
    ''' <remarks>EOMC -- 02-26-2013</remarks>
    Private Sub LimpiarSaldo(pstrOpcion As String)
        Try
            Select Case pstrOpcion
                Case "Cheque"
                    ValorGenerar = 0
                Case "Transferencia"
                    ValorGenerarTransferencia = 0
                Case "Cartera"
                    ValorGenerarCartera = 0
                Case "Interno"
                    ValorGenerarInternos = 0
            End Select
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    ''' <summary>
    ''' Metodo que obtiene el valor de las liquidaciones seleccionadas y sugiere el valor a el detalle seleccionado.
    ''' Desarrollado por Juan David Correa
    ''' Fecha 12 de marzo del 2013
    ''' </summary>
    ''' <param name="pstrOpcion"></param>
    ''' <param name="pstrCliente"></param>
    ''' <param name="pobjValores"></param>
    ''' <remarks></remarks>
    Public Sub ObtenerLiquidacionesSeleccionadas(ByVal pstrOpcion As String, ByVal pstrCliente As String, ByVal pobjValores As A2OYDPLUSUtilidades.RetornoValoresLiquidacion)
        Try
            Dim dblValorLiquidacionesSugerido As Double = 0

            If Not IsNothing(pobjValores) Then
                If Not String.IsNullOrEmpty(pobjValores.strLiquidaciones) Then
                    dblValorLiquidacionesSugerido = pobjValores.dblValorLiquidacionesSeleccionadas
                    liquidacionesSelecciondas = pobjValores.strLiquidaciones

                    liquidacionesSelecciondas = String.Format("Liquidaciones: {0} - Valor total:{1:C2}", liquidacionesSelecciondas, dblValorLiquidacionesSugerido)

                    Select Case pstrOpcion.ToUpper
                        Case "CHEQUE"
                            ValorGenerar = dblValorLiquidacionesSugerido
                            CalcularValoresDetalleCheque()
                        Case "CARTERACOLECTIVA"
                            ValorGenerarCartera = dblValorLiquidacionesSugerido
                            CalcularValoresDetalleTransferencia()
                        Case "TRANSFERENCIA"
                            ValorGenerarTransferencia = dblValorLiquidacionesSugerido
                            CalcularValoresDetalleCartera()
                        Case "INTERNOS"
                            ValorGenerarInternos = dblValorLiquidacionesSugerido
                            CalcularValoresDetalleInterno()
                    End Select

                    'Sí se consulta las liquidaciones la variable de la consulta del saldo queda en cero
                    SaldoConsultado = 0

                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener las liquidaciones seleccionas.",
                                 Me.ToString(), "ObtenerLiquidacionesSeleccionadas", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Función que concatena el detalle del concepto de ordenes de tesoreria y retorna formateado para ser almacenado en la base de datos.
    ''' Desarrollado por Juan David Correa
    ''' Fecha 12 de marzo del 2013
    ''' </summary>
    ''' <param name="strDescripcionConcepto"></param>
    ''' <param name="pstrDetalle"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function ConcatenarDetalle(ByVal strDescripcionConcepto As String, ByVal pstrDetalle As String, Optional ByVal pintNroEncargo As String = "", Optional ByVal pstrFormaPago As String = "") As String
        Try
            Dim strResultado As String = String.Empty

            If (Not String.IsNullOrEmpty(pintNroEncargo)) And logEsFondosOYD And (_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Or pstrFormaPago = "CC") Then
                strResultado = String.Format("{0} ENCARGO NRO {1}-({2})", strDescripcionConcepto, pintNroEncargo, pstrDetalle)
            ElseIf Not String.IsNullOrEmpty(strDescripcionConcepto) And Not String.IsNullOrEmpty(pstrDetalle) Then
                If SaldoConsultado > 0 Then
                    strResultado = String.Format("{0}-{1}", strDescripcionConcepto, pstrDetalle)

                Else
                    If Not String.IsNullOrEmpty(liquidacionesSelecciondas) Then
                        strResultado = String.Format("{0}-[{1}]-({2})", strDescripcionConcepto, liquidacionesSelecciondas, pstrDetalle)
                    Else
                        strResultado = String.Format("{0}-({1})", strDescripcionConcepto, pstrDetalle)
                    End If
                End If
            Else
                If Not String.IsNullOrEmpty(strDescripcionConcepto) Then

                    If SaldoConsultado > 0 Then
                        strResultado = String.Format("{0}", strDescripcionConcepto)
                    Else
                        If Not String.IsNullOrEmpty(liquidacionesSelecciondas) Then
                            strResultado = String.Format("{0}-[{1}]", strDescripcionConcepto, liquidacionesSelecciondas)
                        Else
                            strResultado = String.Format("{0}", strDescripcionConcepto)
                        End If
                    End If
                Else
                    If SaldoConsultado > 0 Then
                        strResultado = String.Format("{0}", pstrDetalle)
                    Else
                        If Not String.IsNullOrEmpty(liquidacionesSelecciondas) Then
                            strResultado = String.Format("{0}-[{1}]", pstrDetalle, liquidacionesSelecciondas)
                        Else
                            strResultado = String.Format("{0}", pstrDetalle)
                        End If
                    End If
                End If
            End If

            Return strResultado
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al concatenar los detalles.",
                                Me.ToString(), "ConcatenarDetalle", Application.Current.ToString(), Program.Maquina, ex)
            Return String.Empty
        End Try
    End Function

    Public Function ConcatenarConcepto(ByVal intIDConcepto As Nullable(Of Integer)) As String
        Try
            Dim strResultado As String = String.Empty

            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) And Not IsNothing(intIDConcepto) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("CONCEPTOS") Then
                    If DiccionarioCombosOYDPlusCompleta("CONCEPTOS").Where(Function(i) i.Retorno = intIDConcepto.ToString).Count > 0 Then
                        strResultado = String.Format("{0} - {1}",
                                                                       DiccionarioCombosOYDPlusCompleta("CONCEPTOS").Where(Function(i) i.Retorno = intIDConcepto.ToString).First.Retorno,
                                                                       DiccionarioCombosOYDPlusCompleta("CONCEPTOS").Where(Function(i) i.Retorno = intIDConcepto.ToString).First.Descripcion
                                                                       )


                    Else
                        strResultado = String.Empty
                    End If
                Else
                    strResultado = String.Empty
                End If
            Else
                strResultado = String.Empty
            End If

            Return strResultado
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al concatenar los detalles.",
                                Me.ToString(), "ConcatenarConcepto", Application.Current.ToString(), Program.Maquina, ex)
            Return String.Empty
        End Try
    End Function

    ''' <summary>
    ''' Función que retorna el valor de un texto que este contenido dentro de los dos caracteres enviados como parametros.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 12 de marzo del 2013
    ''' </summary>
    ''' <param name="pstrDetalle"></param>
    ''' <param name="pstrCaracterInicial"></param>
    ''' <param name="pstrCaracterFinal"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function RetornarValorDetalle(ByVal pstrDetalle As String, ByVal pstrCaracterInicial As String, ByVal pstrCaracterFinal As String) As String
        Try
            Dim strResultado As String = String.Empty
            Dim strExpresionBusqueda As String = String.Format("\{0}\S*\s*\S*\{1}", pstrCaracterInicial, pstrCaracterFinal)
            Dim regexp As New Regex(strExpresionBusqueda)

            pstrDetalle = pstrDetalle.Replace(" ", "*_*")

            Dim m = regexp.Match(pstrDetalle)

            strResultado = m.Groups(0).Value
            strResultado = strResultado.Replace(pstrCaracterInicial, String.Empty)
            strResultado = strResultado.Replace(pstrCaracterFinal, String.Empty)
            strResultado = strResultado.Replace("*_*", " ")

            Return strResultado
        Catch ex As Exception
            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO _
                And objTipoOrdenNueva <> TipoOrdenGiroNueva.DIVIDENDOS _
                And (objTipoOrdenNueva <> TipoOrdenGiroNueva.PROGRAMADA _
                    Or (objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA And logEsFondosOYD)) Then

            End If
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al retornar el valor del detalle.",
                                Me.ToString(), "RetornarValorDetalle", Application.Current.ToString(), Program.Maquina, ex)
            Return String.Empty
        End Try
    End Function

    Private Sub VerificarHabilitarFondos()
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) And logNuevoRegistro Then
                If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO _
                    And objTipoOrdenNueva <> TipoOrdenGiroNueva.DIVIDENDOS _
                    And (objTipoOrdenNueva <> TipoOrdenGiroNueva.PROGRAMADA _
                        Or (objTipoOrdenNueva = TipoOrdenGiroNueva.PROGRAMADA And logEsFondosOYD)) Then
                    MostrarInformacionFondos = Visibility.Visible

                    If Editando Then
                        HabilitarCategoriaFondos = True
                    Else
                        HabilitarCategoriaFondos = False
                    End If

                    If Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strIDComitente) Then
                        If logNuevoRegistro Then
                            If Not IsNothing(dcProxy.CarterasColectivasClientes) Then
                                dcProxy.CarterasColectivasClientes.Clear()
                            End If
                            dcProxy.Load(dcProxy.ConsultarCarterasColectivasClienteQuery(_TesoreriaOrdenesPlusCE_Selected.strIDComitente, False, Program.Usuario, Program.HashConexion, String.Empty), AddressOf TerminoConsultarCarterasColectivasClientes, String.Empty)
                        End If
                    Else
                        _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos = Nothing
                        _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos = Nothing

                        ListaCarterasColectivasClienteCompleta = Nothing
                        ListaCarterasColectivasCliente = Nothing
                        ListaEncargosCarteraColectiva = Nothing

                        'If logEsFondosOYD Then
                        _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = Nothing

                        ListaTiposRetirosFondos = Nothing
                        'End If
                    End If
                Else
                    MostrarInformacionFondos = Visibility.Collapsed
                    HabilitarCategoriaFondos = False
                    _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos = Nothing
                    _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos = Nothing

                    ListaCarterasColectivasClienteCompleta = Nothing
                    ListaCarterasColectivasCliente = Nothing
                    ListaEncargosCarteraColectiva = Nothing

                    If logEsFondosOYD Then
                        _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = Nothing

                        ListaTiposRetirosFondos = Nothing
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al verificar sí se habilitaban los campos de fondos.",
                               Me.ToString(), "VerificarHabilitarFondos", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub SubirArchivoDocumentos()
        Try
            Dim objSubirArchivo As New A2DocumentosWPF.A2SubirDocumento()
            logRecargar = True
            objSubirArchivo.inicializarControl()
            configurarDocumentos(objSubirArchivo)
            'JFSB20180516 Se controla el envío del id del documento para después usarlo para cargar el documento
            If strEstadoGuardar = "TERMINOGUARDARNUEVO" Then
                objSubirArchivo.ClaveUnica = IdEncabezadoSubirArchivo
            Else
                objSubirArchivo.ClaveUnica = TesoreriaOrdenesPlusCE_Selected.lngID
            End If
            If Not IsNothing(objSubirArchivo) And Not String.IsNullOrEmpty(mstrArchivo) Then
                DescripcionBusy = "Subiendo archivo adjunto..."
                IsBusy = True
                IsBusyEdicionTesorero = True

                AddHandler objSubirArchivo.finalizoTransmisionArchivo, AddressOf TerminoTransmisionArchivo
                AddHandler objSubirArchivo.errorTransmisionArchivo, AddressOf TerminoTransmisionArchivoError
                If String.IsNullOrEmpty(_mstrRuta) Then
                    objSubirArchivo.subirArchivo(mstrArchivo, mabytArchivo)
                Else
                    objSubirArchivo.subirArchivo(mstrArchivo, mstrRuta)
                End If
            Else
                ContinuarGuardadoOrden()
            End If

            LimpiarVariablesSubirDocumentos(True)
        Catch ex As Exception
            DescripcionBusy = "Cargando..."
            IsBusyEdicionTesorero = False
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al subir el documento.", Me.ToString(), "SubirArchivoDocumentos", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub TerminoTransmisionArchivo(pstrArchivo As String, pstrRuta As String)
        Try
            DescripcionBusy = "Cargando..."
            ContinuarGuardadoOrden()
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al finalizar el guardado de la orden.", Me.ToString(), "TerminoTransmisionArchivo", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub TerminoTransmisionArchivoError(pstrArchivo As String, pstrRuta As String, pobjError As Exception)
        Try
            ContinuarGuardadoOrden()
            DescripcionBusy = "Cargando..."
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al subir el documento adjunto.", Me.ToString(), "TerminoTransmisionArchivoError", Program.TituloSistema, Program.Maquina, pobjError, Program.RutaServicioLog)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al finalizar el guardado de la orden.", Me.ToString(), "TerminoTransmisionArchivoError", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Protected Overrides Sub Finalize()
        MyBase.Finalize()
    End Sub


    Private Sub _TesoreriaOrdenesPlusCE_Selected_PropertyChanged(ByVal sender As Object, ByVal e As System.ComponentModel.PropertyChangedEventArgs) Handles _TesoreriaOrdenesPlusCE_Selected.PropertyChanged
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                If e.PropertyName = "strCodigoReceptor" Then
                    IsBusyReceptor = True
                    If logNuevoRegistro Then
                        HabilitarTipoProducto = True
                    Else
                        HabilitarTipoProducto = False
                    End If

                    If HabilitarBuscadorCliente Then
                        HabilitarBuscadorCliente = False
                    End If
                    IsBusyReceptor = False
                    If Not _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor Is Nothing Then
                        If BorrarCliente = True Then
                            BorrarCliente = False
                        End If
                        BorrarCliente = True

                        If logNuevoRegistro And Editando Then
                            ListaOrdenantesOYDPLUS = Nothing
                            OrdenanteSeleccionadoOYDPLUS = Nothing
                        End If

                        HabilitarConsultarSaldo()
                        CargarCombosOYDPLUS(_TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor, String.Empty)
                    End If
                ElseIf e.PropertyName = "ValorTipoProducto" Then
                    Dim logAsignarValoresTipoProducto As Boolean = True

                    If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then

                        If logEsFondosOYD Then
                            HabilitarConceptoDetalles = False
                        Else
                            HabilitarConceptoDetalles = True
                        End If

                        logEsTrasladoFondos = True
                        If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                            mostrarMensaje("Cuando la orden es de tipo programada o dividendos no se puede seleccionar el tipo de producto FONDOS", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            logAsignarValoresTipoProducto = False
                        Else
                            If logEsFondosOYD = False Then
                                If Not IsNothing(DiccionarioCombosOYDPlus) Then
                                    If Not DiccionarioCombosOYDPlus.ContainsKey("CARTERACOLECTIVASCLIENTES") Then
                                        mostrarMensaje("Aun no ha sido cargado el archivo de las carteras colectivas de los clientes.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                    End If
                                End If
                                dtmFechaMenorPermitidaIngreso = dtmFechaServidor.Date
                            End If
                            logEsTrasladoFondos = False
                        End If
                    Else
                        logEsTrasladoFondos = False
                        HabilitarFechaAplicacionCarteraFondosOYD = True
                        dtmFechaMenorPermitidaIngreso = dtmFechaServidor.Date
                        HabilitarConceptoDetalles = True
                    End If

                    ValidarHabilitarValorDetalles()

                    If BorrarCliente Then
                        BorrarCliente = False
                    End If
                    BorrarCliente = True

                    If logNuevoRegistro And Editando Then
                        ListaOrdenantesOYDPLUS = Nothing
                        OrdenanteSeleccionadoOYDPLUS = Nothing
                    End If

                    _TesoreriaOrdenesPlusCE_Selected.strNombre = String.Empty
                    _TesoreriaOrdenesPlusCE_Selected.strTipoIdentificacion = String.Empty
                    _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion = String.Empty
                    _TesoreriaOrdenesPlusCE_Selected.strNroDocumento = String.Empty
                    _TesoreriaOrdenesPlusCE_Selected.strIDComitente = String.Empty

                    CodigoOYDControles = String.Empty

                    If logAsignarValoresTipoProducto Then
                        TipoProductoControles = _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto

                        If Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto) Then
                            HabilitarBuscadorCliente = True
                        End If

                        HabilitarConsultarSaldo()
                    Else
                        HabilitarBuscadorCliente = False
                        TipoProductoControles = String.Empty
                    End If

                    VerificarPrimerTabHabilitado()
                    VerificarHabilitarTabsOrdenPago(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos)
                ElseIf e.PropertyName = "strIDComitente" Then
                    VerificarHabilitarFondos()
                ElseIf e.PropertyName = "strCarteraColectivaFondos" Then
                    If Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos) Then
                        If Not IsNothing(_ListaCarterasColectivasClienteCompleta) Then
                            Dim objNuevaListaEncargos As New List(Of OyDPLUSTesoreria.CarterasColectivasClientes)
                            For Each li In _ListaCarterasColectivasClienteCompleta
                                If li.CarteraColectiva = _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos And Not String.IsNullOrEmpty(li.NroEncargo) Then
                                    If objNuevaListaEncargos.Where(Function(i) i.NroEncargo = li.NroEncargo).Count = 0 Then
                                        objNuevaListaEncargos.Add(New OyDPLUSTesoreria.CarterasColectivasClientes With {.CarteraColectiva = li.CarteraColectiva,
                                                                                                                    .CodigoOYD = li.CodigoOYD,
                                                                                                                    .ID = li.ID,
                                                                                                                    .NroEncargo = li.NroEncargo,
                                                                                                                        .Saldo = li.Saldo,
                                                                                                                        .dtmFechaCierre = li.dtmFechaCierre,
                                                                                                                        .intDiasPagoRetiro = li.intDiasPagoRetiro,
                                                                                                                        .intDiasPagoCancel = li.intDiasPagoCancel
                                                                                                                        })
                                    End If
                                End If
                            Next

                            ListaEncargosCarteraColectiva = objNuevaListaEncargos
                            If logNuevoRegistro Then
                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos = Nothing
                            End If
                        Else
                            ListaEncargosCarteraColectiva = Nothing
                            If logNuevoRegistro Then
                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos = Nothing
                            End If
                        End If
                        If Editando Then
                            VerificarRestriccionesTipoCartera(False, "ENCABEZADOORDENGIRO")
                        End If
                        If logNuevoRegistro And _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD Then
                            ObtenerProximaFechaHabilFondo(dtmFechaMenorPermitidaIngreso)
                        End If
                    Else
                        ListaEncargosCarteraColectiva = Nothing
                        If logNuevoRegistro Then
                            _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos = Nothing
                        End If
                    End If

                    ValidarHabilitarValorDetalles()

                    HabilitarConsultarSaldo()
                    VerificarHabilitarTabsOrdenPago(_TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos)
                ElseIf e.PropertyName = "intNroEncargoFondos" Then
                    HabilitarConsultarSaldo()
                    If Editando Then
                        VerificarRestriccionesTipoCartera(False, "ENCABEZADOORDENGIRO")
                    End If
                ElseIf e.PropertyName = "strTipoRetiroFondos" Then
                    ObtenerFechaAplicacion()
                End If
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cambiar en la edición del detalle registro",
                                 Me.ToString(), "_TesoreriSelected_PropertyChanged", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub ObtenerFechaAplicacion(Optional ByVal pstrUserState As String = "NOMOSTRARMENSAJE")
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                If Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos) Then
                    HabilitarEnEdicion = True
                    HabilitarImportacion = True

                    If Editando Then
                        If _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_RETIRO Then
                            If Not IsNothing(_ListaEncargosCarteraColectiva) Then
                                For Each li In _ListaEncargosCarteraColectiva
                                    If li.CarteraColectiva = _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos And Not String.IsNullOrEmpty(li.NroEncargo) And li.NroEncargo = _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos Then
                                        'FechaAplicacion = DateAdd(DateInterval.Day, CInt(li.intDiasPagoRetiro), FechaOrden)
                                        logValidarFechaAplicacion = False
                                        FechaAplicacion = FechaOrden
                                        dcProxy.ObtenerFechaAplicacionValida(FechaOrden, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos, Program.Usuario, Program.HashConexion, AddressOf TerminoValidarFechaAplicacionValida, pstrUserState)
                                        logValidarFechaAplicacion = True
                                    End If
                                Next
                            End If

                            'FechaAplicacion = DateAdd(DateInterval.Day, intDiasAplicacionFondosRetiros, FechaOrden)
                        ElseIf _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION And logEsFondosOYD = True Then
                            If Not IsNothing(FechaAplicacion) Then
                                dcProxy.ObtenerFechaAplicacionValida(FechaOrden, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos, Program.Usuario, Program.HashConexion, AddressOf TerminoValidarFechaAplicacionValida, pstrUserState)
                            Else
                                If Not IsNothing(_ListaEncargosCarteraColectiva) Then
                                    For Each li In _ListaEncargosCarteraColectiva
                                        If li.CarteraColectiva = _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos And Not String.IsNullOrEmpty(li.NroEncargo) And li.NroEncargo = _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos Then
                                            dtmFechaAplicacionCancelacion = DateAdd(DateInterval.Day, CInt(li.intDiasPagoCancel), FechaOrden)
                                        End If
                                    Next
                                End If

                                logValidarFechaAplicacion = False
                                FechaAplicacion = dtmFechaAplicacionCancelacion
                                dcProxy.ObtenerFechaAplicacionValida(FechaOrden, _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos, Program.Usuario, Program.HashConexion, AddressOf TerminoValidarFechaAplicacionValida, pstrUserState)
                                logValidarFechaAplicacion = True
                            End If
                        End If

                        ValidarHabilitarValorDetalles()
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener la fecha de aplicación.",
                                 Me.ToString(), "ObtenerFechaAplicacion", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub GuardarDetalleCheque(ByVal plogSalir As Boolean)
        Try
            Dim strTipoCruce As String = String.Empty
            Dim strValorTipoCruce As String = String.Empty

            Dim objListaTesoreriaOrdenesPlusCE_Detalle_Cheques = New List(Of TesoreriaOyDPlusCheques)

            If _IDTipoCliente = GSTR_CLIENTE Then
                strValorTipoDoc = _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion
                strEsTercero = "NO"
            Else
                strEsTercero = "SI"
                strValorTipoDoc = strTipoIdentificacionWpp
            End If

            Dim strDetalleConcepto As String = ConcatenarDetalle(DescripcionComboConceptoCheque, DescripcionConcepto, NroEncargoFondosControles)
            Dim dblValor As Double = 0
            Dim dblValorGMF As Double = 0
            Dim dblValorNeto As Double = 0
            Dim dblValorTotalNota As Double = 0

            If IDGMF = GSTR_GMF_DEBAJO Or IDGMF = GSTR_GMF_NOAPLICA Or String.IsNullOrEmpty(IDGMF) Then
                dblValor = ValorNeto
                dblValorGMF = ValorGMF
                dblValorNeto = ValorGenerar
                dblValorTotalNota = ValorTotalNota_Cheque
            Else
                dblValor = ValorGenerar
                dblValorGMF = ValorGMF
                dblValorNeto = ValorNeto
                dblValorTotalNota = ValorTotalNota_Cheque
            End If

            If logEditarRegistro = True Then
                CalcularValorEdicionDetalle()
            End If
            If logEditarCheque Then
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strNroDocumento = strNroDocumentoWpp
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strNombre = strBeneficiarioWpp
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTipoDocumento = strValorTipoDoc
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strTipoDocumento = DescripcionTipoIdentificacionCheque
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strDetalleConcepto = strDetalleConcepto
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strTipoCheque = TipoChequeDescripcion
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTipoCheque = IDTipoCheque
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strEstado = GSTR_PENDIENTE_Plus_Detalle
                    If String.IsNullOrEmpty(IDTipoCheque) Then
                        TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strTipoCruce = String.Empty
                        TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTipoCruce = String.Empty
                    Else
                        TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strTipoCruce = DescripcionTipoCruce
                        TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTipoCruce = IDTipoCruce
                    End If

                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValor = dblValor
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTipoGMF = IDGMF
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strTipoCobroGMF = DescripcionGMF
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngIDConcepto = IdConcepto
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.logEsTercero = logEsTercero
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValorGMF = dblValorGMF
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strEsTercero = strEsTercero
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.dtmFechaDocumento = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.dtmFechaActualizacion = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strTipo = GSTR_ORDENGIRO
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strFormaPago = GSTR_CHEQUE
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValorNeto = dblValorNeto
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strIDTipoCliente = IDTipoCliente.ToString
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTotalNota = dblValorTotalNota
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.UsuarioWindows = Program.UsuarioWindows
                    TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.logEsProcesada = True    'JDR
                    CalcularTotales(GSTR_CHEQUE)
                    BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemCheque")
                    Habilitar_Encabezado()
                End If
            Else
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    objListaTesoreriaOrdenesPlusCE_Detalle_Cheques = ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                End If

                ListaTesoreriaOrdenesPlusCE_Detalle_Cheques = Nothing

                num = objListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count + 1
                num = num * -1

                If IDTipoCheque = GSTR_CHEQUE_GERENCIA Then
                    DescripcionTipoCruce = String.Empty
                End If

                objListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Add(New TesoreriaOyDPlusCheques With
                                                                            {.strNroDocumento = strNroDocumentoWpp,
                                                                             .strNombre = strBeneficiarioWpp,
                                                                              .ValorTipoDocumento = strValorTipoDoc,
                                                                             .strTipoDocumento = DescripcionTipoIdentificacionCheque,
                                                                             .strDetalleConcepto = strDetalleConcepto,
                                                                             .strTipoCheque = TipoChequeDescripcion,
                                                                             .ValorTipoCheque = IDTipoCheque,
                                                                             .strTipoCruce = DescripcionTipoCruce,
                                                                             .ValorTipoCruce = IDTipoCruce,
                                                                             .curValor = dblValor,
                                                                             .strTipoCobroGMF = DescripcionGMF,
                                                                             .ValorTipoGMF = IDGMF,
                                                                             .lngIDConcepto = IdConcepto, .logEsTercero = logEsTercero,
                                                                             .strEsTercero = strEsTercero,
                                                                             .curValorGMF = dblValorGMF, .dtmFechaDocumento = dtmFechaServidor.Date,
                                                                             .dtmFechaActualizacion = dtmFechaServidor.Date, .strTipo = GSTR_ORDENGIRO,
                                                                             .strFormaPago = GSTR_CHEQUE,
                                                                             .curValorNeto = dblValorNeto,
                                                                             .strIDTipoCliente = IDTipoCliente.ToString(),
                                                                             .ValorTotalNota = dblValorTotalNota,
                                                                             .strEstado = GSTR_PENDIENTE_Plus_Detalle,
                                                                             .lngIDDetalle = num,
                                                                             .UsuarioWindows = Program.UsuarioWindows,
                                                                            .curValorSaldoConsultado = SaldoConsultado,
                                                                             .curValorAnteriorDetalle = dblValorNeto,
                                                                             .logEsProcesada = True})

                ListaTesoreriaOrdenesPlusCE_Detalle_Cheques = objListaTesoreriaOrdenesPlusCE_Detalle_Cheques

                If (_TesoreriaOrdenesPlusCE_Selected.lngID <> 0) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.LastOrDefault.lngIDTesoreriaEncabezado = _TesoreriaOrdenesPlusCE_Selected.lngID
                End If

                TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.LastOrDefault

                CalcularTotales(GSTR_CHEQUE)
                BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemCheque")
                Habilitar_Encabezado()

                SaldoConsultado = 0
            End If

            logNuevoCheque = False
            logEditarCheque = False

            If plogSalir = False Then
                NuevoWppSubCheque()
            End If
        Catch ex As Exception
            IsBusyEdicionTesorero = False
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Guardar Cheque", Me.ToString(), "GuardarChequeContinuarwpp", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub GuardarDetalleTransferencia(ByVal plogSalir As Boolean)
        Try
            Dim objListaTesoreriaOrdenesPlusCE_Detalle_Transferencia = New List(Of TesoreriaOyDPlusTransferencia)

            If logEsCuentaRegistrada Then
                strEsCuentaRegistrada = "SI"
            Else
                strValorTipoDoc = _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion
                strEsCuentaRegistrada = "NO"
            End If

            If logEsTerceroTransferencia Then
                strEsTercero = "SI"
            Else
                strEsTercero = "NO"
            End If

            Dim strDetalleConcepto As String = ConcatenarDetalle(DescripcionConceptoTransferenciaCombo, DescripcionConceptoTransferencia, NroEncargoFondosControles)

            Dim dblValor As Double = 0
            Dim dblValorGMF As Double = 0
            Dim dblValorNeto As Double = 0
            Dim dblValorTotalNota As Double = 0

            If IDGMF_Transferencia = GSTR_GMF_DEBAJO Or IDGMF_Transferencia = GSTR_GMF_NOAPLICA Or String.IsNullOrEmpty(IDGMF_Transferencia) Then
                dblValor = ValorNetoTransferencia
                dblValorGMF = ValorGMFTransferencia
                dblValorNeto = ValorGenerarTransferencia
                dblValorTotalNota = ValorTotalNota_Transferencia
            Else
                dblValor = ValorGenerarTransferencia
                dblValorGMF = ValorGMFTransferencia
                dblValorNeto = ValorNetoTransferencia
                dblValorTotalNota = ValorTotalNota_Transferencia
            End If
            If logEditarRegistro = True Then
                ValorAnteriorDetalle = dblValorNeto - ValorAnteriorDetalle
            End If
            If logEditarTransferencia Then
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strNroDocumento = strNroDocumentoTitularWpp
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strNombreTitular = strNombreTitularWpp
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strNroDocumentoTitular = strNroDocumentoTitularWpp
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strTipoDocumentoTitular = DescripcionTipoIdentificacionTitularTransferencia
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strDetalleConcepto = strDetalleConcepto
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValor = dblValor
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strTipoCobroGMF = DescripcionGMFTransferencia
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.ValorTipoGMF = IDGMF_Transferencia
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngIDConcepto = IdConceptoTransferencia
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.logEsTercero = logEsTerceroTransferencia
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEsTercero = strEsTercero
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEsCuentaRegistrada = strEsCuentaRegistrada
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.logEsCuentaRegistrada = logEsCuentaRegistrada
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strCuenta = strNroCuentaWpp
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strTipoCuenta = DescripcionTipoCuentaTransferencia
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strValorTipoCuenta = strValorTipoCuentaWpp
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngIdBanco = lngCodigoBancoWpp
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValorGMF = dblValorGMF
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.dtmFechaDocumento = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.dtmFechaActualizacion = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strTipo = GSTR_ORDENGIRO
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strFormaPago = GSTR_TRANSFERENCIA
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValorNeto = dblValorNeto
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEsCtaRegistrada = strCtaRegistrada
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.ValorTotalNota = dblValorTotalNota
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEstado = GSTR_PENDIENTE_Plus_Detalle
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.UsuarioWindows = Program.UsuarioWindows
                    TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.logEsProcesada = True

                    CalcularTotales(GSTR_TRANSFERENCIA)
                    BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemTransferencia")
                    Habilitar_Encabezado()
                End If
            Else

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                    objListaTesoreriaOrdenesPlusCE_Detalle_Transferencia = ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                End If

                ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias = Nothing

                num = objListaTesoreriaOrdenesPlusCE_Detalle_Transferencia.Count + 1
                num = num * -1
                If logRequiereGMFTranferencias = False Then
                    DescripcionGMFTransferencia = String.Empty
                End If


                objListaTesoreriaOrdenesPlusCE_Detalle_Transferencia.Add(New TesoreriaOyDPlusTransferencia With
                                                                           {.strNroDocumento = strNroDocumentoTitularWpp,
                                                                            .strNombreTitular = strNombreTitularWpp,
                                                                            .strNroDocumentoTitular = strNroDocumentoTitularWpp,
                                                                            .strTipoDocumentoTitular = DescripcionTipoIdentificacionTitularTransferencia,
                                                                            .strValorTipoDocumentoTitular = strTipoIdentificacionTitularWpp,
                                                                            .strDetalleConcepto = strDetalleConcepto,
                                                                            .curValor = dblValor,
                                                                            .strTipoCobroGMF = DescripcionGMFTransferencia,
                                                                            .ValorTipoGMF = IDGMF_Transferencia,
                                                                            .lngIDConcepto = IdConceptoTransferencia,
                                                                            .logEsTercero = logEsTerceroTransferencia,
                                                                            .strEsTercero = strEsTercero,
                                                                            .strEsCuentaRegistrada = strEsCuentaRegistrada,
                                                                            .logEsCuentaRegistrada = logEsCuentaRegistrada,
                                                                            .strCuenta = strNroCuentaWpp,
                                                                            .strTipoCuenta = DescripcionTipoCuentaTransferencia,
                                                                            .strValorTipoCuenta = strValorTipoCuentaWpp,
                                                                            .lngIdBanco = lngCodigoBancoWpp,
                                                                            .curValorGMF = dblValorGMF,
                                                                            .dtmFechaDocumento = dtmFechaServidor.Date,
                                                                            .dtmFechaActualizacion = dtmFechaServidor.Date,
                                                                            .strTipo = GSTR_ORDENGIRO,
                                                                            .strFormaPago = GSTR_TRANSFERENCIA,
                                                                            .curValorNeto = dblValorNeto,
                                                                            .strEsCtaRegistrada = strCtaRegistrada,
                                                                            .ValorTotalNota = dblValorTotalNota,
                                                                            .strEstado = GSTR_PENDIENTE_Plus_Detalle,
                                                                            .lngIDDetalle = num,
                                                                           .curValorSaldoConsultado = SaldoConsultado,
                                                                            .UsuarioWindows = Program.UsuarioWindows,
                                                                            .curValorAnteriorDetalle = dblValorNeto,
                                                                            .logEsProcesada = True
                                                                           })

                ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias = objListaTesoreriaOrdenesPlusCE_Detalle_Transferencia

                If (_TesoreriaOrdenesPlusCE_Selected.lngID <> 0) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.LastOrDefault.lngIDTesoreriaEncabezado = _TesoreriaOrdenesPlusCE_Selected.lngID
                End If

                TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.LastOrDefault
                CalcularTotales(GSTR_TRANSFERENCIA)
                BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemTransferencia")
                Habilitar_Encabezado()

                SaldoConsultado = 0
            End If

            logNuevaTrans = False
            logEditarTransferencia = False

            If plogSalir = False Then
                NuevoWppSubTransferencia()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en el guardado del registro Transferencia",
                                                         Me.ToString(), "GuardarTransferencia", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub GuardarDetalleCartera(ByVal plogSalir As Boolean)
        Try
            Dim objListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = New List(Of TesoreriaOyDPlusCarterasColectivas)

            If logEsTerceroCartera Then
                strEsTerceroCartera = "SI"
            Else
                strEsTerceroCartera = "NO"
            End If

            Dim strDetalleConcepto As String = String.Empty

            strDetalleConcepto = ConcatenarDetalle(DescripcionComboConceptoCartera, DescripcionConceptoCartera, NumEncargoCartera, "CC")

            Dim strDescripcionTipoAccionFondos As String = String.Empty

            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                If DiccionarioCombosOYDPlus.ContainsKey("TIPOACCIONFONDOS") Then
                    If DiccionarioCombosOYDPlus("TIPOACCIONFONDOS").Where(Function(i) i.Retorno = TipoAccionFondos).Count > 0 Then
                        strDescripcionTipoAccionFondos = DiccionarioCombosOYDPlus("TIPOACCIONFONDOS").Where(Function(i) i.Retorno = TipoAccionFondos).First.Descripcion
                    End If
                End If
            End If

            Dim dblValor As Double = 0
            Dim dblValorGMF As Double = 0
            Dim dblValorNeto As Double = 0
            Dim dblValorTotalNota As Double = 0

            If IDGMF_Cartera = GSTR_GMF_DEBAJO Or IDGMF_Cartera = GSTR_GMF_NOAPLICA Or String.IsNullOrEmpty(IDGMF_Cartera) Then
                dblValor = ValorNetoCartera
                dblValorGMF = ValorGMFCartera
                dblValorNeto = ValorGenerarCartera
                dblValorTotalNota = ValorTotalNota_Carteras
            Else
                dblValor = ValorGenerarCartera
                dblValorGMF = ValorGMFCartera
                dblValorNeto = ValorNetoCartera
                dblValorTotalNota = ValorTotalNota_Carteras
            End If
            If logEditarRegistro = True Then
                CalcularValorEdicionDetalle()
            End If
            If logEditarCarteraColectiva Then
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strCodigoOyD = strCodigoOYDCarteras
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strNombre = strNombreBeneficiarioCarterasWpp
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strTipoDocumento = DescripcionTipoIdentificacionCarteras
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.ValorTipoDocumento = strTipoIdentificacionCarterasWpp
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strNroDocumento = strNroDocumentoCarterasWpp
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strDetalleConcepto = strDetalleConcepto
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValor = dblValor
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strTipoCobroGMF = DescripcionTipoGMFCarteras
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.ValorTipoGMF = IDGMF_Cartera
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngIDConcepto = IDConceptoCartera
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.logEsTercero = logEsTerceroCartera
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strEsTerceroCartera = strEsTerceroCartera
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValorGMF = dblValorGMF
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.dtmFechaDocumento = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.dtmFechaActualizacion = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strTipo = GSTR_ORDENGIRO
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngNroEncargo = NumEncargoCartera
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.DescripcionEncargoFondos = DescripcionEncargoFondos
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.ValorCarteraColectiva = IDCarteraColectiva
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strFormaPago = GSTR_CARTERASCOLECTIVAS
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValorNeto = dblValorNeto
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strIDTipoCliente = IDTipoClienteCarteras
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strNombreCarteraColectiva = DescripcionCarteraColectiva
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.ValorTotalNota = dblValorTotalNota
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strTipoAccionFondos = TipoAccionFondos
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strDescripcionTipoAccionFondos = strDescripcionTipoAccionFondos
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strEstado = GSTR_PENDIENTE_Plus_Detalle
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.UsuarioWindows = Program.UsuarioWindows
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.dtmFechaAplicacion = FechaAplicacionCartera
                    TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.logEsProcesada = True

                    CalcularTotales(GSTR_CARTERASCOLECTIVAS)
                    BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemCarterasColectivas")
                    Habilitar_Encabezado()
                End If
            Else
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                    objListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                End If
                ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = Nothing

                num = objListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count + 1
                num = num * -1

                If logRequiereGMFCarteras = False Then
                    DescripcionTipoGMFCarteras = String.Empty
                End If


                objListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Add(New TesoreriaOyDPlusCarterasColectivas With
                                                                       {.strCodigoOyD = strCodigoOYDCarteras,
                                                                        .strNombre = strNombreBeneficiarioCarterasWpp,
                                                                        .strTipoDocumento = DescripcionTipoIdentificacionCarteras,
                                                                        .ValorTipoDocumento = strTipoIdentificacionCarterasWpp,
                                                                        .strNroDocumento = strNroDocumentoCarterasWpp,
                                                                        .strDetalleConcepto = strDetalleConcepto,
                                                                        .curValor = dblValor,
                                                                        .strTipoCobroGMF = DescripcionTipoGMFCarteras,
                                                                        .ValorTipoGMF = IDGMF_Cartera,
                                                                        .lngIDConcepto = IDConceptoCartera,
                                                                        .logEsTercero = logEsTerceroCartera,
                                                                        .strEsTerceroCartera = strEsTerceroCartera,
                                                                        .curValorGMF = dblValorGMF,
                                                                        .dtmFechaDocumento = dtmFechaServidor.Date,
                                                                        .dtmFechaActualizacion = dtmFechaServidor.Date,
                                                                        .strTipo = GSTR_ORDENGIRO,
                                                                        .lngNroEncargo = NumEncargoCartera,
                                                                        .DescripcionEncargoFondos = DescripcionEncargoFondos,
                                                                        .ValorCarteraColectiva = IDCarteraColectiva,
                                                                        .strFormaPago = GSTR_CARTERASCOLECTIVAS,
                                                                        .curValorNeto = dblValorNeto,
                                                                        .strIDTipoCliente = IDTipoClienteCarteras,
                                                                        .strNombreCarteraColectiva = DescripcionCarteraColectiva,
                                                                        .ValorTotalNota = dblValorTotalNota,
                                                                        .strEstado = GSTR_PENDIENTE_Plus_Detalle,
                                                                        .strTipoAccionFondos = TipoAccionFondos,
                                                                        .strDescripcionTipoAccionFondos = strDescripcionTipoAccionFondos,
                                                                        .lngIDDetalle = num,
                                                                        .curValorSaldoConsultado = SaldoConsultado,
                                                                        .UsuarioWindows = Program.UsuarioWindows,
                                                                        .curValorAnteriorDetalle = dblValorNeto,
                                                                        .dtmFechaAplicacion = FechaAplicacionCartera,
                                                                        .logEsProcesada = True})

                ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas = objListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas

                If (_TesoreriaOrdenesPlusCE_Selected.lngID <> 0) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.LastOrDefault.lngIDTesoreriaEncabezado = _TesoreriaOrdenesPlusCE_Selected.lngID
                End If

                TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.LastOrDefault
                CalcularTotales(GSTR_CARTERASCOLECTIVAS)
                Habilitar_Encabezado()

                SaldoConsultado = 0
            End If

            logNuevoCartera = False
            logEditarCarteraColectiva = False

            If plogSalir = False Then
                NuevoWppSubCarterasColectivas()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en el guardado del registro Cartera Colectiva",
                                                         Me.ToString(), "GuardarCarteraSalirWpp", Application.Current.ToString(), Program.Maquina, ex)

        End Try
    End Sub

    Private Sub GuardarDetalleTraslado(ByVal plogSalir As Boolean)
        Try
            Dim objListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = New List(Of TesoreriaOyDPlusCarterasColectivas)

            If logEsTerceroCartera Then
                strEsTerceroCartera = "SI"
            Else
                strEsTerceroCartera = "NO"
            End If

            Dim strDetalleConcepto As String = String.Empty

            strDetalleConcepto = ConcatenarDetalle(DescripcionComboConceptoCartera, DescripcionConceptoCartera, NroEncargoFondosControles)

            Dim strDescripcionTipoAccionFondos As String = String.Empty

            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                If DiccionarioCombosOYDPlus.ContainsKey("TIPOACCIONFONDOS") Then
                    If DiccionarioCombosOYDPlus("TIPOACCIONFONDOS").Where(Function(i) i.Retorno = TipoAccionFondos).Count > 0 Then
                        strDescripcionTipoAccionFondos = DiccionarioCombosOYDPlus("TIPOACCIONFONDOS").Where(Function(i) i.Retorno = TipoAccionFondos).First.Descripcion
                    End If
                End If
            End If

            Dim dblValor As Double = 0
            Dim dblValorGMF As Double = 0
            Dim dblValorNeto As Double = 0
            Dim dblValorTotalNota As Double = 0

            If IDGMF_TrasladoFondos = GSTR_GMF_DEBAJO Or IDGMF_TrasladoFondos = GSTR_GMF_NOAPLICA Or String.IsNullOrEmpty(IDGMF_TrasladoFondos) Then
                dblValor = ValorNetoTrasladoFondos
                dblValorGMF = ValorGMFTrasladoFondos
                dblValorNeto = ValorGenerarTrasladoFondos
                dblValorTotalNota = ValorTotalNota_TrasladoFondos
            Else
                dblValor = ValorGenerarTrasladoFondos
                dblValorGMF = ValorGMFTrasladoFondos
                dblValorNeto = ValorNetoTrasladoFondos
                dblValorTotalNota = ValorTotalNota_TrasladoFondos
            End If
            If logEditarRegistro = True Then
                CalcularValorEdicionDetalle()
            End If
            If logEditarTrasladoFondos Then
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                    'JAPC20200619_C-20200433-01:se estaban asiganado valores de cartera al detalle traslado fondos  (tipocobrogmf,valortipogmf)
                    'ANTES.strTipoCobroGMF = DescripcionTipoGMFCarteras,
                    'ANTES.ValorTipoGMF = IDGMF_Cartera,
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strCodigoOyD = strCodigoOYDCarteras
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strNombre = strNombreBeneficiarioCarterasWpp
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strTipoDocumento = DescripcionTipoIdentificacionCarteras
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.ValorTipoDocumento = strTipoIdentificacionCarterasWpp
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strNroDocumento = strNroDocumentoCarterasWpp
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strDetalleConcepto = strDetalleConcepto
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.curValor = dblValor
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strTipoCobroGMF = DescripcionTipoGMFTrasladoFondos
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.ValorTipoGMF = IDGMF_TrasladoFondos
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngIDConcepto = IDConceptoCartera
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.logEsTercero = logEsTerceroCartera
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strEsTerceroCartera = strEsTerceroCartera
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.curValorGMF = dblValorGMF
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.dtmFechaDocumento = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.dtmFechaActualizacion = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strTipo = GSTR_ORDENGIRO
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngNroEncargo = NumEncargoCartera
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.DescripcionEncargoFondos = DescripcionEncargoFondos
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.ValorCarteraColectiva = IDCarteraColectiva
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strFormaPago = GSTR_TRASLADOFONDOS
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.curValorNeto = dblValorNeto
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strIDTipoCliente = IDTipoClienteCarteras
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strNombreCarteraColectiva = DescripcionCarteraColectiva
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.ValorTotalNota = dblValorTotalNota
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strTipoAccionFondos = TipoAccionFondos
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strDescripcionTipoAccionFondos = strDescripcionTipoAccionFondos
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strEstado = GSTR_PENDIENTE_Plus_Detalle
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.UsuarioWindows = Program.UsuarioWindows
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.dtmFechaAplicacion = FechaAplicacionCartera
                    TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.logEsProcesada = True

                    CalcularTotales(GSTR_TRASLADOFONDOS)
                    BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemTrasladoFondos")
                    Habilitar_Encabezado()
                End If
            Else
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                    objListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos
                End If
                ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = Nothing

                num = objListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count + 1
                num = num * -1

                If logRequiereGMFCarteras = False Then
                    DescripcionTipoGMFCarteras = String.Empty
                End If
                'JAPC20200619_S-48533:se estaban asiganado valores de cartera al detalle traslado fondos  (tipocobrogmf,valortipogmf)
                'ANTES.strTipoCobroGMF = DescripcionTipoGMFCarteras,
                'ANTES.ValorTipoGMF = IDGMF_Cartera,
                objListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Add(New TesoreriaOyDPlusCarterasColectivas With
                                                                       {.strCodigoOyD = strCodigoOYDCarteras,
                                                                        .strNombre = strNombreBeneficiarioCarterasWpp,
                                                                        .strTipoDocumento = DescripcionTipoIdentificacionCarteras,
                                                                        .ValorTipoDocumento = strTipoIdentificacionCarterasWpp,
                                                                        .strNroDocumento = strNroDocumentoCarterasWpp,
                                                                        .strDetalleConcepto = strDetalleConcepto,
                                                                        .curValor = dblValor,
                                                                        .strTipoCobroGMF = DescripcionTipoGMFTrasladoFondos,'S-48533
                                                                        .ValorTipoGMF = IDGMF_TrasladoFondos,'S-48533
                                                                        .lngIDConcepto = IDConceptoCartera,
                                                                        .logEsTercero = logEsTerceroCartera,
                                                                        .strEsTerceroCartera = strEsTerceroCartera,
                                                                        .curValorGMF = dblValorGMF,
                                                                        .dtmFechaDocumento = dtmFechaServidor.Date,
                                                                        .dtmFechaActualizacion = dtmFechaServidor.Date,
                                                                        .strTipo = GSTR_ORDENGIRO,
                                                                        .lngNroEncargo = NumEncargoCartera,
                                                                        .DescripcionEncargoFondos = DescripcionEncargoFondos,
                                                                        .ValorCarteraColectiva = IDCarteraColectiva,
                                                                        .strFormaPago = GSTR_TRASLADOFONDOS,
                                                                        .curValorNeto = dblValorNeto,
                                                                        .strIDTipoCliente = IDTipoClienteCarteras,
                                                                        .strNombreCarteraColectiva = DescripcionCarteraColectiva,
                                                                        .ValorTotalNota = dblValorTotalNota,
                                                                        .strEstado = GSTR_PENDIENTE_Plus_Detalle,
                                                                        .strTipoAccionFondos = TipoAccionFondos,
                                                                        .strDescripcionTipoAccionFondos = strDescripcionTipoAccionFondos,
                                                                        .lngIDDetalle = num,
                                                                        .curValorSaldoConsultado = SaldoConsultado,
                                                                        .UsuarioWindows = Program.UsuarioWindows,
                                                                        .curValorAnteriorDetalle = dblValorNeto,
                                                                        .dtmFechaAplicacion = FechaAplicacionCartera,
                                                                        .logEsProcesada = True})

                ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos = objListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos

                If (_TesoreriaOrdenesPlusCE_Selected.lngID <> 0) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.LastOrDefault.lngIDTesoreriaEncabezado = _TesoreriaOrdenesPlusCE_Selected.lngID
                End If

                TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.LastOrDefault
                CalcularTotales(GSTR_TRASLADOFONDOS)
                Habilitar_Encabezado()

                SaldoConsultado = 0
            End If

            logNuevoTrasladoFondos = False
            logEditarTrasladoFondos = False

            If plogSalir = False Then
                NuevoWppSubTrasladoFondos()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en el guardado del registro Cartera Colectiva",
                                                         Me.ToString(), "GuardarCarteraSalirWpp", Application.Current.ToString(), Program.Maquina, ex)

        End Try
    End Sub

    Private Sub GuardarDetalleOYD(ByVal plogSalir As Boolean)
        Try
            Dim objListaTesoreriaOrdenesPlusCE_Detalle_OYD = New List(Of TesoreriaOyDPlusOYD)

            If logEsTerceroOYD Then
                strEsTerceroOYD = "SI"
            Else
                strEsTerceroOYD = "NO"
            End If

            Dim strDetalleConcepto As String = ConcatenarDetalle(DescripcionComboConceptoOYD, DescripcionConceptoOYD, NroEncargoFondosControles)

            Dim dblValor As Double = 0
            Dim dblValorGMF As Double = 0
            Dim dblValorNeto As Double = 0
            Dim dblValorTotalNota As Double = 0

            If IDGMF_OYD = GSTR_GMF_DEBAJO Or IDGMF_OYD = GSTR_GMF_NOAPLICA Or String.IsNullOrEmpty(IDGMF_OYD) Then
                dblValor = ValorNetoOYD
                dblValorGMF = ValorGMFOYD
                dblValorNeto = ValorGenerarOYD
                dblValorTotalNota = ValorTotalNota_OYD
            Else
                dblValor = ValorGenerarOYD
                dblValorGMF = ValorGMFOYD
                dblValorNeto = ValorNetoOYD
                dblValorTotalNota = ValorTotalNota_OYD
            End If
            If logEditarRegistro = True Then
                CalcularValorEdicionDetalle()
            End If
            If logEditarOYD Then
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strCodigoOyD = strCodigoOyDWPP
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strNombre = strNombreOYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strTipoDocumento = DescripcionTipoIdentificacionOYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.ValorTipoDocumento = strTipoIdentificacionOYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strNroDocumento = strNroDocumentoOYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strDetalleConcepto = strDetalleConcepto
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValor = dblValor
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strTipoCobroGMF = DescripcionTipoGMFOYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.ValorTipoGMF = IDGMF_OYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngIDConcepto = IDConceptoOYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.logEsTercero = logEsTerceroOYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strEsTerceroCartera = strEsTerceroOYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValorGMF = dblValorGMF
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.dtmFechaDocumento = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.dtmFechaActualizacion = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strTipo = GSTR_ORDENGIRO
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngNroEncargo = String.Empty
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.ValorCarteraColectiva = String.Empty
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strFormaPago = GSTR_OYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValorNeto = dblValorNeto
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strIDTipoCliente = IDTipoClienteOYD
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strNombreCarteraColectiva = String.Empty
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.ValorTotalNota = dblValorTotalNota
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strEstado = GSTR_PENDIENTE_Plus_Detalle
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.UsuarioWindows = Program.UsuarioWindows
                    TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.logEsProcesada = True
                    CalcularTotales(GSTR_OYD)
                    BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemOYD")
                    Habilitar_Encabezado()

                End If
            Else
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                    objListaTesoreriaOrdenesPlusCE_Detalle_OYD = ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                End If
                ListaTesoreriaOrdenesPlusCE_Detalle_OYD = Nothing

                num = objListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count + 1
                num = num * -1

                objListaTesoreriaOrdenesPlusCE_Detalle_OYD.Add(New TesoreriaOyDPlusOYD With
                                                                       {.strCodigoOyD = strCodigoOyDWPP,
                                                                        .strNombre = strNombreOYD,
                                                                        .strTipoDocumento = DescripcionTipoIdentificacionOYD,
                                                                        .ValorTipoDocumento = strTipoIdentificacionOYD,
                                                                        .strNroDocumento = strNroDocumentoOYD,
                                                                        .strDetalleConcepto = strDetalleConcepto,
                                                                        .curValor = dblValor,
                                                                        .strTipoCobroGMF = DescripcionTipoGMFOYD,
                                                                        .ValorTipoGMF = IDGMF_OYD,
                                                                        .lngIDConcepto = IDConceptoOYD,
                                                                        .logEsTercero = logEsTerceroOYD,
                                                                        .strEsTerceroCartera = strEsTerceroOYD,
                                                                        .curValorGMF = dblValorGMF,
                                                                        .dtmFechaDocumento = dtmFechaServidor.Date,
                                                                        .dtmFechaActualizacion = dtmFechaServidor.Date,
                                                                        .strTipo = GSTR_ORDENGIRO,
                                                                        .strFormaPago = GSTR_OYD,
                                                                        .curValorNeto = dblValorNeto,
                                                                        .strIDTipoCliente = IDTipoClienteOYD,
                                                                        .ValorTotalNota = dblValorTotalNota,
                                                                        .strEstado = GSTR_PENDIENTE_Plus_Detalle,
                                                                        .lngIDDetalle = num,
                                                                        .curValorSaldoConsultado = SaldoConsultado,
                                                                        .UsuarioWindows = Program.UsuarioWindows,
                                                                        .curValorAnteriorDetalle = dblValorNeto,
                                                                        .logEsProcesada = True
                                                                        })

                ListaTesoreriaOrdenesPlusCE_Detalle_OYD = objListaTesoreriaOrdenesPlusCE_Detalle_OYD

                If (_TesoreriaOrdenesPlusCE_Selected.lngID <> 0) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_OYD.LastOrDefault.lngIDTesoreriaEncabezado = _TesoreriaOrdenesPlusCE_Selected.lngID
                End If

                TesoreriaOrdenesPlusCE_Detalle_OYD_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_OYD.LastOrDefault
                CalcularTotales(GSTR_OYD)
                Habilitar_Encabezado()

                SaldoConsultado = 0
            End If

            logNuevoOYD = False
            logEditarOYD = False

            If plogSalir = False Then
                NuevoWppSubOYD()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en el guardado del registro Cartera Colectiva",
                                                         Me.ToString(), "GuardarDetalleOYD", Application.Current.ToString(), Program.Maquina, ex)

        End Try
    End Sub

    Private Sub GuardarDetalleInterno(ByVal plogSalir As Boolean)
        Try
            If logEsTerceroInternos Then
                strEsTerceroInternos = "SI"
            Else
                strEsTerceroInternos = "NO"
            End If

            Dim objListaTesoreriaOrdenesPlusCE_Detalle_Internos = New List(Of TesoreriaOyDPlusInternos)
            Dim strDetalleConcepto As String = ConcatenarDetalle(DescripcionComboInternos, DescripcionConceptoInternos, Nothing)

            Dim dblValor As Double = 0
            Dim dblValorGMF As Double = 0
            Dim dblValorNeto As Double = 0
            Dim dblValorTotalNota As Double = 0

            If IDGMF_Internos = GSTR_GMF_DEBAJO Or IDGMF_Internos = GSTR_GMF_NOAPLICA Or String.IsNullOrEmpty(IDGMF_Internos) Then
                dblValor = ValorNetoInternos
                dblValorGMF = ValorGMFInternos
                dblValorNeto = ValorGenerarInternos
                dblValorTotalNota = ValorTotalNota_Internos
            Else
                dblValor = ValorGenerarInternos
                dblValorGMF = ValorGMFInternos
                dblValorNeto = ValorNetoInternos
                dblValorTotalNota = ValorTotalNota_Internos
            End If
            If logEditarRegistro = True Then
                CalcularValorEdicionDetalle()
            End If
            If logEditarInterno Then
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then

                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strTipoDocumento = DescripcionTipoIdentificacionInternos
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strNombre = strNombreBeneficiarioInternosWpp
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strCodigoOyD = strCodigoOyDInternos
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.ValorTipoDocumento = strTipoIdentificacionInternosWpp
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strNroDocumento = strNroDocumentoInternosWpp
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strDetalleConcepto = strDetalleConcepto
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.curValor = dblValor

                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngIDConcepto = IDConceptoInternos
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.logEsTercero = logEsTerceroInternos

                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.dtmFechaDocumento = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.dtmFechaActualizacion = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strTipo = GSTR_ORDENGIRO
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strFormaPago = GSTR_INTERNOS
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strEsTerceroInternos = strEsTerceroInternos
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.curValorNeto = dblValorNeto
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strIDTipoCliente = IDTipoClienteInternos
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strEstado = GSTR_PENDIENTE_Plus_Detalle
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.ValorTotalNota = dblValorTotalNota
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.UsuarioWindows = Program.UsuarioWindows

                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strTipoCobroGMF = DescripcionTipoGMFInternos
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.ValorTipoGMF = IDGMF_Internos
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.curValorGMF = dblValorGMF
                    TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.logEsProcesada = True

                    CalcularTotales(GSTR_INTERNOS)
                    BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemInternos")
                    Habilitar_Encabezado()
                End If
            Else
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                    objListaTesoreriaOrdenesPlusCE_Detalle_Internos = ListaTesoreriaOrdenesPlusCE_Detalle_Internos
                End If

                ListaTesoreriaOrdenesPlusCE_Detalle_Internos = Nothing

                num = objListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count + 1
                num = num * -1
                If logRequiereGMFInternos = False And DescripcionTipoGMFInternos = String.Empty Then
                    DescripcionTipoGMFInternos = String.Empty
                End If

                objListaTesoreriaOrdenesPlusCE_Detalle_Internos.Add(New TesoreriaOyDPlusInternos With
                                                                       {.ValorTipoDocumento = strTipoIdentificacionInternosWpp,
                                                                        .strNombre = strNombreBeneficiarioInternosWpp,
                                                                        .strCodigoOyD = strCodigoOyDInternos,
                                                                        .strTipoDocumento = DescripcionTipoIdentificacionInternos,
                                                                        .strNroDocumento = strNroDocumentoInternosWpp,
                                                                        .strDetalleConcepto = strDetalleConcepto,
                                                                        .curValor = dblValor,
                                                                        .strTipoCobroGMF = DescripcionTipoGMFInternos,
                                                                        .ValorTipoGMF = IDGMF_Internos,
                                                                        .lngIDConcepto = IDConceptoInternos,
                                                                        .logEsTercero = logEsTerceroInternos,
                                                                        .curValorGMF = dblValorGMF,
                                                                        .dtmFechaDocumento = dtmFechaServidor.Date,
                                                                        .dtmFechaActualizacion = dtmFechaServidor.Date,
                                                                        .strTipo = GSTR_ORDENGIRO,
                                                                        .strFormaPago = GSTR_INTERNOS,
                                                                        .strEsTerceroInternos = strEsTerceroInternos,
                                                                        .curValorNeto = dblValorNeto,
                                                                        .strIDTipoCliente = IDTipoClienteInternos,
                                                                        .ValorTotalNota = dblValorTotalNota,
                                                                        .strEstado = GSTR_PENDIENTE_Plus_Detalle,
                                                                        .lngIDDetalle = num,
                                                                       .curValorSaldoConsultado = SaldoConsultado,
                                                                        .UsuarioWindows = Program.UsuarioWindows,
                                                                        .curValorAnteriorDetalle = dblValorNeto,
                                                                        .logEsProcesada = True})

                ListaTesoreriaOrdenesPlusCE_Detalle_Internos = objListaTesoreriaOrdenesPlusCE_Detalle_Internos

                If (_TesoreriaOrdenesPlusCE_Selected.lngID <> 0) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Internos.LastOrDefault.lngIDTesoreriaEncabezado = _TesoreriaOrdenesPlusCE_Selected.lngID
                End If

                TesoreriaOrdenesPlusCE_Detalle_Internos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Internos.LastOrDefault

                CalcularTotales(GSTR_INTERNOS)
                BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemInternos")
                Habilitar_Encabezado()

                SaldoConsultado = 0
            End If

            logNuevoInterno = False
            logEditarInterno = False

            If plogSalir = False Then
                NuevoWppSubInternos()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en el guardado del registro Internos ",
                                                         Me.ToString(), "GuardarSalirInternosWpp", Application.Current.ToString(), Program.Maquina, ex)

        End Try
    End Sub

    Private Sub GuardarDetalleBloqueo(ByVal plogSalir As Boolean)
        Try
            Dim objListaTesoreriaOrdenesPlusCE_Detalle_Bloqueo = New List(Of TesoreriaOyDPlusBloqueos)

            If logEditarBloqueo Then
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then

                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strTipoDocumento = TesoreriaOrdenesPlusCE_Selected.strTipoIdentificacion
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strNombre = TesoreriaOrdenesPlusCE_Selected.strNombre
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strCodigoOyD = TesoreriaOrdenesPlusCE_Selected.strIDComitente
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.ValorTipoDocumento = TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strNroDocumento = TesoreriaOrdenesPlusCE_Selected.strNroDocumento

                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.curValor = ValorBloqueado
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strValorNaturaleza = strNaturaleza
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strNaturaleza = strDescripcionNaturaleza
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strValorMotivo = strTipoBloqueo
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strMotivoBloqueo = strDescripcionTipoBloqueo
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strDetalleBloqueo = DetalleBloqueo

                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngIDConcepto = Nothing
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.logEsTercero = Nothing

                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.dtmFechaDocumento = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.dtmFechaActualizacion = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strTipo = GSTR_ORDENGIRO
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strFormaPago = GSTR_BLOQUEO_RECURSOS
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strEsTerceroInternos = Nothing
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.curValor = ValorBloqueado
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.curValorNeto = ValorBloqueado
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.ValorTotalNota = ValorBloqueado
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.curValorBloqueado = ValorBloqueado
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strIDTipoCliente = Nothing
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strEstado = GSTR_PENDIENTE_Plus_Detalle
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.UsuarioWindows = Program.UsuarioWindows
                    TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.logEsProcesada = True

                    CalcularTotales(GSTR_BLOQUEO_RECURSOS)
                    BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemBloqueo")
                    Habilitar_Encabezado()
                End If
            Else
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                    objListaTesoreriaOrdenesPlusCE_Detalle_Bloqueo = ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos
                End If

                ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos = Nothing

                num = objListaTesoreriaOrdenesPlusCE_Detalle_Bloqueo.Count + 1
                num = num * -1

                objListaTesoreriaOrdenesPlusCE_Detalle_Bloqueo.Add(New TesoreriaOyDPlusBloqueos With
                                                                       {.ValorTipoDocumento = TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                        .strNombre = TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                        .strCodigoOyD = TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                        .strTipoDocumento = TesoreriaOrdenesPlusCE_Selected.strTipoIdentificacion,
                                                                        .strNroDocumento = TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                        .strDetalleConcepto = Nothing,
                                                                        .curValor = ValorBloqueado,
                                                                        .strTipoCobroGMF = Nothing,
                                                                        .ValorTipoGMF = Nothing,
                                                                        .lngIDConcepto = Nothing,
                                                                        .logEsTercero = Nothing,
                                                                        .curValorGMF = Nothing,
                                                                        .dtmFechaDocumento = dtmFechaServidor.Date,
                                                                        .dtmFechaActualizacion = dtmFechaServidor.Date,
                                                                        .strTipo = GSTR_ORDENGIRO,
                                                                        .strFormaPago = GSTR_BLOQUEO_RECURSOS,
                                                                        .strEsTerceroInternos = Nothing,
                                                                        .curValorNeto = ValorBloqueado,
                                                                        .strIDTipoCliente = Nothing,
                                                                        .ValorTotalNota = ValorBloqueado,
                                                                        .strEstado = GSTR_PENDIENTE_Plus_Detalle,
                                                                        .lngIDDetalle = num,
                                                                       .curValorSaldoConsultado = Nothing,
                                                                        .strNaturaleza = strDescripcionNaturaleza,
                                                                        .strValorNaturaleza = strNaturaleza,
                                                                        .strMotivoBloqueo = strDescripcionTipoBloqueo,
                                                                        .strValorMotivo = strTipoBloqueo,
                                                                        .strDetalleBloqueo = DetalleBloqueo,
                                                                        .UsuarioWindows = Program.UsuarioWindows,
                                                                        .curValorBloqueado = ValorBloqueado,
                                                                        .logEsProcesada = True
                                                                        })

                ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos = objListaTesoreriaOrdenesPlusCE_Detalle_Bloqueo

                If (_TesoreriaOrdenesPlusCE_Selected.lngID <> 0) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.LastOrDefault.lngIDTesoreriaEncabezado = _TesoreriaOrdenesPlusCE_Selected.lngID
                End If

                TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.LastOrDefault

                CalcularTotales(GSTR_BLOQUEO_RECURSOS)
                BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemBloqueo")
                Habilitar_Encabezado()
            End If

            logNuevoBloqueo = False
            logEditarBloqueo = False

            If plogSalir = False Then
                NuevoWppSubBloqueoRecursos()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en el guardado del registro Internos ",
                                                         Me.ToString(), "GuardarSalirInternosWpp", Application.Current.ToString(), Program.Maquina, ex)

        End Try
    End Sub

    Private Sub GuardarDetalleOperacionesEspeciales(ByVal plogSalir As Boolean)
        Try
            Dim objListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = New List(Of TesoreriaOyDPlusOperacionesEspeciales)
            Dim strDescripcionTipoOperacionEspecial As String = String.Empty
            Dim strDescripcionOperacionEspecial As String = String.Empty

            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                If DiccionarioCombosOYDPlus.ContainsKey("TIPOOPEESPECIAL") Then
                    If DiccionarioCombosOYDPlus("TIPOOPEESPECIAL").Where(Function(i) i.Retorno = strTipoOperacionesEspeciales).Count > 0 Then
                        strDescripcionTipoOperacionEspecial = DiccionarioCombosOYDPlus("TIPOOPEESPECIAL").Where(Function(i) i.Retorno = strTipoOperacionesEspeciales).First.Descripcion
                    End If
                End If

                If DiccionarioCombosOYDPlus.ContainsKey("OPERACIONESPECIAL") Then
                    If DiccionarioCombosOYDPlus("OPERACIONESPECIAL").Where(Function(i) i.Retorno = strOperacionEspecial).Count > 0 Then
                        strDescripcionOperacionEspecial = DiccionarioCombosOYDPlus("OPERACIONESPECIAL").Where(Function(i) i.Retorno = strOperacionEspecial).First.Descripcion
                    End If
                End If
            End If

            If logEditarOperacionesEspeciales Then
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then

                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorTipoOperacionEspecial = strTipoOperacionesEspeciales
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strTipoOperacionEspecial = strDescripcionTipoOperacionEspecial
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorOperacionEspecial = strOperacionEspecial
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strOperacionEspecial = strDescripcionTipoOperacionEspecial

                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strCodigoOyD = strCodigoOYDComprador
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNroDocumento = strNroDocumentoComprador
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strTipoDocumento = strDescripcionTipoDocumentoComprador
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorTipoDocumento = strTipoDocumentoComprador
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNombre = strNombreComprador

                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strCodigoOyDOtro = strCodigoOYDVendedor
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNroDocumentoTitular = strNroDocumentoVendedor
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strTipoDocumentoTitular = strDescripcionTipoDocumentoVendedor
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorTipoDocumentoTitular = strTipoDocumentoVendedor
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNombreTitular = strNombreVendedor

                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strProvieneDinero = strProvieneDinero
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strDetalleConcepto = strObservacionesOperacionEspecial
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.curValor = ValorOperacionesEspeciales
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngIDConcepto = Nothing

                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.dtmFechaDocumento = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.dtmFechaActualizacion = dtmFechaServidor.Date
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strTipo = GSTR_ORDENGIRO
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strFormaPago = GSTR_OPERACIONES_ESPECIALES
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.curValorNeto = ValorOperacionesEspeciales
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorTotalNota = ValorOperacionesEspeciales
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strEstado = GSTR_PENDIENTE_Plus_Detalle
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.UsuarioWindows = Program.UsuarioWindows
                    TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.logEsProcesada = True

                    CalcularTotales(GSTR_OPERACIONES_ESPECIALES)
                    BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemOperacionesEspeciales")
                    Habilitar_Encabezado()
                End If
            Else
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                    objListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                End If

                ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = Nothing

                num = objListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count + 1
                num = num * -1

                objListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Add(New TesoreriaOyDPlusOperacionesEspeciales With
                                                                       {.ValorTipoOperacionEspecial = strTipoOperacionesEspeciales,
                                                                        .strTipoOperacionEspecial = strDescripcionTipoOperacionEspecial,
                                                                        .ValorOperacionEspecial = strOperacionEspecial,
                                                                        .strOperacionEspecial = strDescripcionOperacionEspecial,
                                                                        .strCodigoOyD = strCodigoOYDComprador,
                                                                        .strNroDocumento = strNroDocumentoComprador,
                                                                        .strTipoDocumento = strDescripcionTipoDocumentoComprador,
                                                                        .ValorTipoDocumento = strTipoDocumentoComprador,
                                                                        .strNombre = strNombreComprador,
                                                                        .strCodigoOyDOtro = strCodigoOYDVendedor,
                                                                        .strNroDocumentoTitular = strNroDocumentoVendedor,
                                                                        .strTipoDocumentoTitular = strDescripcionTipoDocumentoVendedor,
                                                                        .ValorTipoDocumentoTitular = strTipoDocumentoVendedor,
                                                                        .strNombreTitular = strNombreVendedor,
                                                                        .strProvieneDinero = strProvieneDinero,
                                                                        .strDetalleConcepto = strObservacionesOperacionEspecial,
                                                                        .dtmFechaDocumento = dtmFechaServidor.Date,
                                                                        .dtmFechaActualizacion = dtmFechaServidor.Date,
                                                                        .strTipo = GSTR_ORDENGIRO,
                                                                        .strFormaPago = GSTR_OPERACIONES_ESPECIALES,
                                                                        .curValor = ValorOperacionesEspeciales,
                                                                        .curValorNeto = ValorOperacionesEspeciales,
                                                                        .ValorTotalNota = ValorOperacionesEspeciales,
                                                                        .strEstado = GSTR_PENDIENTE_Plus_Detalle,
                                                                        .lngIDDetalle = num,
                                                                        .curValorSaldoConsultado = Nothing,
                                                                        .UsuarioWindows = Program.UsuarioWindows,
                                                                        .logEsProcesada = True
                                                                        })

                ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales = objListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales

                If (_TesoreriaOrdenesPlusCE_Selected.lngID <> 0) Then
                    ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.LastOrDefault.lngIDTesoreriaEncabezado = _TesoreriaOrdenesPlusCE_Selected.lngID
                End If

                TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected = ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.LastOrDefault

                CalcularTotales(GSTR_OPERACIONES_ESPECIALES)
                BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemOperacionesEspeciales")
                Habilitar_Encabezado()
            End If

            logNuevoOperacionesEs = False
            logEditarOperacionesEspeciales = False

            If plogSalir = False Then
                NuevoWppSubOperacionesEspeciales()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en el guardado del registro Internos ",
                                                         Me.ToString(), "GuardarSalirInternosWpp", Application.Current.ToString(), Program.Maquina, ex)

        End Try
    End Sub
    '********************    GUARDAR DETALLES *******************************************

    '********************    BORRAR DETALLES *******************************************
    Public Sub BorrarChequewpp()
        Try

            If Not ListaTesoreriaOrdenesPlusCE_Detalle_Cheques Is Nothing Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                    If TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
                        mostrarMensajePregunta("¿Está Seguro que desea eliminar el Registro?",
                                                Program.TituloSistema,
                                                "ELIMINARCHEQUE",
                                                AddressOf TerminoPreguntarConfirmacionCheque, False)
                    Else
                        mostrarMensaje("Para eliminar un registro verifique que se encuentre en un estado pendiente", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If

                Else
                    mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If

            Else
                IsBusy = False
                mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Borrar el registro",
                                 Me.ToString(), "BorrarChequewpp", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub BorrarTransferencias()
        Try
            If Not ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias Is Nothing Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > 0 Then
                    If TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then

                        mostrarMensajePregunta("¿Está Seguro que desea eliminar el Registro?",
                                               Program.TituloSistema,
                                               "ELIMINARTRANSFERENCIA",
                                               AddressOf TerminoPreguntarConfirmacionTransferencias, False)

                    Else
                        mostrarMensaje("Para eliminar un registro verifique que se encuentre en un estado pendiente", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If

                Else
                    mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If

            Else
                IsBusy = False
                mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Borrar el registro",
                                 Me.ToString(), "BorrarTransferencias", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try

    End Sub

    Public Sub BorrarCarterasColectivas()
        Try
            If Not ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas Is Nothing Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                    If TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then


                        mostrarMensajePregunta("¿Está Seguro que desea eliminar el Registro?",
                                               Program.TituloSistema,
                                               "ELIMINARCARTERAS",
                                               AddressOf TerminoPreguntarConfirmacionCarteraColectiva)
                    Else
                        mostrarMensaje("Para eliminar un registro verifique que se encuentre en un estado pendiente", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If

                Else
                    mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If

            Else
                IsBusy = False
                mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Borrar el registro",
                                 Me.ToString(), "BorrarCarterasColectivas", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub BorrarTrasladoFondos()
        Try
            If Not ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos Is Nothing Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count > 0 Then
                    If TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then


                        mostrarMensajePregunta("¿Esta Seguro que desea eliminar el Registro?",
                                               Program.TituloSistema,
                                               "ELIMINARCARTERAS",
                                               AddressOf TerminoPreguntarConfirmacionTrasladoFondos)
                    Else
                        mostrarMensaje("Para eliminar un registro verifique que se encuentre en un estado pendiente", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If

                Else
                    mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If

            Else
                IsBusy = False
                mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Borrar el registro",
                                 Me.ToString(), "BorrarCarterasColectivas", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub BorrarOYDWPP()
        Try
            If Not ListaTesoreriaOrdenesPlusCE_Detalle_OYD Is Nothing Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > 0 Then
                    If TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
                        mostrarMensajePregunta("¿Está Seguro que desea eliminar el Registro?",
                                               Program.TituloSistema,
                                               "ELIMINAROYD",
                                               AddressOf TerminoPreguntarConfirmacionOYD)
                    Else
                        mostrarMensaje("Para eliminar un registro verifique que se encuentre en un estado pendiente", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If

                Else
                    mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If

            Else
                IsBusy = False
                mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Borrar el registro",
                                 Me.ToString(), "BorrarCarterasColectivas", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub BorrarBloqueoWpp()
        Try
            If Not ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos_Paged Is Nothing Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos_Paged.Count > 0 Then
                    If TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then

                        mostrarMensajePregunta("¿Está Seguro que desea eliminar el Registro?",
                                               Program.TituloSistema,
                                               "ELIMINARBLOQUEO",
                                               AddressOf TerminoPreguntarConfirmacionBloqueo, False)
                    Else
                        mostrarMensaje("Para eliminar un registro verifique que se encuentre en un estado pendiente", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                Else
                    mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If

            Else
                IsBusy = False
                mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Borrar el registro",
                                 Me.ToString(), "BorrarBloqueoWpp", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try





    End Sub

    Public Sub BorrarOperacionesEspecialesWpp()
        Try
            If Not ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Paged Is Nothing Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Paged.Count > 0 Then
                    If TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then

                        mostrarMensajePregunta("¿Está Seguro que desea eliminar el Registro?",
                                               Program.TituloSistema,
                                               "ELIMINAROPERACIONESESPECIALES",
                                               AddressOf TerminoPreguntarConfirmacionOperacionesEspeciales, False)
                    Else
                        mostrarMensaje("Para eliminar un registro verifique que se encuentre en un estado pendiente", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                Else
                    mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If

            Else
                IsBusy = False
                mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Borrar el registro",
                                 Me.ToString(), "BorrarOperacionesEspecialesWpp", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub BorrarInternosWpp()
        Try
            If Not ListaTesoreriaOrdenesPlusCE_Detalle_Internos Is Nothing Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > 0 Then
                    If TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then

                        mostrarMensajePregunta("¿Está Seguro que desea eliminar el Registro?",
                                               Program.TituloSistema,
                                               "ELIMINARINTERNO",
                                               AddressOf TerminoPreguntarConfirmacionInternos, False)
                    Else
                        mostrarMensaje("Para eliminar un registro verifique que se encuentre en un estado pendiente", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                Else
                    mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If

            Else
                IsBusy = False
                mostrarMensaje("No hay registros a Eliminar", "Ordenes de Pago", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Borrar el registro",
                                 Me.ToString(), "BorrarInternosWpp", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub
    '********************    BORRAR DETALLES *******************************************

    '********************    ABRIR EDITAR DETALLES *******************************************
    Public Sub EditarWppSubCheque()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Cheques.Count > 0 Then
                    AbrirPopupCheque(GSTR_EDITARDETALLE_Plus)
                End If
            Else
                mostrarMensaje("Para Realizar el Proceso de Edición debe existir 1 Registro en Detalle Cheque", Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarChequewpp", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub EditarWppSubTransferencia()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias.Count > 0 Then
                    AbrirPopupTransferencia(GSTR_EDITARDETALLE_Plus)
                End If
            Else
                mostrarMensaje("Para Realizar el Proceso de Edición debe existir 1 Registro en Detalle Transferencia", Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarWppSubTransferencia", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub EditarWppSubCarteraColectiva()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                    AbrirPopupCarterasColectivas(GSTR_EDITARDETALLE_Plus)
                End If
            Else
                mostrarMensaje("Para Realizar el Proceso de Edición debe existir 1 Registro en Detalle Cartera Colectiva", Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarWppSubCarteraColectiva", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub EditarWppSubTrasladoFondos()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas.Count > 0 Then
                    AbrirPopupTrasladoFondos(GSTR_EDITARDETALLE_Plus)
                End If
            Else
                mostrarMensaje("Para Realizar el Proceso de Edición debe existir 1 Registro en Detalle Cartera Colectiva", Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarWppSubCarteraColectiva", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub EditarWppSubOYD()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_OYD.Count > 0 Then
                    AbrirPopupOYD(GSTR_EDITARDETALLE_Plus)
                End If
            Else
                mostrarMensaje("Para Realizar el Proceso de Edición debe existir 1 Registro en Detalle OYD", Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarWppSubOYD", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub EditarWppTrasladoFondos()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_TrasladoFondos.Count > 0 Then
                    AbrirPopupTrasladoFondos(GSTR_EDITARDETALLE_Plus)
                End If
            Else
                mostrarMensaje("Para Realizar el Proceso de Edición debe existir 1 Registro en Detalle Traslado Fondos", Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarWppTrasladoFondos", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub


    Public Sub EditarWppSubInternos()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Internos.Count > 0 Then
                    AbrirPopupInternos(GSTR_EDITARDETALLE_Plus)
                End If
            Else
                mostrarMensaje("Para Realizar el Proceso de Edición debe existir 1 Registro en Detalle Internos", Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarWppSubInternos", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub EditarWppSubBloqueo()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                If ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos.Count > 0 Then
                    AbrirPopupBloqueoRecursos(GSTR_EDITARDETALLE_Plus)
                End If
            Else
                mostrarMensaje("Para Realizar el Proceso de Edición debe existir 1 Registro en Detalle Bloqueo recursos", Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarWppSubBloqueo", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub EditarWppSubOperacionesEspeciales()
        Try
            If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then

                If ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales.Count > 0 Then
                    AbrirPopupOperacionesEspeciales(GSTR_EDITARDETALLE_Plus)
                End If
            Else
                mostrarMensaje("Para Realizar el Proceso de Edición debe existir 1 Registro en Detalle Bloqueo", Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarWppSubBloqueo", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Function ObjetoEditarCheque() As Boolean
        Try
            If TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Return False
            IsBusyReceptor = False
            IsBusyEdicionTesorero = False

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "objetoEditarCheque", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Function

    Public Function ObjetoEditarTransferencia() As Boolean
        Try
            If TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Return False
            IsBusyReceptor = False
            IsBusyEdicionTesorero = False

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "ObjetoEditarTransferencia", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Function


    Public Function ObjetoEditarCarteras() As Boolean
        Try
            If TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Return False
            IsBusyReceptor = False
            IsBusyEdicionTesorero = False

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "objetoEditarCarteras", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Function

    Public Function ObjetoEditarTrasladoFondos() As Boolean
        Try
            If TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Return False
            IsBusyReceptor = False
            IsBusyEdicionTesorero = False

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "ObjetoEditarTrasladoFondos", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Function


    Public Function ObjetoEditarOYD() As Boolean
        Try
            If TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Return False
            IsBusyReceptor = False
            IsBusyEdicionTesorero = False

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "ObjetoEditarOYD", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Function

    Public Function ObjetoEditarInternos() As Boolean
        Try
            If TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Return False
            IsBusyReceptor = False
            IsBusyEdicionTesorero = False

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "ObjetoEditarInternos", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Function

    Public Function ObjetoEditarBloqueo() As Boolean
        Try
            If TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            Return False
            IsBusyReceptor = False
            IsBusyEdicionTesorero = False

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "ObjetoEditarBloqueo", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Function

    Public Function ObjetoEditarOperacionesEspeciales() As Boolean

        If TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strEstado.Substring(0, 1) <> GSTR_CUMPLIDA_Plus And TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strEstado.Substring(0, 1) <> GSTR_ANULADA_Plus Then
            logCambiarPropiedadesPOPPUP = False

            intIDDetalleEdicion = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngIDDetalle
            strTipoOperacionesEspeciales = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorTipoOperacionEspecial
            strOperacionEspecial = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorOperacionEspecial
            strCodigoOYDComprador = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strCodigoOyD
            strNroDocumentoComprador = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNroDocumento
            strTipoDocumentoComprador = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strTipoDocumento
            'strDescripcionTipoDocumentoComprador = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strTipoDocumento
            strNombreComprador = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNombre

            strCodigoOYDVendedor = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strCodigoOyDOtro
            strNroDocumentoVendedor = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNroDocumentoTitular
            strTipoDocumentoVendedor = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strTipoDocumentoTitular
            'strDescripcionTipoDocumentoVendedor = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strTipoDocumentoTitular
            strNombreVendedor = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNombreTitular

            strProvieneDinero = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strProvieneDinero
            strObservacionesOperacionEspecial = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strDetalleConcepto

            ValorOperacionesEspeciales = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.curValor
            ValorAnteriorDetalle = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.curValorAnteriorDetalle

            If strTipoOperacionesEspeciales = GSTR_TIPOOPEESPECIAL_OPERACIONESPECIAL Then
                HabilitarOperacionEspecial = True
            Else
                HabilitarOperacionEspecial = False
            End If

            logEditarOperacionesEspeciales = True
            logCambiarPropiedadesPOPPUP = True
            Return True
        Else
            Return False
        End If
    End Function

    Public Sub NuevoWppSubCheque()
        Try
            If ValidarCreacionDetalleOrdenDividendos() Then
                AbrirPopupCheque(GSTR_NUEVODETALLE_Plus)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "EditarChequewpp", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub
    Public Sub AbrirPopupCheque(pstrOpcion As String)
        Try
            If pstrOpcion = GSTR_NUEVODETALLE_Plus Then
                logEditarCheque = False
                ValidarEncabezado()
                ValorAnteriorDetalle = 0
                If logHayEncabezado Then
                    logNuevoCheque = True
                    OrdenPago_Cheque_LevantarModal(True)
                Else
                    mostrarMensaje("Primero Ingrese los datos de encabezado para generar un nuevo registro cheque", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarEncabezado = True
                    HabilitarImportacion = False
                End If
            ElseIf pstrOpcion = GSTR_EDITARDETALLE_Plus Then
                HabilitarImportacion = True
                logNuevoCheque = False
                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngID) Then
                    ValidarEstadoOrdenDetalleServidor(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngID, TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strEstado, GSTR_CHEQUE)
                Else
                    If ObjetoEditarCheque() Then
                        OrdenPago_Cheque_LevantarModal(False)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abrir Popup", Me.ToString(), "AbrirPopup", Program.TituloSistema, Program.Maquina, ex)
        End Try

    End Sub

    Private Sub OrdenPago_Cheque_LevantarModal(ByVal plogNuevoRegistro As Boolean)
        Try
            If plogNuevoRegistro Then
                Dim objDetalle As New OrdenPago_DetalleChequesView(0,
                                                                0,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                ValorTotalNETOOrden,
                                                                ValorEdicionDetalle,
                                                                ValidarHabilitarValorDetalle(),
                                                                ValidarTieneOrdenEnCero())
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_Cheque_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_Cheque_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            Else
                intIDDetalleEdicion = TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngIDDetalle
                ValorAnteriorDetalle = IIf(IsNothing(TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValorAnteriorDetalle), 0, TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValorAnteriorDetalle)
                logEditarCheque = True

                Dim objDetalle As New OrdenPago_DetalleChequesView(intIDDetalleEdicion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.lngID,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                   ValorTotalNETOOrden,
                                                                   ValorEdicionDetalle,
                                                                   ValorAnteriorDetalle,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strIDTipoCliente,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strNombre,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTipoDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strNroDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTipoCheque,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTipoCruce,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.lngIDConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.strDetalleConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.ValorTipoGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValorNeto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValorGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Cheques_Selected.curValor,
                                                                   ValidarHabilitarValorDetalle(),
                                                                   ValidarTieneOrdenEnCero(),
                                                                   HabilitarTipoGMFTesorero)
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_Cheque_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_Cheque_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear el modal cheque.", Me.ToString(), "OrdenPago_Cheque_LevantarModal", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_Cheque_FinalizoGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                         ByVal pintIDEncabezado As Integer,
                                                         ByVal plogGuardarYSalir As Boolean,
                                                         ByVal pTipoCliente As String,
                                                         ByVal pEsTercero As Boolean,
                                                         ByVal pDescripcionTipoCliente As String,
                                                         ByVal pNombreBeneficiario As String,
                                                         ByVal pTipoIdentificacion As String,
                                                         ByVal pDescripcionTipoIdentificacion As String,
                                                         ByVal pNroDocumento As String,
                                                         ByVal pTipoCheque As String,
                                                         ByVal pDescripcionTipoCheque As String,
                                                         ByVal pTipoCruce As String,
                                                         ByVal pDescripcionTipoCruce As String,
                                                         ByVal pIDConcepto As Nullable(Of Integer),
                                                         ByVal pDescripcionConcepto As String,
                                                         ByVal pDetalleConcepto As String,
                                                         ByVal pTipoGMF As String,
                                                         ByVal pDescripcionTipoGMF As String,
                                                         ByVal pValorGenerar As Double,
                                                         ByVal pValorGMF As Double,
                                                         ByVal pValorNeto As Double,
                                                         ByVal pValorSaldoConsultado As Double,
                                                         ByVal pLiquidacionesSeleccionadas As String)
        Try
            IDTipoCliente = pTipoCliente
            logEsTercero = pEsTercero
            IDTipoCheque = pTipoCheque
            TipoChequeDescripcion = pDescripcionTipoCheque
            IDTipoCruce = pTipoCruce
            DescripcionTipoCruce = pDescripcionTipoCruce
            IdConcepto = pIDConcepto
            DescripcionComboConceptoCheque = pDescripcionConcepto
            DescripcionConcepto = pDetalleConcepto
            IDGMF = pTipoGMF
            DescripcionGMF = pDescripcionTipoGMF

            If IDGMF = GSTR_GMF_ENCIMA Or IDGMF = GSTR_GMF_DEBAJO Then
                logRequiereGMF = True
            Else
                logRequiereGMF = False
            End If

            strBeneficiarioWpp = pNombreBeneficiario
            strNroDocumentoWpp = pNroDocumento
            strTipoIdentificacionWpp = pTipoIdentificacion
            DescripcionTipoIdentificacionCheque = pDescripcionTipoIdentificacion

            ValorGenerar = pValorGenerar
            ValorGMF = pValorGMF
            ValorNeto = pValorNeto

            SaldoConsultado = pValorSaldoConsultado
            liquidacionesSelecciondas = pLiquidacionesSeleccionadas

            CalcularValoresDetalleCheque()

            GuardarDetalleCheque(plogGuardarYSalir)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del cheque.", Me.ToString(), "OrdenPago_Cheque_FinalizoGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_Cheque_CancelarGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                         ByVal pintIDEncabezado As Integer)
        Try
            logEditarCheque = False
            HabilitarImportacion = True
            BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemCheque")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del cheque.", Me.ToString(), "OrdenPago_Cheque_FinalizoGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub NuevoWppSubTransferencia()
        Try
            If ValidarCreacionDetalleOrdenDividendos() Then
                AbrirPopupTransferencia(GSTR_NUEVODETALLE_Plus)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "NuevoWppSubTransferencia", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub
    Public Sub AbrirPopupTransferencia(pstrOpcion As String)
        Try
            If pstrOpcion = GSTR_NUEVODETALLE_Plus Then
                logEditarTransferencia = False
                ValidarEncabezado()
                ValorAnteriorDetalle = 0
                If logHayEncabezado Then
                    logNuevaTrans = True
                    OrdenPago_Transferencia_LevantarModal(True)
                Else
                    mostrarMensaje("Primero Ingrese los datos de encabezado para generar un nuevo registro transferencia", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarEncabezado = True
                    HabilitarImportacion = False
                End If
            ElseIf pstrOpcion = GSTR_EDITARDETALLE_Plus Then
                HabilitarImportacion = True
                logNuevaTrans = False
                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngID) Then
                    ValidarEstadoOrdenDetalleServidor(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngID, TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEstado, GSTR_TRANSFERENCIA)
                Else
                    If ObjetoEditarTransferencia() Then
                        OrdenPago_Transferencia_LevantarModal(False)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abrir Popup", Me.ToString(), "AbrirPopup", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_Transferencia_LevantarModal(ByVal plogNuevoRegistro As Boolean)
        Try
            If plogNuevoRegistro Then
                Dim objDetalle As New OrdenPago_DetalleTransferenciaView(0,
                                                                0,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                ValorTotalNETOOrden,
                                                                ValorEdicionDetalle,
                                                                ValidarHabilitarValorDetalle(),
                                                                ValidarTieneOrdenEnCero())
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_Transferencia_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_Transferencia_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            Else
                intIDDetalleEdicion = TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngIDDetalle
                strEsCuentaRegistrada = TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strEsCuentaRegistrada
                ValorAnteriorDetalle = IIf(IsNothing(TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValorAnteriorDetalle), 0, TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValorAnteriorDetalle)
                logEditarTransferencia = True

                Dim strIDTipoCuenta As String = String.Empty

                If TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.logEsCuentaRegistrada Then
                    strIDTipoCuenta = GSTR_CUENTA_REGISTRADA
                Else
                    strIDTipoCuenta = GSTR_CUENTA_NO_REGISTRADA
                End If

                Dim objDetalle As New OrdenPago_DetalleTransferenciaView(intIDDetalleEdicion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.lngID,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                   ValorTotalNETOOrden,
                                                                   ValorEdicionDetalle,
                                                                   ValorAnteriorDetalle,
                                                                   strIDTipoCuenta,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strNombreTitular,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strValorTipoDocumentoTitular,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strNroDocumentoTitular,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strCuenta,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strValorTipoCuenta,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngIdBanco,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.lngIDConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.strDetalleConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.ValorTipoGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValorNeto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValorGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Transferencias_Selected.curValor,
                                                                   ValidarHabilitarValorDetalle(),
                                                                   ValidarTieneOrdenEnCero(),
                                                                   HabilitarTipoGMFTesorero)
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_Transferencia_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_Transferencia_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear el detalle.", Me.ToString(), "OrdenPago_Transferencia_LevantarModal", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_Transferencia_FinalizoGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                   ByVal pintIDEncabezado As Integer,
                                                   ByVal plogGuardarYSalir As Boolean,
                                                   ByVal pEsCuentaRegistrada As Boolean,
                                                   ByVal pIdTipoCuentaRegistrada As String,
                                                   ByVal pEsTerceroTransferencia As Boolean,
                                                   ByVal pCuentaRegistrada As Integer,
                                                   ByVal pNombreTitular As String,
                                                   ByVal pTipoIdentificacionTitular As String,
                                                   ByVal pDescripcionTipoIdentificacionTitular As String,
                                                   ByVal pNroDocumentoTitular As String,
                                                   ByVal pNroCuenta As String,
                                                   ByVal pTipoCuenta As String,
                                                   ByVal pDescripcionTipoCuenta As String,
                                                   ByVal pCodigoBanco As Integer,
                                                   ByVal pIDConcepto As Nullable(Of Integer),
                                                   ByVal pDescripcionConcepto As String,
                                                   ByVal pDetalleConcepto As String,
                                                   ByVal pTipoGMF As String,
                                                   ByVal pDescripcionTipoGMF As String,
                                                   ByVal pValorGenerar As Double,
                                                   ByVal pValorGMF As Double,
                                                   ByVal pValorNeto As Double,
                                                   ByVal pValorSaldoConsultado As Double,
                                                   ByVal pLiquidacionesSeleccionadas As String)
        Try
            logEsCuentaRegistrada = pEsCuentaRegistrada
            IdTipoCuentaRegistrada = pIdTipoCuentaRegistrada
            logEsTerceroTransferencia = pEsTerceroTransferencia
            CuentaRegistrada = pCuentaRegistrada
            strNombreTitularWpp = pNombreTitular
            strTipoIdentificacionTitularWpp = pTipoIdentificacionTitular
            DescripcionTipoIdentificacionTitularTransferencia = pDescripcionTipoIdentificacionTitular
            strNroDocumentoTitularWpp = pNroDocumentoTitular
            strNroCuentaWpp = pNroCuenta
            strValorTipoCuentaWpp = pTipoCuenta
            DescripcionTipoCuentaTransferencia = pDescripcionTipoCuenta
            lngCodigoBancoWpp = pCodigoBanco

            IdConceptoTransferencia = pIDConcepto
            DescripcionConceptoTransferenciaCombo = pDescripcionConcepto
            DescripcionConceptoTransferencia = pDetalleConcepto
            IDGMF_Transferencia = pTipoGMF
            DescripcionGMFTransferencia = pDescripcionTipoGMF

            If IDGMF_Transferencia = GSTR_GMF_ENCIMA Or IDGMF_Transferencia = GSTR_GMF_DEBAJO Then
                logRequiereGMFTranferencias = True
            Else
                logRequiereGMFTranferencias = False
            End If

            ValorGenerarTransferencia = pValorGenerar
            ValorGMFTransferencia = pValorGMF
            ValorNetoTransferencia = pValorNeto

            SaldoConsultado = pValorSaldoConsultado
            liquidacionesSelecciondas = pLiquidacionesSeleccionadas

            CalcularValoresDetalleTransferencia()

            GuardarDetalleTransferencia(plogGuardarYSalir)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_Transferencia_FinalizoGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_Transferencia_CancelarGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                         ByVal pintIDEncabezado As Integer)
        Try
            logEditarCheque = False
            HabilitarImportacion = True
            BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemTransferencia")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_Transferencia_CancelarGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_CarteraColectiva_LevantarModal(ByVal plogNuevoRegistro As Boolean)
        Try
            If plogNuevoRegistro Then
                Dim objDetalle As New OrdenPago_DetalleCarteraColectivaView(0,
                                                                0,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                FechaOrden,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                ValorTotalNETOOrden,
                                                                ValorEdicionDetalle,
                                                                ValidarHabilitarValorDetalle())
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_CarteraColectiva_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_CarteraColectiva_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            Else
                intIDDetalleEdicion = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngIDDetalle
                strEsTerceroCartera = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strEsTerceroCartera
                ValorAnteriorDetalle = IIf(IsNothing(TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValorAnteriorDetalle), 0, TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValorAnteriorDetalle)
                logEditarCarteraColectiva = True

                Dim objDetalle As New OrdenPago_DetalleCarteraColectivaView(intIDDetalleEdicion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.lngID,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                   FechaOrden,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                   ValorTotalNETOOrden,
                                                                   ValorEdicionDetalle,
                                                                   ValorAnteriorDetalle,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strIDTipoCliente,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strCodigoOyD,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.ValorTipoDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strNroDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strNombre,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strTipoAccionFondos,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.ValorCarteraColectiva,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngNroEncargo,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.DescripcionEncargoFondos,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.dtmFechaAplicacion,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngIDConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strDetalleConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.ValorTipoGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValorNeto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValorGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.curValor,
                                                                   ValidarHabilitarValorDetalle(),
                                                                   HabilitarTipoGMFTesorero)
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_CarteraColectiva_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_CarteraColectiva_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear el detalle.", Me.ToString(), "OrdenPago_CarteraColectiva_LevantarModal", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_CarteraColectiva_FinalizoGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                   ByVal pintIDEncabezado As Integer,
                                                   ByVal plogGuardarYSalir As Boolean,
                                                   ByVal pTipoCliente As String,
                                                   ByVal pEsTercero As Boolean,
                                                   ByVal pDescripcionTipoCliente As String,
                                                   ByVal pCodigoOYD As String,
                                                   ByVal pTipoIdentificacion As String,
                                                   ByVal pDescripcionTipoIdentificacion As String,
                                                   ByVal pNroDocumento As String,
                                                   ByVal pNombre As String,
                                                   ByVal pTipoAccionFondos As String,
                                                   ByVal pCarteraColectivaFondos As String,
                                                   ByVal pDescripcionCarteraColectivaFondos As String,
                                                   ByVal pFechaAplicacion As DateTime,
                                                   ByVal pEncargoCarteraFondos As String,
                                                   ByVal pDescripcionEncargoCarteraFondos As String,
                                                   ByVal pIDConcepto As Nullable(Of Integer),
                                                   ByVal pDescripcionConcepto As String,
                                                   ByVal pDetalleConcepto As String,
                                                   ByVal pTipoGMF As String,
                                                   ByVal pDescripcionTipoGMF As String,
                                                   ByVal pValorGenerar As Double,
                                                   ByVal pValorGMF As Double,
                                                   ByVal pValorNeto As Double,
                                                   ByVal pValorSaldoConsultado As Double,
                                                   ByVal pLiquidacionesSeleccionadas As String)
        Try
            IDTipoClienteCarteras = pTipoCliente
            logEsTerceroCartera = pEsTercero
            strCodigoOYDCarteras = pCodigoOYD
            strCodigoOYDCarterasConcatenado = pNombre + " - " + RTrim(LTrim(pCodigoOYD))
            strTipoIdentificacionCarterasWpp = pTipoIdentificacion
            DescripcionTipoIdentificacionCarteras = pDescripcionTipoIdentificacion
            strNroDocumentoCarterasWpp = pNroDocumento
            strNombreBeneficiarioCarterasWpp = pNombre
            TipoAccionFondos = pTipoAccionFondos
            IDCarteraColectiva = pCarteraColectivaFondos
            DescripcionCarteraColectiva = pDescripcionCarteraColectivaFondos
            NumEncargoCartera = pEncargoCarteraFondos
            DescripcionEncargoFondos = pDescripcionEncargoCarteraFondos
            FechaAplicacionCartera = pFechaAplicacion

            IDConceptoCartera = pIDConcepto
            DescripcionComboConceptoCartera = pDescripcionConcepto
            DescripcionConceptoCartera = pDetalleConcepto
            IDGMF_Cartera = pTipoGMF
            DescripcionTipoGMFCarteras = pDescripcionTipoGMF

            If IDGMF_Cartera = GSTR_GMF_ENCIMA Or IDGMF_Cartera = GSTR_GMF_DEBAJO Then
                logRequiereGMFCarteras = True
            Else
                logRequiereGMFCarteras = False
            End If

            ValorGenerarCartera = pValorGenerar
            ValorGMFCartera = pValorGMF
            ValorNetoCartera = pValorNeto

            SaldoConsultado = pValorSaldoConsultado
            liquidacionesSelecciondas = pLiquidacionesSeleccionadas

            CalcularValoresDetalleCartera()

            GuardarDetalleCartera(plogGuardarYSalir)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_CarteraColectiva_FinalizoGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_CarteraColectiva_CancelarGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                                   ByVal pintIDEncabezado As Integer)
        Try
            logEditarCarteraColectiva = False
            HabilitarImportacion = True
            BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemCarterasColectivas")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_CarteraColectiva_CancelarGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_TrasladoFondos_LevantarModal(ByVal plogNuevoRegistro As Boolean)
        Try
            If plogNuevoRegistro Then
                Dim objDetalle As New OrdenPago_DetalleTrasladoFondosView(0,
                                                                0,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                FechaOrden,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                ValorTotalNETOOrden,
                                                                ValorEdicionDetalle,
                                                                ValidarHabilitarValorDetalle(),
                                                                ValidarTieneOrdenEnCero()
                                                                )
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_TrasladoFondos_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_TrasladoFondos_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            Else
                intIDDetalleEdicion = TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngIDDetalle
                strEsTerceroCartera = TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strEsTerceroCartera
                ValorAnteriorDetalle = IIf(IsNothing(TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.curValorAnteriorDetalle), 0, TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.curValorAnteriorDetalle)
                logEditarTrasladoFondos = True

                Dim objDetalle As New OrdenPago_DetalleTrasladoFondosView(intIDDetalleEdicion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.lngID,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                   FechaOrden,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                   ValorTotalNETOOrden,
                                                                   ValorEdicionDetalle,
                                                                   ValorAnteriorDetalle,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strIDTipoCliente,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strCodigoOyD,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.ValorTipoDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strNroDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strNombre,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strTipoAccionFondos,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.ValorCarteraColectiva,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngNroEncargo,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.DescripcionEncargoFondos,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.dtmFechaAplicacion,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngIDConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strDetalleConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.ValorTipoGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.curValorNeto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.curValorGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.curValor,
                                                                   ValidarHabilitarValorDetalle(),
                                                                   ValidarTieneOrdenEnCero(),
                                                                   HabilitarTipoGMFTesorero)
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_TrasladoFondos_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_TrasladoFondos_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear el detalle.", Me.ToString(), "OrdenPago_TrasladoFondos_LevantarModal", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_TrasladoFondos_FinalizoGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                   ByVal pintIDEncabezado As Integer,
                                                   ByVal plogGuardarYSalir As Boolean,
                                                   ByVal pTipoCliente As String,
                                                   ByVal pEsTercero As Boolean,
                                                   ByVal pDescripcionTipoCliente As String,
                                                   ByVal pCodigoOYD As String,
                                                   ByVal pTipoIdentificacion As String,
                                                   ByVal pDescripcionTipoIdentificacion As String,
                                                   ByVal pNroDocumento As String,
                                                   ByVal pNombre As String,
                                                   ByVal pTipoAccionFondos As String,
                                                   ByVal pCarteraColectivaFondos As String,
                                                   ByVal pDescripcionCarteraColectivaFondos As String,
                                                   ByVal pFechaAplicacion As DateTime,
                                                   ByVal pEncargoCarteraFondos As String,
                                                   ByVal pDescripcionEncargoCarteraFondos As String,
                                                   ByVal pIDConcepto As Nullable(Of Integer),
                                                   ByVal pDescripcionConcepto As String,
                                                   ByVal pDetalleConcepto As String,
                                                   ByVal pTipoGMF As String,
                                                   ByVal pDescripcionTipoGMF As String,
                                                   ByVal pValorGenerar As Double,
                                                   ByVal pValorGMF As Double,
                                                   ByVal pValorNeto As Double,
                                                   ByVal pValorSaldoConsultado As Double,
                                                   ByVal pLiquidacionesSeleccionadas As String)
        Try
            IDTipoClienteCarteras = pTipoCliente
            logEsTerceroCartera = pEsTercero
            strCodigoOYDCarteras = pCodigoOYD
            strCodigoOYDCarterasConcatenado = pNombre + " - " + RTrim(LTrim(pCodigoOYD))
            strTipoIdentificacionCarterasWpp = pTipoIdentificacion
            DescripcionTipoIdentificacionCarteras = pDescripcionTipoIdentificacion
            strNroDocumentoCarterasWpp = pNroDocumento
            strNombreBeneficiarioCarterasWpp = pNombre
            TipoAccionFondos = pTipoAccionFondos
            IDCarteraColectiva = pCarteraColectivaFondos
            DescripcionCarteraColectiva = pDescripcionCarteraColectivaFondos
            NumEncargoCartera = pEncargoCarteraFondos
            DescripcionEncargoFondos = pDescripcionEncargoCarteraFondos
            FechaAplicacionCartera = pFechaAplicacion

            IDConceptoCartera = pIDConcepto
            DescripcionComboConceptoCartera = pDescripcionConcepto
            DescripcionConceptoCartera = pDetalleConcepto
            IDGMF_TrasladoFondos = pTipoGMF
            DescripcionTipoGMFTrasladoFondos = pDescripcionTipoGMF
            'JAPC20200627_C-20200433-01_Se utilizaban variables incorrectas para validar si gmf es por debajo o por encima y esto deriva en que no se realiza calculo del gmf para el detalle traslado fondos
            If IDGMF_TrasladoFondos = GSTR_GMF_ENCIMA Or IDGMF_TrasladoFondos = GSTR_GMF_DEBAJO Then
                logRequiereGMFTrasladoFondos = True
            Else
                logRequiereGMFTrasladoFondos = False
            End If

            ValorGenerarTrasladoFondos = pValorGenerar
            ValorGMFTrasladoFondos = pValorGMF
            ValorNetoTrasladoFondos = pValorNeto

            SaldoConsultado = pValorSaldoConsultado
            liquidacionesSelecciondas = pLiquidacionesSeleccionadas

            CalcularValoresDetalleTrasladoFondos()

            GuardarDetalleTraslado(plogGuardarYSalir)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle", Me.ToString(), "OrdenPago_TrasladoFondos_FinalizoGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_TrasladoFondos_CancelarGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                                   ByVal pintIDEncabezado As Integer)
        Try
            logEditarTrasladoFondos = False
            HabilitarImportacion = True
            BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemTrasladoFondos")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_TrasladoFondos_CancelarGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_Internos_LevantarModal(ByVal plogNuevoRegistro As Boolean)
        Try
            If plogNuevoRegistro Then
                Dim objDetalle As New OrdenPago_DetalleInternosView(0,
                                                                0,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                ValorTotalNETOOrden,
                                                                ValorEdicionDetalle,
                                                                ValidarHabilitarValorDetalle())
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_Internos_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_Internos_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            Else
                intIDDetalleEdicion = TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngIDDetalle
                strEsTerceroInternos = TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strEsTerceroInternos
                ValorAnteriorDetalle = IIf(IsNothing(TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.curValorAnteriorDetalle), 0, TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.curValorAnteriorDetalle)
                logEditarInterno = True

                Dim objDetalle As New OrdenPago_DetalleInternosView(intIDDetalleEdicion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.lngID,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                   ValorTotalNETOOrden,
                                                                   ValorEdicionDetalle,
                                                                   ValorAnteriorDetalle,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strIDTipoCliente,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strCodigoOyD,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.ValorTipoDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strNroDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strNombre,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngIDConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strDetalleConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.ValorTipoGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.curValorNeto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.curValorGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.curValor,
                                                                   ValidarHabilitarValorDetalle(),
                                                                   HabilitarTipoGMFTesorero)
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_Internos_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_Internos_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear el detalle.", Me.ToString(), "OrdenPago_Internos_LevantarModal", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_Internos_FinalizoGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                   ByVal pintIDEncabezado As Integer,
                                                   ByVal plogGuardarYSalir As Boolean,
                                                   ByVal pTipoCliente As String,
                                                   ByVal pEsTercero As Boolean,
                                                   ByVal pDescripcionTipoCliente As String,
                                                   ByVal pCodigoOYD As String,
                                                   ByVal pTipoIdentificacion As String,
                                                   ByVal pDescripcionTipoIdentificacion As String,
                                                   ByVal pNroDocumento As String,
                                                   ByVal pNombre As String,
                                                   ByVal pIDConcepto As Nullable(Of Integer),
                                                   ByVal pDescripcionConcepto As String,
                                                   ByVal pDetalleConcepto As String,
                                                   ByVal pTipoGMF As String,
                                                   ByVal pDescripcionTipoGMF As String,
                                                   ByVal pValorGenerar As Double,
                                                   ByVal pValorGMF As Double,
                                                   ByVal pValorNeto As Double,
                                                   ByVal pValorSaldoConsultado As Double,
                                                   ByVal pLiquidacionesSeleccionadas As String)
        Try
            IDTipoClienteInternos = pTipoCliente
            logEsTerceroInternos = pEsTercero
            strCodigoOyDInternos = pCodigoOYD
            strCodigoOyDInternosConcatenado = pNombre + " - " + RTrim(LTrim(pCodigoOYD))
            strTipoIdentificacionInternosWpp = pTipoIdentificacion
            DescripcionTipoIdentificacionInternos = pDescripcionTipoIdentificacion
            strNroDocumentoInternosWpp = pNroDocumento
            strNombreBeneficiarioInternosWpp = pNombre

            IDConceptoInternos = pIDConcepto
            DescripcionComboInternos = pDescripcionConcepto
            DescripcionConceptoInternos = pDetalleConcepto
            IDGMF_Internos = pTipoGMF
            DescripcionTipoGMFInternos = pDescripcionTipoGMF

            If IDGMF_Internos = GSTR_GMF_ENCIMA Or IDGMF_Internos = GSTR_GMF_DEBAJO Then
                logRequiereGMFInternos = True
            Else
                logRequiereGMFInternos = False
            End If

            ValorGenerarInternos = pValorGenerar
            ValorGMFInternos = pValorGMF
            ValorNetoInternos = pValorNeto

            SaldoConsultado = pValorSaldoConsultado
            liquidacionesSelecciondas = pLiquidacionesSeleccionadas

            CalcularValoresDetalleInterno()

            GuardarDetalleInterno(plogGuardarYSalir)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_Internos_FinalizoGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_Internos_CancelarGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                                   ByVal pintIDEncabezado As Integer)
        Try
            logEditarInterno = False
            HabilitarImportacion = True
            BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemInternos")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_Internos_CancelarGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_OYD_LevantarModal(ByVal plogNuevoRegistro As Boolean)
        Try
            If plogNuevoRegistro Then
                Dim objDetalle As New OrdenPago_DetalleOYDView(0,
                                                                0,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                ValorTotalNETOOrden,
                                                                ValorEdicionDetalle,
                                                                ValidarHabilitarValorDetalle(),
                                                                ValidarTieneOrdenEnCero())
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_OYD_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_OYD_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            Else
                intIDDetalleEdicion = TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngIDDetalle
                strEsTerceroOYD = TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strEsTerceroCartera
                ValorAnteriorDetalle = IIf(IsNothing(TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValorAnteriorDetalle), 0, TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValorAnteriorDetalle)
                logEditarOYD = True

                Dim objDetalle As New OrdenPago_DetalleOYDView(intIDDetalleEdicion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.lngID,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                   ValorTotalNETOOrden,
                                                                   ValorEdicionDetalle,
                                                                   ValorAnteriorDetalle,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strIDTipoCliente,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strCodigoOyD,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.ValorTipoDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strNroDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strNombre,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngIDConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strDetalleConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.ValorTipoGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValorNeto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValorGMF,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.curValor,
                                                                   ValidarHabilitarValorDetalle(),
                                                                   ValidarTieneOrdenEnCero(),
                                                                   HabilitarTipoGMFTesorero)
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_OYD_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_OYD_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear el detalle.", Me.ToString(), "OrdenPago_Internos_LevantarModal", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_OYD_FinalizoGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                   ByVal pintIDEncabezado As Integer,
                                                   ByVal plogGuardarYSalir As Boolean,
                                                   ByVal pTipoCliente As String,
                                                   ByVal pEsTercero As Boolean,
                                                   ByVal pDescripcionTipoCliente As String,
                                                   ByVal pCodigoOYD As String,
                                                   ByVal pTipoIdentificacion As String,
                                                   ByVal pDescripcionTipoIdentificacion As String,
                                                   ByVal pNroDocumento As String,
                                                   ByVal pNombre As String,
                                                   ByVal pIDConcepto As Nullable(Of Integer),
                                                   ByVal pDescripcionConcepto As String,
                                                   ByVal pDetalleConcepto As String,
                                                   ByVal pTipoGMF As String,
                                                   ByVal pDescripcionTipoGMF As String,
                                                   ByVal pValorGenerar As Double,
                                                   ByVal pValorGMF As Double,
                                                   ByVal pValorNeto As Double,
                                                   ByVal pValorSaldoConsultado As Double)
        Try
            IDTipoClienteOYD = pTipoCliente
            logEsTerceroOYD = pEsTercero
            strCodigoOyDWPP = pCodigoOYD
            strTipoIdentificacionOYD = pTipoIdentificacion
            DescripcionTipoIdentificacionOYD = pDescripcionTipoIdentificacion
            strNroDocumentoOYD = pNroDocumento
            strNombreOYD = pNombre

            IDConceptoOYD = pIDConcepto
            DescripcionComboConceptoOYD = pDescripcionConcepto
            DescripcionConceptoOYD = pDetalleConcepto
            IDGMF_OYD = pTipoGMF
            DescripcionTipoGMFOYD = pDescripcionTipoGMF

            If IDGMF_OYD = GSTR_GMF_ENCIMA Or IDGMF_OYD = GSTR_GMF_DEBAJO Then
                logRequiereGMFOYD = True
            Else
                logRequiereGMFOYD = False
            End If

            ValorGenerarOYD = pValorGenerar
            ValorGMFOYD = pValorGMF
            ValorNetoOYD = pValorNeto

            SaldoConsultado = pValorSaldoConsultado

            CalcularValoresDetalleOYD()

            GuardarDetalleOYD(plogGuardarYSalir)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_OYD_FinalizoGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_OYD_CancelarGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                                   ByVal pintIDEncabezado As Integer)
        Try
            logEditarInterno = False
            HabilitarImportacion = True
            BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemOYD")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_OYD_CancelarGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_BloqueoRecursos_LevantarModal(ByVal plogNuevoRegistro As Boolean)
        Try
            If plogNuevoRegistro Then
                Dim objDetalle As New OrdenPago_DetalleBloqueoRecursosView(0,
                                                                0,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                ValorTotalNETOOrden,
                                                                ValorEdicionDetalle,
                                                                ValidarHabilitarValorDetalle())
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_BloqueoRecursos_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_BloqueoRecursos_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            Else
                intIDDetalleEdicion = TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngIDDetalle
                strEsTerceroInternos = TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strEsTerceroInternos
                ValorAnteriorDetalle = TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.curValorBloqueado
                logEditarBloqueo = True

                Dim objDetalle As New OrdenPago_DetalleBloqueoRecursosView(intIDDetalleEdicion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.lngID,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                   ValorTotalNETOOrden,
                                                                   ValorEdicionDetalle,
                                                                   ValorAnteriorDetalle,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strValorMotivo,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strValorNaturaleza,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strDetalleBloqueo,
                                                                   TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.curValorBloqueado,
                                                                   ValidarHabilitarValorDetalle())
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_BloqueoRecursos_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_BloqueoRecursos_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear el detalle.", Me.ToString(), "OrdenPago_BloqueoRecursos_LevantarModal", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_BloqueoRecursos_FinalizoGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                   ByVal pintIDEncabezado As Integer,
                                                   ByVal plogGuardarYSalir As Boolean,
                                                   ByVal pMotivoBloqueo As String,
                                                   ByVal pDescripcionMotivoBloqueo As String,
                                                   ByVal pNaturalezaBloqueo As String,
                                                   ByVal pDescripcionNaturalezaBloqueo As String,
                                                   ByVal pDetalleBloqueo As String,
                                                   ByVal pValorGenerar As Double)
        Try
            strTipoBloqueo = pMotivoBloqueo
            strDescripcionTipoBloqueo = pDescripcionMotivoBloqueo
            strNaturaleza = pNaturalezaBloqueo
            strDescripcionNaturaleza = pDescripcionNaturalezaBloqueo
            DetalleBloqueo = pDetalleBloqueo
            ValorBloqueado = pValorGenerar

            GuardarDetalleBloqueo(plogGuardarYSalir)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_BloqueoRecursos_FinalizoGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_BloqueoRecursos_CancelarGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                                   ByVal pintIDEncabezado As Integer)
        Try
            logEditarInterno = False
            HabilitarImportacion = True
            BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemBloqueo")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_BloqueoRecursos_CancelarGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_OperacionesEspeciales_LevantarModal(ByVal plogNuevoRegistro As Boolean)
        Try
            If plogNuevoRegistro Then
                Dim objDetalle As New OrdenPago_DetalleOperacionesEspecialesView(0,
                                                                0,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                ValorTotalNETOOrden,
                                                                ValorEdicionDetalle,
                                                                ValidarHabilitarValorDetalle(),
                                                                ValidarTieneOrdenEnCero())
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_OperacionesEspeciales_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_OperacionesEspeciales_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            Else
                intIDDetalleEdicion = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngIDDetalle
                ValorAnteriorDetalle = TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.curValor
                logEditarBloqueo = True

                Dim objDetalle As New OrdenPago_DetalleOperacionesEspecialesView(intIDDetalleEdicion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.lngID,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.intNroEncargoFondos,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strCodigoReceptor,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNroDocumento,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strNombre,
                                                                   _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto,
                                                                   _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                   ValorTotalNETOOrden,
                                                                   ValorEdicionDetalle,
                                                                   ValorAnteriorDetalle,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorTipoOperacionEspecial,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorOperacionEspecial,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strCodigoOyD,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNombre,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorTipoDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNroDocumento,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strCodigoOyDOtro,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNombreTitular,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.ValorTipoDocumentoTitular,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strNroDocumentoTitular,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strProvieneDinero,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strDetalleConcepto,
                                                                   TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.curValor,
                                                                   ValidarHabilitarValorDetalle(),
                                                                   ValidarTieneOrdenEnCero())
                AddHandler objDetalle.OrdenPago_FinalizoGuardarRegistro, AddressOf OrdenPago_OperacionesEspeciales_FinalizoGuardarRegistro
                AddHandler objDetalle.OrdenPago_CancelarGuardarRegistro, AddressOf OrdenPago_OperacionesEspeciales_CancelarGuardarRegistro
                Program.Modal_OwnerMainWindowsPrincipal(objDetalle)
                objDetalle.ShowDialog()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear el detalle.", Me.ToString(), "OrdenPago_OperacionesEspeciales_LevantarModal", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_OperacionesEspeciales_FinalizoGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                   ByVal pintIDEncabezado As Integer,
                                                   ByVal plogGuardarYSalir As Boolean,
                                                   ByVal pTipoOperacionEspecial As String,
                                                   ByVal pDescripcionTipoOperacionEspecial As String,
                                                   ByVal pOperacionEspecial As String,
                                                   ByVal pDescripcionOperacionEspecial As String,
                                                   ByVal pCodigoOYDComprador As String,
                                                   ByVal pNombreComprador As String,
                                                   ByVal pTipoDocumentoComprador As String,
                                                   ByVal pDescripcionTipoDocumentoComprador As String,
                                                   ByVal pNroDocumentoComprador As String,
                                                   ByVal pCodigoOYDVendedor As String,
                                                   ByVal pNombreVendedor As String,
                                                   ByVal pTipoDocumentoVendedor As String,
                                                   ByVal pDescripcionTipoDocumentoVendedor As String,
                                                   ByVal pNroDocumentoVendedor As String,
                                                   ByVal pProvieneDinero As String,
                                                   ByVal pObservaciones As String,
                                                   ByVal pValor As Double)
        Try
            strTipoOperacionesEspeciales = pTipoOperacionEspecial
            strDescripcionTipoOperacionesEspeciales = pDescripcionTipoOperacionEspecial
            strOperacionEspecial = pOperacionEspecial
            strDescripcionOperacionEspecial = pDescripcionOperacionEspecial
            strCodigoOYDComprador = pCodigoOYDComprador
            strNombreComprador = pNombreComprador
            strTipoDocumentoComprador = pTipoDocumentoComprador
            strDescripcionTipoDocumentoComprador = pDescripcionTipoDocumentoComprador
            strNroDocumentoComprador = pNroDocumentoComprador
            strCodigoOYDVendedor = pCodigoOYDVendedor
            strNombreVendedor = pNombreVendedor
            strTipoDocumentoVendedor = pTipoDocumentoVendedor
            strDescripcionTipoDocumentoVendedor = pDescripcionTipoDocumentoVendedor
            strNroDocumentoVendedor = pNroDocumentoVendedor
            strProvieneDinero = pProvieneDinero
            strObservacionesOperacionEspecial = pObservaciones
            ValorOperacionesEspeciales = pValor

            GuardarDetalleOperacionesEspeciales(plogGuardarYSalir)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_BloqueoRecursos_FinalizoGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub OrdenPago_OperacionesEspeciales_CancelarGuardarRegistro(ByVal pintIDDetalle As Integer,
                                                                   ByVal pintIDEncabezado As Integer)
        Try
            logEditarInterno = False
            HabilitarImportacion = True
            BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemOperacionesEspeciales")
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la respuesta del detalle.", Me.ToString(), "OrdenPago_BloqueoRecursos_CancelarGuardarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub NuevoWppSubCarterasColectivas()
        Try
            If ValidarCreacionDetalleOrdenDividendos() Then
                AbrirPopupCarterasColectivas(GSTR_NUEVODETALLE_Plus)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "NuevoWppSubCarterasColectivas", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub
    Public Sub AbrirPopupCarterasColectivas(pstrOpcion As String)
        Try
            If pstrOpcion = GSTR_NUEVODETALLE_Plus Then
                logEditarCarteraColectiva = False
                ValidarEncabezado()
                ValorAnteriorDetalle = 0
                If logHayEncabezado Then
                    logNuevoCartera = True
                    OrdenPago_CarteraColectiva_LevantarModal(True)
                Else
                    mostrarMensaje("Primero Ingrese los datos de encabezado para generar un nuevo registro cartera colectiva", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarEncabezado = True
                    HabilitarImportacion = False
                End If
            ElseIf pstrOpcion = GSTR_EDITARDETALLE_Plus Then
                HabilitarImportacion = True
                logNuevoCartera = False
                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngID) Then
                    ValidarEstadoOrdenDetalleServidor(TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.lngID, TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strEstado, GSTR_CARTERASCOLECTIVAS)
                Else
                    If ObjetoEditarCarteras() Then
                        OrdenPago_CarteraColectiva_LevantarModal(False)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abrir Popup", Me.ToString(), "AbrirPopupCarterasColectivas", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub NuevoWppSubTrasladoFondos()
        Try
            If ValidarCreacionDetalleOrdenDividendos() Then
                AbrirPopupTrasladoFondos(GSTR_NUEVODETALLE_Plus)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "NuevoWppSubTrasladoFondos", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub AbrirPopupTrasladoFondos(pstrOpcion As String)
        Try
            If pstrOpcion = GSTR_NUEVODETALLE_Plus Then
                logEditarTrasladoFondos = False
                ValidarEncabezado()
                ValorAnteriorDetalle = 0
                If logHayEncabezado Then
                    logNuevoTrasladoFondos = True
                    OrdenPago_TrasladoFondos_LevantarModal(True)
                Else
                    mostrarMensaje("Primero Ingrese los datos de encabezado para generar un nuevo registro cartera colectiva", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarEncabezado = True
                    HabilitarImportacion = False
                End If
            ElseIf pstrOpcion = GSTR_EDITARDETALLE_Plus Then
                HabilitarImportacion = True
                logNuevoTrasladoFondos = False
                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngID) Then
                    ValidarEstadoOrdenDetalleServidor(TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.lngID, TesoreriaOrdenesPlusCE_Detalle_TrasladoFondos_Selected.strEstado, GSTR_TRASLADOFONDOS)
                Else
                    If ObjetoEditarCarteras() Then
                        OrdenPago_TrasladoFondos_LevantarModal(False)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abri popup", Me.ToString(),
                                                         "AbrirPopupTrasladoFondos", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub NuevoWppSubOYD()
        Try
            If ValidarCreacionDetalleOrdenDividendos() Then
                AbrirPopupOYD(GSTR_NUEVODETALLE_Plus)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "NuevoWppSubOYD", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub AbrirPopupOYD(pstrOpcion As String)
        Try
            If pstrOpcion = GSTR_NUEVODETALLE_Plus Then
                logEditarOYD = False
                ValidarEncabezado()
                ValorAnteriorDetalle = 0
                If logHayEncabezado Then
                    logNuevoOYD = True
                    OrdenPago_OYD_LevantarModal(True)
                Else
                    mostrarMensaje("Primero Ingrese los datos de encabezado para generar un nuevo registro OYD", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarEncabezado = True
                    HabilitarImportacion = False
                End If
            ElseIf pstrOpcion = GSTR_EDITARDETALLE_Plus Then
                HabilitarImportacion = True
                logNuevoOYD = False
                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngID) Then
                    ValidarEstadoOrdenDetalleServidor(TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.lngID, TesoreriaOrdenesPlusCE_Detalle_OYD_Selected.strEstado, GSTR_OYD)
                Else
                    If ObjetoEditarOYD() Then
                        OrdenPago_OYD_LevantarModal(False)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abri popup", Me.ToString(),
                                                         "AbrirPopupOYD", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub NuevoWppSubInternos()
        Try
            If ValidarCreacionDetalleOrdenDividendos() Then
                AbrirPopupInternos(GSTR_NUEVODETALLE_Plus)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "NuevoWppSubInternos", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub AbrirPopupInternos(pstrOpcion As String)
        Try
            If pstrOpcion = GSTR_NUEVODETALLE_Plus Then
                logEditarInterno = False
                ValidarEncabezado()
                ValorAnteriorDetalle = 0
                If logHayEncabezado Then
                    logNuevoInterno = True
                    OrdenPago_Internos_LevantarModal(True)
                Else
                    mostrarMensaje("Primero Ingrese los datos de encabezado para generar un nuevo registro interno", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarEncabezado = True
                    HabilitarImportacion = False
                End If
            ElseIf pstrOpcion = GSTR_EDITARDETALLE_Plus Then
                HabilitarImportacion = True
                logNuevoInterno = False
                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngID) Then
                    ValidarEstadoOrdenDetalleServidor(TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.lngID, TesoreriaOrdenesPlusCE_Detalle_Internos_Selected.strEstado, GSTR_INTERNOS)
                Else
                    If ObjetoEditarInternos() Then
                        OrdenPago_Internos_LevantarModal(False)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abri popup", Me.ToString(),
                                                         "AbrirPopupInternos", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub NuevoWppSubBloqueoRecursos()
        Try
            If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                mostrarMensaje("Cuando es una orden de dividendos no se puede crear detalles de tipo bloqueo.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            Else
                If ValidarCreacionDetalleOrdenDividendos() Then
                    AbrirPopupBloqueoRecursos(GSTR_NUEVODETALLE_Plus)
                End If
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Editar el registro",
                                 Me.ToString(), "NuevoWppSubBloqueoRecursos", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub AbrirPopupBloqueoRecursos(pstrOpcion As String)
        Try
            If pstrOpcion = GSTR_NUEVODETALLE_Plus Then
                logEditarBloqueo = False
                ValidarEncabezado()
                ValorAnteriorDetalle = 0
                If logHayEncabezado Then
                    logNuevoBloqueo = True
                    OrdenPago_BloqueoRecursos_LevantarModal(True)
                Else
                    mostrarMensaje("Primero Ingrese los datos de encabezado para generar un nuevo registro bloqueo recursos", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarEncabezado = True
                    HabilitarImportacion = False
                End If
            ElseIf pstrOpcion = GSTR_EDITARDETALLE_Plus Then
                HabilitarImportacion = True
                logNuevoBloqueo = False
                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngID) Then
                    ValidarEstadoOrdenDetalleServidor(TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.lngID, TesoreriaOrdenesPlusCE_Detalle_Bloqueos_Selected.strEstado, GSTR_BLOQUEO_RECURSOS)
                Else
                    If ObjetoEditarBloqueo() Then
                        OrdenPago_BloqueoRecursos_LevantarModal(False)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abri popup", Me.ToString(),
                                                         "AbrirPopupBloqueoRecursos", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub NuevoWppSubOperacionesEspeciales()
        Try
            If ValidarCreacionDetalleOrdenDividendos() Then
                AbrirPopupOperacionesEspeciales(GSTR_NUEVODETALLE_Plus)
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear el registro",
                                 Me.ToString(), "NuevoWppSubOperacionesEspeciales", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
        End Try
    End Sub

    Public Sub AbrirPopupOperacionesEspeciales(pstrOpcion As String)
        Try
            If pstrOpcion = GSTR_NUEVODETALLE_Plus Then
                logEditarOperacionesEspeciales = False
                ValidarEncabezado()
                ValorAnteriorDetalle = 0
                If logHayEncabezado Then
                    logNuevoOperacionesEs = True
                    OrdenPago_OperacionesEspeciales_LevantarModal(True)
                Else
                    mostrarMensaje("Primero Ingrese los datos de encabezado para generar un nuevo registro bloqueo recursos", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarEncabezado = True
                    HabilitarImportacion = False
                End If
            ElseIf pstrOpcion = GSTR_EDITARDETALLE_Plus Then
                HabilitarImportacion = True
                logNuevoOperacionesEs = False
                If Not IsNothing(TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngID) Then
                    ValidarEstadoOrdenDetalleServidor(TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.lngID, TesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales_Selected.strEstado, GSTR_OPERACIONES_ESPECIALES)
                Else
                    If ObjetoEditarOperacionesEspeciales() Then
                        OrdenPago_OperacionesEspeciales_LevantarModal(False)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abri popup", Me.ToString(),
                                                         "AbrirPopupBloqueoRecursos", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub
    '********************    ABRIR EDITAR DETALLES *******************************************

    '********************    VALIDAR DETALLES *******************************************
    Public Function ValidarCamposDiligenciadosCheque() As Boolean
        Try
            Dim logTieneError As Boolean
            strMensajeValidacion = String.Empty
            If IsNothing(IDTipoCliente) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo Cliente: Si es Tercero o No lo es.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If IsNothing(strBeneficiarioWpp) Or String.IsNullOrEmpty(strBeneficiarioWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Nombre Beneficiario.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strBeneficiarioWpp, clsExpresiones.TipoExpresion.Caracteres2)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Nombre Beneficiario: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If
            If IsNothing(strTipoIdentificacionWpp) Or String.IsNullOrEmpty(strTipoIdentificacionWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo Documento Beneficiario.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If IsNothing(strNroDocumentoWpp) Or String.IsNullOrEmpty(strNroDocumentoWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Nro Documento Beneficiario.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strNroDocumentoWpp, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Nro Documento Beneficiario: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If
            If (IsNothing(IdConcepto) Or IdConcepto <= 0) And (IsNothing(DescripcionConcepto) Or String.IsNullOrEmpty(DescripcionConcepto)) Then
                strMensajeValidacion = String.Format("{0}{1} - Seleccionar un concepto de la lista ó ingrese detalle concepto", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If Not String.IsNullOrEmpty(DescripcionConcepto) Then
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(DescripcionConcepto, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Descripcion Concepto: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If
            If logRequiereGMF Or logXTesorero Then
                If String.IsNullOrEmpty(IDGMF) Then
                    strMensajeValidacion = String.Format("{0}{1} - Tipo GMF.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If IsNothing(IDTipoCheque) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo Cheque.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                If IDTipoCheque = GSTR_CHEQUE Then
                    If IsNothing(IDTipoCruce) Then
                        strMensajeValidacion = String.Format("{0}{1} - Tipo Cruce.", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                    If IDTipoCheque = GSTR_CHEQUE_GERENCIA Then
                        If String.IsNullOrEmpty(IDGMF) Then
                            strMensajeValidacion = String.Format("{0}{1} - Tipo GMF.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If
                End If

            End If

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                Dim logValidarValorEnCero As Boolean = True

                If logEsFondosOYD Then
                    If ValorGenerar > 0 Or ValorNeto > 0 Then
                        strMensajeValidacion = String.Format("{0}{1} - Cuando la orden es de Fondos y es una cancelación no puede existir detalles con valor.", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                        logValidarValorEnCero = False
                    End If
                End If

                If logValidarValorEnCero Then
                    Dim logTieneOrdenEnCero As Boolean = False

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                            If (li.curValor = 0 And logEditarCheque = False) Or
                               (li.curValor = 0 And logEditarCheque And intIDDetalleEdicion <> li.lngIDDetalle) Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If logTieneOrdenEnCero Then
                        If (IsNothing(ValorGenerar) Or ValorGenerar <= 0) Or
                            (IsNothing(ValorNeto) Or ValorNeto <= 0) Then
                            strMensajeValidacion = String.Format("{0}{1} - Cuando la orden es de Fondos y es una cancelación solo puede existir 1 detalle con el valor en cero.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If
                End If

            ElseIf objTipoOrdenNueva <> TipoOrdenGiroNueva.DIVIDENDOS Then
                If IsNothing(ValorGenerar) Or ValorGenerar <= 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Valor Generar.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If

                If IsNothing(ValorNeto) Or ValorNeto <= 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Valor Neto.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD Then
                If IsNothing(IdConcepto) Or IdConcepto = 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Concepto.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If logTieneError Then
                mostrarMensaje("Para guardar el Registro es necesario completar los siguientes datos con sus valores correspondientes:" & vbCrLf & strMensajeValidacion, "Ordenes de Pago - Cheque.", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            Else
                If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                    If ValorGenerar > 0 Then
                        mostrarMensaje("Cuando la orden es de dividendos el valor de la orden debe de ser cero.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    Else
                        strMensajeValidacion = String.Empty
                        Return True
                    End If
                Else
                    strMensajeValidacion = String.Empty
                    Return True
                End If
            End If


        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Validar Campos de Cheque",
                                 Me.ToString(), "ValidarCamposDiligenciadosCheque", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
            Return False
        End Try
    End Function

    Public Function ValidarCamposDiligenciadosTransferencia() As Boolean
        Try
            Dim logTieneError As Boolean
            strMensajeValidacion = String.Empty
            If IsNothing(IdTipoCuentaRegistrada) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo Cuenta: debe seleccionar un tipo de cuenta, Registrada o No Registrada", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If IsNothing(strNombreTitularWpp) Or String.IsNullOrEmpty(strNombreTitularWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Nombre Titular.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strNombreTitularWpp, clsExpresiones.TipoExpresion.Caracteres2)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Nombre Titular: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If
            If IsNothing(strTipoIdentificacionTitularWpp) Or String.IsNullOrEmpty(strTipoIdentificacionTitularWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo Documento Titular.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If IsNothing(strNroDocumentoTitularWpp) Or String.IsNullOrEmpty(strNroDocumentoTitularWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Nro Documento Titular.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strNroDocumentoTitularWpp, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Nro Documento Titular: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If
            If IsNothing(strNroCuentaWpp) Or String.IsNullOrEmpty(strNroCuentaWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Nro Cuenta.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strNroCuentaWpp, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Nro Cuenta: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If
            If String.IsNullOrEmpty(strValorTipoCuentaWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Seleccione un tipo de cuenta", strMensajeValidacion, vbCrLf)
                logTieneError = True

            End If
            If lngCodigoBancoWpp <= 0 Then
                strMensajeValidacion = String.Format("{0}{1} - el Código del Banco debe ser mayor a cero", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If

            If (IsNothing(IdConceptoTransferencia) Or IdConceptoTransferencia <= 0) And
                (IsNothing(DescripcionConceptoTransferencia) Or String.IsNullOrEmpty(DescripcionConceptoTransferencia)) Then
                strMensajeValidacion = String.Format("{0}{1} - Seleccionar un concepto de la lista ó ingrese detalle concepto", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If Not String.IsNullOrEmpty(DescripcionConceptoTransferencia) Then

                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(DescripcionConceptoTransferencia, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Descripcion Concepto: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If
            If logRequiereGMFTranferencias Or logXTesorero Then
                If String.IsNullOrEmpty(IDGMF_Transferencia) Then
                    strMensajeValidacion = String.Format("{0}{1} - Tipo GMF.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                Dim logValidarValorEnCero As Boolean = True

                If logEsFondosOYD Then
                    If ValorGenerarTransferencia > 0 Or ValorNetoTransferencia > 0 Then
                        strMensajeValidacion = String.Format("{0}{1} - Cuando la orden es de Fondos y es una cancelación no puede existir detalles con valor.", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                        logValidarValorEnCero = False
                    End If
                End If

                If logValidarValorEnCero Then
                    Dim logTieneOrdenEnCero As Boolean = False

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                            If (li.curValor = 0 And logEditarTransferencia = False) Or
                               (li.curValor = 0 And logEditarTransferencia And intIDDetalleEdicion <> li.lngIDDetalle) Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If logTieneOrdenEnCero Then
                        If (IsNothing(ValorGenerarTransferencia) Or ValorGenerarTransferencia <= 0) Or
                            (IsNothing(ValorNetoTransferencia) Or ValorNetoTransferencia <= 0) Then
                            strMensajeValidacion = String.Format("{0}{1} - Cuando la orden es de Fondos y es una cancelación solo puede existir 1 detalle con el valor en cero.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If
                End If
            ElseIf objTipoOrdenNueva <> TipoOrdenGiroNueva.DIVIDENDOS Then
                If IsNothing(ValorGenerarTransferencia) Or ValorGenerarTransferencia <= 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Valor Generar Transferencia.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If

                If IsNothing(ValorNetoTransferencia) Or ValorNetoTransferencia <= 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Valor Neto Transferencia.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD Then
                If IsNothing(IdConceptoTransferencia) Or IdConceptoTransferencia = 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Concepto.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If logTieneError Then
                mostrarMensaje("Para guardar el Registro es necesario completar los siguientes datos con sus valores correspondientes:" & vbCrLf & strMensajeValidacion, "Ordenes de Pago - Transferencia.", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            Else
                If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                    If ValorGenerarTransferencia > 0 Then
                        mostrarMensaje("Cuando la orden es de dividendos el valor de la orden debe de ser cero.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    Else
                        strMensajeValidacion = String.Empty
                        Return True
                    End If
                Else
                    strMensajeValidacion = String.Empty
                    Return True
                End If
            End If


        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Validar Campos de Transferencia",
                                 Me.ToString(), "ValidarCamposDiligenciadosTransferencia", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
            Return False
        End Try
    End Function

    Public Function ValidarCamposDiligenciadosOYD() As Boolean
        Try
            Dim logTieneError As Boolean
            strMensajeValidacion = String.Empty
            If String.IsNullOrEmpty(IDTipoClienteOYD) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo Cliente: Si es Tercero o No lo es.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If

            If String.IsNullOrEmpty(strCodigoOyDWPP) Then
                strMensajeValidacion = String.Format("{0}{1} - Codigo OYD.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If

            If String.IsNullOrEmpty(strTipoIdentificacionOYD) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo identificación.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If

            If String.IsNullOrEmpty(strNombreOYD) Then
                strMensajeValidacion = String.Format("{0}{1} - Nombre.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strNombreOYD, clsExpresiones.TipoExpresion.Caracteres2)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Nombre: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If

            If String.IsNullOrEmpty(strNroDocumentoOYD) Then
                strMensajeValidacion = String.Format("{0}{1} - Nro Documento.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strNroDocumentoOYD, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Nro Documento: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If

            If (IsNothing(IDConceptoOYD) Or IDConceptoOYD <= 0) And (IsNothing(DescripcionConceptoOYD) Or String.IsNullOrEmpty(DescripcionConceptoOYD)) Then
                strMensajeValidacion = String.Format("{0}{1} - Seleccionar un concepto de la lista ó ingrese detalle concepto.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If Not String.IsNullOrEmpty(DescripcionConceptoOYD) Then

                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(DescripcionConceptoOYD, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Descripcion Concepto: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If

            If logRequiereGMFOYD Or logXTesorero Then
                If String.IsNullOrEmpty(IDGMF_OYD) Then
                    strMensajeValidacion = String.Format("{0}{1} - Tipo GMF.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                Dim logValidarValorEnCero As Boolean = True

                If logEsFondosOYD Then
                    If ValorGenerarOYD > 0 Or ValorNetoOYD > 0 Then
                        strMensajeValidacion = String.Format("{0}{1} - Cuando la orden es de Fondos y es una cancelación no puede existir detalles con valor.", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                        logValidarValorEnCero = False
                    End If
                End If

                If logValidarValorEnCero Then
                    Dim logTieneOrdenEnCero As Boolean = False

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                            If (li.curValor = 0 And logEditarOYD = False) Or
                               (li.curValor = 0 And logEditarOYD And intIDDetalleEdicion <> li.lngIDDetalle) Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If logTieneOrdenEnCero Then
                        If (IsNothing(ValorGenerarOYD) Or ValorGenerarOYD <= 0) Or
                            (IsNothing(ValorNetoOYD) Or ValorNetoOYD <= 0) Then
                            strMensajeValidacion = String.Format("{0}{1} - Cuando la orden es de Fondos y es una cancelación solo puede existir 1 detalle con el valor en cero.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If
                End If
            ElseIf objTipoOrdenNueva <> TipoOrdenGiroNueva.DIVIDENDOS Then
                If IsNothing(ValorGenerarOYD) Or ValorGenerarOYD <= 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Valor Generar.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                If IsNothing(ValorNetoOYD) Or ValorNetoOYD <= 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Valor Neto.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD Then
                If IsNothing(IDConceptoOYD) Or IDConceptoOYD = 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Concepto.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If logTieneError Then
                mostrarMensaje("Para guardar el Registro es necesario completar los siguientes datos con sus valores correspondientes:" & vbCrLf & strMensajeValidacion, "Ordenes de Pago - OYD.", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            Else
                If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                    If ValorGenerarOYD > 0 Then
                        mostrarMensaje("Cuando la orden es de dividendos el valor de la orden debe de ser cero.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    Else
                        strMensajeValidacion = String.Empty
                        Return True
                    End If
                Else
                    strMensajeValidacion = String.Empty
                    Return True
                End If
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Validar Campos de Carteras Colectivas",
                                 Me.ToString(), "ValidarCamposDiligenciadosOYD", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
            Return False
        End Try
    End Function

    Public Function ValidarCamposDiligenciadosInternos() As Boolean
        Try
            Dim logTieneError As Boolean
            strMensajeValidacion = String.Empty
            If IsNothing(IDTipoClienteInternos) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo Cliente: Si es Tercero o No lo es.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If

            If IsNothing(strCodigoOyDInternosConcatenado) Or String.IsNullOrEmpty(strCodigoOyDInternosConcatenado) Then
                strMensajeValidacion = String.Format("{0}{1} - Código OyD.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If IsNothing(strNroDocumentoInternosWpp) Or String.IsNullOrEmpty(strNroDocumentoInternosWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Nro Documento.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strNroDocumentoInternosWpp, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Nro Documento: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If
            If IsNothing(strTipoIdentificacionInternosWpp) Or String.IsNullOrEmpty(strTipoIdentificacionInternosWpp) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo Documento.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If (IsNothing(IDConceptoInternos) Or IDConceptoInternos <= 0) And
                (IsNothing(DescripcionConceptoInternos) Or String.IsNullOrEmpty(DescripcionConceptoInternos)) Then
                strMensajeValidacion = String.Format("{0}{1} - Seleccionar un concepto de la lista ó ingrese detalle concepto.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If Not String.IsNullOrEmpty(DescripcionConceptoInternos) Then
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(DescripcionConceptoInternos, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Descripcion Concepto: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If
            If logRequiereGMFInternos Or logXTesorero Then
                If String.IsNullOrEmpty(IDGMF_Internos) Then
                    strMensajeValidacion = String.Format("{0}{1} - Tipo GMF.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If
            If objTipoOrdenNueva <> TipoOrdenGiroNueva.DIVIDENDOS Then
                If IsNothing(ValorGenerarInternos) Or ValorGenerarInternos <= 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Valor Generar.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                If IsNothing(ValorNetoInternos) Or ValorNetoInternos <= 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Valor Neto.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD Then
                If IsNothing(IDConceptoInternos) Or IDConceptoInternos = 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Concepto.", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If logTieneError Then
                mostrarMensaje("Para guardar el Registro es necesario completar los siguientes datos con sus valores correspondientes:" & vbCrLf & strMensajeValidacion, "Ordenes de Pago - Interno.", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            Else
                If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                    If ValorGenerarInternos > 0 Then
                        mostrarMensaje("Cuando la orden es de dividendos el valor de la orden debe de ser cero.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    Else
                        strMensajeValidacion = String.Empty
                        Return True
                    End If
                Else
                    strMensajeValidacion = String.Empty
                    Return True
                End If
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Validar Campos de Internos",
                                 Me.ToString(), "ValidarCamposDiligenciadosInternos", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
            Return False
        End Try
    End Function

    Public Function ValidarCamposDiligenciadosBloqueo() As Boolean
        Try
            Dim logTieneError As Boolean
            strMensajeValidacion = String.Empty

            If String.IsNullOrEmpty(strTipoBloqueo) Then
                strMensajeValidacion = String.Format("{0}{1} - Motivo bloqueo: elegir un motivo de bloqueo.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If String.IsNullOrEmpty(strNaturaleza) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo cliente: elegir una naturaleza", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If ValorBloqueado <= 0 Then
                strMensajeValidacion = String.Format("{0}{1} - Valor bloqueado: Ingresar un valor mayor que cero", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If
            If String.IsNullOrEmpty(DetalleBloqueo) Then
                strMensajeValidacion = String.Format("{0}{1} - Detalle bloqueo: Ingresar la descripción del bloqueo", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(DetalleBloqueo, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Detalle bloqueo: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If

            If logTieneError Then
                mostrarMensaje("Para guardar el Registro es necesario completar los siguientes datos con sus valores correspondientes:" & vbCrLf & strMensajeValidacion, "Ordenes de Pago - Bloqueos.", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            Else
                strMensajeValidacion = String.Empty
                Return True
            End If


        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Validar Campos de Bloqueo",
                                 Me.ToString(), "ValidarCamposDiligenciadosBloqueo", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
            Return False
        End Try
    End Function

    Public Function ValidarCamposDiligenciadosOperacionesEspeciales() As Boolean
        Try
            Dim logTieneError As Boolean
            strMensajeValidacion = String.Empty

            If String.IsNullOrEmpty(strTipoOperacionesEspeciales) Then
                strMensajeValidacion = String.Format("{0}{1} - Tipo operación: elegir un tipo de operación.", strMensajeValidacion, vbCrLf)
                logTieneError = True
            ElseIf strTipoOperacionesEspeciales = "OE" Then
                If String.IsNullOrEmpty(strOperacionEspecial) Then
                    strMensajeValidacion = String.Format("{0}{1} - Operación especial: elegir una operación especial", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If


            If String.IsNullOrEmpty(strCodigoOYDComprador) Then
                strMensajeValidacion = String.Format("{0}{1} - Código OYD comprador: elegir el código del comprador", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If

            If String.IsNullOrEmpty(strCodigoOYDVendedor) Then
                strMensajeValidacion = String.Format("{0}{1} - Código OYD vendedor: elegir el código del vendedor", strMensajeValidacion, vbCrLf)
                logTieneError = True
            End If

            If String.IsNullOrEmpty(strProvieneDinero) Then
                strMensajeValidacion = String.Format("{0}{1} - Proviene dinero: Ingresar de donde proviene el dinero", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strProvieneDinero, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Proviene dinero: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If

            If String.IsNullOrEmpty(strObservacionesOperacionEspecial) Then
                strMensajeValidacion = String.Format("{0}{1} - Observación: Ingresar la observación", strMensajeValidacion, vbCrLf)
                logTieneError = True
            Else
                Dim objValidacionExpresion = clsExpresiones.ValidarCaracteresEnCadena(strObservacionesOperacionEspecial, clsExpresiones.TipoExpresion.Caracteres)
                If Not IsNothing(objValidacionExpresion) Then
                    If objValidacionExpresion.TextoValido = False Then
                        strMensajeValidacion = String.Format("{0}{1} - Observación: Hay caracteres invalidos", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If
            End If

            If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                Dim logValidarValorEnCero As Boolean = True

                If logEsFondosOYD Then
                    If ValorOperacionesEspeciales > 0 Then
                        strMensajeValidacion = String.Format("{0}{1} - Cuando la orden es de Fondos y es una cancelación no puede existir detalles con valor.", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                        logValidarValorEnCero = False
                    End If
                End If

                If logValidarValorEnCero Then
                    Dim logTieneOrdenEnCero As Boolean = False

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                            If li.curValor = 0 Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If Not IsNothing(_ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                        For Each li In _ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                            If (li.curValor = 0 And logEditarOperacionesEspeciales = False) Or
                               (li.curValor = 0 And logEditarOperacionesEspeciales And intIDDetalleEdicion <> li.lngIDDetalle) Then
                                logTieneOrdenEnCero = True
                            End If
                        Next
                    End If

                    If logTieneOrdenEnCero Then
                        If ValorOperacionesEspeciales <= 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Cuando la orden es de Fondos y es una cancelación solo puede existir 1 detalle con el valor en cero.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If
                End If
            ElseIf objTipoOrdenNueva <> TipoOrdenGiroNueva.DIVIDENDOS Then
                If ValorOperacionesEspeciales <= 0 Then
                    strMensajeValidacion = String.Format("{0}{1} - Valor: Ingresar un valor mayor que cero", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
            End If

            If logTieneError Then
                mostrarMensaje("Para guardar el Registro es necesario completar los siguientes datos con sus valores correspondientes:" & vbCrLf & strMensajeValidacion, "Ordenes de Pago - Bloqueos.", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            Else
                If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                    If ValorOperacionesEspeciales > 0 Then
                        mostrarMensaje("Cuando la orden es de dividendos el valor de la orden debe de ser cero.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    Else
                        strMensajeValidacion = String.Empty
                        Return True
                    End If
                Else
                    strMensajeValidacion = String.Empty
                    Return True
                End If
            End If
        Catch ex As Exception
            IsBusyReceptor = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Validar Campos de Bloqueo",
                                 Me.ToString(), "ValidarCamposDiligenciadosBloqueo", Application.Current.ToString(), Program.Maquina, ex)

            IsBusy = False
            Return False
        End Try
    End Function
    '********************    VALIDAR DETALLES *******************************************

    '********************    CALCULAR DETALLES *******************************************
    Sub CalcularValoresDetalleCheque()
        If logXTesorero Or logRequiereGMF Then

            If Not String.IsNullOrEmpty(IDGMF) Then
                If IDGMF = GSTR_GMF_ENCIMA Then
                    ValorTotalNota_Cheque = ValorNeto
                    If dblGMF_E = 0 Then
                        MostrarMensajeGMF(GSTR_GMF_ENCIMA)
                    End If
                ElseIf IDGMF = GSTR_GMF_DEBAJO Then
                    ValorTotalNota_Cheque = ValorGenerar
                    If dblGMF_D = 0 Then
                        MostrarMensajeGMF(GSTR_GMF_DEBAJO)
                    End If
                ElseIf IDGMF = GSTR_GMF_NOAPLICA Then
                    ValorTotalNota_Cheque = ValorGenerar
                End If
            Else
                ValorTotalNota_Cheque = ValorNeto
            End If
        Else
            ValorTotalNota_Cheque = ValorNeto
        End If
    End Sub

    Sub CalcularValoresDetalleCartera()
        If logXTesorero Or logRequiereGMFCarteras Then
            If Not String.IsNullOrEmpty(IDGMF_Cartera) Then
                If IDGMF_Cartera = GSTR_GMF_ENCIMA Then
                    ValorGMFCartera = dblGMF_E * ValorGenerarCartera
                    ValorNetoCartera = ValorGenerarCartera + ValorGMFCartera
                    ValorTotalNota_Carteras = ValorNetoCartera
                    If dblGMF_E <= 0 Then
                        MostrarMensajeGMF(GSTR_GMF_ENCIMA)
                    End If
                ElseIf IDGMF_Cartera = GSTR_GMF_DEBAJO Then
                    ValorGMFCartera = dblGMF_D * ValorGenerarCartera
                    ValorNetoCartera = ValorGenerarCartera - ValorGMFCartera
                    ValorTotalNota_Carteras = ValorGenerarCartera
                    If dblGMF_D <= 0 Then
                        MostrarMensajeGMF(GSTR_GMF_DEBAJO)
                    End If
                ElseIf IDGMF_Cartera = GSTR_GMF_NOAPLICA Then
                    ValorGMFCartera = 0
                    ValorNetoCartera = ValorGenerarCartera
                    ValorTotalNota_Carteras = ValorGenerarCartera
                End If
            Else
                ValorNetoCartera = ValorGenerarCartera
                ValorGMFCartera = 0
                ValorTotalNota_Carteras = ValorNetoCartera
            End If
        Else
            ValorNetoCartera = ValorGenerarCartera
            ValorGMFCartera = 0
            ValorTotalNota_Carteras = ValorNetoCartera
        End If
    End Sub

    Sub CalcularValoresDetalleTrasladoFondos()
        If logXTesorero Or logRequiereGMFTrasladoFondos Then
            If Not String.IsNullOrEmpty(IDGMF_TrasladoFondos) Then
                If IDGMF_TrasladoFondos = GSTR_GMF_ENCIMA Then
                    ValorGMFTrasladoFondos = dblGMF_E * ValorGenerarTrasladoFondos
                    ValorNetoTrasladoFondos = ValorGenerarTrasladoFondos + ValorGMFTrasladoFondos
                    ValorTotalNota_TrasladoFondos = ValorNetoTrasladoFondos
                    If dblGMF_E <= 0 Then
                        MostrarMensajeGMF(GSTR_GMF_ENCIMA)
                    End If
                ElseIf IDGMF_TrasladoFondos = GSTR_GMF_DEBAJO Then
                    ValorGMFTrasladoFondos = dblGMF_D * ValorGenerarTrasladoFondos
                    ValorNetoTrasladoFondos = ValorGenerarTrasladoFondos - ValorGMFTrasladoFondos
                    ValorTotalNota_TrasladoFondos = ValorGenerarTrasladoFondos
                    If dblGMF_D <= 0 Then
                        MostrarMensajeGMF(GSTR_GMF_DEBAJO)
                    End If
                ElseIf IDGMF_TrasladoFondos = GSTR_GMF_NOAPLICA Then
                    ValorGMFTrasladoFondos = 0
                    ValorNetoTrasladoFondos = ValorGenerarTrasladoFondos
                    ValorTotalNota_TrasladoFondos = ValorGenerarTrasladoFondos
                End If
            Else
                ValorNetoTrasladoFondos = ValorGenerarTrasladoFondos
                ValorGMFTrasladoFondos = 0
                ValorTotalNota_TrasladoFondos = ValorNetoTrasladoFondos
            End If
        Else
            ValorNetoTrasladoFondos = ValorGenerarTrasladoFondos
            ValorGMFTrasladoFondos = 0
            ValorTotalNota_TrasladoFondos = ValorNetoTrasladoFondos
        End If
    End Sub

    Sub CalcularValoresDetalleOYD()
        If logRequiereGMFOYD Or logXTesorero Then
            If Not String.IsNullOrEmpty(IDGMF_OYD) Then
                If IDGMF_OYD = GSTR_GMF_ENCIMA Then
                    ValorGMFOYD = dblGMF_E * ValorGenerarOYD
                    ValorNetoOYD = ValorGenerarOYD + ValorGMFOYD
                    ValorTotalNota_OYD = ValorNetoOYD
                    If dblGMF_E <= 0 Then
                        MostrarMensajeGMF(GSTR_GMF_ENCIMA)
                    End If
                ElseIf IDGMF_OYD = GSTR_GMF_DEBAJO Then
                    ValorGMFOYD = dblGMF_D * ValorGenerarOYD
                    ValorNetoOYD = ValorGenerarOYD - ValorGMFOYD
                    ValorTotalNota_OYD = ValorGenerarOYD
                    If dblGMF_D <= 0 Then
                        MostrarMensajeGMF(GSTR_GMF_DEBAJO)
                    End If
                ElseIf IDGMF_OYD = GSTR_GMF_NOAPLICA Then
                    ValorGMFOYD = 0
                    ValorNetoOYD = ValorGenerarOYD
                    ValorTotalNota_OYD = ValorGenerarOYD
                End If
            Else
                ValorNetoOYD = ValorGenerarOYD
                ValorGMFOYD = 0
                ValorTotalNota_OYD = ValorNetoOYD
            End If
        Else
            ValorNetoOYD = ValorGenerarOYD
            ValorGMFOYD = 0
            ValorTotalNota_OYD = ValorNetoOYD
        End If
    End Sub

    Sub CalcularValoresDetalleInterno()
        If logXTesorero Or logRequiereGMFInternos Then

            If Not String.IsNullOrEmpty(IDGMF_Internos) Then
                If IDGMF_Internos = GSTR_GMF_ENCIMA Then
                    ValorGMFInternos = dblGMF_E * ValorGenerarInternos
                    ValorNetoInternos = ValorGenerarInternos + ValorGMFInternos
                    ValorTotalNota_Internos = ValorNetoInternos
                    If dblGMF_E = 0 Then
                        MostrarMensajeGMF(GSTR_GMF_ENCIMA)
                    End If
                ElseIf IDGMF_Internos = GSTR_GMF_DEBAJO Then
                    ValorGMFInternos = dblGMF_D * ValorGenerarInternos
                    ValorNetoInternos = ValorGenerarInternos - ValorGMFInternos
                    ValorTotalNota_Internos = ValorGenerarInternos
                    If dblGMF_D = 0 Then
                        MostrarMensajeGMF(GSTR_GMF_DEBAJO)
                    End If
                ElseIf IDGMF_Internos = GSTR_GMF_NOAPLICA Then
                    ValorGMFInternos = 0
                    ValorNetoInternos = ValorGenerarInternos
                    ValorTotalNota_Internos = ValorGenerarInternos
                End If
            Else
                ValorNetoInternos = ValorGenerarInternos
                ValorGMFInternos = 0
                ValorTotalNota_Internos = ValorNetoInternos
            End If
        Else
            ValorNetoInternos = ValorGenerarInternos
            ValorGMFInternos = 0
            ValorTotalNota_Internos = ValorNetoInternos
        End If
    End Sub

    Sub CalcularValoresDetalleTransferencia()
        If logXTesorero Or logRequiereGMFTranferencias Then
            If Not String.IsNullOrEmpty(IDGMF_Transferencia) Then
                If IDGMF_Transferencia = GSTR_GMF_ENCIMA Then
                    ValorGMFTransferencia = dblGMF_E * ValorGenerarTransferencia
                    ValorNetoTransferencia = ValorGenerarTransferencia + ValorGMFTransferencia
                    ValorTotalNota_Transferencia = ValorNetoTransferencia
                    If dblGMF_E = 0 Then
                        MostrarMensajeGMF(GSTR_GMF_ENCIMA)
                    End If
                ElseIf IDGMF_Transferencia = GSTR_GMF_DEBAJO Then
                    ValorGMFTransferencia = dblGMF_D * ValorGenerarTransferencia
                    ValorNetoTransferencia = ValorGenerarTransferencia - ValorGMFTransferencia
                    ValorTotalNota_Transferencia = ValorGenerarTransferencia
                    If dblGMF_D = 0 Then
                        MostrarMensajeGMF(GSTR_GMF_DEBAJO)
                    End If
                ElseIf IDGMF_Transferencia = GSTR_GMF_NOAPLICA Then
                    ValorGMFTransferencia = 0
                    ValorNetoTransferencia = ValorGenerarTransferencia
                    ValorTotalNota_Transferencia = ValorGenerarTransferencia
                End If
            Else
                ValorNetoTransferencia = ValorGenerarTransferencia
                ValorGMFTransferencia = 0
                ValorTotalNota_Transferencia = ValorGenerarTransferencia
            End If
        Else
            ValorNetoTransferencia = ValorGenerarTransferencia
            ValorGMFTransferencia = 0
            ValorTotalNota_Transferencia = ValorGenerarTransferencia
        End If
    End Sub
    '********************    CALCULAR DETALLES *******************************************

    '*********************CARGA DE ARCHIVOS METODOS POPUP******************************
    Public Sub AbrirPopupCargaArchivosCheques(pstrNombreArchivo As String)
        Try
            RaiseEvent LanzarPopupCargaArchivoCheques(Me, New System.EventArgs, pstrNombreArchivo)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abrir Panel de carga de archivo", Me.ToString(), "AbrirPopupCargaArchivosCheques", Program.TituloSistema, Program.Maquina, ex)
        End Try

    End Sub

    Public Sub AbrirPopupCargaArchivosTransferencia(pstrNombreArchivo As String)
        Try
            'CONSULTAR LOS BANCOS PARA REALIZAR LA VALIDACIÓN DE LOS BANCOS NACIONES
            RaiseEvent LanzarPopupCargaArchivoTransferencia(Me, New System.EventArgs, pstrNombreArchivo)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al abrir Panel de carga de archivo", Me.ToString(), "AbrirPopupCargaArchivosTransferencia", Program.TituloSistema, Program.Maquina, ex)
        End Try

    End Sub

    Private Sub TerminoTraerBancosNacionalesTransferencias(ByVal lo As LoadOperation(Of OYDUtilidades.BuscadorGenerico))
        Try
            If Not lo.HasError Then
                Dim objListaCombosReceptor As New List(Of OYDPLUSUtilidades.CombosReceptor)

                If lo.Entities.ToList.Count > 0 Then


                    For Each li In lo.Entities.ToList
                        objListaCombosReceptor.Add(New OYDPLUSUtilidades.CombosReceptor With {.ID = li.IdItem,
                                                                                       .Descripcion = li.Descripcion,
                                                                                       .Retorno = li.IdItem,
                                                                                       .Categoria = "BANCOSNACIONESTRANSFERENCIAS"})
                    Next
                End If

                If Not IsNothing(DiccionarioCombosOYDPlus) Then

                    If DiccionarioCombosOYDPlus.ContainsKey("BANCOSNACIONESTRANSFERENCIAS") Then
                        DiccionarioCombosOYDPlus.Remove("BANCOSNACIONESTRANSFERENCIAS")
                    End If
                    DiccionarioCombosOYDPlus.Add("BANCOSNACIONESTRANSFERENCIAS", objListaCombosReceptor)
                End If

                RaiseEvent LanzarPopupCargaArchivoTransferencia(Me, New System.EventArgs, lo.UserState.ToString)
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Bancos",
                                             Me.ToString(), "TerminoTraerBancosNacionalesTransferencias", Application.Current.ToString(), Program.Maquina, lo.Error)
                lo.MarkErrorAsHandled()   '????
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar el banco", Me.ToString(),
                                                             "TerminoTraerBancosNacionalesTransferencias", Program.TituloSistema, Program.Maquina, ex)
        End Try

    End Sub
    '*************TERMINA CARGA DE ARCHIVOS METODOS POPUP***********************

    ''' <summary>
    ''' Desarrollado por Juan David Correa.
    ''' Consultar los ordenantes del comitente asociado a la orden de OYDPLUS
    ''' Fecha 24 de agosto del 2012
    ''' </summary>
    Private Sub consultarOrdenantesOYDPLUS(ByVal pstrIdComitente As String, Optional ByVal pstrUserState As String = "")
        Try
            If logNuevoRegistro Or logEditarRegistro Then
                If Not IsNothing(dcProxyUtilidades.BuscadorOrdenantes) Then
                    dcProxyUtilidades.BuscadorOrdenantes.Clear()
                End If

                If Not IsNothing(pstrIdComitente) Then
                    pstrIdComitente = LTrim(RTrim(pstrIdComitente))
                End If

                Dim strClienteABuscar = Right(Space(17) & pstrIdComitente, MINT_LONG_MAX_CODIGO_OYD)

                dcProxyUtilidades.Load(dcProxyUtilidades.buscarOrdenantesComitenteQuery(strClienteABuscar, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerOrdenantes, pstrUserState)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al consultar los ordenantes del cliente.", Me.ToString, "consultarOrdenantesOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Public Sub OrganizarDetallesRechazados()
        Try
            If logEditarRegistro Or logNuevoRegistro Then
                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Cheques) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Cheques
                        If Not String.IsNullOrEmpty(x.strEstado) Then
                            If x.strEstado.ToUpper = "RECHAZADO" Then
                                If x.strFormaPago.ToUpper = "CHEQUE" Or x.strFormaPago.ToUpper = "C" Then
                                    x.strFormaPago = "C"
                                Else
                                    x.strFormaPago = "CG"
                                End If

                                x.UsuarioWindows = Program.UsuarioWindows
                                x.strUsuario = Program.Usuario
                                x.dtmFechaActualizacion = Now
                            End If
                        End If
                    Next
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Transferencias
                        If Not String.IsNullOrEmpty(x.strEstado) Then
                            If x.strEstado.ToUpper = "RECHAZADO" Then
                                x.strFormaPago = "T"
                                x.UsuarioWindows = Program.UsuarioWindows
                                x.strUsuario = Program.Usuario
                                x.dtmFechaActualizacion = Now
                            End If
                        End If
                    Next
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_CarterasColectivas
                        If Not String.IsNullOrEmpty(x.strEstado) Then
                            If x.strEstado.ToUpper = "RECHAZADO" Then
                                x.strFormaPago = "CC"
                                x.UsuarioWindows = Program.UsuarioWindows
                                x.strUsuario = Program.Usuario
                                x.dtmFechaActualizacion = Now
                            End If
                        End If
                    Next
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OYD) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_OYD
                        If Not String.IsNullOrEmpty(x.strEstado) Then
                            If x.strEstado.ToUpper = "RECHAZADO" Then
                                x.strFormaPago = "OYD"
                                x.UsuarioWindows = Program.UsuarioWindows
                                x.strUsuario = Program.Usuario
                                x.dtmFechaActualizacion = Now
                            End If
                        End If
                    Next
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Internos) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Internos
                        If Not String.IsNullOrEmpty(x.strEstado) Then
                            If x.strEstado.ToUpper = "RECHAZADO" Then
                                x.strFormaPago = "I"
                                x.UsuarioWindows = Program.UsuarioWindows
                                x.strUsuario = Program.Usuario
                                x.dtmFechaActualizacion = Now
                            End If
                        End If
                    Next
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_Bloqueos
                        If Not String.IsNullOrEmpty(x.strEstado) Then
                            If x.strEstado.ToUpper = "RECHAZADO" Then
                                x.strFormaPago = "BS"
                                x.UsuarioWindows = Program.UsuarioWindows
                                x.strUsuario = Program.Usuario
                                x.dtmFechaActualizacion = Now
                            End If
                        End If
                    Next
                End If

                If Not IsNothing(ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales) Then
                    For Each x In ListaTesoreriaOrdenesPlusCE_Detalle_OperacionesEspeciales
                        If Not String.IsNullOrEmpty(x.strEstado) Then
                            If x.strEstado.ToUpper = "RECHAZADO" Then
                                x.strFormaPago = "OE"
                                x.UsuarioWindows = Program.UsuarioWindows
                                x.strUsuario = Program.Usuario
                                x.dtmFechaActualizacion = Now
                            End If
                        End If
                    Next
                End If
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al Calcular Totales", Me.ToString(), "OrganizarDetallesRechazados", Program.TituloSistema, Program.Maquina, ex)
        End Try

    End Sub

    ''' <summary>
    ''' Metodo para consultar los combos permitidos para la cartera o fondo
    ''' </summary>
    ''' <param name="pstrCarteraColectiva"></param>
    ''' <param name="pstrUserState"></param>
    ''' <remarks></remarks>
    Private Sub consultarCombosEspecificosFondo(ByVal pstrCarteraColectiva As String, Optional ByVal pstrUserState As String = "")
        Try
            If (logNuevoRegistro And _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD) _
                Or ((logNuevoRegistro Or logEditarRegistro) And _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto <> GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD) Then
                If Not IsNothing(dcProxyUtilidades.BuscadorOrdenantes) Then
                    dcProxyUtilidades.BuscadorOrdenantes.Clear()
                End If

                If Not IsNothing(dcProxyUtilidades.ItemCombos) Then
                    dcProxyUtilidades.ItemCombos.Clear()
                End If

                dcProxyUtilidades.Load(dcProxyUtilidades.cargarCombosCondicionalQuery("COMBOS_DEPENDIENTES_CARTERA", pstrCarteraColectiva, 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerCombosEspecificosCartera, pstrUserState)
            Else
                Dim objListaComboRetiroFondos As New List(Of OYDUtilidades.ItemCombo)
                Dim objListaComboTipoAccion As New List(Of OYDUtilidades.ItemCombo)
                If Not IsNothing(DiccionarioCombosOYDPlusCompleta) And pstrUserState = "ENCABEZADO" Then
                    If DiccionarioCombosOYDPlusCompleta.ContainsKey("TIPORETIROFONDOS") Then
                        For Each li In DiccionarioCombosOYDPlusCompleta("TIPORETIROFONDOS")
                            objListaComboRetiroFondos.Add(New OYDUtilidades.ItemCombo With {.Categoria = li.Categoria,
                                                                                          .Descripcion = li.Descripcion,
                                                                                          .ID = li.Retorno,
                                                                                          .intID = li.ID,
                                                                                          .Retorno = li.Retorno})
                        Next
                    End If
                    If DiccionarioCombosOYDPlusCompleta.ContainsKey("TIPOACCIONFONDOS") Then
                        For Each li In DiccionarioCombosOYDPlusCompleta("TIPOACCIONFONDOS")
                            objListaComboTipoAccion.Add(New OYDUtilidades.ItemCombo With {.Categoria = li.Categoria,
                                                                                          .Descripcion = li.Descripcion,
                                                                                          .ID = li.Retorno,
                                                                                          .intID = li.ID,
                                                                                          .Retorno = li.Retorno})
                        Next
                    End If
                End If

                If logNuevoRegistro And _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD Then
                    ListaTiposRetirosFondos = objListaComboRetiroFondos
                End If
                ListaTiposAccionFondos = objListaComboTipoAccion
                If pstrUserState = "ENCABEZADO" Then

                    If HabilitarCategoriaFondos = True Then
                        ListaTiposRetirosFondos = objListaComboRetiroFondos
                    End If

                    TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos

                End If
                If pstrUserState = "EDITARDETALLE" Then
                    TipoAccionFondos = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.strTipoAccionFondos
                    IDCarteraColectiva = TesoreriaOrdenesPlusCE_Detalle_CarterasColectivas_Selected.ValorCarteraColectiva
                    IsBusyEdicionTesorero = False
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar los combos especificos.", Me.ToString(), "consultarCombosEspecificosFondo", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub VerificarRestriccionesTipoCartera(ByVal plogEsDesdeCarteraColectiva As Boolean, Optional ByVal pstrUserState As String = "")
        Try
            If logConsultarRestriccionesTipoCartera Then
                If plogEsDesdeCarteraColectiva = False Then
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) And logNuevoRegistro Then
                        If Not String.IsNullOrEmpty(CarteraColectivaFondosControles) _
                            And Not String.IsNullOrEmpty(NroEncargoFondosControles) _
                            And Not String.IsNullOrEmpty(_TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos) Then
                            dcProxy.VerificarRestriccionesTipoCartera(_TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos,
                                                                      _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                      CarteraColectivaFondosControles,
                                                                      NroEncargoFondosControles,
                                                                      Program.Usuario,
                                                                      FechaOrden, Program.HashConexion,
                                                                      AddressOf TerminoVerificarRestriccionesTipoCartera,
                                                                      pstrUserState)
                        End If
                    End If
                Else
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If Not String.IsNullOrEmpty(IDCarteraColectiva) _
                            And Not String.IsNullOrEmpty(NumEncargoCartera) _
                            And Not String.IsNullOrEmpty(TipoAccionFondos) Then
                            dcProxy.VerificarRestriccionesTipoCartera(TipoAccionFondos,
                                                                      _TesoreriaOrdenesPlusCE_Selected.strIDComitente,
                                                                      IDCarteraColectiva,
                                                                      NumEncargoCartera,
                                                                      Program.Usuario,
                                                                      FechaAplicacionCartera, Program.HashConexion,
                                                                      AddressOf TerminoVerificarRestriccionesTipoCartera,
                                                                      pstrUserState)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al verificar la existencia de los tipos de cartera.", Me.ToString(), "VerificarRestriccionesTipoCartera", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub CambiarColorFondoTextoBuscador()
        Try
            Dim colorFondo As Color
            If Editando Then
                colorFondo = Program.colorFromHex(COLOR_HABILITADO)
            Else
                colorFondo = Program.colorFromHex(COLOR_DESHABILITADO)
            End If

            FondoTextoBuscadores = New SolidColorBrush(colorFondo)

            colorFondo = Program.colorFromHex(COLOR_HABILITADO)

            FondoTextoBuscadoresHabilitado = New SolidColorBrush(colorFondo)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cambiar el color de fondo del texto.", Me.ToString(), "CambiarColorFondoTextoBuscador", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Sub ConsultarBancosNacionales_Cartera(ByVal pstrCarteraColectiva As String, Optional ByVal pstrUserState As String = "")
        Try
            If Not String.IsNullOrEmpty(pstrCarteraColectiva) Then
                dcProxyUtilidades.ItemCombos.Clear()
                dcProxyUtilidades.Load(dcProxyUtilidades.cargarCombosCondicionalQuery("BANCOSNACIONALES_CARTERA", pstrCarteraColectiva, 0, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarBancosNacionales_Cartera, pstrUserState)
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar los bancos nacionales de fondos.", Me.ToString(), "ConsultarBancosNacionales_Cartera", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub consultarBancosNacionalesCompania(ByVal pstrCarteraColectiva As String, Optional ByVal pstrUserState As String = "")
        Try
            If Not IsNothing(dcProxyUtilidades.ItemCombos) Then
                dcProxyUtilidades.ItemCombos.Clear()
            End If

            dcProxyUtilidades.Load(dcProxyUtilidades.cargarCombosCondicionalQuery("BANCOSNACIONALES_CONFIGURADOS_COMPANIA", pstrCarteraColectiva, 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerBancosNacionalesCartera, pstrUserState)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar los combos especificos.", Me.ToString(), "consultarCombosEspecificosFondo", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub ValidarHabilitarValorDetalles()
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                If objTipoOrdenNueva = TipoOrdenGiroNueva.DIVIDENDOS Then
                    HabilitarValorEnDetalle = False
                Else
                    If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And _TesoreriaOrdenesPlusCE_Selected.strTipoRetiroFondos = GSTR_FONDOS_TIPOACCION_CANCELACION Then
                        If logEsFondosOYD Then
                            HabilitarValorEnDetalle = False
                        Else
                            If log_Cancelacion_SoloPermitirValorEnCero Then
                                HabilitarValorEnDetalle = False
                            Else
                                HabilitarValorEnDetalle = True
                            End If
                        End If
                    Else
                        HabilitarValorEnDetalle = True
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar habilitar el detalle.", Me.ToString(), "ValidarHabilitarValorDetalles", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub VerificarCobro_GMF(ByVal pstrFormaPago As String, Optional ByVal plogYaConsultoBancoCartera As Boolean = False, Optional ByVal plogEsBancoRegistrado As Boolean = False)
        Try
            Dim logDebeCobrarGMF As Boolean = False

            'CHEQUES
            If pstrFormaPago = GSTR_CHEQUE Then
                'VERIFICA SÍ ES TERCERO O CLIENTE
                If _IDTipoCliente = GSTR_TERCERO Then
                    logDebeCobrarGMF = True
                End If
                'VERIFICA EL TIPO DE CRECE
                If logDebeCobrarGMF = False Then
                    If logDebeCobrarGMF = False Then
                        Dim a() As String = Split(strParametroTipoCruceGMF, ",")
                        If Not String.IsNullOrEmpty(IDTipoCruce) Then
                            If TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                logDebeCobrarGMF = True
                            Else
                                If a.Where(Function(i) i.Contains(IDTipoCruce)).Count > 0 Then
                                    For Each li In a.Where(Function(i) i.Contains(IDTipoCruce))
                                        If li = IDTipoCruce Then
                                            logDebeCobrarGMF = True
                                        End If
                                    Next
                                End If
                            End If
                        End If
                    End If
                End If
                'VERIFICA EL CONCEPTO
                If logDebeCobrarGMF = False Then
                    If Not String.IsNullOrEmpty(TIPOCONCEPTOCONCOBRO) Then
                        If TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto <> GSTR_FONDOS_TIPOPRODUCTO Then
                            Dim conceptosCobroGMF = Split(TIPOCONCEPTOCONCOBRO, "|")
                            For Each concepto In conceptosCobroGMF
                                If Not String.IsNullOrEmpty(concepto) Then
                                    If IdConcepto = Integer.Parse(concepto) Then
                                        logDebeCobrarGMF = True
                                    End If
                                End If
                            Next
                        End If
                    End If
                End If

                If logDebeCobrarGMF Then
                    logRequiereGMF = True

                    If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD And Not String.IsNullOrEmpty(strTipoGMF_TesoreriaFondosOYD) Then
                        HabilitarCamposPopup = False
                        IDGMF = strTipoGMF_TesoreriaFondosOYD
                    Else
                        HabilitarCamposPopup = True
                        If Not IsNothing(DiccionarioCombosOYDPlus) Then
                            If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                                If DiccionarioCombosOYDPlus("TIPOGMF").Count = 1 Then
                                    IDGMF = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Retorno
                                    DescripcionGMF = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Descripcion
                                End If
                            End If
                        End If
                    End If
                Else
                    logRequiereGMF = False
                    HabilitarCamposPopup = False
                    DescripcionGMF = String.Empty
                    IDGMF = Nothing
                End If

                CalcularValoresDetalleCheque()
            ElseIf pstrFormaPago = GSTR_CHEQUE_GERENCIA Then
                logRequiereGMF = True

                If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD And Not String.IsNullOrEmpty(strTipoGMF_TesoreriaFondosOYD) Then
                    HabilitarCamposPopup = False
                    IDGMF = strTipoGMF_TesoreriaFondosOYD
                Else
                    HabilitarCamposPopup = True
                    If Not IsNothing(DiccionarioCombosOYDPlus) Then
                        If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                            If DiccionarioCombosOYDPlus("TIPOGMF").Count = 1 Then
                                IDGMF = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Retorno
                                DescripcionGMF = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Descripcion
                            End If
                        End If
                    End If
                End If

                CalcularValoresDetalleCheque()
            ElseIf pstrFormaPago = GSTR_TRANSFERENCIA Then
                logDebeCobrarGMF = True
                'VERIFICA SÍ EL NRO DE IDENTIFICACIÓN ES DIFERENTE DEL NRO DE IDENTIFICACIÓN DEL ENCABEZADO

                If Not String.IsNullOrEmpty(LTrim(RTrim(_strNroDocumentoTitularWpp))) And Not String.IsNullOrEmpty(strTipoIdentificacionTitularWpp) Then
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If _TesoreriaOrdenesPlusCE_Selected.strNroDocumento = LTrim(RTrim(_strNroDocumentoTitularWpp)) And
                            _TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion = strTipoIdentificacionTitularWpp Then
                            logDebeCobrarGMF = False

                        End If
                    End If
                End If


                'A2Utilidades.Mensajes.mostrarMensaje("Verifico numeros de documentos. El valor de la variable cobro GMF es: " & logDebeCobrarGMF & "  El valor de plogYaConsultoBancoCartera es: " & plogYaConsultoBancoCartera & " el valor de plogEsBancoRegistrado es: " & plogEsBancoRegistrado, "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                'VERIFICA EL CONCEPTO
                If logDebeCobrarGMF = False Then
                    If Not String.IsNullOrEmpty(TIPOCONCEPTOCONCOBRO) Then
                        Dim conceptosCobroGMF = Split(TIPOCONCEPTOCONCOBRO, "|")
                        For Each concepto In conceptosCobroGMF
                            If Not String.IsNullOrEmpty(concepto) Then
                                If IdConceptoTransferencia = Integer.Parse(concepto) Then
                                    logDebeCobrarGMF = True
                                End If
                            End If
                        Next
                    End If
                End If

                'A2Utilidades.Mensajes.mostrarMensaje("Verifico el concepto. El valor de la variable cobro GMF es: " & logDebeCobrarGMF & "  El valor de plogYaConsultoBancoCartera es: " & plogYaConsultoBancoCartera & " el valor de plogEsBancoRegistrado es: " & plogEsBancoRegistrado, "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                If logDebeCobrarGMF = False Then


                    If plogYaConsultoBancoCartera Then
                        If plogEsBancoRegistrado = False Then
                            logDebeCobrarGMF = True
                        End If

                        'A2Utilidades.Mensajes.mostrarMensaje("Ingrese a plogYaConsultoBancoCartera. El valor de la variable cobro GMF es: " & logDebeCobrarGMF & "  El valor de plogYaConsultoBancoCartera es: " & plogYaConsultoBancoCartera & " el valor de plogEsBancoRegistrado es: " & plogEsBancoRegistrado, "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                    Else
                        If Not IsNothing(TesoreriaOrdenesPlusCE_Selected) Then
                            If TesoreriaOrdenesPlusCE_Selected.strNroDocumento = strNroDocumentoTitularWpp Or
                                TesoreriaOrdenesPlusCE_Selected.ValorTipoIdentificacion = strTipoIdentificacionTitularWpp Then
                                If TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO Then
                                    If logEsFondosOYD Then
                                        consultarBancosNacionalesCompania(_TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, lngCodigoBancoWpp)
                                    Else
                                        ConsultarBancosNacionales_Cartera(TesoreriaOrdenesPlusCE_Selected.strCarteraColectivaFondos, "BANCOTRANSFERENCIA")
                                    End If
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If


                'A2Utilidades.Mensajes.mostrarMensaje("Voy a evaluar el valor del GMF al final. El valor de la variable cobro GMF es: " & logDebeCobrarGMF & "  El valor de plogYaConsultoBancoCartera es: " & plogYaConsultoBancoCartera & " el valor de plogEsBancoRegistrado es: " & plogEsBancoRegistrado, "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                If logDebeCobrarGMF Then

                    logRequiereGMFTranferencias = True

                    If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD And Not String.IsNullOrEmpty(strTipoGMF_TesoreriaFondosOYD) Then
                        HabilitarCampoGMFTransferencia = False
                        IDGMF_Transferencia = strTipoGMF_TesoreriaFondosOYD
                    Else
                        HabilitarCampoGMFTransferencia = True
                        If Not IsNothing(DiccionarioCombosOYDPlus) Then
                            If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                                If DiccionarioCombosOYDPlus("TIPOGMF").Count = 1 Then
                                    IDGMF_Transferencia = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Retorno
                                    DescripcionGMFTransferencia = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Descripcion
                                End If
                            End If
                        End If
                    End If
                Else
                    HabilitarCampoGMFTransferencia = False
                    logRequiereGMFTranferencias = False
                    'IDGMF_Transferencia = Nothing
                    'DescripcionGMFTransferencia = String.Empty

                    'JABG20180724
                    IDGMF_Transferencia = Nothing
                    DescripcionGMFTransferencia = String.Empty

                End If

                CalcularValoresDetalleTransferencia()
            ElseIf pstrFormaPago = GSTR_CARTERASCOLECTIVAS Or pstrFormaPago = GSTR_TRASLADOFONDOS Then

                'VERIFICA EL TIPO DE CLIENTE
                If _IDTipoClienteCarteras = GSTR_CLIENTE Then
                    logDebeCobrarGMF = False
                Else
                    logDebeCobrarGMF = True
                End If

                If logDebeCobrarGMF = False Then
                    If Not String.IsNullOrEmpty(TIPOCONCEPTOCONCOBRO) Then
                        Dim conceptosCobroGMF = Split(TIPOCONCEPTOCONCOBRO, "|")
                        For Each concepto In conceptosCobroGMF
                            If Not String.IsNullOrEmpty(concepto) Then
                                If IDConceptoCartera = Integer.Parse(concepto) Then
                                    logDebeCobrarGMF = True
                                End If
                            End If
                        Next
                    End If
                End If

                If logDebeCobrarGMF Then
                    logRequiereGMFCarteras = True

                    If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD And Not String.IsNullOrEmpty(strTipoGMF_TesoreriaFondosOYD) Then
                        HabilitarGMFCartera = False
                        IDGMF_Cartera = strTipoGMF_TesoreriaFondosOYD
                    Else
                        HabilitarGMFCartera = True
                        If Not IsNothing(DiccionarioCombosOYDPlus) Then
                            If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                                If DiccionarioCombosOYDPlus("TIPOGMF").Count = 1 Then
                                    IDGMF_Cartera = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Retorno
                                    DescripcionTipoGMFCarteras = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Descripcion
                                End If
                            End If
                        End If
                    End If
                Else
                    HabilitarGMFCartera = False
                    logRequiereGMFCarteras = False
                    'IDGMF_Cartera = Nothing

                    'JABG20180724
                    IDGMF_Cartera = Nothing
                End If

                CalcularValoresDetalleCartera()
            ElseIf pstrFormaPago = GSTR_INTERNOS Then

                'VERIFICA EL TIPO DE CLIENTE
                If _IDTipoClienteInternos = GSTR_CLIENTE Then
                    logDebeCobrarGMF = False
                Else
                    logDebeCobrarGMF = True
                End If

                If logDebeCobrarGMF = False Then
                    If Not String.IsNullOrEmpty(TIPOCONCEPTOCONCOBRO) Then
                        Dim conceptosCobroGMF = Split(TIPOCONCEPTOCONCOBRO, "|")
                        For Each concepto In conceptosCobroGMF
                            If Not String.IsNullOrEmpty(concepto) Then
                                If IDConceptoInternos = Integer.Parse(concepto) Then
                                    logDebeCobrarGMF = True
                                End If
                            End If
                        Next
                    End If
                End If

                If logDebeCobrarGMF Then
                    HabilitarGMFInternos = True
                    logRequiereGMFInternos = True

                    If Not IsNothing(DiccionarioCombosOYDPlus) Then
                        If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                            If DiccionarioCombosOYDPlus("TIPOGMF").Count = 1 Then
                                IDGMF_Internos = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Retorno
                                DescripcionTipoGMFInternos = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Descripcion
                            End If
                        End If
                    End If
                Else
                    HabilitarGMFInternos = False
                    logRequiereGMFInternos = False
                    IDGMF_Internos = Nothing
                End If

                CalcularValoresDetalleInterno()
            ElseIf pstrFormaPago = GSTR_OYD Then

                'VERIFICA EL TIPO DE CLIENTE
                If _IDTipoClienteOYD = GSTR_CLIENTE Then
                    logDebeCobrarGMF = False
                Else
                    logDebeCobrarGMF = True
                End If

                If logDebeCobrarGMF = False Then
                    If Not String.IsNullOrEmpty(TIPOCONCEPTOCONCOBRO) Then
                        Dim conceptosCobroGMF = Split(TIPOCONCEPTOCONCOBRO, "|")
                        For Each concepto In conceptosCobroGMF
                            If Not String.IsNullOrEmpty(concepto) Then
                                If IDConceptoOYD = Integer.Parse(concepto) Then
                                    logDebeCobrarGMF = True
                                End If
                            End If
                        Next
                    End If
                End If

                If logDebeCobrarGMF Then
                    logRequiereGMFOYD = True

                    If _TesoreriaOrdenesPlusCE_Selected.ValorTipoProducto = GSTR_FONDOS_TIPOPRODUCTO And logEsFondosOYD And Not String.IsNullOrEmpty(strTipoGMF_TesoreriaFondosOYD) Then
                        HabilitarGMFOYD = False
                        IDGMF_OYD = strTipoGMF_TesoreriaFondosOYD
                    Else
                        HabilitarGMFOYD = True
                        If Not IsNothing(DiccionarioCombosOYDPlus) Then
                            If DiccionarioCombosOYDPlus.ContainsKey("TIPOGMF") Then
                                If DiccionarioCombosOYDPlus("TIPOGMF").Count = 1 Then
                                    IDGMF_OYD = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Retorno
                                    DescripcionTipoGMFOYD = DiccionarioCombosOYDPlus("TIPOGMF").FirstOrDefault.Descripcion
                                End If
                            End If
                        End If
                    End If
                Else
                    HabilitarGMFOYD = False
                    logRequiereGMFOYD = False
                    IDGMF_OYD = Nothing
                End If

                CalcularValoresDetalleOYD()
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al verificar el cobro de GMF.", Me.ToString(), "VerificarCobro_Calculo_GMF", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub VerificarHabilitarTabsOmnibus(ByVal pstrCarteraColectiva As String)
        Try
            MostrarTabOYD = Visibility.Visible
            MostrarTabTrasladoFondos = Visibility.Visible
            logEsOrdenOmnibus = False

            If logEsFondosOYD And logFuncionalidad_CuentaOmnibus Then

                If Not IsNothing(_CarteraColectivaFondosControles) Then
                    dcProxy.VerificarTipoCuentaOmnibus_CarteraColectiva(pstrCarteraColectiva, Program.Usuario, Program.HashConexion, AddressOf TerminoVerificarCarterasHabilitarOmnibus, pstrCarteraColectiva)
                End If
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al verificar el tipo de compañia.", Me.ToString(), "VerificarHabilitarTabsOmnibus", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoVerificarCarterasHabilitarOmnibus(ByVal lo As InvokeOperation(Of String))
        Try
            If lo.HasError = False Then
                If lo.Value <> "NO" And Not String.IsNullOrEmpty(lo.Value) Then
                    MostrarTabOYD = Visibility.Collapsed
                    MostrarTabTrasladoFondos = Visibility.Collapsed
                    logEsOrdenOmnibus = True
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al verificar sí se habilitaban los campos de fondos.",
                               Me.ToString(), "TerminoVerificarCarterasHabilitarOmnibus", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar las carteras colectivas del cliente.",
                               Me.ToString(), "TerminoVerificarCarterasHabilitarOmnibus", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Sub VerificarHabilitarTabsOrdenPago(ByVal pstrTipoProducto As String, ByVal pstrCarteraColectiva As String)
        Try
            If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                dcProxy.tbl_TabHabilitars.Clear()
                dcProxy.Load(dcProxy.OrdenPago_ValidarTabHabilitarQuery(pstrTipoProducto, pstrCarteraColectiva, Program.Maquina, Program.Usuario, Program.UsuarioWindows, Program.HashConexion), AddressOf TerminoVerificarTabControlOrdenPago, IIf(Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.lngID), _TesoreriaOrdenesPlusCE_Selected.lngID, 0))
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se generó un problema al ejecutar la consulta para obtener los tabs que se deben de habilitar.", Me.ToString, "VerificarHabilitarTabsOrdenPago", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoVerificarTabControlOrdenPago(ByVal lo As LoadOperation(Of OyDPLUSTesoreria.tbl_TabHabilitar))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    If Not IsNothing(_TesoreriaOrdenesPlusCE_Selected) Then
                        If lo.UserState.ToString = IIf(Not IsNothing(_TesoreriaOrdenesPlusCE_Selected.lngID), _TesoreriaOrdenesPlusCE_Selected.lngID, 0).ToString Then
                            'TAB CHEQUE
                            If lo.Entities.Where(Function(i) i.strTabHabilitar = GSTR_TABORDENESPAGO_CHEQUE_CODIGOINTERNO).Count > 0 Then
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_CHEQUE_CODIGO).TabVisible = Visibility.Visible
                            Else
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_CHEQUE_CODIGO).TabVisible = Visibility.Collapsed
                            End If
                            'TAB TRANSFERENCIA
                            If lo.Entities.Where(Function(i) i.strTabHabilitar = GSTR_TABORDENESPAGO_TRANSFERENCIA_CODIGOINTERNO).Count > 0 Then
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_TRANSFERENCIA_CODIGO).TabVisible = Visibility.Visible
                            Else
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_TRANSFERENCIA_CODIGO).TabVisible = Visibility.Collapsed
                            End If
                            'TAB CARTERA COLECTIVA
                            If lo.Entities.Where(Function(i) i.strTabHabilitar = GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_CODIGOINTERNO).Count > 0 Then
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_CODIGO).TabVisible = Visibility.Visible
                            Else
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_CODIGO).TabVisible = Visibility.Collapsed
                            End If
                            'TAB OYD
                            If lo.Entities.Where(Function(i) i.strTabHabilitar = GSTR_TABORDENESPAGO_OYD_CODIGOINTERNO).Count > 0 Then
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_OYD_CODIGO).TabVisible = Visibility.Visible
                            Else
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_OYD_CODIGO).TabVisible = Visibility.Collapsed
                            End If
                            'TAB TRASLADO FONDOS
                            If lo.Entities.Where(Function(i) i.strTabHabilitar = GSTR_TABORDENESPAGO_TRASLADOFONDOS_CODIGOINTERNO).Count > 0 Then
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_TRASLADOFONDOS_CODIGO).TabVisible = Visibility.Visible
                            Else
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_TRASLADOFONDOS_CODIGO).TabVisible = Visibility.Collapsed
                            End If
                            'TAB INTERNOS
                            If lo.Entities.Where(Function(i) i.strTabHabilitar = GSTR_TABORDENESPAGO_INTERNOS_CODIGOINTERNO).Count > 0 Then
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_INTERNOS_CODIGO).TabVisible = Visibility.Visible
                            Else
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_INTERNOS_CODIGO).TabVisible = Visibility.Collapsed
                            End If
                            'TAB BLOQUEO RECURSOS
                            If lo.Entities.Where(Function(i) i.strTabHabilitar = GSTR_TABORDENESPAGO_BLOQUEORECURSOS_CODIGOINTERNO).Count > 0 Then
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_BLOQUEORECURSOS_CODIGO).TabVisible = Visibility.Visible
                            Else
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_BLOQUEORECURSOS_CODIGO).TabVisible = Visibility.Collapsed
                            End If
                            'TAB OPERACIONES ESPECIALES
                            If lo.Entities.Where(Function(i) i.strTabHabilitar = GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_CODIGOINTERNO).Count > 0 Then
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_CODIGO).TabVisible = Visibility.Visible
                            Else
                                DiccionarioTabPantalla(GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_CODIGO).TabVisible = Visibility.Collapsed
                            End If
                        End If
                    End If
                End If

                VerificarPrimerTabHabilitado()
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al habilitar los tab de ordenes de pago.",
                           Me.ToString(), "TerminoVerificarTabControlOrdenPago", Application.Current.ToString(), Program.Maquina, lo.Error)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al habilitar los tab de ordenes de pago.",
                               Me.ToString(), "TerminoVerificarTabControlOrdenPago", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

	Public Sub VerificarPrimerTabHabilitado()
		Try
			If DiccionarioTabPantalla(GSTR_TABORDENESPAGO_CHEQUE_CODIGO).TabVisible = Visibility.Visible Then
				BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemCheque")
			ElseIf DiccionarioTabPantalla(GSTR_TABORDENESPAGO_TRANSFERENCIA_CODIGO).TabVisible = Visibility.Visible Then
				BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemTransferencia")
			ElseIf DiccionarioTabPantalla(GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_CODIGO).TabVisible = Visibility.Visible Then
				BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemCarterasColectivas")
			ElseIf DiccionarioTabPantalla(GSTR_TABORDENESPAGO_OYD_CODIGO).TabVisible = Visibility.Visible Then
				BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemOYD")
			ElseIf DiccionarioTabPantalla(GSTR_TABORDENESPAGO_TRASLADOFONDOS_CODIGO).TabVisible = Visibility.Visible Then
				BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemTrasladoFondos")
			ElseIf DiccionarioTabPantalla(GSTR_TABORDENESPAGO_INTERNOS_CODIGO).TabVisible = Visibility.Visible Then
				BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemInternos")
			ElseIf DiccionarioTabPantalla(GSTR_TABORDENESPAGO_BLOQUEORECURSOS_CODIGO).TabVisible = Visibility.Visible Then
				BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemBloqueo")
			ElseIf DiccionarioTabPantalla(GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_CODIGO).TabVisible = Visibility.Visible Then
				BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemOperacionesEspeciales")
			Else
				BuscarControlValidacion(ComprobantesEgresoPLUSView, "tabItemInstrucciones")
			End If
		Catch ex As Exception
			A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se generó un problema al ejecutar la consulta para obtener los tabs que se deben de habilitar.", Me.ToString, "VerificarHabilitarTabsOrdenPago", Program.TituloSistema, Program.Maquina, ex)
		End Try
	End Sub

	Public Sub TextoTabItemSeleccionado(ByVal pstrOpcion As String)
		Try
			If pstrOpcion = GSTR_TABORDENESPAGO_CHEQUE_CODIGO Then
				TabItemActual = ObtenerTextoTab(GSTR_TABORDENESPAGO_CHEQUE_CODIGO, GSTR_TABORDENESPAGO_CHEQUE_DESCRIPCION)
			ElseIf pstrOpcion = GSTR_TABORDENESPAGO_TRANSFERENCIA_CODIGO Then
				TabItemActual = ObtenerTextoTab(GSTR_TABORDENESPAGO_TRANSFERENCIA_CODIGO, GSTR_TABORDENESPAGO_TRANSFERENCIA_DESCRIPCION)
			ElseIf pstrOpcion = GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_CODIGO Then
				TabItemActual = ObtenerTextoTab(GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_CODIGO, GSTR_TABORDENESPAGO_CARTERASCOLECTIVAS_DESCRIPCION)
			ElseIf pstrOpcion = GSTR_TABORDENESPAGO_INTERNOS_CODIGO Then
				TabItemActual = ObtenerTextoTab(GSTR_TABORDENESPAGO_INTERNOS_CODIGO, GSTR_TABORDENESPAGO_INTERNOS_DESCRIPCION)
			ElseIf pstrOpcion = GSTR_TABORDENESPAGO_BLOQUEORECURSOS_CODIGO Then
				TabItemActual = ObtenerTextoTab(GSTR_TABORDENESPAGO_BLOQUEORECURSOS_CODIGO, GSTR_TABORDENESPAGO_BLOQUEORECURSOS_CODIGO)
			ElseIf pstrOpcion = GSTR_TABORDENESPAGO_TRASLADOFONDOS_CODIGO Then
				TabItemActual = ObtenerTextoTab(GSTR_TABORDENESPAGO_TRASLADOFONDOS_CODIGO, GSTR_TABORDENESPAGO_TRASLADOFONDOS_DESCRIPCION)
			ElseIf pstrOpcion = GSTR_TABORDENESPAGO_OYD_CODIGO Then
				TabItemActual = ObtenerTextoTab(GSTR_TABORDENESPAGO_OYD_CODIGO, GSTR_TABORDENESPAGO_OYD_DESCRIPCION)
			ElseIf pstrOpcion = GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_CODIGO Then
				TabItemActual = ObtenerTextoTab(GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_CODIGO, GSTR_TABORDENESPAGO_OPERACIONESESPECIALES_DESCRIPCION)
			End If
		Catch ex As Exception
			A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se generó un problema al ejecutar la consulta para obtener los tabs que se deben de habilitar.", Me.ToString, "VerificarHabilitarTabsOrdenPago", Program.TituloSistema, Program.Maquina, ex)
		End Try
	End Sub

	Public Function ObtenerTextoTab(ByVal pstrCodigo As String, ByVal pstrValorDefecto As String)
		Dim strRetorno As String = pstrValorDefecto

		If DiccionarioTabPantalla.ContainsKey(GSTR_TABORDENESPAGO_CHEQUE_CODIGO) Then
			strRetorno = DiccionarioTabPantalla(GSTR_TABORDENESPAGO_CHEQUE_CODIGO).Descripcion
		End If

		Return strRetorno
	End Function

#End Region

#Region "Temporizador"

	Private _myDispatcherTimerTesoreria As System.Windows.Threading.DispatcherTimer '= New System.Windows.Threading.DispatcherTimer

    ''' <summary>
    ''' Para hilo del temporizador
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub pararTemporizador()
        Try
            If Not IsNothing(_myDispatcherTimerTesoreria) Then
                _myDispatcherTimerTesoreria.Stop()
                RemoveHandler _myDispatcherTimerTesoreria.Tick, AddressOf Me.Each_Tick
                _myDispatcherTimerTesoreria = Nothing
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al parar el temporizador.", Me.ToString(), "pararTemporizador", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Sub ReiniciaTimer()
        Try
            If Program.Recarga_Automatica_Activa Then
                If _myDispatcherTimerTesoreria Is Nothing Then
                    _myDispatcherTimerTesoreria = New System.Windows.Threading.DispatcherTimer
                    _myDispatcherTimerTesoreria.Interval = New TimeSpan(0, 0, 0, 0, Program.Par_lapso_recarga)
                    AddHandler _myDispatcherTimerTesoreria.Tick, AddressOf Me.Each_Tick
                End If
                _myDispatcherTimerTesoreria.Start()
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al iniciar el temporizador.", Me.ToString(), "ReiniciaTimer", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try

    End Sub

    ''' <summary>
    ''' recarga de ordenes cada que se cumple el tiempo del temporizador
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    ''' <remarks></remarks>
    Private Sub Each_Tick(sender As Object, e As EventArgs)
        If logEditarRegistro = False And logNuevoRegistro = False And logBuscar = False And logFiltrar = False And logDuplicarRegistro = False Then
            RecargarPantalla()
        End If


    End Sub

#End Region

#End Region

#Region "Notificaciones"

    Private Const TOPICOMENSAJE_RESPUESTATESORERO = "OYDPLUS_TESORERO_GIRO"

    ''' <summary>
    ''' Método que recibe una notificaión
    ''' </summary>
    ''' <param name="pobjInfoNotificacion"></param>
    ''' <remarks>Juan David Osorio Diciembre 2014</remarks>
    Public Overrides Sub LlegoNotificacion(pobjInfoNotificacion As A2.Notificaciones.Cliente.clsNotificacion)
        Try

            ' Dim objNotificacion As clsNotificacionesOYDPLUS

            If Not String.IsNullOrEmpty(pobjInfoNotificacion.strTipoMensaje) Then

                If pobjInfoNotificacion.strTipoMensaje.ToUpper = TOPICOMENSAJE_RESPUESTATESORERO Then

                    If Not String.IsNullOrEmpty(pobjInfoNotificacion.strInfoMensaje) Then
                        If Editando = False Then
                            If Not IsNothing(_ListaTesoreriaOrdenesPlusCE) Then
                                If _ListaTesoreriaOrdenesPlusCE.Where(Function(i) i.lngID = CInt(pobjInfoNotificacion.strInfoMensaje)).Count > 0 Then
                                    IsBusy = True
                                    dcProxy.Load(dcProxy.TesoreriaOrdenesListarQuery(GSTR_ORDENGIRO, GSTR_PENDIENTE_Plus, "", "", 0, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerTesoreriaOrdenes, "TERMINOGUARDARNUEVO")
                                End If
                            End If
                        End If
                    End If

                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir el mensaje de la notificación.",
                                Me.ToString(), "LlegoNotificacion", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

#End Region

End Class

'Clase base para forma de búsquedas
Public Class CamposBusquedaTesoreriaOyDPLUS
    Implements INotifyPropertyChanged


    Private _ComitenteSeleccionadoBusqueda As New OYDUtilidades.BuscadorClientes
    Public Property ComitenteSeleccionadoBusqueda As OYDUtilidades.BuscadorClientes
        Get
            Return (_ComitenteSeleccionadoBusqueda)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorClientes)

            _ComitenteSeleccionadoBusqueda = value
            If Not IsNothing(_ComitenteSeleccionadoBusqueda) Then
                strIDComitente = _ComitenteSeleccionadoBusqueda.CodigoOYD
                strNroDocumento = _ComitenteSeleccionadoBusqueda.NroDocumento
            End If

            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("ComitenteSeleccionadoBusqueda"))
        End Set

    End Property

    Private _lngID As Integer
    <Display(Name:="ID Orden Tesoreria", Description:="ID Orden Tesoreria")>
    Property lngID As Integer
        Get
            Return _lngID
        End Get
        Set(ByVal value As Integer)
            _lngID = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("lngID"))
        End Set
    End Property

    Private _strNroDocumento As String
    <Display(Name:="Nro Documento", Description:="Nro Documento")>
    Property strNroDocumento As String
        Get
            Return _strNroDocumento
        End Get
        Set(ByVal value As String)
            _strNroDocumento = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("strNroDocumento"))
        End Set
    End Property

    Private _strEstado As String
    <Display(Name:="Estado", Description:="Estado")>
    Property strEstado As String
        Get
            Return _strEstado
        End Get
        Set(ByVal value As String)
            _strEstado = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("strEstado"))
        End Set
    End Property

    Private _strIDComitente As String
    <Display(Name:="ID Comitente", Description:="ID Comitente")>
    Property strIDComitente As String
        Get
            Return _strIDComitente
        End Get
        Set(ByVal value As String)
            _strIDComitente = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("strIDComitente"))
        End Set
    End Property

    Private _strCodigoReceptor As String
    <Display(Name:="Código Receptor", Description:="Código Receptor")>
    Property strCodigoReceptor As String
        Get
            Return _strCodigoReceptor
        End Get
        Set(ByVal value As String)
            _strCodigoReceptor = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("strCodigoReceptor"))
        End Set
    End Property

    Private _strTipoProducto As String
    <Display(Name:="Tipo Producto", Description:="Tipo Producto")>
    Property strTipoProducto As String
        Get
            Return _strTipoProducto
        End Get
        Set(ByVal value As String)
            _strTipoProducto = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("strTipoProducto"))
        End Set
    End Property


    Public Event PropertyChanged(sender As Object, e As System.ComponentModel.PropertyChangedEventArgs) Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Public Sub New()

    End Sub
End Class