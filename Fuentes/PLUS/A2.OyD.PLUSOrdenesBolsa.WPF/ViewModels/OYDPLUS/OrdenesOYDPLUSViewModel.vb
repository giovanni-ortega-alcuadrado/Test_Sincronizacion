Imports Telerik.Windows.Controls
Imports System.ComponentModel
Imports System.Linq
Imports System.ComponentModel.DataAnnotations
Imports System.Collections.ObjectModel
Imports System.Windows.Data
Imports System.Web
Imports A2ControlMenu


Imports Microsoft.VisualBasic.CompilerServices
Imports A2.OyD.OYDServer.RIA.Web
Imports System.Globalization
Imports A2ComunesControl
Imports A2Utilidades.Mensajes
Imports A2MCCOREWPF
Imports A2.OyD.OYDServer.RIA.Web.OyDPLUSOrdenesBolsa
Imports System.Threading.Tasks
Imports A2.OyD.PLUSOrdenesBolsa
Imports OpenRiaServices.DomainServices.Client

Public Class OrdenesOYDPLUSViewModel
    Inherits A2ControlMenu.A2ViewModel


#Region "Inicialización"

    Public Sub New()
        Try
            '---------------------------------------------------------------------------------------------------------------------
            '-- Inicializar servicio de acceso a datos
            '---------------------------------------------------------------------------------------------------------------------
            If System.Diagnostics.Debugger.IsAttached And Program.ejecutarAppSegunAmbiente() Then
                dcProxy = New OYDPLUSOrdenesBolsaDomainContext()
                dcProxy1 = New OYDPLUSOrdenesBolsaDomainContext()
                dcProxy2 = New OYDPLUSOrdenesBolsaDomainContext()
                dcProxyConsulta = New OYDPLUSOrdenesBolsaDomainContext()
                dcProxyPlantilla = New OYDPLUSOrdenesBolsaDomainContext()

                mdcProxyUtilidad01 = New UtilidadesDomainContext()
                mdcProxyUtilidad02 = New UtilidadesDomainContext()
                mdcProxyUtilidad03 = New OYDPLUSUtilidadesDomainContext()

            Else
                dcProxy = New OYDPLUSOrdenesBolsaDomainContext(New System.Uri(Program.RutaServicioNegocio))
                dcProxy1 = New OYDPLUSOrdenesBolsaDomainContext(New System.Uri(Program.RutaServicioNegocio))
                dcProxy2 = New OYDPLUSOrdenesBolsaDomainContext(New System.Uri(Program.RutaServicioNegocio))
                dcProxyConsulta = New OYDPLUSOrdenesBolsaDomainContext(New System.Uri(Program.RutaServicioNegocio))
                dcProxyPlantilla = New OYDPLUSOrdenesBolsaDomainContext(New System.Uri(Program.RutaServicioNegocio))

                mdcProxyUtilidad01 = New UtilidadesDomainContext(New System.Uri(Program.RutaServicioUtilidadesOYD))
                mdcProxyUtilidad02 = New UtilidadesDomainContext(New System.Uri(Program.RutaServicioUtilidadesOYD))
                mdcProxyUtilidad03 = New OYDPLUSUtilidadesDomainContext(New System.Uri(Program.RutaServicioUtilidadesOYDPLUS))
            End If

            'Se realiza para aumentar el tiempo de consulta de ria y evitar el timeup en algunas consultas
            DirectCast(dcProxy.DomainClient, WebDomainClient(Of OYDPLUSOrdenesBolsaDomainContext.IOYDPLUSOrdenesBolsaDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)
            DirectCast(dcProxy1.DomainClient, WebDomainClient(Of OYDPLUSOrdenesBolsaDomainContext.IOYDPLUSOrdenesBolsaDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)
            DirectCast(dcProxy2.DomainClient, WebDomainClient(Of OYDPLUSOrdenesBolsaDomainContext.IOYDPLUSOrdenesBolsaDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)
            DirectCast(mdcProxyUtilidad01.DomainClient, WebDomainClient(Of UtilidadesDomainContext.IUtilidadesDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)
            DirectCast(mdcProxyUtilidad02.DomainClient, WebDomainClient(Of UtilidadesDomainContext.IUtilidadesDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)

            If System.Diagnostics.Debugger.IsAttached And Program.ejecutarAppSegunAmbiente() Then
                RF_TTV_Regreso = "4"
                RF_TTV_Salida = "3"
                RF_REPO = "RP"
                RF_Simulatena_Regreso = "2"
                RF_Simulatena_Salida = "1"
                RF_MERCADO_REPO = "E"
                RF_MERCADO_PRIMARIO = "P"
                RF_MERCADO_RENOVACION = "R"
                RF_MERCADO_SECUNDARIO = "S"

                TIPONEGOCIO_ACCIONES = "A"
                TIPONEGOCIO_RENTAFIJA = "C"
                TIPONEGOCIO_REPO = "R"
                TIPONEGOCIO_SIMULTANEA = "S"
                TIPONEGOCIO_TTV = "TTV"
                TIPONEGOCIO_ADR = "ADR"

                TIPONEGOCIO_TTVC = "TTVC"
                TIPONEGOCIO_REPOC = "RC"

                'Santiago Alexander Vergara Orrego - Mayo 15/2014 - Se añaden los tipos de negocio para otras firmas acciones y renta fija
                TIPONEGOCIO_ACCIONESOF = "AO"
                TIPONEGOCIO_RENTAFIJAOF = "CO"


                TIPOORDEN_DIRECTA = "D"
                TIPOORDEN_INDIRECTA = "I"

                TIPOMERCADO_PRECIO_ESPECIE = "M"
                TIPOMERCADO_PORLOMEJOR_PRECIO_ESPECIE = "P"
                CLASIFICACIONXDEFECTO = "O"
                TIPOLIMITEXDEFECTO = "M"
                CONDNEGOCIACIONXDEFECTO = "C"
                TIPOINVERSIONXDEFECTO = "N"
                EJECUCIONXDEFECTO = "N"
                DURACIONXDEFECTO = "I"
                MERCADOXDEFECTO = "S"
                DURACIONXDEFECTORENTAFIJA = "C"

                TIPOPRODUCTO_CUENTAPROPIA = "CP"

                VELOCIDAD_TEXTO = "0:00:40"
            Else
                RF_TTV_Regreso = RetornarValorProgram(Program.RF_TTV_Regreso, "4")
                RF_TTV_Salida = RetornarValorProgram(Program.RF_TTV_Salida, "3")
                RF_REPO = RetornarValorProgram(Program.RF_REPO, "RP")
                RF_Simulatena_Regreso = RetornarValorProgram(Program.RF_Simulatena_Regreso, "2")
                RF_Simulatena_Salida = RetornarValorProgram(Program.RF_Simulatena_Salida, "1")
                RF_MERCADO_REPO = RetornarValorProgram(Program.RF_Mercado_Repo, "E")
                RF_MERCADO_PRIMARIO = RetornarValorProgram(Program.RF_Mercado_Primario, "P")
                RF_MERCADO_RENOVACION = RetornarValorProgram(Program.RF_Mercado_Renovacion, "R")
                RF_MERCADO_SECUNDARIO = RetornarValorProgram(Program.RF_Mercado_Secundario, "S")

                TIPONEGOCIO_ACCIONES = RetornarValorProgram(Program.TN_Acciones, "A")
                TIPONEGOCIO_RENTAFIJA = RetornarValorProgram(Program.TN_Renta_Fija, "C")
                TIPONEGOCIO_REPO = RetornarValorProgram(Program.TN_REPO, "R")
                TIPONEGOCIO_SIMULTANEA = RetornarValorProgram(Program.TN_Simultaneas, "S")
                TIPONEGOCIO_TTV = RetornarValorProgram(Program.TN_TTV, "TTV")
                TIPONEGOCIO_ADR = RetornarValorProgram(Program.TN_ADR, "ADR")
                TIPONEGOCIO_TTVC = RetornarValorProgram(Program.TN_TTVC, "TTVC")
                TIPONEGOCIO_REPOC = RetornarValorProgram(Program.TN_REPOC, "RC")

                'Santiago Alexander Vergara Orrego - Mayo 15/2014 - Se añaden los tipos de negocio para otras firmas acciones y renta fija
                TIPONEGOCIO_ACCIONESOF = RetornarValorProgram(Program.TN_Acciones_OF, "AO")
                TIPONEGOCIO_RENTAFIJAOF = RetornarValorProgram(Program.TN_Renta_Fija_OF, "CO")

                TIPOORDEN_DIRECTA = RetornarValorProgram(Program.TO_Directa, "D")
                TIPOORDEN_INDIRECTA = RetornarValorProgram(Program.TO_Indirecta, "I")

                TIPOMERCADO_PRECIO_ESPECIE = RetornarValorProgram(Program.TM_PRECIO_ESPECIE, "M")
                TIPOMERCADO_PORLOMEJOR_PRECIO_ESPECIE = RetornarValorProgram(Program.TM_PORLOMEJOR_PRECIO_ESPECIE, "P")
                CLASIFICACIONXDEFECTO = RetornarValorProgram(Program.CLASIFICACIONXDEFECTO_ORDEN, "O")
                TIPOLIMITEXDEFECTO = RetornarValorProgram(Program.TIPOLIMITEXDEFECTO_ORDEN, "M")
                CONDNEGOCIACIONXDEFECTO = RetornarValorProgram(Program.CONDNEGOCIACIONXDEFECTO_ORDEN, "C")
                TIPOINVERSIONXDEFECTO = RetornarValorProgram(Program.TIPOINVERSIONXDEFECTO_ORDEN, "N")
                EJECUCIONXDEFECTO = RetornarValorProgram(Program.EJECUCIONXDEFECTO_ORDEN, "N")
                DURACIONXDEFECTO = RetornarValorProgram(Program.DURACIONXDEFECTO_ORDEN, "I")
                MERCADOXDEFECTO = RetornarValorProgram(Program.MERCADOXDEFECTO_ORDEN, "S")
                DURACIONXDEFECTORENTAFIJA = RetornarValorProgram(Program.DURACIONXDEFECTO_ORDEN_RENTAFIJA, "F")

                TIPOPRODUCTO_CUENTAPROPIA = RetornarValorProgram(Program.TIPOPRODUCTO_CUENTAPROPIA_ORDEN, "CP")

                VELOCIDAD_TEXTO = RetornarValorProgram(Program.VELOCIDADTEXTO_TICKER_ORDEN, "0:00:40")
            End If

            '---------------------------------------------------------------------------------------------------------------------
            '-- Definir tipo de orden que manejará el control
            '---------------------------------------------------------------------------------------------------------------------
            If Not Program.IsDesignMode() Then
                IsBusy = True

                'Lista que se utiliza para filtrar las ordenes que se encuentren aprobadas y pendientes por aprobar
                ListaDatos = New List(Of String)
                ListaDatos.Add(VISTA_APROBADAS)
                ListaDatos.Add(VISTA_PENDIENTESAPROBAR)

                'Se calcula la fecha de cierre.
                mdtmFechaCierreSistema = DateAdd(DateInterval.Year, -5, Now()).Date

                'Consulta el tipo de negocio completos.
                CargarTipoNegocioReceptor("INICIO", String.Empty, _Modulo)

                'Consultar los precios del mercado para activar el ticker.
                CargarMensajeDinamicoOYDPLUS("PRECIOSMERCADO", String.Empty, String.Empty, String.Empty)

                viewFormaOrdenes = New FormaOrdenesView(Me)

                dcProxy.Load(dcProxy.CombinacionTipoLimiteConsultarQuery(Program.Usuario), AddressOf TerminoTraerCombinacionesTipoLimite, String.Empty)
            End If

            HabilitarEspecieCumplimiento = False

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la creación de los objetos",
                                 Me.ToString(), "OrdenesOYDPLUSViewModel.New", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Property MostrarCalculando As Visibility

    Private Function RetornarValorProgram(ByVal strProgram As String, ByVal strRetornoOpcional As String)
        Dim objRetorno As String = String.Empty

        If Not String.IsNullOrEmpty(strProgram) Then
            objRetorno = strProgram
        Else
            objRetorno = strRetornoOpcional
        End If

        Return objRetorno
    End Function

#End Region

#Region "Eventos publicos"

    Public Event TerminoConfigurarNuevoRegistro()
    Public Event TerminoConfigurarReceptor()
    Public Event TerminoConfigurarCliente()
    Public Event TerminoConfigurarEspecie()
    Public Event TerminoConfigurarConErrores(ByVal pstrTipoError As String)
    Public Event TerminoGuardarRegistro(ByVal plogGuardoRegistro As Boolean, ByVal plngIDOrden As Integer)

#End Region

#Region "Propiedades Ordenes OYDPLUS"

#Region "Propiedades Vistas Datos"
    Private _MensajeComision As String = String.Empty
    Public Property MensajeComision() As String
        Get
            Return _MensajeComision
        End Get
        Set(ByVal value As String)
            _MensajeComision = value
            MyBase.CambioItem("MensajeComision")
        End Set
    End Property
    Private _MostrarMensajeComision As Visibility = Visibility.Collapsed
    Public Property MostrarMensajeComision() As Visibility
        Get
            Return _MostrarMensajeComision
        End Get
        Set(ByVal value As Visibility)
            _MostrarMensajeComision = value
            MyBase.CambioItem("MostrarMensajeComision")
        End Set
    End Property
    Private _ListaDatos As List(Of String)
    Public Property ListaDatos() As List(Of String)
        Get
            Return _ListaDatos
        End Get
        Set(ByVal value As List(Of String))
            _ListaDatos = value
            MyBase.CambioItem("ListaDatos")
        End Set
    End Property

    Private _VistaSeleccionada As String
    Public Property VistaSeleccionada() As String
        Get
            Return _VistaSeleccionada
        End Get
        Set(ByVal value As String)
            _VistaSeleccionada = value
            NombreDescripcion = "Cliente"

            If Not String.IsNullOrEmpty(VistaSeleccionada) And logRefrescarconsultaCambioTab Then
                Dim strEstadoFiltro As String = String.Empty

                If VistaSeleccionada <> VISTA_PENDIENTESCRUZAR Then
                    HabilitarBotonesCruzada = False
                    If VistaSeleccionada = VISTA_PENDIENTESAPROBAR Then
                        strEstadoFiltro = "D"
                    Else
                        strEstadoFiltro = "P"
                    End If

                    FiltrarRegistrosOYDPLUS(strEstadoFiltro, String.Empty, "CAMBIO TAB")
                Else
                    HabilitarBotonesCruzada = True
                    NombreDescripcion = "Receptor"

                    FiltrarOrdenesCruzadasOYDPLUS("CAMBIO TAB")
                End If
            End If
            MyBase.CambioItem("VistaSeleccionada")
        End Set
    End Property

    Private _DiccionarioBotonesOrdenes As Dictionary(Of String, BotonMenu)
    Public Property DiccionarioBotonesOrdenes() As Dictionary(Of String, BotonMenu)
        Get
            Return _DiccionarioBotonesOrdenes
        End Get
        Set(ByVal value As Dictionary(Of String, BotonMenu))
            _DiccionarioBotonesOrdenes = value
            MyBase.CambioItem("DiccionarioBotonesOrdenes")
        End Set
    End Property

    Private _IsBusyCalculos As Boolean
    Public Property IsBusyCalculos() As Boolean
        Get
            Return _IsBusyCalculos
        End Get
        Set(ByVal value As Boolean)
            _IsBusyCalculos = value
            MyBase.CambioItem("IsBusyCalculos")
        End Set
    End Property
#End Region

#Region "Variables"

    Private dcProxy As OYDPLUSOrdenesBolsaDomainContext
    Private dcProxy1 As OYDPLUSOrdenesBolsaDomainContext
    Private dcProxy2 As OYDPLUSOrdenesBolsaDomainContext
    Private dcProxyConsulta As OYDPLUSOrdenesBolsaDomainContext
    Private dcProxyPlantilla As OYDPLUSOrdenesBolsaDomainContext
    Private mdcProxyUtilidad01 As UtilidadesDomainContext
    Private mdcProxyUtilidad02 As UtilidadesDomainContext
    Private mdcProxyUtilidad03 As OYDPLUSUtilidadesDomainContext

    Dim logConsultarCliente As Boolean = True
    Public logOrdenDIRECTA_RENTAFIJA As Boolean = False
    Public UbicacionTituloDirecta As String = String.Empty
    Public logNuevoRegistro As Boolean = False
    Public logEditarRegistro As Boolean = False
    Dim logCancelarRegistro As Boolean = False
    Public logDuplicarRegistro As Boolean = False
    Dim logPlantillaRegistro As Boolean = False
    Public logModificarDatosTipoNegocio As Boolean = True

    Dim logPreguntarOrdenCruzada As Boolean = False
    Dim logRealizarConsultaPropiedades As Boolean = False
    Dim strMensajeValidacion As String = String.Empty
    Public mdtmFechaCierreSistema As Date
    Dim cantidadTotalConfirmacion As Integer = 0
    Dim cantidadTotalJustificacion As Integer = 0
    Dim CantidadTotalAprobaciones As Integer = 0
    Public logCalcularValores As Boolean = False
    Public logDiasCumplimiento As Boolean = False

    Dim logCambiarConsultaSAE As Boolean = True
    Dim logCambiarConsultaPortafolio As Boolean = True
    Dim logCambiarConsultaOperaciones As Boolean = True
    Dim logCambiarConsultaSaldo As Boolean = True
    Dim intIDOrdenTimer As Integer = 0
    Dim intIDOrdenGuardada As Integer = 0
    Dim strEstadoUltimoGuardado As String = ""
    Dim logRefrescarconsultaCambioTab As Boolean = True
    Dim logCrearOrdenCruzadaCliente As Boolean = False
    Public logOrdenCruzada As Boolean = False
    Dim logCambiarDetallesOrden As Boolean = True
    Dim logCambiarSelected As Boolean = True
    Dim logMostrarValorPorDefecto As Boolean = True
    Dim logliqAsociadas As Boolean = False 'Ajuste para evitar editar algunos campos si la orden ya tiene liquidaciones Operacion
    Dim logMostrarIsines As Boolean = False
    Dim strEspecieDirecta As String = String.Empty
    Dim dtmFechaEmisionDirecta As Nullable(Of DateTime)
    Dim dtmFechaVencimientoDirecta As Nullable(Of DateTime)
    Dim strModalidadDirecta As String = String.Empty
    Dim logMostrarIsinesCorresponden As Boolean = False 'Cuando es Directa y las opereaciones corresponden a mas de 1 ISIN correcto
    Dim logDuplicarParametro As Boolean = False '
    Dim logDuplicarParametroAceptar As Boolean = False '
    Dim FechaDuplicaParametro As Nullable(Of DateTime)
    Private _mlogEsOrdenOYDPLUS As Boolean = False
    Dim ActivoExento As String = ""
    Dim EsBono As Boolean = False

    'Julian Rincón (Alcuadrado S.A)
    Dim logCambiarPropiedad As Boolean = True
    ''' <summary>
    ''' Indica si se está trabajando con órdenes de OYD PLUS
    ''' </summary>
    Public ReadOnly Property EsOrdenOYDPLUS As Boolean
        Get
            Return (_mlogEsOrdenOYDPLUS)
        End Get
    End Property

    Dim strNombrePlantilla As String = String.Empty
    Dim viewNombrePlantilla As NombrePlantillaOYDPLUSView

    Dim intCantidadMaximaDetalles As Integer = 30
    Dim dblValorIva As Double = 0
    Dim dblValorBase As Double = 0
    Dim dblValorBaseRepo As Double = 0

    Dim viewFormaOrdenes As FormaOrdenesView = Nothing
    Public logCargoForma As Boolean = False

    'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
    'JUAN DAVID CORREA MARZO 2015
    Public objTipoCalculo As String = String.Empty
    Public strEventoDefecto_ACCIONES As String = String.Empty
    Public strEventoDefecto_RENTAFIJA As String = String.Empty
    Public strEventoDefecto_RENTAFIJA_ORDENDIRECTA As String = String.Empty
    Public strEventoDefecto_RENTAFIJA_CRUZADA As String = String.Empty
    Public strEventoDefecto_RENTAFIJA_ENPESOS As String = String.Empty
    Public strEventoDefecto_SIMULTANEA As String = String.Empty
    Public strEventoDefecto_SIMULTANEA_ORDENDIRECTA As String = String.Empty
    Public strEventoDefecto_REPO As String = String.Empty
    Public strEventoDefecto_REPORENTAFIJA As String = String.Empty
    Public strEventoDefecto_REPO_ENPESOS As String = String.Empty
    Public strEventoDefecto_REPORENTAFIJA_ENPESOS As String = String.Empty
    Public strEventoDefecto_TTV As String = String.Empty
    Public strEventoDefecto_TTVRENTAFIJA As String = String.Empty
    Dim strValorDefectoFormaPago As String = String.Empty
    Public dtmFechaServidor As DateTime

    Dim logLlevarPrecioPortafolio As Boolean = True
    Dim logLlevarFechaActualRecepcion As Boolean = True
    Dim logLlevarHoraActualRecepcion As Boolean = True

    Dim FechaCancelacionValidada As Nullable(Of DateTime) = Date.Now.Date

    Dim strReceptorId_Cruzada As String = String.Empty
    Dim strNombreReceptor_Cruzada As String = String.Empty

    Dim strRealizarTipoCalculoEspecialREPO As String = "NO"
    Dim strUtilizarPrecioMaximoMinimoCalculo As String = "SI"
    Dim logLlevarPorDefectoReceptorTomaDeReceptor As Boolean = False
    Dim logLlevarPorDefectoUsuarioOperador As Boolean = False
    Dim logCambiarFechaRecepcion As Boolean = True
    Dim logCalcularDiasPlazo As Boolean = True
    Dim logHabilitarCondicionesTipoProductoCuentaPropia As Boolean = False
    Dim strTiposProductoPosicionPropia As String = ""
    Dim strMensajeValidacionMotor As String = ""

    Dim intDiasDefectoCumplimientoAcciones As Integer = 3
    Dim intDiasDefectoCumplimientoRentaFija As Integer = 1
    Dim logHabilitarMensajeCaracteristicasFaciales As Boolean = False
    Dim dblValorConsultadoPrecioSAE As Double = 0
    Dim dblValorConsultadoPorcentajeGarantia As Double = 0

    Dim intCantidadMensajeValidacionFechaCumplimiento As Integer = 0
    Public logPreguntoAsociacion = False 'Ajuste para cuando se Edita eliminando Asociacion Probable JDOL 20180901
    Public logEliminarAsociacion = False 'Ajuste para cuando se Edita eliminando Asociacion Probable JDOL 20180901
    Dim LiquidacionesAsociadasEditar = String.Empty 'Ajuste para cuando se Edita eliminando Asociacion Probable GUARDAR MEMORIA JDOL 20180901
    Public dblCantidadAnterior As Double = 0
    Public dblPrecioAnterior As Double = 0
    Public strParametroBaseComercialCaptacionRepo As String = ""
    Public strTiposNegocioHabilitadosNuevoRegistro As String = ""
    Public logLimpiarDatosNegociacionCambioNemotecnico As Boolean = True
    Public logRecalcularDatosNegociacion As Boolean = True
    Public strUltimaAccionBusquedaFiltro As String = String.Empty
    Public strEstadoUltimaBusqueda As String = String.Empty
    Public objValoresEnviadosUltimaModificacion As CamposBusquedaOrdenOYDPLUS = New CamposBusquedaOrdenOYDPLUS()
    Public logCalculosValoresBancolombia As Boolean = False
    'VARIABLES CREADAS PARA MANEJAR EL MODAL
    Public logEsModal As Boolean = False
#End Region

#Region "Constantes"

    Private MINT_LONG_MAX_CODIGO_OYD As Byte = 17
    Private MINT_LONG_MAX_NEMOTECNICO As Byte = 15
    Public MSTR_CALCULAR_DIAS_ORDEN As String = "vencimiento_orden"
    Public MSTR_CALCULAR_DIAS_PLAZO As String = "vencimiento_orden_plazo"
    Public MSTR_CALCULAR_FECHA_CUMPLIMIENTO_DE_DIAS As String = "dias_cumplimiento"
    Public MSTR_CALCULAR_CUMPLIMIENTO_ORDEN As String = "fechacumplimiento_orden"
    Friend Const MSTR_CALCULAR_DIAS_TITULO As String = "vencimiento_titulo"
    Private Const MSTR_ACCION_CALCULAR_DIAS As String = "dias"
    Private Const MSTR_ACCION_VALIDACION_GUARDADO_ORDEN As String = "guardado_orden"
    Private Const MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO As String = "guardado_orden_fechacumplimiento"
    Private Const MSTR_ACCION_CALCULAR_FECHA As String = "fecha"

    Private RF_TTV_Regreso As String = ""
    Private RF_TTV_Salida As String = ""
    Private RF_REPO As String = ""
    Private RF_Simulatena_Regreso As String = ""
    Private RF_Simulatena_Salida As String = ""

    Private RF_MERCADO_REPO As String = ""
    Private RF_MERCADO_PRIMARIO As String = ""
    Private RF_MERCADO_RENOVACION As String = ""
    Private RF_MERCADO_SECUNDARIO As String = ""

    Public TIPONEGOCIO_ACCIONES As String = ""
    Public TIPONEGOCIO_REPO As String = ""
    Public TIPONEGOCIO_SIMULTANEA As String = ""
    Public TIPONEGOCIO_RENTAFIJA As String = ""
    Public TIPONEGOCIO_TTV As String = ""
    Public TIPONEGOCIO_ADR As String = ""
    'Juan David Osorio Legarda - Mayo 22/2015 - Se añaden los tipos de negocio para Cambios TTV Renta Fija y Repo Renta Fija

    Public TIPONEGOCIO_REPOC As String = ""
    Public TIPONEGOCIO_TTVC As String = ""

    'Santiago Alexander Vergara Orrego - Mayo 15/2014 - Se añaden los tipos de negocio para otras firmas acciones y renta fija
    Public TIPONEGOCIO_ACCIONESOF As String = ""
    Public TIPONEGOCIO_RENTAFIJAOF As String = ""

    Public TIPOORDEN_DIRECTA As String = ""
    Public TIPOORDEN_INDIRECTA As String = ""

    Private CLASE_ACCIONES As String = "A"
    Private CLASE_RENTAFIJA As String = "C"

    Public TIPOOPERACION_COMPRA As String = "C"
    Public TIPOOPERACION_VENTA As String = "V"
    Public TIPOOPERACION_RECOMPRA As String = "R"
    Public TIPOOPERACION_REVENTA As String = "S"

    Private TIPOTASA_VARIABLE As String = "V"
    Private TIPOTASA_FIJA As String = "F"
    Private INDICADOR_TASA_FIJA As String = "0"

    Private ESTADOORDEN_PENDIENTE As String = "P"
    Private ESTADOORDENLEO_RECIBIDA As String = "R"
    Private ESTADOORDENLEO_LANZADA As String = "L"

    Private ESTADOPENDIENTE_CONSULTA As String = "D"
    Private ESTADOAPROBADA_CONSULTA As String = "P"

    Private TIPOMERCADO_PRECIO_ESPECIE As String = ""
    Private TIPOMERCADO_PORLOMEJOR_PRECIO_ESPECIE As String = ""
    Private CLASIFICACIONXDEFECTO As String = ""
    Private TIPOLIMITEXDEFECTO As String = ""
    Private CONDNEGOCIACIONXDEFECTO As String = ""
    Private TIPOINVERSIONXDEFECTO As String = ""
    Private EJECUCIONXDEFECTO As String = ""
    Private DURACIONXDEFECTO As String = ""
    Private MERCADOXDEFECTO As String = ""
    Private DURACIONXDEFECTORENTAFIJA As String = ""

    Private DURACION_HASTAHORA As String = "A"
    Private DURACION_DIA As String = "D"
    Private DURACION_INMEDIATA As String = "I"
    Private DURACION_SESSION As String = "S"
    Private DURACION_CANCELACION As String = "C"
    Private DURACION_FECHA As String = "F"

    Private TIPOPRODUCTO_CUENTAPROPIA As String = ""

    Public MSTR_MODULO_OYD_ORDENES As String = "O"

    Public OPCION_ORDENCRUZADA As String = "ORDENCRUZADA"

    Private VELOCIDAD_TEXTO As String = ""

    Private STR_URLMOTORCALCULOS As String = ""
    Private LOG_HACERLOGMOTORCALCULOS As Boolean = False
    Private STR_RUTALOGMOTORCALCULOS As String = ""
    Private LOG_BORRARCAMPOSLEO As Boolean = False


    Private Const VISTA_APROBADAS As String = "Aprobadas"
    Private Const VISTA_PENDIENTESAPROBAR As String = "Pendientes aprobar"
    Private Const VISTA_PENDIENTESCRUZAR As String = "Pendientes por cruzar"

    Private Const MOD_BOLSA As String = "ORDENES"
    Private Const MOD_OTRAS_FIRMAS As String = "ORDENES_OF"

    Private Const OPCION_EDITAR As String = "EDITAR"
    Private Const OPCION_DUPLICAR As String = "DUPLICAR"
    Private Const OPCION_TIPONEGOCIO As String = "TIPONEGOCIO"
    Private Const OPCION_RECEPTOR As String = "RECEPTOR"
    Private Const OPCION_TIPOOPERACION As String = "TIPOOPERACION"
    Private Const OPCION_PLANTILLA As String = "PLANTILLA"
    Private Const OPCION_CREARORDENPLANTILLA As String = "CREARORDENPLANTILLA"
    Private Const OPCION_COMBOSRECEPTOR As String = "COMBOSRECEPTOR"
    Private Const OPCION_DATOSNEGOCIACION As String = "DATOSNEGOCIACION"
    Private Const OPCION_DATOSNEGOCIACIONESPECIE As String = "DATOSNEGOCIACIONESPECIE"
    Public Const OPCION_CANTIDAD As String = "CANTIDAD"
    Public Const OPCION_ENPESOS As String = "ENPESOS"

    Public Const STR_TOPICO_INST_ORDENES_COMPRA As String = "INST_ORDENES_C"
    Public Const STR_TOPICO_INST_ORDENES_VENTA As String = "INST_ORDENES_V"
    Public Const MSTR_TITULO_INSTRUCCION_MODIFICAR As String = "Mod Instr."

    Private Enum TIPOMENSAJEUSUARIO
        CONFIRMACION
        JUSTIFICACION
        APROBACION
        TODOS
    End Enum

    'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
    'JUAN DAVID CORREA MARZO 2015
    Public Enum TIPOCALCULOS_MOTOR
        CANTIDAD
        PRECIO
        PRECIOMAXIMOMINIMO
        TASAREGISTRO
        TASACLIENTE
        COMISION
        VALORCOMISION
        VALORNETO
        VALORCAPTACION
    End Enum

#End Region

#Region "Propiedades de la busqueda"

    Public Property cb As CamposBusquedaOrdenOYDPLUS

#End Region

#Region "Propiedades para el Tipo de Orden"

    Private _mlogEsOrdenRENTAFIJAOYDPLUS As Boolean = False
    ''' <summary>
    ''' Indica si se está trabajando con órdenes de renta variable (true) o no (false)
    ''' </summary>
    Public ReadOnly Property EsOrdenRENTAFIJAOYDPLUS As Boolean
        Get
            Return (_mlogEsOrdenRENTAFIJAOYDPLUS)
        End Get
    End Property

    Private _ListaOrdenOYDPLUS As List(Of OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
    Public Property ListaOrdenOYDPLUS() As List(Of OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Get
            Return _ListaOrdenOYDPLUS
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.OrdenOYDPLUS))
            _ListaOrdenOYDPLUS = value
            MyBase.CambioItem("ListaOrdenOYDPLUS")
            MyBase.CambioItem("ListaOrdenesOYDPLUSPaged")
            If Not IsNothing(_ListaOrdenOYDPLUS) Then
                If _ListaOrdenOYDPLUS.Count > 0 And logCambiarSelected Then
                    OrdenOYDPLUSSelected = _ListaOrdenOYDPLUS.FirstOrDefault
                End If
            End If
        End Set
    End Property

    Private _strAgruparPorColumna As String
    Public Property AgruparPorColumna() As String
        Get
            Return _strAgruparPorColumna
        End Get
        Set(ByVal value As String)
            _strAgruparPorColumna = value
            ListaOrdenesOYDPLUSPaged.GroupDescriptions.Clear()
            ListaOrdenesOYDPLUSPaged.GroupDescriptions.Add(New PropertyGroupDescription(value))
            MyBase.CambioItem("AgruparPorColumna")
        End Set
    End Property

    Public ReadOnly Property ListaOrdenesOYDPLUSPaged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaOrdenOYDPLUS) Then
                Dim view = New PagedCollectionView(_ListaOrdenOYDPLUS)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private _OrdenDataForm As OyDPLUSOrdenesBolsa.OrdenOYDPLUS = New OyDPLUSOrdenesBolsa.OrdenOYDPLUS
    Public Property OrdenDataForm() As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
        Get
            Return _OrdenDataForm
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
            _OrdenDataForm = value
            MyBase.CambioItem("OrdenDataForm")
        End Set
    End Property

    Private WithEvents _OrdenOYDPLUSSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
    Public Property OrdenOYDPLUSSelected() As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
        Get
            Return _OrdenOYDPLUSSelected
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
            _OrdenOYDPLUSSelected = value
            MyBase.CambioItem("OrdenOYDPLUSSelected")
            BuscarControlValidacion(ViewOrdenesOYDPLUS, "tabItemValoresComisiones")
            Try
                If Not IsNothing(_OrdenOYDPLUSSelected) Then

                    If (logNuevoRegistro = False Or logEditarRegistro = False) And logCambiarDetallesOrden Then
                        HabilitarCamposOYDPLUS(_OrdenOYDPLUSSelected)

                        consultarClaseEspecie("CAMBIOITEM")

                        ' CalcularDiasPlazo(_OrdenOYDPLUSSelected)
                        CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_ORDEN, _OrdenOYDPLUSSelected, -1)

                        'Obtiene los receptores de la orden
                        If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Clase) Then
                            'Buscar el cliente de la orden.
                            'BuscarClienteOYDPLUS(_OrdenOYDPLUSSelected.IDComitente, String.Empty)

                            'Buscar los receptores de la orden.
                            consultarReceptoresOrden(_OrdenOYDPLUSSelected.Clase, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.NroOrden, _OrdenOYDPLUSSelected.Version, _OrdenOYDPLUSSelected.EstadoOrden)

                            'Buscar los beneficiarios de la orden.
                            consultarBeneficiariosOrden()

                            'Buscar las liquidaciones de la orden.
                            consultarLiquidacionesOrden()

                            'Buscar las liquidaciones probables de la orden.
                            consultarLiqProbablesOrden()

                            'Consultar Saldo de la Orden
                            ConsultarSaldoOrdenSAE()

                            'Consulta el enrutamiento de ordenes
                            consultarEnrutamientoOrden()

                            'Obtiene el numero de días de la orden.

                            'Obtiene las cuentas del cliente para las instrucciones
                            consultarCuentasCliente(_OrdenOYDPLUSSelected.IDComitente)

                            'Obtiene las instrucciones de la orden
                            consultarInstruccionesOrden()

                            If _OrdenOYDPLUSSelected.OrdenCruzadaReceptor Or _OrdenOYDPLUSSelected.OrdenCruzadaCliente Or _OrdenOYDPLUSSelected.OrdenCruzada And logOrdenCruzada = False Then
                                If _OrdenOYDPLUSSelected.OrdenCruzadaReceptor Or _OrdenOYDPLUSSelected.OrdenCruzadaCliente Then
                                    'Obtener los receptores de la orden cruzada
                                    ConsultarReceptoresOrdenCruzada(_OrdenOYDPLUSSelected.IDNroOrden, IIf(VistaSeleccionada = VISTA_PENDIENTESAPROBAR, True, False))
                                End If

                                'Consulta las ordenes cruzadas de la orden
                                If _OrdenOYDPLUSSelected.OrdenCruzada Then
                                    ConsultarOrdenesCruzadas(_OrdenOYDPLUSSelected.IDNroOrden, False, String.Empty)
                                Else
                                    ConsultarOrdenesCruzadas(_OrdenOYDPLUSSelected.IDNroOrden, True, String.Empty)
                                End If
                            End If

                            If Not IsNothing(_DiccionarioCombosOYDPlus) Then
                                Dim strTipoOperacion As String = _OrdenOYDPLUSSelected.TipoOperacion
                                Dim strNombreTipoOperacion As String = _OrdenOYDPLUSSelected.NombreTipoOperacion

                                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or
                                    _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or
                                    _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                                    DiccionarioCombosOYDPlus("TIPOOPERACION") = ExtraerListaPorCategoria(DiccionarioCombosOYDPlus, "TIPOOPERACIONGENERAL", "TIPOOPERACION")
                                ElseIf _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Then
                                    DiccionarioCombosOYDPlus("TIPOOPERACION") = ExtraerListaPorCategoria(DiccionarioCombosOYDPlus, "TIPOOPERACIONREPO", "TIPOOPERACION")
                                ElseIf _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                                       _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                    If _OrdenOYDPLUSSelected.Clasificacion = "3" Then
                                        DiccionarioCombosOYDPlus("TIPOOPERACION") = ExtraerListaPorCategoria(DiccionarioCombosOYDPlus, "TIPOOPERACIONTTV", "TIPOOPERACION")
                                    Else
                                        DiccionarioCombosOYDPlus("TIPOOPERACION") = ExtraerListaPorCategoria(DiccionarioCombosOYDPlus, "TIPOOPERACIONTTVREGRESO", "TIPOOPERACION")
                                    End If
                                ElseIf _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                                    If _OrdenOYDPLUSSelected.Clasificacion = "1" Then
                                        DiccionarioCombosOYDPlus("TIPOOPERACION") = ExtraerListaPorCategoria(DiccionarioCombosOYDPlus, "TIPOOPERACIONSIMULTANEA", "TIPOOPERACION")
                                    Else
                                        DiccionarioCombosOYDPlus("TIPOOPERACION") = ExtraerListaPorCategoria(DiccionarioCombosOYDPlus, "TIPOOPERACIONSIMULTANEAREGRESO", "TIPOOPERACION")
                                    End If
                                End If

                                If DiccionarioCombosOYDPlus("TIPOOPERACION").Where(Function(i) i.Retorno = strTipoOperacion).Count > 0 Then
                                    strNombreTipoOperacion = DiccionarioCombosOYDPlus("TIPOOPERACION").Where(Function(i) i.Retorno = strTipoOperacion).First.Descripcion
                                End If

                                logCalcularValores = False
                                MyBase.CambioItem("DiccionarioCombosOYDPlus")

                                _OrdenOYDPLUSSelected.TipoOperacion = String.Empty
                                _OrdenOYDPLUSSelected.TipoOperacion = strTipoOperacion
                                _OrdenOYDPLUSSelected.NombreTipoOperacion = String.Empty
                                _OrdenOYDPLUSSelected.NombreTipoOperacion = strNombreTipoOperacion
                                logCalcularValores = True
                            End If
                        Else
                            IsBusy = False
                        End If
                    End If
                End If
            Catch ex As Exception
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al realizar las consultas de la orden.",
                                Me.ToString(), "OrdenOYDPLUSSelected", Application.Current.ToString(), Program.Maquina, ex)
                IsBusy = False
            End Try
        End Set
    End Property

    Public Property OrdenAnterior As Object

    Private _OrdenAnteriorOYDPLUS As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
    Public Property OrdenAnteriorOYDPLUS() As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
        Get
            Return _OrdenAnteriorOYDPLUS
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
            _OrdenAnteriorOYDPLUS = value
        End Set
    End Property

    Private _OrdenDuplicarOYDPLUS As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
    Public Property OrdenDuplicarOYDPLUS() As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
        Get
            Return _OrdenDuplicarOYDPLUS
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
            _OrdenDuplicarOYDPLUS = value
        End Set
    End Property

    Private _OrdenPlantillaOYDPLUS As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
    Public Property OrdenPlantillaOYDPLUS() As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
        Get
            Return _OrdenPlantillaOYDPLUS
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
            _OrdenPlantillaOYDPLUS = value
        End Set
    End Property

    Private _ListaDistribucionComisionSalvar As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
    Public Property ListaDistribucionComisionSalvar() As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
        Get
            Return _ListaDistribucionComisionSalvar
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden))
            _ListaDistribucionComisionSalvar = value
        End Set
    End Property

    Private _ListaReceptoresSalvar As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
    Public Property ListaReceptoresSalvar() As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
        Get
            Return _ListaReceptoresSalvar
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden))
            _ListaReceptoresSalvar = value
        End Set
    End Property

    Private _ViewOrdenesOYDPLUS As OrdenesPLUSView
    Public Property ViewOrdenesOYDPLUS() As OrdenesPLUSView
        Get
            Return _ViewOrdenesOYDPLUS
        End Get
        Set(ByVal value As OrdenesPLUSView)
            _ViewOrdenesOYDPLUS = value
        End Set
    End Property

    Private _BusquedaOrdenOyDPlus As CamposBusquedaOrdenOYDPLUS = New CamposBusquedaOrdenOYDPLUS
    Public Property BusquedaOrdenOyDPlus() As CamposBusquedaOrdenOYDPLUS
        Get
            Return _BusquedaOrdenOyDPlus
        End Get
        Set(ByVal value As CamposBusquedaOrdenOYDPLUS)
            _BusquedaOrdenOyDPlus = value
            MyBase.CambioItem("BusquedaOrdenOyDPlus")
        End Set
    End Property

#End Region

#Region "Propiedades Tipo Negocio"

    Private _ListaTipoNegocioCOMPLETOS As List(Of OYDPLUSUtilidades.tblTipoNegocioReceptor)
    Public Property ListaTipoNegocioCOMPLETOS() As List(Of OYDPLUSUtilidades.tblTipoNegocioReceptor)
        Get
            Return _ListaTipoNegocioCOMPLETOS
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblTipoNegocioReceptor))
            _ListaTipoNegocioCOMPLETOS = value
            MyBase.CambioItem("ListaTipoNegocioCOMPLETOS")
        End Set
    End Property

    Private _ListaTipoNegocio As List(Of OYDPLUSUtilidades.tblTipoNegocioReceptor)
    Public Property ListaTipoNegocio() As List(Of OYDPLUSUtilidades.tblTipoNegocioReceptor)
        Get
            Return _ListaTipoNegocio
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblTipoNegocioReceptor))
            _ListaTipoNegocio = value
            MyBase.CambioItem("ListaTipoNegocio")
        End Set
    End Property

    Private _TipoNegocioSelected As OYDPLUSUtilidades.tblTipoNegocioReceptor
    Public Property TipoNegocioSelected() As OYDPLUSUtilidades.tblTipoNegocioReceptor
        Get
            Return _TipoNegocioSelected
        End Get
        Set(ByVal value As OYDPLUSUtilidades.tblTipoNegocioReceptor)
            _TipoNegocioSelected = value
            If Not IsNothing(TipoNegocioSelected) Then
                If Not IsNothing(_OrdenOYDPLUSSelected) Then
                    If logNuevoRegistro Or logEditarRegistro Then
                        If logModificarDatosTipoNegocio Then
                            If TipoNegocioSelected.PorcentajeComision > 0 Then
                                If TipoNegocioSelected.CodigoTipoNegocio = TIPONEGOCIO_ACCIONES Or
                                    TipoNegocioSelected.CodigoTipoNegocio = TIPONEGOCIO_ADR Then
                                    ValidarTipoCalculoDefecto(False, TipoNegocioSelected.CodigoTipoNegocio, False, True, TIPOCALCULOS_MOTOR.COMISION.ToString)
                                Else
                                    ValidarTipoCalculoDefecto(False, String.Empty)
                                End If

                                _OrdenOYDPLUSSelected.Comision = TipoNegocioSelected.PorcentajeComision
                            ElseIf TipoNegocioSelected.ValorComision > 0 Then
                                If TipoNegocioSelected.CodigoTipoNegocio = TIPONEGOCIO_ACCIONES Or
                                    TipoNegocioSelected.CodigoTipoNegocio = TIPONEGOCIO_ADR Then
                                    ValidarTipoCalculoDefecto(False, TipoNegocioSelected.CodigoTipoNegocio, False, True, TIPOCALCULOS_MOTOR.VALORCOMISION.ToString)
                                Else
                                    ValidarTipoCalculoDefecto(False, String.Empty)
                                End If

                                _OrdenOYDPLUSSelected.ValorComision = TipoNegocioSelected.ValorComision
                            Else
                                ValidarTipoCalculoDefecto(False, String.Empty)
                            End If
                        End If
                    End If
                End If
            End If

            MyBase.CambioItem("TipoNegocioSelected")
        End Set
    End Property


#End Region

#Region "Propiedades para el Ordenante"

    Private _ListaOrdenantesOYDPLUS As List(Of OYDUtilidades.BuscadorOrdenantes)
    Public Property ListaOrdenantesOYDPLUS As List(Of OYDUtilidades.BuscadorOrdenantes)
        Get
            Return (_ListaOrdenantesOYDPLUS)
        End Get
        Set(ByVal value As List(Of OYDUtilidades.BuscadorOrdenantes))
            _ListaOrdenantesOYDPLUS = value
            MyBase.CambioItem("ListaOrdenantesOYDPLUS")
            If Not IsNothing(ListaOrdenantesOYDPLUS) Then
                If logNuevoRegistro = False And logEditarRegistro = False Then
                    If ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = _OrdenOYDPLUSSelected.IDOrdenante).Count > 0 Then
                        OrdenanteSeleccionadoOYDPLUS = ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = _OrdenOYDPLUSSelected.IDOrdenante).FirstOrDefault
                    End If
                Else
                    If ListaOrdenantesOYDPLUS.Count = 1 Then
                        OrdenanteSeleccionadoOYDPLUS = ListaOrdenantesOYDPLUS.FirstOrDefault
                    Else
                        If ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = _OrdenOYDPLUSSelected.IDOrdenante).Count > 0 Then
                            OrdenanteSeleccionadoOYDPLUS = ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = _OrdenOYDPLUSSelected.IDOrdenante).FirstOrDefault
                        End If
                    End If
                End If
            End If
        End Set
    End Property

    Private _mobjOrdenanteSeleccionadoOYDPLUS As OYDUtilidades.BuscadorOrdenantes
    Public Property OrdenanteSeleccionadoOYDPLUS() As OYDUtilidades.BuscadorOrdenantes
        Get
            Return (_mobjOrdenanteSeleccionadoOYDPLUS)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorOrdenantes)
            _mobjOrdenanteSeleccionadoOYDPLUS = value
            If Not IsNothing(OrdenanteSeleccionadoOYDPLUS) Then
                If logEditarRegistro Or logNuevoRegistro Then
                    If Not IsNothing(_OrdenOYDPLUSSelected) Then
                        _OrdenOYDPLUSSelected.IDOrdenante = OrdenanteSeleccionadoOYDPLUS.IdOrdenante
                    End If
                End If
            End If
            MyBase.CambioItem("OrdenanteSeleccionadoOYDPLUS")
        End Set
    End Property

#End Region

#Region "Propiedades para las cuentas deposito"

    Private _ListaCuentasDepositoOYDPLUS As List(Of OYDUtilidades.BuscadorCuentasDeposito)
    Public Property ListaCuentasDepositoOYDPLUS As List(Of OYDUtilidades.BuscadorCuentasDeposito)
        Get
            Return (_ListaCuentasDepositoOYDPLUS)
        End Get
        Set(ByVal value As List(Of OYDUtilidades.BuscadorCuentasDeposito))
            _ListaCuentasDepositoOYDPLUS = value
            MyBase.CambioItem("ListaCuentasDepositoOYDPLUS")
            If Not IsNothing(ListaCuentasDepositoOYDPLUS) Then
                If logNuevoRegistro = False And logEditarRegistro = False Then
                    If ListaCuentasDepositoOYDPLUS.Where(Function(i) i.NroCuentaDeposito = _OrdenOYDPLUSSelected.CuentaDeposito).Count > 0 Then
                        CtaDepositoSeleccionadaOYDPLUS = ListaCuentasDepositoOYDPLUS.Where(Function(i) i.NroCuentaDeposito = IIf(IsNothing(_OrdenOYDPLUSSelected.CuentaDeposito), Nothing, 0)).FirstOrDefault
                    End If
                Else
                    If ListaCuentasDepositoOYDPLUS.Count = 1 Then
                        CtaDepositoSeleccionadaOYDPLUS = ListaCuentasDepositoOYDPLUS.FirstOrDefault
                    Else
                        If ListaCuentasDepositoOYDPLUS.Where(Function(i) i.NroCuentaDeposito = IIf(IsNothing(_OrdenOYDPLUSSelected.CuentaDeposito), Nothing, 0)).Count > 0 Then
                            CtaDepositoSeleccionadaOYDPLUS = ListaCuentasDepositoOYDPLUS.Where(Function(i) i.NroCuentaDeposito = IIf(IsNothing(_OrdenOYDPLUSSelected.CuentaDeposito), Nothing, 0)).FirstOrDefault
                        End If
                    End If

                End If
            Else
                CtaDepositoSeleccionadaOYDPLUS = Nothing
            End If
        End Set
    End Property

    Private _mobjCtaDepositoSeleccionadaOYDPLUS As OYDUtilidades.BuscadorCuentasDeposito
    Public Property CtaDepositoSeleccionadaOYDPLUS() As OYDUtilidades.BuscadorCuentasDeposito
        Get
            Return (_mobjCtaDepositoSeleccionadaOYDPLUS)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorCuentasDeposito)
            _mobjCtaDepositoSeleccionadaOYDPLUS = value
            If Not IsNothing(CtaDepositoSeleccionadaOYDPLUS) Then
                If logEditarRegistro Or logNuevoRegistro Then
                    If Not IsNothing(_OrdenOYDPLUSSelected) Then
                        _OrdenOYDPLUSSelected.CuentaDeposito = CtaDepositoSeleccionadaOYDPLUS.NroCuentaDeposito
                        _OrdenOYDPLUSSelected.UBICACIONTITULO = CtaDepositoSeleccionadaOYDPLUS.Deposito
                    End If
                End If
            Else
                If logEditarRegistro Or logNuevoRegistro Then
                    _OrdenOYDPLUSSelected.CuentaDeposito = 0
                    _OrdenOYDPLUSSelected.UBICACIONTITULO = String.Empty
                End If
            End If
            MyBase.CambioItem("CtaDepositoSeleccionadaOYDPLUS")
        End Set
    End Property


#End Region

#Region "Propiedades para el receptor de la orden"

    '******************************************************** ReceptoresOrdenes 
    Private _ListaReceptoresOrdenes As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
    Public Property ListaReceptoresOrdenes() As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
        Get
            Return _ListaReceptoresOrdenes
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden))
            _ListaReceptoresOrdenes = value
            MyBase.CambioItem("ListaReceptoresOrdenes")
            MyBase.CambioItem("ListaReceptoresOrdenesPaged")
            If Not IsNothing(_ListaReceptoresOrdenes) Then
                If _ListaReceptoresOrdenes.Count > 0 Then
                    ReceptoresOrdenSelected = _ListaReceptoresOrdenes.FirstOrDefault
                End If
            End If
        End Set
    End Property

    Public ReadOnly Property ReceptoresOrdenesPaged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaReceptoresOrdenes) Then
                Dim view = New PagedCollectionView(_ListaReceptoresOrdenes)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private _ReceptoresOrdenSelected As OyDPLUSOrdenesBolsa.ReceptoresOrden
    Public Property ReceptoresOrdenSelected() As OyDPLUSOrdenesBolsa.ReceptoresOrden
        Get
            Return _ReceptoresOrdenSelected
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.ReceptoresOrden)
            If Not IsNothing(value) Then
                _ReceptoresOrdenSelected = value
                MyBase.CambioItem("ReceptoresOrdenSelected")
            End If
        End Set
    End Property

#End Region

#Region "Propiedades para el receptor orden cruzada"

    '******************************************************** ReceptoresOrdenes 
    Private _ListaReceptoresOrdenesCruzada As List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
    Public Property ListaReceptoresOrdenesCruzada() As List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
        Get
            Return _ListaReceptoresOrdenesCruzada
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar))
            _ListaReceptoresOrdenesCruzada = value
            MyBase.CambioItem("ListaReceptoresOrdenesCruzada")
            MyBase.CambioItem("ListaReceptoresOrdenesCruzadaPaged")
            If Not IsNothing(_ListaReceptoresOrdenesCruzada) Then
                If _ListaReceptoresOrdenesCruzada.Count > 0 Then
                    ReceptoresOrdenCruzadaSelected = _ListaReceptoresOrdenesCruzada.FirstOrDefault
                End If
            End If
        End Set
    End Property

    Public ReadOnly Property ListaReceptoresOrdenesCruzadaPaged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaReceptoresOrdenesCruzada) Then
                Dim view = New PagedCollectionView(_ListaReceptoresOrdenesCruzada)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private _ReceptoresOrdenCruzadaSelected As OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar
    Public Property ReceptoresOrdenCruzadaSelected() As OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar
        Get
            Return _ReceptoresOrdenCruzadaSelected
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
            If Not IsNothing(value) Then
                _ReceptoresOrdenCruzadaSelected = value
                MyBase.CambioItem("ReceptoresOrdenCruzadaSelected")
            End If
        End Set
    End Property

    Private _MostrarReceptoresCruzada As Visibility = Visibility.Collapsed
    Public Property MostrarReceptoresCruzada() As Visibility
        Get
            Return _MostrarReceptoresCruzada
        End Get
        Set(ByVal value As Visibility)
            _MostrarReceptoresCruzada = value
            MyBase.CambioItem("MostrarReceptoresCruzada")
        End Set
    End Property

#End Region

#Region "Propiedades ordenes cruzadas"

    Private _ViewOrdenesCruzadas As OrdenesCruzadasOYDPLUSView
    Public Property ViewOrdenesCruzadas() As OrdenesCruzadasOYDPLUSView
        Get
            Return _ViewOrdenesCruzadas
        End Get
        Set(ByVal value As OrdenesCruzadasOYDPLUSView)
            _ViewOrdenesCruzadas = value
        End Set
    End Property

    Private WithEvents _OrdenCruzadaSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
    Public Property OrdenCruzadaSelected() As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
        Get
            Return _OrdenCruzadaSelected
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
            _OrdenCruzadaSelected = value
            MyBase.CambioItem("OrdenCruzadaSelected")
        End Set
    End Property

    Private _ListaOrdenesCruzadas As List(Of OyDPLUSOrdenesBolsa.tblOrdenesCruzadas)
    Public Property ListaOrdenesCruzadas() As List(Of OyDPLUSOrdenesBolsa.tblOrdenesCruzadas)
        Get
            Return _ListaOrdenesCruzadas
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.tblOrdenesCruzadas))
            _ListaOrdenesCruzadas = value
            MyBase.CambioItem("ListaOrdenesCruzadas")
            If Not IsNothing(_ListaOrdenesCruzadas) Then
                If _ListaOrdenesCruzadas.Count > 0 Then
                    OrdenesCruzadasSelected = _ListaOrdenesCruzadas.FirstOrDefault
                End If
            End If
        End Set
    End Property

    Private _OrdenesCruzadasSelected As OyDPLUSOrdenesBolsa.tblOrdenesCruzadas
    Public Property OrdenesCruzadasSelected() As OyDPLUSOrdenesBolsa.tblOrdenesCruzadas
        Get
            Return _OrdenesCruzadasSelected
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.tblOrdenesCruzadas)
            _OrdenesCruzadasSelected = value
            MyBase.CambioItem("OrdenesCruzadasSelected")
        End Set
    End Property

    Private _TotalOrdenesCruzadas As Double
    Public Property TotalOrdenesCruzadas() As Double
        Get
            Return _TotalOrdenesCruzadas
        End Get
        Set(ByVal value As Double)
            _TotalOrdenesCruzadas = value
            MyBase.CambioItem("TotalOrdenesCruzadas")
        End Set
    End Property

    Private _TotalPendientePorCruzar As Double
    Public Property TotalPendientePorCruzar() As Double
        Get
            Return _TotalPendientePorCruzar
        End Get
        Set(ByVal value As Double)
            _TotalPendientePorCruzar = value
            MyBase.CambioItem("TotalPendientePorCruzar")
        End Set
    End Property

    Private _ComitenteSeleccionadoCruzada As OYDUtilidades.BuscadorClientes
    Public Property ComitenteSeleccionadoCruzada As OYDUtilidades.BuscadorClientes
        Get
            Return (_ComitenteSeleccionadoCruzada)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorClientes)
            _ComitenteSeleccionadoCruzada = value
            SeleccionarClienteOYDPLUS(_ComitenteSeleccionadoCruzada, _OrdenCruzadaSelected, OPCION_ORDENCRUZADA)
            If Not IsNothing(_ComitenteSeleccionadoCruzada) Then
                OrdenanteSeleccionadoOYDPLUS = Nothing
                CtaDepositoSeleccionadaOYDPLUS = Nothing
                consultarOrdenantesOYDPLUS(_ComitenteSeleccionadoCruzada.IdComitente, OPCION_ORDENCRUZADA)
                consultarCuentasDepositoOYDPLUS(_ComitenteSeleccionadoCruzada.IdComitente, OPCION_ORDENCRUZADA)
                consultarCuentasCliente(_ComitenteSeleccionadoCruzada.IdComitente)
            End If
            MyBase.CambioItem("ComitenteSeleccionadoCruzada")
        End Set
    End Property

    Private _BorrarClienteCruzada As Boolean
    Public Property BorrarClienteCruzada() As Boolean
        Get
            Return _BorrarClienteCruzada
        End Get
        Set(ByVal value As Boolean)
            _BorrarClienteCruzada = value
            MyBase.CambioItem("BorrarClienteCruzada")
        End Set
    End Property

    Private _ListaOrdenantesCruzada As List(Of OYDUtilidades.BuscadorOrdenantes)
    Public Property ListaOrdenantesCruzada As List(Of OYDUtilidades.BuscadorOrdenantes)
        Get
            Return (_ListaOrdenantesCruzada)
        End Get
        Set(ByVal value As List(Of OYDUtilidades.BuscadorOrdenantes))
            _ListaOrdenantesCruzada = value
            MyBase.CambioItem("ListaOrdenantesCruzada")
        End Set
    End Property

    Private _mobjOrdenanteSeleccionadoCruzada As OYDUtilidades.BuscadorOrdenantes
    Public Property OrdenanteSeleccionadoCruzada() As OYDUtilidades.BuscadorOrdenantes
        Get
            Return (_mobjOrdenanteSeleccionadoCruzada)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorOrdenantes)
            _mobjOrdenanteSeleccionadoCruzada = value
            If Not IsNothing(_mobjOrdenanteSeleccionadoCruzada) Then
                If logEditarRegistro Or logNuevoRegistro Then
                    If Not IsNothing(_OrdenCruzadaSelected) Then
                        _OrdenCruzadaSelected.IDOrdenante = _mobjOrdenanteSeleccionadoCruzada.IdOrdenante
                    End If
                End If
            End If
            MyBase.CambioItem("OrdenanteSeleccionadoCruzada")
        End Set
    End Property

    Private _ListaCuentasDepositoCruzada As List(Of OYDUtilidades.BuscadorCuentasDeposito)
    Public Property ListaCuentasDepositoCruzada As List(Of OYDUtilidades.BuscadorCuentasDeposito)
        Get
            Return (_ListaCuentasDepositoCruzada)
        End Get
        Set(ByVal value As List(Of OYDUtilidades.BuscadorCuentasDeposito))
            _ListaCuentasDepositoCruzada = value
            MyBase.CambioItem("ListaCuentasDepositoCruzada")
        End Set
    End Property

    Private _mobjCtaDepositoSeleccionadaCruzada As OYDUtilidades.BuscadorCuentasDeposito
    Public Property CtaDepositoSeleccionadaCruzada() As OYDUtilidades.BuscadorCuentasDeposito
        Get
            Return (_mobjCtaDepositoSeleccionadaCruzada)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorCuentasDeposito)
            _mobjCtaDepositoSeleccionadaCruzada = value
            If Not IsNothing(_mobjCtaDepositoSeleccionadaCruzada) Then
                If logEditarRegistro Or logNuevoRegistro Then
                    If Not IsNothing(_OrdenCruzadaSelected) Then
                        _OrdenCruzadaSelected.CuentaDeposito = _mobjCtaDepositoSeleccionadaCruzada.NroCuentaDeposito
                        _OrdenCruzadaSelected.UBICACIONTITULO = _mobjCtaDepositoSeleccionadaCruzada.Deposito
                    End If
                End If
            Else
                If logEditarRegistro Or logNuevoRegistro Then
                    _OrdenCruzadaSelected.CuentaDeposito = 0
                    _OrdenCruzadaSelected.UBICACIONTITULO = String.Empty
                End If
            End If
            MyBase.CambioItem("CtaDepositoSeleccionadaCruzada")
        End Set
    End Property

    '******************************************************** ReceptoresOrdenes 
    Private _ListaDistribucionComisionCruzada As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
    Public Property ListaDistribucionComisionCruzada() As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
        Get
            Return _ListaDistribucionComisionCruzada
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden))
            _ListaDistribucionComisionCruzada = value
            MyBase.CambioItem("ListaDistribucionComisionCruzada")
            MyBase.CambioItem("ListaDistribucionComisionCruzadaPaged")
            If Not IsNothing(_ListaDistribucionComisionCruzada) Then
                If _ListaDistribucionComisionCruzada.Count > 0 Then
                    DistribucionComisionCruzadaSelected = _ListaDistribucionComisionCruzada.FirstOrDefault
                End If
            End If
        End Set
    End Property

    Public ReadOnly Property ListaDistribucionComisionCruzadaPaged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaDistribucionComisionCruzada) Then
                Dim view = New PagedCollectionView(_ListaDistribucionComisionCruzada)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private _DistribucionComisionCruzadaSelected As OyDPLUSOrdenesBolsa.ReceptoresOrden
    Public Property DistribucionComisionCruzadaSelected() As OyDPLUSOrdenesBolsa.ReceptoresOrden
        Get
            Return _DistribucionComisionCruzadaSelected
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.ReceptoresOrden)
            If Not IsNothing(value) Then
                _DistribucionComisionCruzadaSelected = value
                MyBase.CambioItem("DistribucionComisionCruzadaSelected")
            End If
        End Set
    End Property

    Private _HabilitarClienteCruzada As Boolean
    Public Property HabilitarClienteCruzada() As Boolean
        Get
            Return _HabilitarClienteCruzada
        End Get
        Set(ByVal value As Boolean)
            _HabilitarClienteCruzada = value
            MyBase.CambioItem("HabilitarClienteCruzada")
        End Set
    End Property

    Private _HabilitarBotonesCruzada As Boolean = False
    Public Property HabilitarBotonesCruzada() As Boolean
        Get
            Return _HabilitarBotonesCruzada
        End Get
        Set(ByVal value As Boolean)
            _HabilitarBotonesCruzada = value
            MyBase.CambioItem("HabilitarBotonesCruzada")
        End Set
    End Property

    Private _MostrarOrdenesCruzadas As Visibility = Visibility.Collapsed
    Public Property MostrarOrdenesCruzadas() As Visibility
        Get
            Return _MostrarOrdenesCruzadas
        End Get
        Set(ByVal value As Visibility)
            _MostrarOrdenesCruzadas = value
            MyBase.CambioItem("MostrarOrdenesCruzadas")
        End Set
    End Property

    Private _TextoTabOrdenCruzada As String
    Public Property TextoTabOrdenCruzada() As String
        Get
            Return _TextoTabOrdenCruzada
        End Get
        Set(ByVal value As String)
            _TextoTabOrdenCruzada = value
            MyBase.CambioItem("TextoTabOrdenCruzada")
        End Set
    End Property

    Private _MostrarMensajeCruceInactivo As Visibility = Visibility.Collapsed
    Public Property MostrarMensajeCruceInactivo() As Visibility
        Get
            Return _MostrarMensajeCruceInactivo
        End Get
        Set(ByVal value As Visibility)
            _MostrarMensajeCruceInactivo = value
            MyBase.CambioItem("MostrarMensajeCruceInactivo")
        End Set
    End Property


#End Region

#Region "Propiedades para los beneficiarios de la orden"

    '******************************************************** BeneficiariosOrdenes 
    Private _ListaBeneficiariosOrdenes As List(Of OyDPLUSOrdenesBolsa.BeneficiariosOrden)
    Public Property ListaBeneficiariosOrdenes() As List(Of OyDPLUSOrdenesBolsa.BeneficiariosOrden)
        Get
            Return _ListaBeneficiariosOrdenes
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.BeneficiariosOrden))
            _ListaBeneficiariosOrdenes = value
            MyBase.CambioItem("ListaBeneficiariosOrdenes")
            MyBase.CambioItem("ListaBeneficiariosOrdenesPaged")
            If Not IsNothing(_ListaBeneficiariosOrdenes) Then
                If _ListaBeneficiariosOrdenes.Count > 0 Then
                    BeneficiariosOrdenSelected = _ListaBeneficiariosOrdenes.FirstOrDefault
                End If
            End If
        End Set
    End Property

    Public ReadOnly Property BeneficiariosOrdenesPaged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaBeneficiariosOrdenes) Then
                Dim view = New PagedCollectionView(_ListaBeneficiariosOrdenes)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private _BeneficiariosOrdenSelected As OyDPLUSOrdenesBolsa.BeneficiariosOrden
    Public Property BeneficiariosOrdenSelected() As OyDPLUSOrdenesBolsa.BeneficiariosOrden
        Get
            Return _BeneficiariosOrdenSelected
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.BeneficiariosOrden)
            _BeneficiariosOrdenSelected = value
            If Not value Is Nothing Then
                MyBase.CambioItem("BeneficiariosOrdenSelected")
            End If
        End Set
    End Property

#End Region

#Region "Propiedades para las liquidaciones y liquidaciones problables"

    Private _ListaLiquidacionesOrdenes As List(Of OyDPLUSOrdenesBolsa.LiquidacionesOrden)
    Public Property ListaLiquidacionesOrdenes() As List(Of OyDPLUSOrdenesBolsa.LiquidacionesOrden)
        Get
            Return _ListaLiquidacionesOrdenes
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.LiquidacionesOrden))
            _ListaLiquidacionesOrdenes = value
            MyBase.CambioItem("ListaLiquidacionesOrdenes")
        End Set
    End Property

    Private _ListaLiqAsociadasOrdenes As List(Of OyDPLUSOrdenesBolsa.LiqAsociadasOrden)
    Public Property ListaLiqAsociadasOrdenes() As List(Of OyDPLUSOrdenesBolsa.LiqAsociadasOrden)
        Get
            Return _ListaLiqAsociadasOrdenes
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.LiqAsociadasOrden))
            _ListaLiqAsociadasOrdenes = value
            MyBase.CambioItem("ListaLiqAsociadasOrdenes")
        End Set
    End Property

    Private _ListaEnrutamientoOrdenes As List(Of OyDPLUSOrdenesBolsa.EnrutamientoOrden)
    Public Property ListaEnrutamientoOrdenes() As List(Of OyDPLUSOrdenesBolsa.EnrutamientoOrden)
        Get
            Return _ListaEnrutamientoOrdenes
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.EnrutamientoOrden))
            _ListaEnrutamientoOrdenes = value
            MyBase.CambioItem("ListaEnrutamientoOrdenes")
        End Set
    End Property

#End Region

#Region "Propiedades para cargar Información de los Combos"

    Private _DiccionarioCombosOYDPlus As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
    Public Property DiccionarioCombosOYDPlus() As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
        Get
            Return _DiccionarioCombosOYDPlus
        End Get
        Set(ByVal value As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor)))
            _DiccionarioCombosOYDPlus = value
            MyBase.CambioItem("DiccionarioCombosOYDPlus")
        End Set
    End Property

    Private _DiccionarioCombosOYDPlusCompleta As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
    Public Property DiccionarioCombosOYDPlusCompleta() As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
        Get
            Return _DiccionarioCombosOYDPlusCompleta
        End Get
        Set(ByVal value As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor)))
            _DiccionarioCombosOYDPlusCompleta = value
            MyBase.CambioItem("DiccionarioCombosOYDPlusCompleta")
        End Set
    End Property

    Private _ListaReceptoresCompleta As List(Of OYDPLUSUtilidades.tblReceptoresUsuario)
    Public Property ListaReceptoresCompleta() As List(Of OYDPLUSUtilidades.tblReceptoresUsuario)
        Get
            Return _ListaReceptoresCompleta
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblReceptoresUsuario))
            _ListaReceptoresCompleta = value
            MyBase.CambioItem("ListaReceptoresCompleta")
        End Set
    End Property

    Private _ListaReceptoresUsuario As List(Of OYDPLUSUtilidades.tblReceptoresUsuario)
    Public Property ListaReceptoresUsuario() As List(Of OYDPLUSUtilidades.tblReceptoresUsuario)
        Get
            Return _ListaReceptoresUsuario
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblReceptoresUsuario))
            _ListaReceptoresUsuario = value
            MyBase.CambioItem("ListaReceptoresUsuario")
        End Set
    End Property

    Private _ConfiguracionReceptor As OYDPLUSUtilidades.tblConfiguracionesAdicionalesReceptor
    Public Property ConfiguracionReceptor() As OYDPLUSUtilidades.tblConfiguracionesAdicionalesReceptor
        Get
            Return _ConfiguracionReceptor
        End Get
        Set(ByVal value As OYDPLUSUtilidades.tblConfiguracionesAdicionalesReceptor)
            _ConfiguracionReceptor = value
            MyBase.CambioItem("ConfiguracionReceptor")
        End Set
    End Property

    Private _ListaParametrosReceptor As List(Of OYDPLUSUtilidades.tblParametrosReceptor)
    Public Property ListaParametrosReceptor() As List(Of OYDPLUSUtilidades.tblParametrosReceptor)
        Get
            Return _ListaParametrosReceptor
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblParametrosReceptor))
            _ListaParametrosReceptor = value
            MyBase.CambioItem("ListaParametrosReceptor")
        End Set
    End Property

    Private _ListaEspeciesTipoNegocio As List(Of OYDPLUSUtilidades.tblEspeciesXTipoNegocio)
    Public Property ListaEspeciesTipoNegocio() As List(Of OYDPLUSUtilidades.tblEspeciesXTipoNegocio)
        Get
            Return _ListaEspeciesTipoNegocio
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblEspeciesXTipoNegocio))
            _ListaEspeciesTipoNegocio = value
            MyBase.CambioItem("ListaEspeciesTipoNegocio")
        End Set
    End Property

    Private _ListaReceptoresUsuarioBusqueda As List(Of OYDPLUSUtilidades.tblReceptoresUsuario)
    Public Property ListaReceptoresUsuarioBusqueda() As List(Of OYDPLUSUtilidades.tblReceptoresUsuario)
        Get
            Return _ListaReceptoresUsuarioBusqueda
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblReceptoresUsuario))
            _ListaReceptoresUsuarioBusqueda = value
            MyBase.CambioItem("ListaReceptoresUsuarioBusqueda")
        End Set
    End Property

#End Region

#Region "Propiedades para la parte de los mensajes TICKER"
    Private _DefectoPrecio As Boolean = False
    Public Property DefectoPrecio() As Boolean
        Get
            Return _DefectoPrecio
        End Get
        Set(ByVal value As Boolean)
            _DefectoPrecio = value
            MyBase.CambioItem("DefectoPrecio")
        End Set
    End Property


    Private _TituloMensaje As String
    Public Property TituloMensaje() As String
        Get
            Return _TituloMensaje
        End Get
        Set(ByVal value As String)
            _TituloMensaje = value
            MyBase.CambioItem("TituloMensaje")
        End Set
    End Property

    Private _ListaMensajes As List(Of OYDPLUSUtilidades.tblMensajes)
    Public Property ListaMensajes() As List(Of OYDPLUSUtilidades.tblMensajes)
        Get
            Return _ListaMensajes
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblMensajes))
            _ListaMensajes = value
            MyBase.CambioItem("ListaMensajes")
        End Set
    End Property

    Private _VelocidadMensaje As String
    Public Property VelocidadMensaje() As String
        Get
            Return _VelocidadMensaje
        End Get
        Set(ByVal value As String)
            _VelocidadMensaje = value
            MyBase.CambioItem("VelocidadMensaje")
        End Set
    End Property


#End Region

#Region "Propiedades para los textos de los combos y titulos"

    Private _TextoCantidad As String = "Cantidad"
    Public Property TextoCantidad() As String
        Get
            Return _TextoCantidad
        End Get
        Set(ByVal value As String)
            _TextoCantidad = value
            MyBase.CambioItem("TextoCantidad")
        End Set
    End Property

    Private _TextoPrecio As String = "Precio"
    Public Property TextoPrecio() As String
        Get
            Return _TextoPrecio
        End Get
        Set(ByVal value As String)
            _TextoPrecio = value
            MyBase.CambioItem("TextoPrecio")
        End Set
    End Property

    Private _TextoPrecioMaximoMinimo As String = "Precio"
    Public Property TextoPrecioMaximoMinimo() As String
        Get
            Return _TextoPrecioMaximoMinimo
        End Get
        Set(ByVal value As String)
            _TextoPrecioMaximoMinimo = value
            MyBase.CambioItem("TextoPrecioMaximoMinimo")
        End Set
    End Property

    Private _TextoValorCaptacionGiro As String = "Valor"
    Public Property TextoValorCaptacionGiro() As String
        Get
            Return _TextoValorCaptacionGiro
        End Get
        Set(ByVal value As String)
            _TextoValorCaptacionGiro = value
            MyBase.CambioItem("TextoValorCaptacionGiro")
        End Set
    End Property

    Private _TextoSaldoPortafolio As String = "Saldo cliente"
    Public Property TextoSaldoPortafolio() As String
        Get
            Return _TextoSaldoPortafolio
        End Get
        Set(ByVal value As String)
            _TextoSaldoPortafolio = value
            MyBase.CambioItem("TextoSaldoPortafolio")
        End Set
    End Property

    Private _TextoComision As String = "% comsión"
    Public Property TextoComision() As String
        Get
            Return _TextoComision
        End Get
        Set(ByVal value As String)
            _TextoComision = value
            MyBase.CambioItem("TextoComision")
        End Set
    End Property

    Private _TextoTasaNominal As String = "Tasa nominal"
    Public Property TextoTasaNominal() As String
        Get
            Return _TextoTasaNominal
        End Get
        Set(ByVal value As String)
            _TextoTasaNominal = value
            MyBase.CambioItem("TextoTasaNominal")
        End Set
    End Property


    Private _TextoRomperCruzada As String = "* La orden cruzada ya no tiene cruce activo."
    Public Property TextoRomperCruzada() As String
        Get
            Return _TextoRomperCruzada
        End Get
        Set(ByVal value As String)
            _TextoRomperCruzada = value
            MyBase.CambioItem("TextoRomperCruzada")
        End Set
    End Property

    Private _TextoCruzadaReceptor As String = "Orden cruzada con otro receptor"
    Public Property TextoCruzadaReceptor() As String
        Get
            Return _TextoCruzadaReceptor
        End Get
        Set(ByVal value As String)
            _TextoCruzadaReceptor = value
            MyBase.CambioItem("TextoCruzadaReceptor")
        End Set
    End Property

    Private _TextoCruzadaCliente As String = "Orden cruzada con uno de mis clientes"
    Public Property TextoCruzadaCliente() As String
        Get
            Return _TextoCruzadaCliente
        End Get
        Set(ByVal value As String)
            _TextoCruzadaCliente = value
            MyBase.CambioItem("TextoCruzadaCliente")
        End Set
    End Property

    Private _TextoExentoRetencion As String = " Exento retención."
    Public Property TextoExentoRetencion() As String
        Get
            Return _TextoExentoRetencion
        End Get
        Set(ByVal value As String)
            _TextoExentoRetencion = value
            MyBase.CambioItem("TextoExentoRetencion")
        End Set
    End Property


#End Region

#Region "Propiedades para habilitar los controles de la pantalla"

    Private _HabilitarEncabezado As Boolean = False
    Public Property HabilitarEncabezado() As Boolean
        Get
            Return _HabilitarEncabezado
        End Get
        Set(ByVal value As Boolean)
            _HabilitarEncabezado = value
            MyBase.CambioItem("HabilitarEncabezado")
        End Set
    End Property

    Private _HabilitarOpcionesCruzada As Boolean = False
    Public Property HabilitarOpcionesCruzada() As Boolean
        Get
            Return _HabilitarOpcionesCruzada
        End Get
        Set(ByVal value As Boolean)
            _HabilitarOpcionesCruzada = value
            MyBase.CambioItem("HabilitarOpcionesCruzada")
        End Set
    End Property

    Private _HabilitarNegocio As Boolean = False
    Public Property HabilitarNegocio() As Boolean
        Get
            Return _HabilitarNegocio
        End Get
        Set(ByVal value As Boolean)
            _HabilitarNegocio = value
            _HabilitarNegocioComitente = _HabilitarNegocio
            MyBase.CambioItem("HabilitarNegocio")
        End Set
    End Property

    Private _HabilitarEspecieCumplimiento As Boolean = False
    Public Property HabilitarEspecieCumplimiento() As Boolean
        Get
            Return _HabilitarEspecieCumplimiento
        End Get
        Set(ByVal value As Boolean)
            _HabilitarEspecieCumplimiento = value
            MyBase.CambioItem("HabilitarEspecieCumplimiento")
        End Set
    End Property

    Private _HabilitarNegocioComitente As Boolean = False
    Public Property HabilitarNegocioComitente() As Boolean
        Get
            Return _HabilitarNegocioComitente
        End Get
        Set(ByVal value As Boolean)
            _HabilitarNegocioComitente = value
            MyBase.CambioItem("HabilitarNegocioComitente")
        End Set
    End Property

    Private _HabilitarOfertaPublica As Boolean = False
    Public Property HabilitarOfertaPublica() As Boolean
        Get
            Return _HabilitarOfertaPublica
        End Get
        Set(ByVal value As Boolean)
            _HabilitarOfertaPublica = value
            MyBase.CambioItem("HabilitarOfertaPublica")
        End Set
    End Property

    Private _HabilitarExentoRetencion As Boolean = False
    Public Property HabilitarExentoRetencion() As Boolean
        Get
            Return _HabilitarExentoRetencion
        End Get
        Set(ByVal value As Boolean)
            _HabilitarExentoRetencion = value
            MyBase.CambioItem("HabilitarExentoRetencion")
        End Set
    End Property


    Private _MostrarNegocio As Visibility = Visibility.Visible
    Public Property MostrarNegocio() As Visibility
        Get
            Return _MostrarNegocio
        End Get
        Set(ByVal value As Visibility)
            _MostrarNegocio = value
            MyBase.CambioItem("MostrarNegocio")
        End Set
    End Property

    Private _PermitirGuardar As Boolean
    Public Property PermitirGuardar() As Boolean
        Get
            Return _PermitirGuardar
        End Get
        Set(ByVal value As Boolean)
            _PermitirGuardar = value
            MyBase.CambioItem("PermitirGuardar")
        End Set
    End Property

    Private _MostrarNoEdicion As Visibility = Visibility.Visible
    Public Property MostrarNoEdicion() As Visibility
        Get
            Return _MostrarNoEdicion
        End Get
        Set(ByVal value As Visibility)
            _MostrarNoEdicion = value
            MyBase.CambioItem("MostrarNoEdicion")
        End Set
    End Property

    Private _MostrarCamposCompra As Visibility
    Public Property MostrarCamposCompra() As Visibility
        Get
            Return _MostrarCamposCompra
        End Get
        Set(ByVal value As Visibility)
            _MostrarCamposCompra = value
            MyBase.CambioItem("MostrarCamposCompra")
        End Set
    End Property

    Private _MostrarCamposVenta As Visibility
    Public Property MostrarCamposVenta() As Visibility
        Get
            Return _MostrarCamposVenta
        End Get
        Set(ByVal value As Visibility)
            _MostrarCamposVenta = value
            MyBase.CambioItem("MostrarCamposVenta")
        End Set
    End Property

    Private _MostrarOrdenesSAE As Visibility = Visibility.Collapsed
    Public Property MostrarOrdenesSAE() As Visibility
        Get
            Return _MostrarOrdenesSAE
        End Get
        Set(ByVal value As Visibility)
            _MostrarOrdenesSAE = value
            MyBase.CambioItem("MostrarOrdenesSAE")
        End Set
    End Property

    Private _MostrarCruzadaCon As Visibility = Visibility.Collapsed
    Public Property MostrarCruzadaCon() As Visibility
        Get
            Return _MostrarCruzadaCon
        End Get
        Set(ByVal value As Visibility)
            _MostrarCruzadaCon = value
            MyBase.CambioItem("MostrarCruzadaCon")
        End Set
    End Property

    Private _MostrarCamposAcciones As Visibility = Visibility.Collapsed
    Public Property MostrarCamposAcciones() As Visibility
        Get
            Return _MostrarCamposAcciones
        End Get
        Set(ByVal value As Visibility)
            _MostrarCamposAcciones = value
            MyBase.CambioItem("MostrarCamposAcciones")
        End Set
    End Property
    Private _HabilitarComboISIN As Boolean = False
    Public Property HabilitarComboISIN() As Boolean
        Get
            Return _HabilitarComboISIN
        End Get
        Set(ByVal value As Boolean)
            _HabilitarComboISIN = value
            MyBase.CambioItem("HabilitarComboISIN")
        End Set
    End Property


    Private _MostrarCamposRentaFija As Visibility = Visibility.Collapsed
    Public Property MostrarCamposRentaFija() As Visibility
        Get
            Return _MostrarCamposRentaFija
        End Get
        Set(ByVal value As Visibility)
            _MostrarCamposRentaFija = value
            MyBase.CambioItem("MostrarCamposRentaFija")
        End Set
    End Property

    Private _MostrarTipoNegocioAcciones As Visibility = Visibility.Collapsed
    Public Property MostrarTipoNegocioAcciones() As Visibility
        Get
            Return _MostrarTipoNegocioAcciones
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoNegocioAcciones = value
            MyBase.CambioItem("MostrarTipoNegocioAcciones")
        End Set
    End Property

    Private _MostrarTipoNegocioRentaFija As Visibility = Visibility.Collapsed
    Public Property MostrarTipoNegocioRentaFija() As Visibility
        Get
            Return _MostrarTipoNegocioRentaFija
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoNegocioRentaFija = value
            MyBase.CambioItem("MostrarTipoNegocioRentaFija")
        End Set
    End Property

    Private _MostrarTipoNegocioRepo As Visibility = Visibility.Collapsed
    Public Property MostrarTipoNegocioRepo() As Visibility
        Get
            Return _MostrarTipoNegocioRepo
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoNegocioRepo = value
            MyBase.CambioItem("MostrarTipoNegocioRepo")
        End Set
    End Property

    Private _MostrarTipoNegocioRepoRentaFija As Visibility = Visibility.Collapsed
    Public Property MostrarTipoNegocioRepoRentaFija() As Visibility
        Get
            Return _MostrarTipoNegocioRepoRentaFija
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoNegocioRepoRentaFija = value
            MyBase.CambioItem("MostrarTipoNegocioRepoRentaFija")
        End Set
    End Property

    Private _MostrarTipoNegocioSimultanea As Visibility = Visibility.Collapsed
    Public Property MostrarTipoNegocioSimultanea() As Visibility
        Get
            Return _MostrarTipoNegocioSimultanea
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoNegocioSimultanea = value
            MyBase.CambioItem("MostrarTipoNegocioSimultanea")
        End Set
    End Property

    Private _MostrarTipoNegocioTTV As Visibility = Visibility.Collapsed
    Public Property MostrarTipoNegocioTTV() As Visibility
        Get
            Return _MostrarTipoNegocioTTV
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoNegocioTTV = value
            MyBase.CambioItem("MostrarTipoNegocioTTV")
        End Set
    End Property

    Private _MostrarTipoNegocioTTVRentaFija As Visibility = Visibility.Collapsed
    Public Property MostrarTipoNegocioTTVRentaFija() As Visibility
        Get
            Return _MostrarTipoNegocioTTVRentaFija
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoNegocioTTVRentaFija = value
            MyBase.CambioItem("MostrarTipoNegocioTTVRentaFija")
        End Set
    End Property

    'Santiago Vergara - Marzo 04/2014
    Private _MostrarTipoNegocioAccionesOF As Visibility = Visibility.Collapsed
    Public Property MostrarTipoNegocioAccionesOF() As Visibility
        Get
            Return _MostrarTipoNegocioAccionesOF
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoNegocioAccionesOF = value
            MyBase.CambioItem("MostrarTipoNegocioAccionesOF")
        End Set
    End Property

    'Santiago Vergara - Marzo 04/2014
    Private _MostrarTipoNegocioRentaFijaOF As Visibility = Visibility.Collapsed
    Public Property MostrarTipoNegocioRentaFijaOF() As Visibility
        Get
            Return _MostrarTipoNegocioRentaFijaOF
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoNegocioRentaFijaOF = value
            MyBase.CambioItem("MostrarTipoNegocioRentaFijaOF")
        End Set
    End Property

    Private _MostrarCampoTasaFacial As Visibility = Visibility.Collapsed
    Public Property MostrarCampoTasaFacial() As Visibility
        Get
            Return _MostrarCampoTasaFacial
        End Get
        Set(ByVal value As Visibility)
            _MostrarCampoTasaFacial = value
            MyBase.CambioItem("MostrarCampoTasaFacial")
        End Set
    End Property

    Private _MostrarCamposFaciales As Visibility = Visibility.Collapsed
    Public Property MostrarCamposFaciales() As Visibility
        Get
            Return _MostrarCamposFaciales
        End Get
        Set(ByVal value As Visibility)
            _MostrarCamposFaciales = value
            MyBase.CambioItem("MostrarCamposFaciales")
        End Set
    End Property

    Private _MostrarCampoIndicador As Visibility = Visibility.Collapsed
    Public Property MostrarCampoIndicador() As Visibility
        Get
            Return _MostrarCampoIndicador
        End Get
        Set(ByVal value As Visibility)
            _MostrarCampoIndicador = value
            MyBase.CambioItem("MostrarCampoIndicador")
        End Set
    End Property

    Private _MostrarCampoPuntosIndicador As Visibility = Visibility.Collapsed
    Public Property MostrarCampoPuntosIndicador() As Visibility
        Get
            Return _MostrarCampoPuntosIndicador
        End Get
        Set(ByVal value As Visibility)
            _MostrarCampoPuntosIndicador = value
            MyBase.CambioItem("MostrarCampoPuntosIndicador")
        End Set
    End Property

    Private _HabilitarHoraVigencia As Boolean = False
    Public Property HabilitarHoraVigencia() As Boolean
        Get
            Return _HabilitarHoraVigencia
        End Get
        Set(ByVal value As Boolean)
            _HabilitarHoraVigencia = value
            MyBase.CambioItem("HabilitarHoraVigencia")
        End Set
    End Property

    Private _MostrarControlMensajes As Visibility = Visibility.Collapsed
    Public Property MostrarControlMensajes() As Visibility
        Get
            Return _MostrarControlMensajes
        End Get
        Set(ByVal value As Visibility)
            _MostrarControlMensajes = value
            MyBase.CambioItem("MostrarControlMensajes")
        End Set
    End Property

    Private _MostrarControles As Visibility = Visibility.Collapsed
    Public Property MostrarControles() As Visibility
        Get
            Return _MostrarControles
        End Get
        Set(ByVal value As Visibility)
            _MostrarControles = value
            MyBase.CambioItem("MostrarControles")
        End Set
    End Property

    Private _HabilitarFechaVigencia As Boolean = False
    Public Property HabilitarFechaVigencia() As Boolean
        Get
            Return _HabilitarFechaVigencia
        End Get
        Set(ByVal value As Boolean)
            _HabilitarFechaVigencia = value
            MyBase.CambioItem("HabilitarFechaVigencia")
        End Set
    End Property

    Private _HabilitarDias As Boolean = False
    Public Property HabilitarDias() As Boolean
        Get
            Return _HabilitarDias
        End Get
        Set(ByVal value As Boolean)
            _HabilitarDias = value
            MyBase.CambioItem("HabilitarDias")
        End Set
    End Property

    Private _MostrarCamposCuentaPropia As Visibility = Visibility.Collapsed
    Public Property MostrarCamposCuentaPropia() As Visibility
        Get
            Return _MostrarCamposCuentaPropia
        End Get
        Set(ByVal value As Visibility)
            _MostrarCamposCuentaPropia = value
            MyBase.CambioItem("MostrarCamposCuentaPropia")
        End Set
    End Property

    Private _NumeroColumnaDia As Integer = 2
    Public Property NumeroColumnaDia() As Integer
        Get
            Return _NumeroColumnaDia
        End Get
        Set(ByVal value As Integer)
            _NumeroColumnaDia = value
            MyBase.CambioItem("NumeroColumnaDia")
        End Set
    End Property

    Private _NumeroColumnaTipoInversion As Integer
    Public Property NumeroColumnaTipoInversion() As Integer
        Get
            Return _NumeroColumnaTipoInversion
        End Get
        Set(ByVal value As Integer)
            _NumeroColumnaTipoInversion = value
        End Set
    End Property

    Private _HabilitarUsuarioOperador As Boolean
    Public Property HabilitarUsuarioOperador() As Boolean
        Get
            Return _HabilitarUsuarioOperador
        End Get
        Set(ByVal value As Boolean)
            _HabilitarUsuarioOperador = value
            MyBase.CambioItem("HabilitarUsuarioOperador")
        End Set
    End Property

    Private _NombreDescripcion As String = "Cliente"
    Public Property NombreDescripcion() As String
        Get
            Return _NombreDescripcion
        End Get
        Set(ByVal value As String)
            _NombreDescripcion = value
            MyBase.CambioItem("NombreDescripcion")
        End Set
    End Property

    Private _MostrarDescripcionOrdenCruzada As Visibility = Visibility.Collapsed
    Public Property MostrarDescripcionOrdenCruzada() As Visibility
        Get
            Return _MostrarDescripcionOrdenCruzada
        End Get
        Set(ByVal value As Visibility)
            _MostrarDescripcionOrdenCruzada = value
            MyBase.CambioItem("MostrarDescripcionOrdenCruzada")
        End Set
    End Property

    Private _TextoCruces As String
    Public Property TextoCruces() As String
        Get
            Return _TextoCruces
        End Get
        Set(ByVal value As String)
            _TextoCruces = value
            MyBase.CambioItem("TextoCruces")
        End Set
    End Property

    Private _HabilitarPrecioRepo As Boolean = False
    Public Property HabilitarPrecioRepo() As Boolean
        Get
            Return _HabilitarPrecioRepo
        End Get
        Set(ByVal value As Boolean)
            _HabilitarPrecioRepo = value
            MyBase.CambioItem("HabilitarPrecioRepo")
        End Set
    End Property

    Private _HabilitarEjecucion As Boolean = False
    Public Property HabilitarEjecucion() As Boolean
        Get
            Return _HabilitarEjecucion
        End Get
        Set(ByVal value As Boolean)
            _HabilitarEjecucion = value
            MyBase.CambioItem("HabilitarEjecucion")
        End Set
    End Property

    Private _HabilitarDuracion As Boolean = False
    Public Property HabilitarDuracion() As Boolean
        Get
            Return _HabilitarDuracion
        End Get
        Set(ByVal value As Boolean)
            _HabilitarDuracion = value
            MyBase.CambioItem("HabilitarDuracion")
        End Set
    End Property

    Private _HabilitarCantidad As Boolean = False
    Public Property HabilitarCantidad() As Boolean
        Get
            Return _HabilitarCantidad
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCantidad = value
            MyBase.CambioItem("HabilitarCantidad")
        End Set
    End Property

    Private _HabilitarCaptacionRepoOrden As Boolean = False
    Public Property HabilitarCaptacionRepoOrden() As Boolean
        Get
            Return _HabilitarCaptacionRepoOrden
        End Get
        Set(ByVal value As Boolean)
            _HabilitarCaptacionRepoOrden = value
            MyBase.CambioItem("HabilitarCaptacionRepoOrden")
        End Set
    End Property
    Private _HabilitarRepoEnPesos As Boolean = True
    Public Property HabilitarRepoEnPesos() As Boolean
        Get
            Return _HabilitarRepoEnPesos
        End Get
        Set(ByVal value As Boolean)
            _HabilitarRepoEnPesos = value
            MyBase.CambioItem("HabilitarRepoEnPesos")
        End Set
    End Property
    Private _HabilitarValorRepoOrden As Boolean = False
    Public Property HabilitarValorRepoOrden() As Boolean
        Get
            Return _HabilitarValorRepoOrden
        End Get
        Set(ByVal value As Boolean)
            _HabilitarValorRepoOrden = value
            MyBase.CambioItem("HabilitarValorRepoOrden")
        End Set
    End Property
    Private _HabilitarValorOrden As Boolean = False
    Public Property HabilitarValorOrden() As Boolean
        Get
            Return _HabilitarValorOrden
        End Get
        Set(ByVal value As Boolean)
            _HabilitarValorOrden = value
            MyBase.CambioItem("HabilitarValorOrden")
        End Set
    End Property
    Private _HabilitarPrecio As Boolean = False
    Public Property HabilitarPrecio() As Boolean
        Get
            Return _HabilitarPrecio
        End Get
        Set(ByVal value As Boolean)
            _HabilitarPrecio = value
            MyBase.CambioItem("HabilitarPrecio")
        End Set
    End Property

    Private _HabilitarDatosLeo As Boolean = False
    Public Property HabilitarDatosLeo() As Boolean
        Get
            Return _HabilitarDatosLeo
        End Get
        Set(ByVal value As Boolean)
            _HabilitarDatosLeo = value
            MyBase.CambioItem("HabilitarDatosLeo")
        End Set
    End Property

    Private _MostrarSaldoPortafolioTTV As Boolean = False
    Public Property MostrarSaldoPortafolioTTV() As Boolean
        Get
            Return _MostrarSaldoPortafolioTTV
        End Get
        Set(ByVal value As Boolean)
            _MostrarSaldoPortafolioTTV = value
            MyBase.CambioItem("MostrarSaldoPortafolioTTV")
        End Set
    End Property

    Private _VisibilidadOfertaPublicaP As Visibility = Visibility.Visible
    Public Property VisibilidadOfertaPublicaP() As Visibility
        Get
            Return _VisibilidadOfertaPublicaP
        End Get
        Set(ByVal value As Visibility)
            _VisibilidadOfertaPublicaP = value
            MyBase.CambioItem("VisibilidadOfertaPublicaP")
        End Set
    End Property

    Private _VisibilidadExentoRetencion As Visibility = Visibility.Collapsed
    Public Property VisibilidadExentoRetencion() As Visibility
        Get
            Return _VisibilidadExentoRetencion
        End Get
        Set(ByVal value As Visibility)
            _VisibilidadExentoRetencion = value
            MyBase.CambioItem("VisibilidadExentoRetencion")
        End Set
    End Property

#End Region

#Region "Propiedades para la Validacion de la Orden"

    Private _ListaResultadoValidacion As List(Of OyDPLUSOrdenesBolsa.tblRespuestaValidaciones)
    Public Property ListaResultadoValidacion() As List(Of OyDPLUSOrdenesBolsa.tblRespuestaValidaciones)
        Get
            Return _ListaResultadoValidacion
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.tblRespuestaValidaciones))
            _ListaResultadoValidacion = value
            MyBase.CambioItem("ListaResultadoValidacion")
        End Set
    End Property

    Private _CantidadValidacionesUsuario As Integer
    Public Property CantidadValidacionesUsuario() As Integer
        Get
            Return _CantidadValidacionesUsuario
        End Get
        Set(ByVal value As Integer)
            _CantidadValidacionesUsuario = value
            MyBase.CambioItem("CantidadValidacionesUsuario")
        End Set
    End Property

    ''-------------------------------------------------------------------
    ''----------------- RECALCULO % GARANTÍA TTV RF ---------------------

    Private _EjecutoPorcentajeGarantia As Boolean = False
    Public Property EjecutoPorcentajeGarantia() As Boolean
        Get
            Return _EjecutoPorcentajeGarantia
        End Get
        Set(ByVal value As Boolean)
            _EjecutoPorcentajeGarantia = value
            MyBase.CambioItem("EjecutoPorcentajeGarantia")
        End Set
    End Property

    ''-------------------------------------------------------------------
    ''----------------- RECALCULO % GARANTÍA TTV RF ---------------------

#End Region

#Region "Propiedades del cliente"

    Private _ComitenteSeleccionadoOYDPLUS As OYDUtilidades.BuscadorClientes
    Public Property ComitenteSeleccionadoOYDPLUS As OYDUtilidades.BuscadorClientes
        Get
            Return (_ComitenteSeleccionadoOYDPLUS)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorClientes)
            _ComitenteSeleccionadoOYDPLUS = value
            Try
                If logCancelarRegistro = False Then
                    SeleccionarClienteOYDPLUS(_ComitenteSeleccionadoOYDPLUS, _OrdenOYDPLUSSelected)
                End If
                If Not IsNothing(ComitenteSeleccionadoOYDPLUS) Then
                    OrdenanteSeleccionadoOYDPLUS = Nothing
                    CtaDepositoSeleccionadaOYDPLUS = Nothing
                    consultarOrdenantesOYDPLUS(ComitenteSeleccionadoOYDPLUS.IdComitente)
                    consultarCuentasDepositoOYDPLUS(ComitenteSeleccionadoOYDPLUS.IdComitente)
                    consultarCuentasCliente(_ComitenteSeleccionadoOYDPLUS.IdComitente)
                End If
            Catch ex As Exception
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al obtener la propiedad del cliente seleccionado.", Me.ToString, "ComitenteSeleccionadoOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
                IsBusy = False
            End Try

            MyBase.CambioItem("ComitenteSeleccionadoOYDPLUS")
        End Set
    End Property

    Private _BorrarCliente As Boolean = False
    Public Property BorrarCliente() As Boolean
        Get
            Return _BorrarCliente
        End Get
        Set(ByVal value As Boolean)
            _BorrarCliente = value
            MyBase.CambioItem("BorrarCliente")
        End Set
    End Property

    Private _BorrarClienteADR As Boolean = False
    Public Property BorrarClienteADR() As Boolean
        Get
            Return _BorrarClienteADR
        End Get
        Set(ByVal value As Boolean)
            _BorrarClienteADR = value
            MyBase.CambioItem("BorrarClienteADR")
        End Set
    End Property

#End Region

#Region "Propiedades de la Especie"

    Private _NemotecnicoSeleccionadoOYDPLUS As OYDUtilidades.BuscadorEspecies
    Public Property NemotecnicoSeleccionadoOYDPLUS As OYDUtilidades.BuscadorEspecies
        Get
            Return (_NemotecnicoSeleccionadoOYDPLUS)
        End Get
        Set(ByVal value As OYDUtilidades.BuscadorEspecies)
            _NemotecnicoSeleccionadoOYDPLUS = value
            Try
                If logCancelarRegistro = False Then
                    SeleccionarEspecieOYDPLUS(NemotecnicoSeleccionadoOYDPLUS)
                End If
            Catch ex As Exception
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al obtener la propiedad de la especie seleccionada.", Me.ToString, "NemotecnicoSeleccionadoOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
                IsBusy = False
            End Try
            MyBase.CambioItem("NemotecnicoSeleccionadoOYDPLUS")
        End Set
    End Property

    Private _BorrarEspecie As Boolean = False
    Public Property BorrarEspecie() As Boolean
        Get
            Return _BorrarEspecie
        End Get
        Set(ByVal value As Boolean)
            _BorrarEspecie = value
            MyBase.CambioItem("BorrarEspecie")
        End Set
    End Property


#End Region

#Region "Propiedades genericas"

    Private _HabilitarTipoLimite As Boolean = False


    Public Property HabilitarTipoLimite() As Boolean

        Get
            Return _HabilitarTipoLimite
        End Get
        Set(ByVal value As Boolean)
            _HabilitarTipoLimite = value
            MyBase.CambioItem("HabilitarTipoLimite")
        End Set
    End Property

    ''' <summary>
    ''' Propiedad que permite manejar las opciones del modulo del combo cboModulo
    ''' </summary>
    ''' <remarks>Por: Giovanny Velez Bolivar - 19/05/2014</remarks>
    Private _Modulo As String = "ORDENES"
    <Display(Name:="Módulo")>
    Public Property Modulo() As String
        Get
            Return _Modulo
        End Get
        Set(ByVal value As String)
            _Modulo = value
            MyBase.CambioItem("Modulo")
        End Set
    End Property

    Private _BolsaValores As String
    Public Property BolsaValores() As String
        Get
            Return _BolsaValores
        End Get
        Set(ByVal value As String)
            _BolsaValores = value
            MyBase.CambioItem("BolsaValores")
        End Set
    End Property

    Private _mstrListaCombosEsp As String = String.Empty
    ''' <summary>
    ''' Nombre de la lista de datos para los combos específicos de órdenes
    ''' </summary>
    Public Property ListaCombosEsp As String
        Get
            Return (_mstrListaCombosEsp)
        End Get
        Set(ByVal value As String)
            _mstrListaCombosEsp = value
        End Set
    End Property

    Private _CantidadConfirmaciones As Integer = 0
    Public Property CantidadConfirmaciones() As Integer
        Get
            Return _CantidadConfirmaciones
        End Get
        Set(ByVal value As Integer)
            _CantidadConfirmaciones = value
            If CantidadConfirmaciones > 0 Then
                If CantidadConfirmaciones = cantidadTotalConfirmacion And CantidadJustificaciones = cantidadTotalJustificacion And CantidadAprobaciones = CantidadTotalAprobaciones Then
                    ValidarOrdenOriginaloCruzada()
                End If
            End If
        End Set
    End Property

    Private _CantidadJustificaciones As Integer = 0
    Public Property CantidadJustificaciones() As Integer
        Get
            Return _CantidadJustificaciones
        End Get
        Set(ByVal value As Integer)
            _CantidadJustificaciones = value
            If CantidadJustificaciones > 0 Then
                If CantidadConfirmaciones = cantidadTotalConfirmacion And CantidadJustificaciones = cantidadTotalJustificacion And CantidadAprobaciones = CantidadTotalAprobaciones Then
                    ValidarOrdenOriginaloCruzada()
                End If
            End If
        End Set
    End Property

    Private _CantidadAprobaciones As Integer = 0
    Public Property CantidadAprobaciones() As Integer
        Get
            Return _CantidadAprobaciones
        End Get
        Set(ByVal value As Integer)
            _CantidadAprobaciones = value
            If CantidadAprobaciones > 0 Then
                If CantidadConfirmaciones = cantidadTotalConfirmacion And CantidadJustificaciones = cantidadTotalJustificacion And CantidadAprobaciones = CantidadTotalAprobaciones Then
                    ValidarOrdenOriginaloCruzada()
                End If
            End If
        End Set
    End Property

    Private _Confirmaciones As String = String.Empty
    Public Property Confirmaciones() As String
        Get
            Return _Confirmaciones
        End Get
        Set(ByVal value As String)
            _Confirmaciones = value
        End Set
    End Property

    Private _ConfirmacionesUsuario As String = String.Empty
    Public Property ConfirmacionesUsuario() As String
        Get
            Return _ConfirmacionesUsuario
        End Get
        Set(ByVal value As String)
            _ConfirmacionesUsuario = value
        End Set
    End Property

    Private _Justificaciones As String = String.Empty
    Public Property Justificaciones() As String
        Get
            Return _Justificaciones
        End Get
        Set(ByVal value As String)
            _Justificaciones = value
        End Set
    End Property

    Private _JustificacionesUsuario As String = String.Empty
    Public Property JustificacionesUsuario() As String
        Get
            Return _JustificacionesUsuario
        End Get
        Set(ByVal value As String)
            _JustificacionesUsuario = value
        End Set
    End Property

    Private _Aprobaciones As String
    Public Property Aprobaciones() As String
        Get
            Return _Aprobaciones
        End Get
        Set(ByVal value As String)
            _Aprobaciones = value
        End Set
    End Property

    Private _AprobacionesUsuario As String
    Public Property AprobacionesUsuario() As String
        Get
            Return _AprobacionesUsuario
        End Get
        Set(ByVal value As String)
            _AprobacionesUsuario = value
        End Set
    End Property

    Private _IsBusyCruzada As Boolean = False
    Public Property IsBusyCruzada() As Boolean
        Get
            Return _IsBusyCruzada
        End Get
        Set(ByVal value As Boolean)
            _IsBusyCruzada = value
            MyBase.CambioItem("IsBusyCruzada")
        End Set
    End Property

    Private _IsBusyPlantilla As Boolean = False
    Public Property IsBusyPlantilla() As Boolean
        Get
            Return _IsBusyPlantilla
        End Get
        Set(ByVal value As Boolean)
            _IsBusyPlantilla = value
            MyBase.CambioItem("IsBusyPlantilla")
        End Set
    End Property

    Private _HabilitarGenerarPlantillas As Boolean
    Public Property HabilitarGenerarPlantillas() As Boolean
        Get
            Return _HabilitarGenerarPlantillas
        End Get
        Set(ByVal value As Boolean)
            _HabilitarGenerarPlantillas = value
            MyBase.CambioItem("HabilitarGenerarPlantillas")
        End Set
    End Property

    Private _HabilitarAbrirPlantillas As Boolean
    Public Property HabilitarAbrirPlantillas() As Boolean
        Get
            Return _HabilitarAbrirPlantillas
        End Get
        Set(ByVal value As Boolean)
            _HabilitarAbrirPlantillas = value
            MyBase.CambioItem("HabilitarAbrirPlantillas")
        End Set
    End Property

    Private _HabilitarDuplicar As Boolean
    Public Property HabilitarDuplicar() As String
        Get
            Return _HabilitarDuplicar
        End Get
        Set(ByVal value As String)
            _HabilitarDuplicar = value
            MyBase.CambioItem("HabilitarDuplicar")
        End Set
    End Property

    Private _MensajeTasas As String
    Public Property MensajeTasas() As String
        Get
            Return _MensajeTasas
        End Get
        Set(ByVal value As String)
            _MensajeTasas = value
            MyBase.CambioItem("MensajeTasas")
        End Set
    End Property

    Private _MostrarMensajeTasas As Visibility = Visibility.Collapsed
    Public Property MostrarMensajeTasas() As Visibility
        Get
            Return _MostrarMensajeTasas
        End Get
        Set(ByVal value As Visibility)
            _MostrarMensajeTasas = value
            MyBase.CambioItem("MostrarMensajeTasas")
        End Set
    End Property


    Private _HabilitarConstanciaFuncionalidad As Boolean
    Public Property HabilitarConstanciaFuncionalidad() As Boolean
        Get
            Return _HabilitarConstanciaFuncionalidad
        End Get
        Set(ByVal value As Boolean)
            _HabilitarConstanciaFuncionalidad = value
            MyBase.CambioItem("HabilitarConstanciaFuncionalidad")
        End Set
    End Property


    Private _HabilitarConstancia As Boolean
    Public Property HabilitarConstancia() As Boolean
        Get
            Return _HabilitarConstancia
        End Get
        Set(ByVal value As Boolean)
            _HabilitarConstancia = value
            MyBase.CambioItem("HabilitarConstancia")
        End Set
    End Property

    Private _MostrarCamposConstancia As Visibility = Visibility.Collapsed
    Public Property MostrarCamposConstancia() As Visibility
        Get
            Return _MostrarCamposConstancia
        End Get
        Set(ByVal value As Visibility)
            _MostrarCamposConstancia = value
            MyBase.CambioItem("MostrarCamposConstancia")
        End Set
    End Property

    Private _MostrarCamposADR As Visibility = Visibility.Collapsed
    Public Property MostrarCamposADR() As Visibility
        Get
            Return _MostrarCamposADR
        End Get
        Set(ByVal value As Visibility)
            _MostrarCamposADR = value
            MyBase.CambioItem("MostrarCamposADR")
        End Set
    End Property

    Private _MostrarTipoGarantia As Visibility = Visibility.Collapsed
    Public Property MostrarTipoGarantia() As Visibility
        Get
            Return _MostrarTipoGarantia
        End Get
        Set(ByVal value As Visibility)
            _MostrarTipoGarantia = value
            MyBase.CambioItem("MostrarTipoGarantia")
        End Set
    End Property

    Private _MensajePreciosTick As String
    Public Property MensajePreciosTick() As String
        Get
            Return _MensajePreciosTick
        End Get
        Set(ByVal value As String)
            _MensajePreciosTick = value
            MyBase.CambioItem("MensajePreciosTick")
        End Set
    End Property

    Private _MostrarMensajePreciosTick As Visibility = Visibility.Collapsed
    Public Property MostrarMensajePreciosTick() As Visibility
        Get
            Return _MostrarMensajePreciosTick
        End Get
        Set(ByVal value As Visibility)
            _MostrarMensajePreciosTick = value
            MyBase.CambioItem("MostrarMensajePreciosTick")
        End Set
    End Property


    Private _strTituloFechaSalida As String = "Fecha salida"
    Public Property strTituloFechaSalida() As String
        Get
            Return _strTituloFechaSalida
        End Get
        Set(ByVal value As String)
            _strTituloFechaSalida = value
            MyBase.CambioItem("strTituloFechaSalida")
        End Set
    End Property

    Private _strTituloFechaCumplimiento As String = "Fecha cumplimiento"
    Public Property strTituloFechaCumplimiento() As String
        Get
            Return _strTituloFechaCumplimiento
        End Get
        Set(ByVal value As String)
            _strTituloFechaCumplimiento = value
            MyBase.CambioItem("strTituloFechaCumplimiento")
        End Set
    End Property

    Private _strTituloPrecioMaximoMinimoSimultanea As String = "Tasa de registro especie"
    Public Property strTituloPrecioMaximoMinimoSimultanea() As String
        Get
            Return _strTituloPrecioMaximoMinimoSimultanea
        End Get
        Set(ByVal value As String)
            _strTituloPrecioMaximoMinimoSimultanea = value
            MyBase.CambioItem("strTituloPrecioMaximoMinimoSimultanea")
        End Set
    End Property

    Private _strTituloValorGiroTTV As String = "Valor TTV"
    Public Property strTituloValorGiroTTV() As String
        Get
            Return _strTituloValorGiroTTV
        End Get
        Set(ByVal value As String)
            _strTituloValorGiroTTV = value
            MyBase.CambioItem("strTituloValorGiroTTV")
        End Set
    End Property

#End Region

#Region "Propiedades Plantillas"

    Private _FiltroPlantillas As String = String.Empty
    Public Property FiltroPlantillas() As String
        Get
            Return _FiltroPlantillas
        End Get
        Set(ByVal value As String)
            _FiltroPlantillas = value
            MyBase.CambioItem("FiltroPlantillas")
        End Set
    End Property


    Private _ListaPlantillas As List(Of OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
    Public Property ListaPlantillas() As List(Of OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Get
            Return _ListaPlantillas
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.OrdenOYDPLUS))
            _ListaPlantillas = value
            MyBase.CambioItem("ListaPlantillas")
            MyBase.CambioItem("ListaPlantillasPaged")
        End Set
    End Property

    Public ReadOnly Property ListaPlantillasPaged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaPlantillas) Then
                Dim view = New PagedCollectionView(_ListaPlantillas)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private _PlantillaSeleccionada As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
    Public Property PlantillaSeleccionada() As OyDPLUSOrdenesBolsa.OrdenOYDPLUS
        Get
            Return _PlantillaSeleccionada
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
            _PlantillaSeleccionada = value
            MyBase.CambioItem("PlantillaSeleccionada")
        End Set
    End Property


#End Region

#Region "Propiedades de seleccion de los controles"
    Private _ListaLiquidacionesSAEAcciones As List(Of SAELiquidacionesSeleccionadas)
    Public Property ListaLiquidacionesSAEAcciones() As List(Of SAELiquidacionesSeleccionadas)
        Get
            Return _ListaLiquidacionesSAEAcciones
        End Get
        Set(ByVal value As List(Of SAELiquidacionesSeleccionadas))
            _ListaLiquidacionesSAEAcciones = value
        End Set
    End Property
    Private _ListaLiquidacionesSAERentaFija As List(Of SAELiquidacionesSeleccionadas)
    Public Property ListaLiquidacionesSAERentaFija() As List(Of SAELiquidacionesSeleccionadas)
        Get
            Return _ListaLiquidacionesSAERentaFija
        End Get
        Set(ByVal value As List(Of SAELiquidacionesSeleccionadas))
            _ListaLiquidacionesSAERentaFija = value
        End Set
    End Property

    Private WithEvents _OrdenSAEAccionesSelected As OYDPLUSUtilidades.tblOrdenesSAEAcciones
    Public Property OrdenSAEAccionesSelected() As OYDPLUSUtilidades.tblOrdenesSAEAcciones
        Get
            Return _OrdenSAEAccionesSelected
        End Get
        Set(ByVal value As OYDPLUSUtilidades.tblOrdenesSAEAcciones)
            _OrdenSAEAccionesSelected = value

            'If Not IsNothing(OrdenSAEAccionesSelected) Then
            '    If OrdenSAEAccionesSelected.Seleccionada Then
            '        OrdenSAESeleccionada = True
            '    Else
            '        OrdenSAESeleccionada = False
            '    End If
            'End If

            'If logOrdenCruzada Then
            '    ObtenerInformacionOrdenSAEAcciones(OrdenSAEAccionesSelected, _OrdenCruzadaSelected, False)
            'Else
            'If Not IsNothing(ListaOrdenSAEAcciones) Then
            '    If ListaOrdenSAEAcciones.Where(Function(i) i.seleccionada = True).count > 1 Then

            '        Dim ListaAccionesTemp As New List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)

            '        For Each li In ListaOrdenSAEAcciones.Where(Function(i) CBool(i.Seleccionada) = True)
            '            ListaAccionesTemp.Add(li)
            '        Next

            '        OrdenSAEAccionesSelected = ObtenerDatosSAERentaAccionesVarios(ListaAccionesTemp)
            '    End If
            'End If

            'Obtiene la información de la orden de SAE.
            'ObtenerInformacionOrdenSAEAcciones(OrdenSAEAccionesSelected, _OrdenOYDPLUSSelected, True)
            'End If
            MyBase.CambioItem("OrdenSAEAccionesSelected")
        End Set
    End Property

    Private WithEvents _OrdenSAERentaFijaSelected As OYDPLUSUtilidades.tblOrdenesSAERentaFija
    Public Property OrdenSAERentaFijaSelected() As OYDPLUSUtilidades.tblOrdenesSAERentaFija
        Get
            Return _OrdenSAERentaFijaSelected
        End Get
        Set(ByVal value As OYDPLUSUtilidades.tblOrdenesSAERentaFija)
            _OrdenSAERentaFijaSelected = value
            'Obtiene la información de la orden de SAE.
            If OrdenSAESeleccionada Then
                If logOrdenCruzada Then
                    ObtenerInformacionOrdenSAERentaFija(OrdenSAERentaFijaSelected, _OrdenCruzadaSelected, False)
                Else
                    If Not IsNothing(_OrdenSAERentaFijaSelected) Then
                        If Not IsNothing(ListaOrdenesSAERentaFijaControl) Then
                            If _SeleccionarTodosFolios Then

                                ObtenerDatosRentaFijaMasiva()
                            End If
                        End If
                    End If

                    'ObtenerInformacionOrdenSAERentaFija(OrdenSAERentaFijaSelected, _OrdenOYDPLUSSelected, True)
                End If
            End If

            MyBase.CambioItem("OrdenSAERentaFijaSelected")
        End Set
    End Property

    Public Async Function ObtenerDatosRentaFijaMasiva() As Task(Of Boolean)
        Try
            IsBusyCalculos = True
            Dim ListaTemp As New OYDPLUSUtilidades.tblOrdenesSAERentaFija

            Dim ListaSeleccionadas As New List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)

            For Each li In ListaOrdenesSAERentaFijaControl.Where(Function(i) i.Seleccionada = True)
                ListaSeleccionadas.Add(li)
            Next
            If ListaSeleccionadas.Count > 0 Then
                ListaTemp = ObtenerDatosSAERentaFijaVarios(ListaSeleccionadas)
                Await ObtenerInformacionOrdenSAERentaFija(ListaTemp, _OrdenOYDPLUSSelected, True)
            End If
            IsBusyCalculos = False

            Return Nothing
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener datos de renta fija masiva", Me.ToString(), "inicializar", Application.Current.ToString(), Program.Maquina, ex)
            Return Nothing
        End Try
    End Function

    Private _ListaOrdenSAEAcciones As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
    Public Property ListaOrdenSAEAcciones() As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
        Get
            Return _ListaOrdenSAEAcciones
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones))
            _ListaOrdenSAEAcciones = value
            HabilitarEspecieCumplimiento = True
            MyBase.CambioItem("ListaOrdenSAEAcciones")
            MyBase.CambioItem("ListaOrdenesSAEAccionesPaged")
        End Set
    End Property

    Private _ListaOrdenSAERentaFija As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)
    Public Property ListaOrdenSAERentaFija() As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)
        Get
            Return _ListaOrdenSAERentaFija
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija))
            _ListaOrdenSAERentaFija = value
            HabilitarEspecieCumplimiento = True
            MyBase.CambioItem("ListaOrdenSAERentaFija")
            MyBase.CambioItem("ListaOrdenesSAERentaFijaPaged")
        End Set
    End Property

    Private _OrdenSAESeleccionada As Boolean
    Public Property OrdenSAESeleccionada() As Boolean
        Get
            Return _OrdenSAESeleccionada
        End Get
        Set(ByVal value As Boolean)
            _OrdenSAESeleccionada = value
            If OrdenSAESeleccionada Then
                'Obtiene la información de la orden de SAE.

                If logOrdenCruzada Then

                    If _OrdenCruzadaSelected.Clase = TIPONEGOCIO_ACCIONES Then
                        ObtenerInformacionOrdenSAEAcciones(OrdenSAEAccionesSelected, _OrdenCruzadaSelected, False)
                    Else
                        ObtenerInformacionOrdenSAERentaFija(OrdenSAERentaFijaSelected, _OrdenCruzadaSelected, False)
                    End If
                Else

                    'Santiago Alexander Vergara Orrego - Mayo 15/2014 - Se añade la lógica para obtener la información de SAE para otras firmas acciones y renta fija
                    If _OrdenOYDPLUSSelected.Clase = TIPONEGOCIO_ACCIONES Then
                        ObtenerInformacionOrdenSAEAcciones(OrdenSAEAccionesSelected, _OrdenOYDPLUSSelected, True)
                    Else
                        logOrdenDIRECTA_RENTAFIJA = True
                        ObtenerInformacionOrdenSAERentaFija(OrdenSAERentaFijaSelected, _OrdenOYDPLUSSelected, True)
                    End If
                End If
            Else
                logOrdenDIRECTA_RENTAFIJA = False
                If logOrdenCruzada Then
                    LimpiarReferenciaBolsa(_OrdenCruzadaSelected)
                Else
                    LimpiarReferenciaBolsa(_OrdenOYDPLUSSelected)
                End If
            End If
            MyBase.CambioItem("OrdenSAESeleccionada")
        End Set
    End Property

    Private _PortafolioClienteSelected As OYDPLUSUtilidades.tblPortafolioCliente
    Public Property PortafolioClienteSelected() As OYDPLUSUtilidades.tblPortafolioCliente
        Get
            Return _PortafolioClienteSelected
        End Get
        Set(ByVal value As OYDPLUSUtilidades.tblPortafolioCliente)
            _PortafolioClienteSelected = value
            MyBase.CambioItem("PortafolioClienteSelected")
        End Set
    End Property

    Private _PortafolioSeleccionada As Boolean
    Public Property PortafolioSeleccionada() As Boolean
        Get
            Return _PortafolioSeleccionada
        End Get
        Set(ByVal value As Boolean)
            _PortafolioSeleccionada = value
            If PortafolioSeleccionada Then
                'Obtiene la información del portafolio del cliente.
                PortafolioClienteSelected.Seleccionada = PortafolioSeleccionada
                If logOrdenCruzada Then
                    ObtenerInformacionPortafolioCliente(PortafolioClienteSelected, _OrdenCruzadaSelected, False)
                Else
                    ObtenerInformacionPortafolioCliente(PortafolioClienteSelected, _OrdenOYDPLUSSelected, True)
                End If
            Else
                If logOrdenCruzada Then
                    _OrdenCruzadaSelected.Custodia = 0
                    _OrdenCruzadaSelected.CustodiaSecuencia = 0
                Else
                    _OrdenOYDPLUSSelected.Custodia = 0
                    _OrdenOYDPLUSSelected.CustodiaSecuencia = 0
                End If
            End If
            MyBase.CambioItem("PortafolioSeleccionada")
        End Set
    End Property

    Private _OperacionesXCumplirSelected As OYDPLUSUtilidades.tblOperacionesCumplir
    Public Property OperacionesXCumplirSelected() As OYDPLUSUtilidades.tblOperacionesCumplir
        Get
            Return _OperacionesXCumplirSelected
        End Get
        Set(ByVal value As OYDPLUSUtilidades.tblOperacionesCumplir)
            _OperacionesXCumplirSelected = value
            MyBase.CambioItem("OperacionesXCumplirSelected")
        End Set
    End Property

    Private _OperacionSeleccionada As Boolean
    Public Property OperacionSeleccionada() As Boolean
        Get
            Return _OperacionSeleccionada
        End Get
        Set(ByVal value As Boolean)
            _OperacionSeleccionada = value
            If OperacionSeleccionada Then
                'Obtiene la información de las operaciones x cumplir.
                If logOrdenCruzada Then
                    ObtenerInformacionOperacionesXCumplir(OperacionesXCumplirSelected, _OrdenCruzadaSelected, True)
                Else
                    ObtenerInformacionOperacionesXCumplir(OperacionesXCumplirSelected, _OrdenOYDPLUSSelected, True)
                End If
            End If
            MyBase.CambioItem("OperacionSeleccionada")
        End Set
    End Property

    Private _ConsultarOrdenesSAE As Boolean = False
    Public Property ConsultarOrdenesSAE() As Boolean
        Get
            Return _ConsultarOrdenesSAE
        End Get
        Set(ByVal value As Boolean)
            _ConsultarOrdenesSAE = value

            ConsultarOrdenesSAEControl()


            MyBase.CambioItem("ConsultarOrdenesSAE")
        End Set
    End Property

    Private _ConsultarPortafolio As Boolean = False
    Public Property ConsultarPortafolio() As Boolean
        Get
            Return _ConsultarPortafolio
        End Get
        Set(ByVal value As Boolean)
            _ConsultarPortafolio = value
            MyBase.CambioItem("ConsultarPortafolio")
        End Set
    End Property

    Private _ConsultarOperaciones As Boolean = False
    Public Property ConsultarOperaciones() As Boolean
        Get
            Return _ConsultarOperaciones
        End Get
        Set(ByVal value As Boolean)
            _ConsultarOperaciones = value
            MyBase.CambioItem("ConsultarOperaciones")
        End Set
    End Property

    Private _ConsultarSaldo As Boolean = False
    Public Property ConsultarSaldo() As Boolean
        Get
            Return _ConsultarSaldo
        End Get
        Set(ByVal value As Boolean)
            _ConsultarSaldo = value
            MyBase.CambioItem("ConsultarSaldo")
        End Set
    End Property

    Private _EspecieBuscar As String
    Public Property EspecieBuscar() As String
        Get
            Return _EspecieBuscar
        End Get
        Set(ByVal value As String)
            _EspecieBuscar = value
            MyBase.CambioItem("EspecieBuscar")
        End Set
    End Property

    Private _CodigoOYDControles As String
    Public Property CodigoOYDControles() As String
        Get
            Return _CodigoOYDControles
        End Get
        Set(ByVal value As String)
            _CodigoOYDControles = value
            MyBase.CambioItem("CodigoOYDControles")
        End Set
    End Property

    Private _ReceptorControles As String
    Public Property ReceptorControles() As String
        Get
            Return _ReceptorControles
        End Get
        Set(ByVal value As String)
            _ReceptorControles = value
            MyBase.CambioItem("ReceptorControles")
        End Set
    End Property


    Private _TipoNegocioControles As String
    Public Property TipoNegocioControles() As String
        Get
            Return _TipoNegocioControles
        End Get
        Set(ByVal value As String)
            _TipoNegocioControles = value
            MyBase.CambioItem("TipoNegocioControles")
        End Set
    End Property

    Private _TipoOperacionControles As String
    Public Property TipoOperacionControles() As String
        Get
            Return _TipoOperacionControles
        End Get
        Set(ByVal value As String)
            _TipoOperacionControles = value
            MyBase.CambioItem("TipoOperacionControles")
        End Set
    End Property

    Private _EspecieControles As String
    Public Property EspecieControles() As String
        Get
            Return _EspecieControles
        End Get
        Set(ByVal value As String)
            _EspecieControles = value
            MyBase.CambioItem("EspecieControles")
        End Set
    End Property

    Private _FechaEmisionControles As Nullable(Of DateTime)
    Public Property FechaEmisionControles() As Nullable(Of DateTime)
        Get
            Return _FechaEmisionControles
        End Get
        Set(ByVal value As Nullable(Of DateTime))
            _FechaEmisionControles = value
            MyBase.CambioItem("FechaEmisionControles")
        End Set
    End Property

    Private _FechaVencimientoControles As Nullable(Of DateTime)
    Public Property FechaVencimientoControles() As Nullable(Of DateTime)
        Get
            Return _FechaVencimientoControles
        End Get
        Set(ByVal value As Nullable(Of DateTime))
            _FechaVencimientoControles = value
            MyBase.CambioItem("FechaVencimientoControles")
        End Set
    End Property

    Private _ModalidadControles As String
    Public Property ModalidadControles() As String
        Get
            Return _ModalidadControles
        End Get
        Set(ByVal value As String)
            _ModalidadControles = value
            MyBase.CambioItem("ModalidadControles")
        End Set
    End Property


    Private _LiquidacionesHabilitarControles As String
    Public Property LiquidacionesHabilitarControles() As String
        Get
            Return _LiquidacionesHabilitarControles
        End Get
        Set(ByVal value As String)
            _LiquidacionesHabilitarControles = value
            MyBase.CambioItem("LiquidacionesHabilitarControles")
        End Set
    End Property

#End Region

#Region "Propiedades decimales"

    Private _FormatoCamposDecimalesEspeciales As String = "2"
    Public Property FormatoCamposDecimalesEspeciales() As String
        Get
            Return _FormatoCamposDecimalesEspeciales
        End Get
        Set(ByVal value As String)
            _FormatoCamposDecimalesEspeciales = value
            MyBase.CambioItem("FormatoCamposDecimalesEspeciales")
        End Set
    End Property

    Private _FormatoCamposNumericosEspeciales As String = "2"
    Public Property FormatoCamposNumericosEspeciales() As String
        Get
            Return _FormatoCamposNumericosEspeciales
        End Get
        Set(ByVal value As String)
            _FormatoCamposNumericosEspeciales = value
            MyBase.CambioItem("FormatoCamposNumericosEspeciales")
        End Set
    End Property

    Private _FormatoCamposDecimalesPorcentajeComision As String = "3"
    Public Property FormatoCamposDecimalesPorcentajeComision() As String
        Get
            Return _FormatoCamposDecimalesPorcentajeComision
        End Get
        Set(ByVal value As String)
            _FormatoCamposDecimalesPorcentajeComision = value
            MyBase.CambioItem("FormatoCamposDecimalesPorcentajeComision")
        End Set
    End Property

    Private _FormatoCamposNumericosPorcentajeComision As String = "3"
    Public Property FormatoCamposNumericosPorcentajeComision() As String
        Get
            Return _FormatoCamposNumericosPorcentajeComision
        End Get
        Set(ByVal value As String)
            _FormatoCamposNumericosPorcentajeComision = value
            MyBase.CambioItem("FormatoCamposNumericosPorcentajeComision")
        End Set
    End Property

    Private _FormatoCamposDecimalesRentabilidad As String = "3"
    Public Property FormatoCamposDecimalesRentabilidad() As String
        Get
            Return _FormatoCamposDecimalesRentabilidad
        End Get
        Set(ByVal value As String)
            _FormatoCamposDecimalesRentabilidad = value
            MyBase.CambioItem("FormatoCamposDecimalesRentabilidad")
        End Set
    End Property

    Private _FormatoCamposNumericosRentabilidad As String = "3"
    Public Property FormatoCamposNumericosRentabilidad() As String
        Get
            Return _FormatoCamposNumericosRentabilidad
        End Get
        Set(ByVal value As String)
            _FormatoCamposNumericosRentabilidad = value
            MyBase.CambioItem("FormatoCamposNumericosRentabilidad")
        End Set
    End Property

    Private _FormatoCamposDecimalesPrecio As String = "3"
    Public Property FormatoCamposDecimalesPrecio() As String
        Get
            Return _FormatoCamposDecimalesPrecio
        End Get
        Set(ByVal value As String)
            _FormatoCamposDecimalesPrecio = value
            MyBase.CambioItem("FormatoCamposDecimalesPrecio")
        End Set
    End Property

    Private _FormatoCamposNumericosPrecio As String = "3"
    Public Property FormatoCamposNumericosPrecio() As String
        Get
            Return _FormatoCamposNumericosPrecio
        End Get
        Set(ByVal value As String)
            _FormatoCamposNumericosPrecio = value
            MyBase.CambioItem("FormatoCamposNumericosPrecio")
        End Set
    End Property

#End Region
    Private _ConsultarIsines As Boolean = False
    Public Property ConsultarIsines() As Boolean
        Get
            Return _ConsultarIsines
        End Get
        Set(ByVal value As Boolean)
            _ConsultarIsines = value
            MyBase.CambioItem("ConsultarIsines")
        End Set
    End Property
    Private _ConsultandoIsines As Boolean = False
    Public Property ConsultandoIsines() As Boolean
        Get
            Return _ConsultandoIsines
        End Get
        Set(ByVal value As Boolean)
            _ConsultandoIsines = value
            If _ConsultandoIsines Then
                IsBusyCalculos = True
            Else
                IsBusyCalculos = False
            End If
            MyBase.CambioItem("ConsultandoIsines")
        End Set
    End Property
    Private _FechaEmisionBuscador As DateTime = Nothing
    Public Property FechaEmisionBuscador() As DateTime
        Get
            Return _FechaEmisionBuscador
        End Get
        Set(ByVal value As DateTime)
            _FechaEmisionBuscador = value
            MyBase.CambioItem("FechaEmisionBuscador")
        End Set
    End Property

    Private _FechaVencimientoBuscador As DateTime = Nothing
    Public Property FechaVencimientoBuscador() As DateTime
        Get
            Return _FechaVencimientoBuscador
        End Get
        Set(ByVal value As DateTime)
            _FechaVencimientoBuscador = value
            MyBase.CambioItem("FechaVencimientoBuscador")
        End Set
    End Property

    Private _ModalidadBuscador As String = String.Empty
    Public Property ModalidadBuscador() As String
        Get
            Return _ModalidadBuscador
        End Get
        Set(ByVal value As String)
            _ModalidadBuscador = value
            MyBase.CambioItem("ModalidadBuscador")
        End Set
    End Property

#Region "Propiedades Instrucciones"

    Private _ListaInstruccionesOrdenes As EntitySet(Of OyDPLUSOrdenesBolsa.InstruccionesOrdene)
    Public Property ListaInstruccionesOrdenes() As EntitySet(Of OyDPLUSOrdenesBolsa.InstruccionesOrdene)
        Get
            Return _ListaInstruccionesOrdenes
        End Get
        Set(ByVal value As EntitySet(Of OyDPLUSOrdenesBolsa.InstruccionesOrdene))
            _ListaInstruccionesOrdenes = value
            MyBase.CambioItem("ListaInstruccionesOrdenes")
            MyBase.CambioItem("ListaInstruccionesOrdenesPaged")
        End Set
    End Property

    Public ReadOnly Property ListaInstruccionesOrdenesPaged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaInstruccionesOrdenes) Then
                Dim view = New PagedCollectionView(_ListaInstruccionesOrdenes)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    Private _InstruccionesOrdeneSelected As OyDPLUSOrdenesBolsa.InstruccionesOrdene
    Public Property InstruccionesOrdeneSelected() As OyDPLUSOrdenesBolsa.InstruccionesOrdene
        Get
            Return _InstruccionesOrdeneSelected
        End Get
        Set(ByVal value As OyDPLUSOrdenesBolsa.InstruccionesOrdene)
            _InstruccionesOrdeneSelected = value
            MyBase.CambioItem("InstruccionesOrdeneSelected")
        End Set
    End Property

    Private _TituloInstruccion As String = MSTR_TITULO_INSTRUCCION_MODIFICAR
    Public Property TituloInstruccion As String
        Get
            Return _TituloInstruccion
        End Get
        Set(ByVal value As String)
            _TituloInstruccion = value
            MyBase.CambioItem("TituloInstruccion")
        End Set
    End Property

    Private _EditandoInstrucciones As Boolean = False
    Public Property EditandoInstrucciones() As Boolean
        Get
            Return _EditandoInstrucciones
        End Get
        Set(ByVal value As Boolean)
            _EditandoInstrucciones = value
            MyBase.CambioItem("EditandoInstrucciones")
        End Set
    End Property

    Private _CuentasClientes As List(Of OyDPLUSOrdenesBolsa.CuentasClientes)
    Public Property CuentasClientes() As List(Of OyDPLUSOrdenesBolsa.CuentasClientes)
        Get
            Return _CuentasClientes
        End Get
        Set(ByVal value As List(Of OyDPLUSOrdenesBolsa.CuentasClientes))
            _CuentasClientes = value
            MyBase.CambioItem("CuentasClientes")
        End Set
    End Property

    Private _MostrarTabInstrucciones As Visibility = Visibility.Collapsed
    Public Property MostrarTabInstrucciones As Visibility
        Get
            Return _MostrarTabInstrucciones
        End Get
        Set(ByVal value As Visibility)
            _MostrarTabInstrucciones = value
            MyBase.CambioItem("MostrarTabInstrucciones")
        End Set
    End Property

#End Region

#Region "Propiedades Combos Tipo Límite, Ejecución y Duración"

    Private _ListaConfiguracion As List(Of CombinacionesTipoLimite)
    Public Property ListaConfiguracion() As List(Of CombinacionesTipoLimite)
        Get
            Return _ListaConfiguracion
        End Get
        Set(ByVal value As List(Of CombinacionesTipoLimite))
            _ListaConfiguracion = value
            MyBase.CambioItem("ListaConfiguracion")
        End Set
    End Property
#End Region

#End Region

#Region "Metodos OYDPlus"
    Public Sub AsignarCantidadValidacion()
        Try
            If logEsModal = False Then
                OrdenOYDPLUSSelected.Cantidad = 0
                OrdenOYDPLUSSelected.Cantidad = ListaOrdenSAERentaFija.Sum(Function(i) i.Cantidad).Value
            End If
        Catch ex As Exception

        End Try
    End Sub
    Public Function CalcularFechaCumplimientoXDias(ByVal pobjRegistroSelected As OrdenOYDPLUS)
        Try
            If Not IsNothing(pobjRegistroSelected) Then
                If logNuevoRegistro Or logEditarRegistro Then
                    If logCalcularValores Then
                        If logDiasCumplimiento And pobjRegistroSelected.DiasCumplimiento > 0 Then
                            CalcularFechaCumplimientoPorDias(pobjRegistroSelected)
                        ElseIf pobjRegistroSelected.DiasCumplimiento = 0 Then
                            pobjRegistroSelected.FechaCumplimiento = pobjRegistroSelected.FechaOrden
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los días de cumpliemiento.", Me.ToString(), "CalcularFechaCumplimientoXDias", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Function
    Public Sub VerificarComision(ByVal pobjOrdenSelected As OrdenOYDPLUS)
        Try
            MensajeComision = String.Empty
            MostrarMensajeComision = Visibility.Collapsed

            If logEditarRegistro Or logNuevoRegistro Then
                If Not IsNothing(pobjOrdenSelected) Then
                    If Not IsNothing(pobjOrdenSelected.Comision) Then
                        If pobjOrdenSelected.Comision > 0 Then
                            Dim Cadena As String = pobjOrdenSelected.Comision.ToString
                            Dim posicion As Integer = InStrRev(Cadena, ".")
                            Dim posicionComa As Integer = InStrRev(Cadena, ",")

                            If posicionComa > 0 And posicion <= 0 Then
                                posicion = posicionComa
                            End If

                            Dim CadenaNueva = Cadena.Substring(posicion)

                            If Not String.IsNullOrEmpty(CadenaNueva) Then
                                If Len(CadenaNueva) >= 4 And posicion > 0 Then
                                    MensajeComision = String.Format("Tener en cuenta que este porcentaje de comisión {0}es el valor más cercano para calcular el valor de la comisión, {0}no obstante la complementación en MEC es a tres decimales.", vbCrLf)
                                    MostrarMensajeComision = Visibility.Visible
                                Else
                                    MostrarMensajeComision = Visibility.Collapsed
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los días del plazo.", Me.ToString(), "VerificarComision", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Async Sub ObtenerFechaServidor()
        dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
    End Sub

    Public Overrides Async Sub NuevoRegistro()
        Try
            If logCargoForma = False Then
                ViewOrdenesOYDPLUS.GridEdicion.Children.Add(viewFormaOrdenes)
                logCargoForma = True
            End If
            HabilitarTipoLimite = True
            If dcProxy.IsLoading Then
                A2Utilidades.Mensajes.mostrarMensaje("Por favor espere, el sistema no ha terminado de cargar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Exit Sub
            End If

            IsBusy = True

            dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
            mdtmFechaCierreSistema = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaCierreSistema(MSTR_MODULO_OYD_ORDENES, Program.Usuario)

            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                OrdenAnteriorOYDPLUS = Nothing
                ObtenerValoresOrdenAnterior(_OrdenOYDPLUSSelected, OrdenAnteriorOYDPLUS)
            End If

            logNuevoRegistro = True
            logEditarRegistro = False
            logDuplicarRegistro = False
            logPlantillaRegistro = False
            logCancelarRegistro = False
            MostrarCamposConstancia = Visibility.Collapsed
            HabilitarConstancia = True
            MensajeTasas = String.Empty
            MostrarMensajeTasas = Visibility.Collapsed
            dblValorConsultadoPrecioSAE = 0
            dblValorConsultadoPorcentajeGarantia = 0
            MensajePreciosTick = String.Empty
            MostrarMensajePreciosTick = Visibility.Collapsed

            CargarReceptoresUsuarioOYDPLUS("NUEVO", "NUEVO")
            ListaLiquidacionesSAERentaFija = New List(Of SAELiquidacionesSeleccionadas)
            ListaLiquidacionesSAEAcciones = New List(Of SAELiquidacionesSeleccionadas)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del nuevo registro", Me.ToString(), "NuevoRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Crea el objeto nuevo de la orden despues de realizar la carga de los receptores y combos del usuario.
    ''' Desarrollado por Juan David Correa
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub NuevaOrden()
        Try
            HabilitarEncabezado = True
            HabilitarOpcionesCruzada = True
            HabilitarNegocio = False
            HabilitarEspecieCumplimiento = False
            HabilitarNegocioComitente = False
            HabilitarDuracion = False
            MostrarNegocio = Visibility.Collapsed
            MostrarCamposAcciones = Visibility.Collapsed
            HabilitarEjecucion = False
            MostrarCamposRentaFija = Visibility.Collapsed
            MostrarCamposCuentaPropia = Visibility.Collapsed
            MostrarCamposCompra = Visibility.Collapsed
            MostrarCamposVenta = Visibility.Collapsed
            MostrarControles = Visibility.Collapsed
            MostrarMensajeCruceInactivo = Visibility.Collapsed
            HabilitarExentoRetencion = False
            HabilitarHoraVigencia = False
            HabilitarUsuarioOperador = True
            HabilitarCantidad = True
            HabilitarValorOrden = False
            HabilitarValorRepoOrden = False
            HabilitarCaptacionRepoOrden = False
            HabilitarRepoEnPesos = False
            logEliminarAsociacion = False
            LiquidacionesHabilitarControles = String.Empty
            HabilitarPrecio = False
            HabilitarDatosLeo = False
            EditandoInstrucciones = True

            Dim objNewOrdenOYDPLUS As New OyDPLUSOrdenesBolsa.OrdenOYDPLUS
            objNewOrdenOYDPLUS.IDNroOrden = 0
            objNewOrdenOYDPLUS.NroOrden = 0
            objNewOrdenOYDPLUS.Receptor = String.Empty
            objNewOrdenOYDPLUS.TipoOrden = String.Empty
            objNewOrdenOYDPLUS.NombreTipoOrden = String.Empty
            objNewOrdenOYDPLUS.TipoNegocio = String.Empty
            objNewOrdenOYDPLUS.NombreTipoNegocio = String.Empty
            objNewOrdenOYDPLUS.TipoProducto = String.Empty
            objNewOrdenOYDPLUS.NombreTipoProducto = String.Empty
            objNewOrdenOYDPLUS.TipoOperacion = String.Empty
            objNewOrdenOYDPLUS.NombreTipoOperacion = String.Empty
            objNewOrdenOYDPLUS.Clase = String.Empty
            objNewOrdenOYDPLUS.FechaOrden = dtmFechaServidor
            objNewOrdenOYDPLUS.Clasificacion = String.Empty
            objNewOrdenOYDPLUS.TipoLimite = String.Empty
            objNewOrdenOYDPLUS.Duracion = String.Empty
            objNewOrdenOYDPLUS.FechaVigencia = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, 1, dtmFechaServidor.Date))
            objNewOrdenOYDPLUS.HoraVigencia = "23:59:59"
            objNewOrdenOYDPLUS.Dias = 1
            objNewOrdenOYDPLUS.CondicionesNegociacion = String.Empty
            objNewOrdenOYDPLUS.FormaPago = String.Empty
            objNewOrdenOYDPLUS.TipoInversion = String.Empty
            objNewOrdenOYDPLUS.Ejecucion = String.Empty
            objNewOrdenOYDPLUS.Mercado = String.Empty
            objNewOrdenOYDPLUS.IDComitente = "-9999999999"
            objNewOrdenOYDPLUS.NombreCliente = "(No Seleccionado)"
            objNewOrdenOYDPLUS.NroDocumento = String.Empty
            objNewOrdenOYDPLUS.CategoriaCliente = String.Empty
            objNewOrdenOYDPLUS.IDOrdenante = String.Empty
            objNewOrdenOYDPLUS.NombreOrdenante = String.Empty
            objNewOrdenOYDPLUS.UBICACIONTITULO = String.Empty
            objNewOrdenOYDPLUS.CuentaDeposito = 0
            objNewOrdenOYDPLUS.DescripcionCta = String.Empty
            objNewOrdenOYDPLUS.UsuarioOperador = String.Empty
            objNewOrdenOYDPLUS.CanalRecepcion = String.Empty
            objNewOrdenOYDPLUS.MedioVerificable = String.Empty

            If logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                If logLlevarFechaActualRecepcion Then
                    If logLlevarHoraActualRecepcion Then
                        objNewOrdenOYDPLUS.FechaRecepcion = dtmFechaServidor
                    Else
                        objNewOrdenOYDPLUS.FechaRecepcion = dtmFechaServidor.Date
                    End If
                Else
                    objNewOrdenOYDPLUS.FechaRecepcion = Nothing
                End If
                If logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenOYDPLUS) Then
                    objNewOrdenOYDPLUS.FechaRecepcion = dtmFechaServidor
                ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenOYDPLUS) = False Then
                    objNewOrdenOYDPLUS.FechaRecepcion = Nothing
                End If
            End If

            objNewOrdenOYDPLUS.NroExtensionToma = String.Empty
            objNewOrdenOYDPLUS.Especie = "(No Seleccionado)"
            objNewOrdenOYDPLUS.ISIN = "(No Seleccionado)"
            objNewOrdenOYDPLUS.FechaEmision = Nothing
            objNewOrdenOYDPLUS.FechaVencimiento = Nothing
            objNewOrdenOYDPLUS.Estandarizada = False
            objNewOrdenOYDPLUS.TasaFacial = 0
            objNewOrdenOYDPLUS.Modalidad = String.Empty
            objNewOrdenOYDPLUS.Indicador = String.Empty
            objNewOrdenOYDPLUS.PuntosIndicador = 0
            objNewOrdenOYDPLUS.EnPesos = False
            objNewOrdenOYDPLUS.Cantidad = 0
            objNewOrdenOYDPLUS.Precio = 0
            objNewOrdenOYDPLUS.PrecioMaximoMinimo = 0
            objNewOrdenOYDPLUS.ValorCaptacionGiro = 0
            objNewOrdenOYDPLUS.ValorFuturoRepo = 0
            objNewOrdenOYDPLUS.TasaRegistro = 0
            objNewOrdenOYDPLUS.TasaCliente = 0
            objNewOrdenOYDPLUS.TasaNominal = 0
            objNewOrdenOYDPLUS.Castigo = 0
            objNewOrdenOYDPLUS.ValorAccion = 0
            objNewOrdenOYDPLUS.Comision = 0
            objNewOrdenOYDPLUS.ValorComision = 0
            objNewOrdenOYDPLUS.ValorOrden = 0
            objNewOrdenOYDPLUS.DiasRepo = 0
            objNewOrdenOYDPLUS.ProductoValores = 0
            objNewOrdenOYDPLUS.CostosAdicionales = 0
            objNewOrdenOYDPLUS.Instrucciones = String.Empty
            objNewOrdenOYDPLUS.Notas = String.Empty
            objNewOrdenOYDPLUS.Custodia = 0
            objNewOrdenOYDPLUS.CustodiaSecuencia = 0
            objNewOrdenOYDPLUS.DiasCumplimiento = 0
            objNewOrdenOYDPLUS.RuedaNegocio = String.Empty
            objNewOrdenOYDPLUS.PrecioLimpio = 0
            objNewOrdenOYDPLUS.EstadoTitulo = String.Empty
            objNewOrdenOYDPLUS.Usuario = Program.Usuario
            objNewOrdenOYDPLUS.Modificable = True
            objNewOrdenOYDPLUS.FechaActualizacion = dtmFechaServidor
            objNewOrdenOYDPLUS.EstadoLEO = String.Empty
            objNewOrdenOYDPLUS.NombreEstadoLEO = String.Empty
            objNewOrdenOYDPLUS.ComisionesOrdenesXML = String.Empty
            objNewOrdenOYDPLUS.InstruccionesOrdenesXML = String.Empty
            objNewOrdenOYDPLUS.LiqAsociadasXML = String.Empty
            objNewOrdenOYDPLUS.PagosOrdenesXML = String.Empty
            objNewOrdenOYDPLUS.ReceptoresCruzadasXML = String.Empty
            objNewOrdenOYDPLUS.ReceptoresXML = String.Empty
            objNewOrdenOYDPLUS.OrdenCruzada = False
            objNewOrdenOYDPLUS.OrdenCruzadaCliente = False
            objNewOrdenOYDPLUS.OrdenCruzadaReceptor = False
            objNewOrdenOYDPLUS.IDOrdenOriginal = Nothing
            objNewOrdenOYDPLUS.Constancia = 0
            objNewOrdenOYDPLUS.FechaConstancia = dtmFechaServidor
            objNewOrdenOYDPLUS.ReceptorToma = String.Empty
            objNewOrdenOYDPLUS.NombreReceptorToma = String.Empty

            'objOrden.UsuarioOperador=ConfiguracionReceptor.
            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("O_ESTADOS_ORDEN") Then
                    If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Count > 0 Then
                        objNewOrdenOYDPLUS.EstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Retorno
                        objNewOrdenOYDPLUS.NombreEstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Descripcion
                    Else
                        objNewOrdenOYDPLUS.EstadoOrden = "P"
                        objNewOrdenOYDPLUS.NombreEstadoOrden = "Pendiente"
                    End If
                Else
                    objNewOrdenOYDPLUS.EstadoOrden = "P"
                    objNewOrdenOYDPLUS.NombreEstadoOrden = "Pendiente"
                End If

                If DiccionarioCombosOYDPlusCompleta.ContainsKey("O_ESTADOS_ORDEN_LEO") Then
                    If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Count > 0 Then
                        objNewOrdenOYDPLUS.EstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Retorno
                        objNewOrdenOYDPLUS.NombreEstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Descripcion
                    Else
                        objNewOrdenOYDPLUS.EstadoLEO = "R"
                        objNewOrdenOYDPLUS.NombreEstadoLEO = "Recibida"
                    End If
                Else
                    objNewOrdenOYDPLUS.EstadoLEO = "R"
                    objNewOrdenOYDPLUS.NombreEstadoLEO = "Recibida"
                End If

            End If

            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                If DiccionarioCombosOYDPlusCompleta("BOLSA").Count > 0 Then
                    ' EOMC -- 11/20/2012
                    ' Retorno identifica la bolsa, se estaba asignando el id de la tabla de combosReceptor
                    objNewOrdenOYDPLUS.Bolsa = DiccionarioCombosOYDPlusCompleta("BOLSA").FirstOrDefault.Retorno
                    objNewOrdenOYDPLUS.NombreBolsa = DiccionarioCombosOYDPlusCompleta("BOLSA").FirstOrDefault.Descripcion
                End If
            End If

            MostrarCruzadaCon = Visibility.Collapsed
            MostrarOrdenesSAE = Visibility.Collapsed
            MostrarCamposCompra = Visibility.Collapsed
            MostrarCamposVenta = Visibility.Collapsed

            Confirmaciones = String.Empty

            'Limpia la lista de combos cuando es una nueva orden
            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                DiccionarioCombosOYDPlus.Clear()
            End If

            If Not IsNothing(ListaTipoNegocio) Then
                ListaTipoNegocio.Clear()
            End If

            logCalcularValores = False

            ObtenerValoresOrdenAnterior(objNewOrdenOYDPLUS, OrdenOYDPLUSSelected)

            logCalcularValores = True

            OrdenanteSeleccionadoOYDPLUS = Nothing
            If Not IsNothing(ListaCuentasDepositoOYDPLUS) Then
                Dim objListaCuenta As New List(Of OYDUtilidades.BuscadorCuentasDeposito)
                ListaCuentasDepositoOYDPLUS = Nothing
                ListaCuentasDepositoOYDPLUS = objListaCuenta
            End If

            CtaDepositoSeleccionadaOYDPLUS = Nothing
            If Not IsNothing(ListaReceptoresOrdenes) Then
                Dim objListaRep As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
                ListaReceptoresOrdenes = Nothing
                ReceptoresOrdenSelected = Nothing
                ListaReceptoresOrdenes = objListaRep
            End If

            BeneficiariosOrdenSelected = Nothing
            If Not IsNothing(ListaBeneficiariosOrdenes) Then
                Dim objListaBen As New List(Of OyDPLUSOrdenesBolsa.BeneficiariosOrden)
                ListaBeneficiariosOrdenes = Nothing
                BeneficiariosOrdenSelected = Nothing
                ListaBeneficiariosOrdenes = objListaBen
            End If

            If Not IsNothing(ListaLiquidacionesOrdenes) Then
                Dim objListaLiq As New List(Of OyDPLUSOrdenesBolsa.LiquidacionesOrden)
                ListaLiquidacionesOrdenes = Nothing
                ListaLiquidacionesOrdenes = objListaLiq
            End If

            If Not IsNothing(ListaLiqAsociadasOrdenes) Then
                Dim objListaLiq As New List(Of OyDPLUSOrdenesBolsa.LiqAsociadasOrden)
                ListaLiqAsociadasOrdenes = Nothing
                ListaLiqAsociadasOrdenes = objListaLiq
            End If

            ReceptoresOrdenCruzadaSelected = Nothing
            If Not IsNothing(ListaReceptoresOrdenesCruzada) Then
                Dim objListaReceptores As New List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
                ListaReceptoresOrdenesCruzada = Nothing
                ListaReceptoresOrdenesCruzada = objListaReceptores
            End If

            OrdenesCruzadasSelected = Nothing
            If Not IsNothing(ListaOrdenesCruzadas) Then
                Dim objListaOrdenesCruzadas As New List(Of OyDPLUSOrdenesBolsa.tblOrdenesCruzadas)
                ListaOrdenesCruzadas = Nothing
                ListaOrdenesCruzadas = objListaOrdenesCruzadas
            End If

            ListaInstruccionesOrdenes = Nothing
            InstruccionesOrdeneSelected = Nothing

            Editando = True

            logCalcularValores = True

            'Valida si tiene un receptor por defecto.
            If Not IsNothing(ListaReceptoresUsuario) Then
                If logEsModal = False Then
                    If ListaReceptoresUsuario.Where(Function(i) i.Prioridad = 0).Count > 0 Then
                        _OrdenOYDPLUSSelected.Receptor = ListaReceptoresUsuario.Where(Function(i) i.Prioridad = 0).First.CodigoReceptor
                    ElseIf ListaReceptoresUsuario.Count = 1 Then
                        _OrdenOYDPLUSSelected.Receptor = ListaReceptoresUsuario.FirstOrDefault.CodigoReceptor
                    Else
                        IsBusy = False
                    End If

                    If ListaReceptoresUsuario.Count = 1 Then
                        _OrdenOYDPLUSSelected.ReceptorToma = ListaReceptoresUsuario.FirstOrDefault.CodigoReceptor
                        _OrdenOYDPLUSSelected.NombreReceptorToma = ListaReceptoresUsuario.FirstOrDefault.Nombre
                    End If
                End If
            Else
                IsBusy = False
            End If

            If BorrarCliente Then
                BorrarCliente = False
            End If

            BorrarCliente = True

            If BorrarEspecie Then
                BorrarEspecie = False
            End If

            BorrarEspecie = True

            If BorrarClienteADR Then
                BorrarClienteADR = False
            End If

            BorrarClienteADR = True

            'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
            'JUAN DAVID CORREA MARZO 2015
            ValidarTipoCalculoDefecto(False, OrdenOYDPLUSSelected.TipoNegocio, OrdenOYDPLUSSelected.EnPesos)

            BuscarControlValidacion(ViewOrdenesOYDPLUS, "tabItemValoresComisiones")
            'Se posiciona en el primer registro
            BuscarControlValidacion(ViewOrdenesOYDPLUS, "cboReceptores")

            RaiseEvent TerminoConfigurarNuevoRegistro()

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del nuevo registro", Me.ToString(), "NuevaOrden", Program.TituloSistema, Program.Maquina, ex)
            HabilitarEncabezado = False
            HabilitarOpcionesCruzada = False
            HabilitarNegocio = False
            HabilitarEspecieCumplimiento = False
            HabilitarNegocioComitente = False
            HabilitarDuracion = False
            HabilitarCantidad = False
            HabilitarValorOrden = False
            HabilitarValorRepoOrden = False
            HabilitarCaptacionRepoOrden = False
            HabilitarRepoEnPesos = False
            HabilitarPrecio = False
            HabilitarDatosLeo = False
            HabilitarOfertaPublica = False
            VisibilidadExentoRetencion = Visibility.Collapsed
            HabilitarExentoRetencion = False
            MostrarNegocio = Visibility.Visible
            ObtenerValoresOrdenAnterior(OrdenAnteriorOYDPLUS, OrdenOYDPLUSSelected)
            Editando = False
            EditandoInstrucciones = False
        End Try
    End Sub

    Public Async Sub NuevaOrdenCruzadaPantalla(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            IsBusy = True
            If _OrdenOYDPLUSSelected.IDNroOrden <> pobjOrdenSelected.IDNroOrden Or
                (_OrdenOYDPLUSSelected.IDNroOrden = pobjOrdenSelected.IDNroOrden And _OrdenOYDPLUSSelected.ReceptorParaCruzada <> pobjOrdenSelected.ReceptorParaCruzada) Then
                _OrdenOYDPLUSSelected = pobjOrdenSelected
            End If
            dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
            ConsultarOrdenesCruzadas(_OrdenOYDPLUSSelected.IDNroOrden, True, OPCION_ORDENCRUZADA)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del nuevo registro", Me.ToString(), "NuevaOrdenCruzadaPantalla", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para crear la nueva orden cruzada.
    ''' Desarrollado por Juan David Correa
    ''' Fecha 18 de marzo del 2013
    ''' </summary>
    ''' <param name="dblValorSugerido"></param>
    ''' <param name="pstrNombreReceptor"></param>
    ''' <remarks></remarks>
    Public Sub NuevaOrdenCruzada(ByVal dblValorSugerido As Double, Optional ByVal pstrReceptor As String = "", Optional ByVal pstrNombreReceptor As String = "")
        Try

            'Salva los datos de la orden selected para evitar que la recarga de combos borre la información.
            'ObtenerValoresOrdenAnterior(_OrdenOYDPLUSSelected, OrdenAnteriorOYDPLUS)
            logCalcularValores = False

            Dim objNewOrdenOYDPLUS As New OyDPLUSOrdenesBolsa.OrdenOYDPLUS
            objNewOrdenOYDPLUS.IDNroOrden = 0
            objNewOrdenOYDPLUS.NroOrden = 0
            objNewOrdenOYDPLUS.Receptor = IIf(String.IsNullOrEmpty(pstrReceptor), _OrdenOYDPLUSSelected.ReceptorParaCruzada, pstrReceptor)
            objNewOrdenOYDPLUS.NombreReceptor = IIf(String.IsNullOrEmpty(pstrNombreReceptor), _OrdenOYDPLUSSelected.NombreReceptorParaCruzada, pstrNombreReceptor)
            objNewOrdenOYDPLUS.TipoOrden = _OrdenOYDPLUSSelected.TipoOrden
            objNewOrdenOYDPLUS.NombreTipoOrden = _OrdenOYDPLUSSelected.NombreTipoOrden
            objNewOrdenOYDPLUS.TipoNegocio = _OrdenOYDPLUSSelected.TipoNegocio
            objNewOrdenOYDPLUS.NombreTipoNegocio = _OrdenOYDPLUSSelected.NombreTipoNegocio
            objNewOrdenOYDPLUS.TipoOperacion = IIf(_OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_COMPRA, TIPOOPERACION_VENTA, TIPOOPERACION_COMPRA)
            objNewOrdenOYDPLUS.NombreTipoOperacion = IIf(objNewOrdenOYDPLUS.TipoOperacion = TIPOOPERACION_COMPRA, "Compra", "Venta")
            If objNewOrdenOYDPLUS.TipoOperacion = TIPOOPERACION_COMPRA Then
                MostrarCamposVenta = Visibility.Collapsed
                MostrarCamposCompra = Visibility.Visible
            Else
                MostrarCamposVenta = Visibility.Visible
                MostrarCamposCompra = Visibility.Collapsed
            End If
            objNewOrdenOYDPLUS.Clase = _OrdenOYDPLUSSelected.Clase
            objNewOrdenOYDPLUS.FechaOrden = dtmFechaServidor
            objNewOrdenOYDPLUS.Clasificacion = _OrdenOYDPLUSSelected.Clasificacion
            objNewOrdenOYDPLUS.TipoLimite = _OrdenOYDPLUSSelected.TipoLimite
            objNewOrdenOYDPLUS.Duracion = _OrdenOYDPLUSSelected.Duracion
            objNewOrdenOYDPLUS.FechaVigencia = _OrdenOYDPLUSSelected.FechaVigencia
            objNewOrdenOYDPLUS.HoraVigencia = _OrdenOYDPLUSSelected.HoraVigencia
            objNewOrdenOYDPLUS.Dias = _OrdenOYDPLUSSelected.Dias
            objNewOrdenOYDPLUS.CondicionesNegociacion = _OrdenOYDPLUSSelected.CondicionesNegociacion
            objNewOrdenOYDPLUS.FormaPago = _OrdenOYDPLUSSelected.FormaPago
            objNewOrdenOYDPLUS.TipoInversion = _OrdenOYDPLUSSelected.TipoInversion
            objNewOrdenOYDPLUS.Ejecucion = _OrdenOYDPLUSSelected.Ejecucion
            objNewOrdenOYDPLUS.Mercado = _OrdenOYDPLUSSelected.Mercado
            objNewOrdenOYDPLUS.Entidad = _OrdenOYDPLUSSelected.Entidad
            objNewOrdenOYDPLUS.Estrategia = _OrdenOYDPLUSSelected.Estrategia
            objNewOrdenOYDPLUS.IDComitente = "-9999999999"
            objNewOrdenOYDPLUS.NombreCliente = "(No Seleccionado)"
            objNewOrdenOYDPLUS.NroDocumento = String.Empty
            objNewOrdenOYDPLUS.CategoriaCliente = String.Empty
            objNewOrdenOYDPLUS.IDOrdenante = String.Empty
            objNewOrdenOYDPLUS.NombreOrdenante = String.Empty
            objNewOrdenOYDPLUS.UBICACIONTITULO = String.Empty
            objNewOrdenOYDPLUS.CuentaDeposito = 0
            objNewOrdenOYDPLUS.DescripcionCta = String.Empty
            objNewOrdenOYDPLUS.UsuarioOperador = String.Empty
            objNewOrdenOYDPLUS.CanalRecepcion = String.Empty
            objNewOrdenOYDPLUS.MedioVerificable = String.Empty
            objNewOrdenOYDPLUS.NroExtensionToma = String.Empty
            objNewOrdenOYDPLUS.ReceptorToma = String.Empty
            objNewOrdenOYDPLUS.NombreReceptorToma = String.Empty

            objNewOrdenOYDPLUS.Especie = _OrdenOYDPLUSSelected.Especie
            objNewOrdenOYDPLUS.ISIN = _OrdenOYDPLUSSelected.ISIN
            objNewOrdenOYDPLUS.FechaEmision = _OrdenOYDPLUSSelected.FechaEmision
            objNewOrdenOYDPLUS.FechaVencimiento = _OrdenOYDPLUSSelected.FechaVencimiento
            objNewOrdenOYDPLUS.DiasCumplimiento = _OrdenOYDPLUSSelected.DiasCumplimiento
            objNewOrdenOYDPLUS.DiasRepo = _OrdenOYDPLUSSelected.DiasRepo
            objNewOrdenOYDPLUS.FechaSalida = _OrdenOYDPLUSSelected.FechaSalida
            objNewOrdenOYDPLUS.TipoGarantia = _OrdenOYDPLUSSelected.TipoGarantia

            objNewOrdenOYDPLUS.Estandarizada = _OrdenOYDPLUSSelected.Estandarizada
            objNewOrdenOYDPLUS.FechaCumplimiento = _OrdenOYDPLUSSelected.FechaCumplimiento
            objNewOrdenOYDPLUS.Modalidad = _OrdenOYDPLUSSelected.Modalidad
            objNewOrdenOYDPLUS.TasaFacial = _OrdenOYDPLUSSelected.TasaFacial
            If Not IsNothing(_OrdenOYDPLUSSelected.Modalidad) Then
                If DiccionarioCombosOYDPlus.ContainsKey("MODALIDAD") Then
                    If DiccionarioCombosOYDPlus("MODALIDAD").Where(Function(i) i.Retorno = _OrdenOYDPLUSSelected.Modalidad).Count > 0 Then
                        objNewOrdenOYDPLUS.NombreModalidad = DiccionarioCombosOYDPlus("MODALIDAD").Where(Function(i) i.Retorno = _OrdenOYDPLUSSelected.Modalidad).First.Descripcion
                    End If
                End If
            End If

            objNewOrdenOYDPLUS.Indicador = _OrdenOYDPLUSSelected.Indicador
            objNewOrdenOYDPLUS.PuntosIndicador = _OrdenOYDPLUSSelected.PuntosIndicador
            objNewOrdenOYDPLUS.TipoTasaFija = _OrdenOYDPLUSSelected.TipoTasaFija
            objNewOrdenOYDPLUS.EspecieEsAccion = _OrdenOYDPLUSSelected.EspecieEsAccion
            objNewOrdenOYDPLUS.EnPesos = _OrdenOYDPLUSSelected.EnPesos
            objNewOrdenOYDPLUS.Cantidad = dblValorSugerido
            objNewOrdenOYDPLUS.Precio = _OrdenOYDPLUSSelected.Precio
            objNewOrdenOYDPLUS.PrecioMaximoMinimo = _OrdenOYDPLUSSelected.PrecioMaximoMinimo
            objNewOrdenOYDPLUS.ValorCaptacionGiro = 0
            objNewOrdenOYDPLUS.ValorFuturoRepo = 0
            objNewOrdenOYDPLUS.TasaRegistro = _OrdenOYDPLUSSelected.TasaRegistro
            objNewOrdenOYDPLUS.TasaCliente = 0
            objNewOrdenOYDPLUS.TasaNominal = 0
            objNewOrdenOYDPLUS.Castigo = _OrdenOYDPLUSSelected.Castigo
            objNewOrdenOYDPLUS.ValorAccion = _OrdenOYDPLUSSelected.ValorAccion
            objNewOrdenOYDPLUS.Comision = 0
            objNewOrdenOYDPLUS.ValorComision = 0
            objNewOrdenOYDPLUS.ValorOrden = 0
            objNewOrdenOYDPLUS.ProductoValores = _OrdenOYDPLUSSelected.ProductoValores
            objNewOrdenOYDPLUS.CostosAdicionales = _OrdenOYDPLUSSelected.CostosAdicionales
            objNewOrdenOYDPLUS.Instrucciones = String.Empty
            objNewOrdenOYDPLUS.Notas = String.Empty
            objNewOrdenOYDPLUS.Custodia = 0
            objNewOrdenOYDPLUS.CustodiaSecuencia = 0
            objNewOrdenOYDPLUS.RuedaNegocio = String.Empty
            objNewOrdenOYDPLUS.PrecioLimpio = 0
            objNewOrdenOYDPLUS.EstadoTitulo = String.Empty
            objNewOrdenOYDPLUS.Usuario = Program.Usuario
            objNewOrdenOYDPLUS.Modificable = True
            objNewOrdenOYDPLUS.FechaActualizacion = dtmFechaServidor
            objNewOrdenOYDPLUS.EstadoLEO = String.Empty
            objNewOrdenOYDPLUS.NombreEstadoLEO = String.Empty
            objNewOrdenOYDPLUS.ComisionesOrdenesXML = String.Empty
            objNewOrdenOYDPLUS.InstruccionesOrdenesXML = String.Empty
            objNewOrdenOYDPLUS.LiqAsociadasXML = String.Empty
            objNewOrdenOYDPLUS.PagosOrdenesXML = String.Empty
            objNewOrdenOYDPLUS.ReceptoresCruzadasXML = String.Empty
            objNewOrdenOYDPLUS.ReceptoresXML = String.Empty
            objNewOrdenOYDPLUS.OrdenCruzada = True
            objNewOrdenOYDPLUS.OrdenCruzadaCliente = False
            objNewOrdenOYDPLUS.OrdenCruzadaReceptor = False
            objNewOrdenOYDPLUS.IDOrdenOriginal = _OrdenOYDPLUSSelected.IDNroOrden
            objNewOrdenOYDPLUS.IDNroOrdenOriginal = _OrdenOYDPLUSSelected.NroOrden

            'objOrden.UsuarioOperador=ConfiguracionReceptor.
            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Count > 0 Then
                    objNewOrdenOYDPLUS.EstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Retorno
                    objNewOrdenOYDPLUS.NombreEstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Descripcion
                End If

                If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Count > 0 Then
                    objNewOrdenOYDPLUS.EstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Retorno
                    objNewOrdenOYDPLUS.NombreEstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Descripcion
                End If
            End If

            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                If DiccionarioCombosOYDPlusCompleta("BOLSA").Count > 0 Then
                    ' EOMC -- 11/20/2012
                    ' Retorno identifica la bolsa, se estaba asignando el id de la tabla de combosReceptor
                    objNewOrdenOYDPLUS.Bolsa = DiccionarioCombosOYDPlusCompleta("BOLSA").FirstOrDefault.Retorno
                    objNewOrdenOYDPLUS.NombreBolsa = DiccionarioCombosOYDPlusCompleta("BOLSA").FirstOrDefault.Descripcion
                End If
            End If

            'Limpia la lista de combos cuando es una nueva orden
            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                DiccionarioCombosOYDPlus.Clear()
            End If

            logCalcularValores = False
            If logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenOYDPLUS) Then
                objNewOrdenOYDPLUS.FechaRecepcion = dtmFechaServidor
            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenOYDPLUS) = False Then
                objNewOrdenOYDPLUS.FechaRecepcion = Nothing
            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                If logLlevarFechaActualRecepcion Then
                    If logLlevarHoraActualRecepcion Then
                        objNewOrdenOYDPLUS.FechaRecepcion = dtmFechaServidor
                    Else
                        objNewOrdenOYDPLUS.FechaRecepcion = dtmFechaServidor.Date
                    End If
                Else
                    objNewOrdenOYDPLUS.FechaRecepcion = Nothing
                End If
                LlevarRecetorOrdenDistribucionComision(objNewOrdenOYDPLUS, True)
            Else
                If Not IsNothing(ListaDistribucionComisionCruzada) Then
                    Dim objListaRep As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
                    ListaDistribucionComisionCruzada = Nothing
                    DistribucionComisionCruzadaSelected = Nothing
                    ListaDistribucionComisionCruzada = objListaRep
                End If

                If logLlevarFechaActualRecepcion Then
                    If logLlevarHoraActualRecepcion Then
                        objNewOrdenOYDPLUS.FechaRecepcion = dtmFechaServidor
                    Else
                        objNewOrdenOYDPLUS.FechaRecepcion = dtmFechaServidor.Date
                    End If
                Else
                    objNewOrdenOYDPLUS.FechaRecepcion = Nothing
                End If
            End If

            'Lleva el valor de la nueva orden cruzada al selected.
            ObtenerValoresOrdenAnterior(objNewOrdenOYDPLUS, OrdenCruzadaSelected)
            ObtenerValoresOrdenAnterior(_OrdenCruzadaSelected, OrdenAnteriorOYDPLUS)

            OrdenanteSeleccionadoCruzada = Nothing
            CtaDepositoSeleccionadaCruzada = Nothing
            If Not IsNothing(ListaCuentasDepositoCruzada) Then
                Dim objListaCuenta As New List(Of OYDUtilidades.BuscadorCuentasDeposito)
                ListaCuentasDepositoCruzada = Nothing
                ListaCuentasDepositoCruzada = objListaCuenta
            End If

            If BorrarClienteCruzada Then
                BorrarClienteCruzada = False
            End If

            BorrarClienteCruzada = True

            logNuevoRegistro = True
            logEditarRegistro = False
            logDuplicarRegistro = False
            logPlantillaRegistro = False
            logCancelarRegistro = False
            HabilitarClienteCruzada = False

            ValidarTipoCalculoDefecto(True, objNewOrdenOYDPLUS.TipoNegocio, objNewOrdenOYDPLUS.EnPesos)

            CalcularDiasPlazo(_OrdenCruzadaSelected)

            CalcularFechaVigenciaOrden(_OrdenCruzadaSelected)

            logCalcularValores = True
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del nuevo registro", Me.ToString(), "NuevaOrdenCruzada", Program.TituloSistema, Program.Maquina, ex)
            MostrarNegocio = Visibility.Visible
            ObtenerValoresOrdenAnterior(OrdenAnteriorOYDPLUS, OrdenOYDPLUSSelected)
            logCalcularValores = True
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para preguntar sí se desea duplicar la orden que este seleccionada.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 22 de marzo del 2013
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub PreguntarDuplicarOrden()
        Try


            If logCargoForma = False Then
                ViewOrdenesOYDPLUS.GridEdicion.Children.Add(viewFormaOrdenes)
                logCargoForma = True
            End If
            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("DUPLICAR_ORDENPLUS") Then
                    If DiccionarioCombosOYDPlusCompleta("DUPLICAR_ORDENPLUS").Count > 0 Then
                        logDuplicarParametro = CBool(DiccionarioCombosOYDPlusCompleta("DUPLICAR_ORDENPLUS").FirstOrDefault.Retorno)
                    End If
                End If
            End If

            If Not IsNothing(_OrdenOYDPLUSSelected) Then

                mostrarMensajePregunta("¿Está seguro que desea duplicar la orden?",
                                   Program.TituloSistema,
                                   "DUPLICARORDEN",
                                   AddressOf TerminoMensajePregunta, False)




            Else
                mostrarMensaje("Debe de seleccionar una orden para duplicar la orden.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al preguntar sí se deseaba duplicar la orden", Me.ToString(), "PreguntarDuplicarOrden", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub PreguntarGenerarPlantillaOrden()
        Try
            If logCargoForma = False Then
                ViewOrdenesOYDPLUS.GridEdicion.Children.Add(viewFormaOrdenes)
                logCargoForma = True
                MyBase.CambiarFormulario_Forma_Manual()
            End If

            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                Dim objNombrePlatilla As New NombrePlantillaOYDPLUSView(Me)
                Program.Modal_OwnerMainWindowsPrincipal(objNombrePlatilla)
                objNombrePlatilla.ShowDialog()
            Else
                mostrarMensaje("Debe de seleccionar una orden para generar la plantilla.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al preguntar sí se deseaba generar la plantilla de la orden", Me.ToString(), "PreguntarGenerarPlantillaOrden", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub


    Public Sub PreguntarAbrirConsultaPlantillasOrden()
        Try
            Dim objPlantillas As New ConsultaPlantillasView(Me)
            Program.Modal_OwnerMainWindowsPrincipal(objPlantillas)
            objPlantillas.ShowDialog()
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al preguntar sí se deseaba consultar la plantilla de la orden", Me.ToString(), "PreguntarAbrirConsultaPlantillasOrden", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub ValidarExistenciaNombrePlantillaOrden(ByVal pstrNombrePlantilla As String, ByVal pviewNombrePlantillas As NombrePlantillaOYDPLUSView)
        Try
            viewNombrePlantilla = Nothing
            viewNombrePlantilla = pviewNombrePlantillas

            IsBusyPlantilla = True

            dcProxyPlantilla.OYDPLUS_OrdenesPlantillasVerificarNombre(pstrNombrePlantilla, Modulo, Program.Usuario, Program.HashConexion, AddressOf TerminoVerificarNombrePlantilla, pstrNombrePlantilla)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al preguntar sí se deseaba duplicar la orden", Me.ToString(), "ValidarExistenciaNombrePlantillaOrden", Program.TituloSistema, Program.Maquina, ex)
            IsBusyPlantilla = False
        End Try
    End Sub

    Public Sub ConsultarPlantillasOrden()
        Try
            IsBusyPlantilla = True

            If IsNothing(FiltroPlantillas) Then
                FiltroPlantillas = String.Empty
            End If

            If Not IsNothing(dcProxyPlantilla.OrdenOYDPLUS) Then
                dcProxyPlantilla.OrdenOYDPLUS.Clear()
            End If
            dcProxyPlantilla.Load(dcProxyPlantilla.OYDPLUS_OrdenesPlantillasConsultarQuery(_FiltroPlantillas, Modulo, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarPlantillas, String.Empty)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar los parametros del receptor.",
                                 Me.ToString(), "ConsultarPlantillasOrden", Application.Current.ToString(), Program.Maquina, ex)
            IsBusyPlantilla = False
        End Try
    End Sub

    Public Sub EliminarPlantillasOrden()
        Try
            Dim strPlantillasEliminar As String = String.Empty

            For Each li In _ListaPlantillas
                If li.Seleccionada Then
                    If String.IsNullOrEmpty(strPlantillasEliminar) Then
                        strPlantillasEliminar = li.IDNroOrden.ToString
                    Else
                        strPlantillasEliminar = String.Format("{0}|{1}", strPlantillasEliminar, li.IDNroOrden)
                    End If
                End If
            Next

            If Not String.IsNullOrEmpty(strPlantillasEliminar) Then
                IsBusyPlantilla = True
                If Not IsNothing(dcProxyPlantilla.tblRespuestaValidaciones) Then
                    dcProxyPlantilla.tblRespuestaValidaciones.Clear()
                End If
                dcProxyPlantilla.Load(dcProxyPlantilla.OYDPLUS_OrdenesPlantillasEliminarQuery(strPlantillasEliminar, Modulo, Program.Usuario, Program.HashConexion), AddressOf TerminoEliminarPlantillas, String.Empty)
            Else
                mostrarMensaje("No se ha seleccionado ninguna plantilla para eliminar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar los parametros del receptor.",
                                 Me.ToString(), "EliminarPlantillasOrden", Application.Current.ToString(), Program.Maquina, ex)
            IsBusyPlantilla = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para duplicar la orden.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 22 de marzo del 2013
    ''' </summary>
    ''' <remarks></remarks>
    Public Async Sub DuplicarOrden()
        Try
            OrdenAnteriorOYDPLUS = Nothing

            ObtenerValoresOrdenAnterior(_OrdenOYDPLUSSelected, OrdenAnteriorOYDPLUS)
            dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
            mdtmFechaCierreSistema = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaCierreSistema(MSTR_MODULO_OYD_ORDENES, Program.Usuario)

            'Crea la nueva orden para duplicar.
            Dim objNewOrdenDuplicar As New OyDPLUSOrdenesBolsa.OrdenOYDPLUS
            ObtenerValoresOrdenAnterior(_OrdenOYDPLUSSelected, objNewOrdenDuplicar)

            objNewOrdenDuplicar.IDNroOrden = 0
            objNewOrdenDuplicar.NroOrden = 0
            objNewOrdenDuplicar.FechaOrden = dtmFechaServidor
            objNewOrdenDuplicar.FechaActualizacion = dtmFechaServidor
            objNewOrdenDuplicar.UsuarioOperador = String.Empty
            objNewOrdenDuplicar.MedioVerificable = _OrdenOYDPLUSSelected.MedioVerificable
            objNewOrdenDuplicar.UsuarioOperador = _OrdenOYDPLUSSelected.UsuarioOperador

            If logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                If logLlevarFechaActualRecepcion Then
                    If logLlevarHoraActualRecepcion Then
                        objNewOrdenDuplicar.FechaRecepcion = dtmFechaServidor
                    Else
                        objNewOrdenDuplicar.FechaRecepcion = dtmFechaServidor.Date
                    End If
                Else
                    objNewOrdenDuplicar.FechaRecepcion = Nothing
                End If
            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenDuplicar) Then
                objNewOrdenDuplicar.FechaRecepcion = dtmFechaServidor.Date
            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenDuplicar) = False Then
                objNewOrdenDuplicar.FechaRecepcion = Nothing
            End If
            If logDuplicarParametroAceptar = True Then
                objNewOrdenDuplicar.FechaRecepcion = dtmFechaServidor
            Else
                objNewOrdenDuplicar.FechaRecepcion = OrdenAnteriorOYDPLUS.FechaRecepcion
                FechaDuplicaParametro = OrdenAnteriorOYDPLUS.FechaRecepcion
            End If
            objNewOrdenDuplicar.EstadoLEO = String.Empty
            objNewOrdenDuplicar.NombreEstadoLEO = String.Empty
            objNewOrdenDuplicar.EstadoOrden = String.Empty
            objNewOrdenDuplicar.NombreEstadoOrden = String.Empty
            objNewOrdenDuplicar.OrdenCruzada = False
            objNewOrdenDuplicar.OrdenCruzadaCliente = False
            objNewOrdenDuplicar.OrdenCruzadaReceptor = False
            objNewOrdenDuplicar.IDNroOrdenOriginal = Nothing
            objNewOrdenDuplicar.IDOrdenOriginal = Nothing
            objNewOrdenDuplicar.NroOrdenSAE = Nothing
            objNewOrdenDuplicar.EstadoSAE = Nothing
            objNewOrdenDuplicar.NombreEstadoSAE = Nothing
            objNewOrdenDuplicar.Notas = String.Empty
            objNewOrdenDuplicar.Usuario = Program.Usuario
            objNewOrdenDuplicar.NroExtensionToma = _OrdenOYDPLUSSelected.NroExtensionToma
            'objOrden.UsuarioOperador=ConfiguracionReceptor.
            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("O_ESTADOS_ORDEN") Then
                    If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Count > 0 Then
                        objNewOrdenDuplicar.EstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Retorno
                        objNewOrdenDuplicar.NombreEstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Descripcion
                    End If
                End If


                If DiccionarioCombosOYDPlusCompleta.ContainsKey("O_ESTADOS_ORDEN_LEO") Then
                    If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Count > 0 Then
                        objNewOrdenDuplicar.EstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Retorno
                        objNewOrdenDuplicar.NombreEstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Descripcion
                    End If
                End If
            End If

            logCancelarRegistro = False
            logEditarRegistro = True
            logDuplicarRegistro = True
            logNuevoRegistro = False
            logDiasCumplimiento = True
            logCambiarDetallesOrden = True
            HabilitarUsuarioOperador = True
            MostrarOrdenesCruzadas = Visibility.Collapsed
            MostrarReceptoresCruzada = Visibility.Collapsed
            logEliminarAsociacion = False
            LiquidacionesHabilitarControles = String.Empty
            EditandoInstrucciones = True
            logPreguntoAsociacion = False

            ValidarTipoCalculoDefecto(False, objNewOrdenDuplicar.TipoNegocio, objNewOrdenDuplicar.EnPesos)

            ObtenerValoresOrdenAnterior(objNewOrdenDuplicar, OrdenDuplicarOYDPLUS)

            Dim objNuevaListaDistribucion As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
            For Each li In ListaReceptoresOrdenes
                objNuevaListaDistribucion.Add(li)
            Next
            ListaDistribucionComisionSalvar = objNuevaListaDistribucion
            CargarTipoNegocioReceptor(OPCION_DUPLICAR, _OrdenOYDPLUSSelected.Receptor, _Modulo, OPCION_DUPLICAR)
            ListaLiquidacionesSAERentaFija = New List(Of SAELiquidacionesSeleccionadas)
            ListaLiquidacionesSAEAcciones = New List(Of SAELiquidacionesSeleccionadas)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del registro duplicado", Me.ToString(), "DuplicarOrden", Program.TituloSistema, Program.Maquina, ex)
            Editando = False
            HabilitarEncabezado = False
            HabilitarOpcionesCruzada = False
            HabilitarNegocio = False
            HabilitarEspecieCumplimiento = False
            HabilitarNegocioComitente = False
            HabilitarDuracion = False
            HabilitarCantidad = False
            HabilitarValorOrden = False
            HabilitarValorRepoOrden = False
            HabilitarCaptacionRepoOrden = False
            HabilitarRepoEnPesos = False
            HabilitarPrecio = False
            HabilitarDatosLeo = False
            EditandoInstrucciones = False
            MostrarNegocio = Visibility.Visible
            ObtenerValoresOrdenAnterior(OrdenAnteriorOYDPLUS, OrdenOYDPLUSSelected)
        End Try
    End Sub

    Public Async Sub PlantillaOrden()
        Try
            OrdenAnteriorOYDPLUS = Nothing

            ObtenerValoresOrdenAnterior(_OrdenOYDPLUSSelected, OrdenAnteriorOYDPLUS)

            dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
            mdtmFechaCierreSistema = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaCierreSistema(MSTR_MODULO_OYD_ORDENES, Program.Usuario)

            'Crea la nueva orden para duplicar.
            Dim objNewOrdenPlantilla As New OyDPLUSOrdenesBolsa.OrdenOYDPLUS
            ObtenerValoresOrdenAnterior(_OrdenOYDPLUSSelected, objNewOrdenPlantilla)

            If LOG_BORRARCAMPOSLEO Then
                objNewOrdenPlantilla.FechaRecepcion = Nothing
            End If


            'objNewOrdenPlantilla.IDNroOrden = 0
            objNewOrdenPlantilla.NroOrden = 0
            objNewOrdenPlantilla.FechaOrden = dtmFechaServidor
            objNewOrdenPlantilla.FechaActualizacion = dtmFechaServidor
            objNewOrdenPlantilla.EstadoLEO = String.Empty
            objNewOrdenPlantilla.NombreEstadoLEO = String.Empty
            objNewOrdenPlantilla.EstadoOrden = String.Empty
            objNewOrdenPlantilla.NombreEstadoOrden = String.Empty
            objNewOrdenPlantilla.IDNroOrdenOriginal = Nothing
            objNewOrdenPlantilla.IDOrdenOriginal = Nothing
            objNewOrdenPlantilla.NroOrdenSAE = Nothing
            objNewOrdenPlantilla.EstadoSAE = Nothing
            objNewOrdenPlantilla.NombreEstadoSAE = Nothing
            objNewOrdenPlantilla.Usuario = Program.Usuario

            If logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                If logLlevarFechaActualRecepcion Then
                    If logLlevarHoraActualRecepcion Then
                        objNewOrdenPlantilla.FechaRecepcion = dtmFechaServidor
                    Else
                        objNewOrdenPlantilla.FechaRecepcion = dtmFechaServidor.Date
                    End If
                Else
                    objNewOrdenPlantilla.FechaRecepcion = Nothing
                End If
            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenPlantilla) Then
                objNewOrdenPlantilla.FechaRecepcion = dtmFechaServidor.Date
            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenPlantilla) = False Then
                objNewOrdenPlantilla.FechaRecepcion = Nothing
            End If

            'objOrden.UsuarioOperador=ConfiguracionReceptor.
            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("O_ESTADOS_ORDEN") Then
                    If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Count > 0 Then
                        objNewOrdenPlantilla.EstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Retorno
                        objNewOrdenPlantilla.NombreEstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Descripcion
                    End If
                End If

                If DiccionarioCombosOYDPlusCompleta.ContainsKey("O_ESTADOS_ORDEN_LEO") Then
                    If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Count > 0 Then
                        objNewOrdenPlantilla.EstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Retorno
                        objNewOrdenPlantilla.NombreEstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Descripcion
                    End If
                End If
            End If

            logCancelarRegistro = False
            logEditarRegistro = True
            logDuplicarRegistro = False
            logPlantillaRegistro = True
            logNuevoRegistro = False
            logPlantillaRegistro = True
            logCambiarDetallesOrden = True
            HabilitarUsuarioOperador = True
            logEliminarAsociacion = False

            MostrarOrdenesCruzadas = Visibility.Collapsed
            MostrarReceptoresCruzada = Visibility.Collapsed

            ValidarTipoCalculoDefecto(False, objNewOrdenPlantilla.TipoNegocio, objNewOrdenPlantilla.EnPesos)

            ObtenerValoresOrdenAnterior(objNewOrdenPlantilla, OrdenPlantillaOYDPLUS)



            CargarTipoNegocioReceptor(OPCION_PLANTILLA, _OrdenOYDPLUSSelected.Receptor, _Modulo, OPCION_PLANTILLA)
            ListaLiquidacionesSAERentaFija = New List(Of SAELiquidacionesSeleccionadas)
            ListaLiquidacionesSAEAcciones = New List(Of SAELiquidacionesSeleccionadas)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del registro plantilla", Me.ToString(), "PlantillaOrden", Program.TituloSistema, Program.Maquina, ex)
            Editando = False
            HabilitarEncabezado = False
            HabilitarOpcionesCruzada = False
            HabilitarNegocio = False
            HabilitarEspecieCumplimiento = False
            HabilitarNegocioComitente = False
            HabilitarDuracion = False
            HabilitarCantidad = False
            HabilitarValorOrden = False
            HabilitarValorRepoOrden = False
            HabilitarCaptacionRepoOrden = False
            HabilitarRepoEnPesos = False
            HabilitarPrecio = False
            HabilitarDatosLeo = False
            MostrarNegocio = Visibility.Visible
            HabilitarOfertaPublica = False
            ObtenerValoresOrdenAnterior(OrdenAnteriorOYDPLUS, OrdenOYDPLUSSelected)
        End Try
    End Sub

    Public Async Sub CrearOrdenAPartirPlantilla(ByVal viewPlantilla As ConsultaPlantillasView)
        Try
            If logCargoForma = False Then
                ViewOrdenesOYDPLUS.GridEdicion.Children.Add(viewFormaOrdenes)
                logCargoForma = True
            End If

            Dim intCantidadSeleccionada As Integer = 0

            dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
            mdtmFechaCierreSistema = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaCierreSistema(MSTR_MODULO_OYD_ORDENES, Program.Usuario)

            For Each li In _ListaPlantillas
                If li.Seleccionada Then
                    intCantidadSeleccionada += 1
                    _PlantillaSeleccionada = li
                End If
            Next

            If intCantidadSeleccionada = 0 Then
                mostrarMensaje("Debe de seleccionar una plantilla.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Exit Sub
            End If

            If intCantidadSeleccionada > 1 Then
                mostrarMensaje("Debe de seleccionar solo una plantilla.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Exit Sub
            End If

            viewPlantilla.DialogResult = True
            IsBusy = True

            OrdenAnteriorOYDPLUS = Nothing

            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                ObtenerValoresOrdenAnterior(_OrdenOYDPLUSSelected, OrdenAnteriorOYDPLUS)
            End If

            'Crea la nueva orden para duplicar.
            Dim objNewOrdenPlantilla As New OyDPLUSOrdenesBolsa.OrdenOYDPLUS
            ObtenerValoresOrdenAnterior(_PlantillaSeleccionada, objNewOrdenPlantilla)

            objNewOrdenPlantilla.IDNroOrden = 0
            objNewOrdenPlantilla.NroOrden = 0
            objNewOrdenPlantilla.FechaOrden = dtmFechaServidor
            objNewOrdenPlantilla.FechaActualizacion = dtmFechaServidor
            objNewOrdenPlantilla.EstadoLEO = String.Empty
            objNewOrdenPlantilla.NombreEstadoLEO = String.Empty
            objNewOrdenPlantilla.EstadoOrden = String.Empty
            objNewOrdenPlantilla.NombreEstadoOrden = String.Empty
            objNewOrdenPlantilla.IDNroOrdenOriginal = Nothing
            objNewOrdenPlantilla.IDOrdenOriginal = Nothing
            objNewOrdenPlantilla.NroOrdenSAE = Nothing
            objNewOrdenPlantilla.EstadoSAE = Nothing
            objNewOrdenPlantilla.NombreEstadoSAE = Nothing
            objNewOrdenPlantilla.Usuario = Program.Usuario

            If logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                If logLlevarFechaActualRecepcion Then
                    If logLlevarHoraActualRecepcion Then
                        objNewOrdenPlantilla.FechaRecepcion = dtmFechaServidor
                    Else
                        objNewOrdenPlantilla.FechaRecepcion = dtmFechaServidor.Date
                    End If
                Else
                    objNewOrdenPlantilla.FechaRecepcion = Nothing
                End If
            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenPlantilla) Then
                objNewOrdenPlantilla.FechaRecepcion = dtmFechaServidor.Date
            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objNewOrdenPlantilla) = False Then
                objNewOrdenPlantilla.FechaRecepcion = Nothing
            End If

            'objOrden.UsuarioOperador=ConfiguracionReceptor.
            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Count > 0 Then
                    objNewOrdenPlantilla.EstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Retorno
                    objNewOrdenPlantilla.NombreEstadoOrden = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN").Where(Function(i) i.Retorno = ESTADOORDEN_PENDIENTE).FirstOrDefault.Descripcion
                End If

                If DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Count > 0 Then
                    objNewOrdenPlantilla.EstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Retorno
                    objNewOrdenPlantilla.NombreEstadoLEO = DiccionarioCombosOYDPlusCompleta("O_ESTADOS_ORDEN_LEO").Where(Function(i) i.Retorno = ESTADOORDENLEO_RECIBIDA).FirstOrDefault.Descripcion
                End If
            End If

            logCancelarRegistro = False
            logEditarRegistro = True
            logDuplicarRegistro = False
            logPlantillaRegistro = False
            logNuevoRegistro = False
            logPlantillaRegistro = True
            logCambiarDetallesOrden = True
            HabilitarUsuarioOperador = True
            MostrarOrdenesCruzadas = Visibility.Collapsed
            MostrarReceptoresCruzada = Visibility.Collapsed

            ObtenerValoresOrdenAnterior(objNewOrdenPlantilla, OrdenPlantillaOYDPLUS)

            Dim objNuevaListaDistribucion As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
            If Not IsNothing(ListaReceptoresOrdenes) Then
                For Each li In ListaReceptoresOrdenes
                    objNuevaListaDistribucion.Add(li)
                Next
            End If


            CargarTipoNegocioReceptor(OPCION_CREARORDENPLANTILLA, _OrdenPlantillaOYDPLUS.Receptor, _Modulo, OPCION_CREARORDENPLANTILLA)

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización al crear la plantilla", Me.ToString(), "CrearOrdenAPartirPlantilla", Program.TituloSistema, Program.Maquina, ex)
            Editando = False
            HabilitarEncabezado = False
            HabilitarOpcionesCruzada = False
            HabilitarNegocio = False
            HabilitarEspecieCumplimiento = False
            HabilitarNegocioComitente = False
            HabilitarDuracion = False
            HabilitarCantidad = False
            HabilitarValorOrden = False
            HabilitarValorRepoOrden = False
            HabilitarCaptacionRepoOrden = False
            HabilitarRepoEnPesos = False
            HabilitarPrecio = False
            HabilitarDatosLeo = False
            MostrarNegocio = Visibility.Visible
            HabilitarOfertaPublica = False
            ObtenerValoresOrdenAnterior(OrdenAnteriorOYDPLUS, OrdenOYDPLUSSelected)
        End Try
    End Sub

    Public Overrides Sub Filtrar()
        Try
            IsBusy = True
            If Not IsNothing(dcProxyConsulta.OrdenOYDPLUS) Then
                dcProxyConsulta.OrdenOYDPLUS.Clear()
            End If

            strUltimaAccionBusquedaFiltro = "FILTRAR"

            'Se sabe si se utiliza en las ordenes por aprobar o en las ordenes aprobadas.
            Dim strEstado As String = String.Empty

            Select Case VistaSeleccionada
                Case VISTA_APROBADAS
                    strEstado = "P"
                Case VISTA_PENDIENTESAPROBAR
                    strEstado = "D"
                Case VISTA_PENDIENTESCRUZAR
                    strEstado = "C"
            End Select

            If FiltroVM.Length > 0 Then
                Dim TextoFiltroSeguro = System.Web.HttpUtility.UrlEncode(FiltroVM)
                'Descripción: Agrega el filtro de modulo en la consulta - Por: Giovanny Velez Bolivar - 19/05/2014
                dcProxyConsulta.Load(dcProxyConsulta.OYDPLUS_FiltrarOrdenQuery(strEstado, TextoFiltroSeguro, _Modulo, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerOrdenes, "FILTRAR")
            Else
                'Descripción: Agrega el filtro de modulo en la consulta - Por: Giovanny Velez Bolivar - 19/05/2014
                dcProxyConsulta.Load(dcProxyConsulta.OYDPLUS_FiltrarOrdenQuery(strEstado, String.Empty, _Modulo, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerOrdenes, "FILTRAR")
            End If

            logCalcularValores = False
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la implementación del filtro", Me.ToString(), "Filtrar", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Filtra los registros de OYDPLUS, cuando el filtro se encuentra vacio se llama el metodo
    ''' de Filtrar()
    ''' Desarrollado por Juan David Correa
    ''' </summary>
    ''' <param name="pstrEstado"></param>
    ''' <param name="pstrFiltro"></param>
    ''' <param name="pstrOpcion"></param>
    ''' <param name="pstrUserState"></param>
    ''' <remarks></remarks>
    Public Sub FiltrarRegistrosOYDPLUS(ByVal pstrEstado As String, ByVal pstrFiltro As String, ByVal pstrOpcion As String, Optional ByVal pstrUserState As String = "")
        Try
            If String.IsNullOrEmpty(pstrOpcion) Then
                Filtrar()
            Else
                IsBusy = True

                If Not IsNothing(dcProxyConsulta.OrdenOYDPLUS) Then
                    dcProxyConsulta.OrdenOYDPLUS.Clear()
                End If
                'Descripción: Agrega el filtro de modulo en la consulta - Por: Giovanny Velez Bolivar - 19/05/2014
                dcProxyConsulta.Load(dcProxyConsulta.OYDPLUS_FiltrarOrdenQuery(pstrEstado, pstrFiltro, _Modulo, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerOrdenes, pstrUserState)
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al filtrar los registros.",
                     Me.ToString(), "FiltrarRegistrosOYDPLUS", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Filtra los registros de ordenes cruzadas de OYDPLUS
    ''' Desarrollado por Juan David Correa
    ''' </summary>
    ''' <param name="pstrUserState"></param>
    ''' <remarks></remarks>
    Public Sub FiltrarOrdenesCruzadasOYDPLUS(Optional ByVal pstrUserState As String = "")
        Try
            IsBusy = True

            If Not IsNothing(dcProxyConsulta.OrdenOYDPLUS) Then
                dcProxyConsulta.OrdenOYDPLUS.Clear()
            End If
            'Descripción: Agrega el filtro de modulo en la consulta - Por: Giovanny Velez Bolivar - 19/05/2014
            dcProxyConsulta.Load(dcProxyConsulta.OYDPLUS_FiltrarOrdenQuery("C", String.Empty, _Modulo, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerOrdenes, pstrUserState)
            'dcProxyConsulta.Load(dcProxyConsulta.OYDPLUS_ConsultarOrdenesCruzadasUsuarioQuery(Program.Usuario, Program.HashConexion), AddressOf TerminoTraerOrdenes, pstrUserState)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al filtrar los registros.",
                     Me.ToString(), "FiltrarOrdenesCruzadasOYDPLUS", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub Buscar()
        Try
            OrganizarNuevaBusqueda()
            MyBase.Buscar()
            'MyBase.CambioItem("visBuscando")
            'MyBase.CambioItem("visNavegando")
            HabilitarEncabezado = False
            HabilitarOpcionesCruzada = False
            logCalcularValores = False
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la implementación de la busqueda", Me.ToString(), "Buscar", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub CancelarBuscar()
        MyBase.CancelarBuscar()
    End Sub

    Public Overrides Sub ConfirmarBuscar()
        Try
            If Not IsNothing(BusquedaOrdenOyDPlus) Then
                IsBusy = True
                Dim strReceptorBusqueda As String = String.Empty

                If BusquedaOrdenOyDPlus.Receptor <> "TDS" Then
                    strReceptorBusqueda = BusquedaOrdenOyDPlus.Receptor
                End If

                If Not IsNothing(dcProxyConsulta.OrdenOYDPLUS) Then
                    dcProxyConsulta.OrdenOYDPLUS.Clear()
                End If

                strUltimaAccionBusquedaFiltro = "BUSQUEDAAVANZADA"

                Dim strEstado As String = String.Empty

                Select Case VistaSeleccionada
                    Case VISTA_APROBADAS
                        strEstado = "P"
                    Case VISTA_PENDIENTESAPROBAR
                        strEstado = "D"
                    Case VISTA_PENDIENTESCRUZAR
                        strEstado = "C"
                End Select

                strEstadoUltimaBusqueda = strEstado
                objValoresEnviadosUltimaModificacion.EstadoOrden = strEstado
                objValoresEnviadosUltimaModificacion.NroOrden = BusquedaOrdenOyDPlus.NroOrden
                objValoresEnviadosUltimaModificacion.Version = BusquedaOrdenOyDPlus.Version
                objValoresEnviadosUltimaModificacion.EstadoOrden = BusquedaOrdenOyDPlus.EstadoOrden
                objValoresEnviadosUltimaModificacion.Receptor = strReceptorBusqueda
                objValoresEnviadosUltimaModificacion.TipoOrden = BusquedaOrdenOyDPlus.TipoOrden
                objValoresEnviadosUltimaModificacion.TipoNegocio = BusquedaOrdenOyDPlus.TipoNegocio
                objValoresEnviadosUltimaModificacion.TipoOperacion = BusquedaOrdenOyDPlus.TipoOperacion
                objValoresEnviadosUltimaModificacion.TipoProducto = BusquedaOrdenOyDPlus.TipoProducto

                dcProxyConsulta.Load(dcProxyConsulta.OYDPLUS_ConsultarOrdenQuery(_Modulo, strEstado, BusquedaOrdenOyDPlus.NroOrden, BusquedaOrdenOyDPlus.Version, BusquedaOrdenOyDPlus.EstadoOrden, strReceptorBusqueda, BusquedaOrdenOyDPlus.TipoOrden,
                                                                 BusquedaOrdenOyDPlus.TipoNegocio, BusquedaOrdenOyDPlus.TipoOperacion, BusquedaOrdenOyDPlus.TipoProducto, String.Empty, Program.Usuario, BusquedaOrdenOyDPlus.FechaOrden, Program.HashConexion),
                                                                 AddressOf TerminoTraerOrdenes, "BUSQUEDA")

                MyBase.ConfirmarBuscar()
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar los registros.", Me.ToString(), "ConfirmarBuscar", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Sub ConfirmarBuscar_DespuesGuardado_Refrescar()
        Try
            If Not IsNothing(objValoresEnviadosUltimaModificacion) Then
                IsBusy = True
                If Not IsNothing(dcProxyConsulta.OrdenOYDPLUS) Then
                    dcProxyConsulta.OrdenOYDPLUS.Clear()
                End If

                strUltimaAccionBusquedaFiltro = "BUSQUEDAAVANZADA"

                dcProxyConsulta.Load(dcProxyConsulta.OYDPLUS_ConsultarOrdenQuery(_Modulo, strEstadoUltimaBusqueda, objValoresEnviadosUltimaModificacion.NroOrden, objValoresEnviadosUltimaModificacion.Version, objValoresEnviadosUltimaModificacion.EstadoOrden, objValoresEnviadosUltimaModificacion.Receptor, objValoresEnviadosUltimaModificacion.TipoOrden,
                                                                 objValoresEnviadosUltimaModificacion.TipoNegocio, objValoresEnviadosUltimaModificacion.TipoOperacion, objValoresEnviadosUltimaModificacion.TipoProducto, String.Empty, Program.Usuario, objValoresEnviadosUltimaModificacion.FechaOrden, Program.HashConexion),
                                                                 AddressOf TerminoTraerOrdenes, "TIMERSELECTED")

            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar los registros.", Me.ToString(), "ConfirmarBuscar_DespuesGuardado_Refrescar", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Async Sub ActualizarRegistro()
        Try
            If Not IsBusyCalculos Then
                If logOrdenCruzada Then
                    If (logNuevoRegistro And IsNothing(_OrdenCruzadaSelected.Receptor) Or String.IsNullOrEmpty(_OrdenCruzadaSelected.Receptor)) _
                        Or IsNothing(_OrdenCruzadaSelected.TipoOrden) Or String.IsNullOrEmpty(_OrdenCruzadaSelected.TipoOrden) _
                        Or IsNothing(_OrdenCruzadaSelected.TipoProducto) Or String.IsNullOrEmpty(_OrdenCruzadaSelected.TipoProducto) _
                        Or IsNothing(_OrdenCruzadaSelected.TipoNegocio) Or String.IsNullOrEmpty(_OrdenCruzadaSelected.TipoNegocio) _
                        Or IsNothing(_OrdenCruzadaSelected.TipoOperacion) Or String.IsNullOrEmpty(_OrdenCruzadaSelected.TipoOperacion) _
                        Then
                        mostrarMensaje("Debe de seleccionar todos los datos del encabezado para guardar la orden (Receptor,Tipo orden, Tipo producto, Tipo negocio, Tipo operación).", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Exit Sub
                    End If
                Else
                    If (logNuevoRegistro And IsNothing(_OrdenOYDPLUSSelected.Receptor) Or String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Receptor)) _
                        Or IsNothing(_OrdenOYDPLUSSelected.TipoOrden) Or String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOrden) _
                        Or IsNothing(_OrdenOYDPLUSSelected.TipoProducto) Or String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoProducto) _
                        Or IsNothing(_OrdenOYDPLUSSelected.TipoNegocio) Or String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoNegocio) _
                        Or IsNothing(_OrdenOYDPLUSSelected.TipoOperacion) Or String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOperacion) _
                        Then
                        mostrarMensaje("Debe de seleccionar todos los datos del encabezado para guardar la orden (Receptor,Tipo orden, Tipo producto, Tipo negocio, Tipo operación).", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Exit Sub
                    End If
                End If

                If logPlantillaRegistro Then
                    GuardarOrdenOYDPLUS(_OrdenOYDPLUSSelected)
                Else

                    If logEditarRegistro And logEliminarAsociacion = False And logPreguntoAsociacion Then
                        If OrdenOYDPLUSSelected.Cantidad > dblCantidadAnterior Then
                            mostrarMensaje("La cantidad no se puede modificar por un valor mayor.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Exit Sub
                        End If
                    End If
                    IsBusy = True
                    dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
                    mdtmFechaCierreSistema = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaCierreSistema(MSTR_MODULO_OYD_ORDENES, Program.Usuario)

                    If ValidarFechaCierreSistema(_OrdenOYDPLUSSelected, "actualizar") Then
                        'If logCalcularValores And _OrdenOYDPLUSSelected.TipoNegocio <> TIPONEGOCIO_REPO And
                        '    _OrdenOYDPLUSSelected.TipoNegocio <> TIPONEGOCIO_REPOC And
                        '    _OrdenOYDPLUSSelected.TipoOrden <> TIPOORDEN_INDIRECTA And
                        '    _OrdenOYDPLUSSelected.EnPesos <> True Then
                        '    Await CalcularValorOrden(_OrdenOYDPLUSSelected)
                        'End If
                        LimpiarVariablesConfirmadas()
                        CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_ORDEN, _OrdenOYDPLUSSelected, -1, True)
                    End If
                End If
            Else
                A2Utilidades.Mensajes.mostrarMensaje("Por favor espere, el sistema no ha terminado de cargar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Exit Sub
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la actualización de la orden.", Me.ToString(), "ActualizarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Valida sí el popup de ordenes cruzadas se encuentra activo.
    ''' Desarrollado por Juan David Correa
    ''' Fecha 18 de marzo del 2013
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub ValidarOrdenOriginaloCruzada()
        Try
            If logOrdenCruzada Then
                ActualizarOrdenOYDPLUS(_OrdenCruzadaSelected)
            Else
                ActualizarOrdenOYDPLUS(_OrdenOYDPLUSSelected)
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar sí es una orden original o cruzada.", Me.ToString(), "ValidarOrdenOriginaloCruzada", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Cuando se pasan todas las validaciones, sí se requeria confirmación, justificación y aprobación
    ''' se llama este metodo y se realiza el envio de la orden a la base de datos con todos los parametros de la orden.
    ''' Desarrollado por Juan David Correa
    ''' </summary>
    ''' <remarks></remarks>
    Private Async Sub ActualizarOrdenOYDPLUS(ByVal objOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If logOrdenCruzada Then
                IsBusyCruzada = True
            Else
                IsBusy = True
            End If

            If Not IsNothing(objOrdenSelected) Then

                dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()

                If Await ValidarGuardadoOrden(objOrdenSelected) Then
                    GuardarOrdenOYDPLUS(objOrdenSelected)
                Else
                    If logOrdenCruzada Then
                        IsBusyCruzada = False
                    Else
                        IsBusy = False
                    End If
                    PosicionarControlValidaciones(IIf(logOrdenCruzada, False, True), objOrdenSelected, ViewOrdenesOYDPLUS, ViewOrdenesCruzadas)
                End If
            End If
        Catch ex As Exception
            IsBusyCruzada = False
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la actualización de la orden.", Me.ToString(), "ActualizarOrdenOYDPLUS", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub ValidarMensajesMostrarUsuario(ByVal pobjTipoMensaje As TIPOMENSAJEUSUARIO, Optional ByVal pobjResultaUsuario As A2Utilidades.wppMensajePregunta = Nothing)
        Try

            If Not IsNothing(_ListaResultadoValidacion) Then
                Dim logEsHtml As Boolean = False
                Dim strMensajeDetallesHtml As String = String.Empty
                Dim strMensajeRetornoHtml As String = String.Empty
                Dim ListaJustificacion As New List(Of A2Utilidades.CausasJustificacionMensajePregunta)
                Dim strMensajeEnviar As String = String.Empty
                Dim strConfirmacion As String = String.Empty
                Dim strRegla As String = String.Empty
                Dim strNombreRegla As String = String.Empty
                Dim strTipoRespuesta As String = String.Empty
                Dim logPermiteSinItemLista As Boolean = True
                Dim logPermiteSinObservacion As Boolean = True


                If pobjTipoMensaje <> TIPOMENSAJEUSUARIO.TODOS Then

                    If pobjResultaUsuario.DialogResult Then
                        If pobjTipoMensaje = TIPOMENSAJEUSUARIO.CONFIRMACION Then
                            CantidadConfirmaciones += 1
                        ElseIf pobjTipoMensaje = TIPOMENSAJEUSUARIO.JUSTIFICACION Then
                            If String.IsNullOrEmpty(Justificaciones) Then
                                Justificaciones = pobjResultaUsuario.CodConfirmacion
                                JustificacionesUsuario = String.Format("'{0}'**'{1}'**'{2}'**'{3}'", pobjResultaUsuario.NombreRegla, pobjResultaUsuario.CodRegla, pobjResultaUsuario.MensajeRegla, String.Format("{0}++{1}", pobjResultaUsuario.Observaciones, pobjResultaUsuario.TextoConfirmacion.Replace("|", "++")))
                            Else
                                Justificaciones = String.Format("{0}|{1}", Justificaciones, pobjResultaUsuario.CodConfirmacion)
                                JustificacionesUsuario = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'", JustificacionesUsuario, pobjResultaUsuario.NombreRegla, pobjResultaUsuario.CodRegla, pobjResultaUsuario.MensajeRegla, String.Format("{0}++{1}", pobjResultaUsuario.Observaciones, pobjResultaUsuario.TextoConfirmacion.Replace("|", "++")))
                            End If

                            CantidadJustificaciones += 1
                        ElseIf pobjTipoMensaje = TIPOMENSAJEUSUARIO.APROBACION Then
                            If String.IsNullOrEmpty(Aprobaciones) Then
                                Aprobaciones = pobjResultaUsuario.CodConfirmacion
                                AprobacionesUsuario = String.Format("'{0}'**'{1}'**'{2}'**'{3}'", pobjResultaUsuario.NombreRegla, pobjResultaUsuario.CodRegla, pobjResultaUsuario.MensajeRegla, String.Format("{0}++{1}", pobjResultaUsuario.Observaciones, pobjResultaUsuario.TextoConfirmacion.Replace("|", "++")))
                            Else
                                Aprobaciones = String.Format("{0}|{1}", Aprobaciones, pobjResultaUsuario.CodConfirmacion)
                                AprobacionesUsuario = String.Format("{0}|'{1}'**'{2}'**'{3}'**'{4}'", AprobacionesUsuario, pobjResultaUsuario.NombreRegla, pobjResultaUsuario.CodRegla, pobjResultaUsuario.MensajeRegla, String.Format("{0}++{1}", pobjResultaUsuario.Observaciones, pobjResultaUsuario.TextoConfirmacion.Replace("|", "++")))
                            End If

                            CantidadAprobaciones += 1
                        End If
                    Else
                        IsBusy = False
                        IsBusyCruzada = False
                        LimpiarVariablesConfirmadas()
                        Exit Sub
                    End If
                Else
                    If ListaResultadoValidacion.Where(Function(i) i.RequiereConfirmacion = True).Count > 0 Then
                        cantidadTotalConfirmacion = 1
                    End If
                    cantidadTotalJustificacion = ListaResultadoValidacion.Where(Function(i) i.RequiereJustificacion = True).Count
                    CantidadTotalAprobaciones = ListaResultadoValidacion.Where(Function(i) i.RequiereAprobacion = True).Count
                    Aprobaciones = String.Empty
                    Justificaciones = String.Empty
                    Confirmaciones = String.Empty
                    JustificacionesUsuario = String.Empty
                    AprobacionesUsuario = String.Empty
                    ConfirmacionesUsuario = String.Empty
                End If

                If CantidadConfirmaciones < cantidadTotalConfirmacion Then
                    strTipoRespuesta = "PREGUNTARCONFIRMACION"
                    Dim MensajeConfirmacion As String = String.Empty

                    If ListaResultadoValidacion.Where(Function(i) i.RequiereConfirmacion = True).Count > 0 Then
                        cantidadTotalConfirmacion = 1
                    End If

                    For Each li In ListaResultadoValidacion.Where(Function(i) i.RequiereConfirmacion = True).ToList
                        If String.IsNullOrEmpty(Confirmaciones) Then
                            Confirmaciones = String.Format("'{0}'", li.Confirmacion)
                            ConfirmacionesUsuario = String.Format("'{0}'**'{1}'**'{2}'", li.NombreRegla, li.Regla, li.Mensaje)
                            MensajeConfirmacion = String.Format(" -> {0}", li.Mensaje)
                        Else
                            Confirmaciones = String.Format("{0}|'{1}'", Confirmaciones, li.Confirmacion)
                            ConfirmacionesUsuario = String.Format("{0}|'{1}'**'{2}'**'{3}'", ConfirmacionesUsuario, li.NombreRegla, li.Regla, li.Mensaje)
                            MensajeConfirmacion = String.Format("{0}{1} -> {2}", MensajeConfirmacion, vbCrLf, li.Mensaje)
                        End If

                        strMensajeRetornoHtml = String.Format("{0}{1}", strMensajeRetornoHtml, li.DetalleRegla)
                    Next

                    If Not String.IsNullOrEmpty(strMensajeRetornoHtml) Then
                        logEsHtml = True
                        strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", strMensajeRetornoHtml)
                    Else
                        logEsHtml = False
                        strMensajeDetallesHtml = String.Empty
                    End If

                    MensajeConfirmacion = Replace(MensajeConfirmacion, "-", vbCrLf)
                    MensajeConfirmacion = Replace(MensajeConfirmacion, "--", vbCrLf)

                    strMensajeEnviar = MensajeConfirmacion
                    strConfirmacion = Confirmaciones
                    strRegla = String.Empty
                    strNombreRegla = String.Empty

                ElseIf CantidadJustificaciones < cantidadTotalJustificacion Then
                    strTipoRespuesta = "PREGUNTARJUSTIFICACION"

                    For Each li In ListaResultadoValidacion.Where(Function(i) i.RequiereJustificacion = True).ToList
                        If Not Justificaciones.Contains(li.Confirmacion) Then
                            ListaJustificacion.Clear()

                            If Not String.IsNullOrEmpty(li.CausasJustificacion) Then
                                For Each item In li.CausasJustificacion.Split("|")
                                    ListaJustificacion.Add(New A2Utilidades.CausasJustificacionMensajePregunta With {.ID = item,
                                                                                                                     .Descripcion = item})
                                Next
                            End If

                            If Not String.IsNullOrEmpty(li.DetalleRegla) Then
                                logEsHtml = True
                                strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", li.DetalleRegla)
                            Else
                                logEsHtml = False
                                strMensajeDetallesHtml = String.Empty
                            End If

                            strMensajeEnviar = li.Mensaje
                            strConfirmacion = li.Confirmacion
                            strRegla = li.Regla
                            strNombreRegla = li.NombreRegla

                            Exit For
                        End If
                    Next
                ElseIf CantidadAprobaciones < CantidadTotalAprobaciones Then
                    strTipoRespuesta = "PREGUNTARAPROBACION"


                    For Each li In ListaResultadoValidacion.Where(Function(i) i.RequiereAprobacion = True).ToList
                        If Not Aprobaciones.Contains(li.Confirmacion) Then
                            ListaJustificacion.Clear()

                            If Not String.IsNullOrEmpty(li.CausasJustificacion) Then
                                For Each item In li.CausasJustificacion.Split("|")
                                    ListaJustificacion.Add(New A2Utilidades.CausasJustificacionMensajePregunta With {.ID = item,
                                                                                                                     .Descripcion = item})
                                Next
                            End If

                            If Not String.IsNullOrEmpty(li.DetalleRegla) Then
                                logEsHtml = True
                                strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", li.DetalleRegla)
                            Else
                                logEsHtml = False
                                strMensajeDetallesHtml = String.Empty
                            End If

                            strMensajeEnviar = li.Mensaje
                            strConfirmacion = li.Confirmacion
                            strRegla = li.Regla
                            strNombreRegla = li.NombreRegla

                            Exit For
                        End If
                    Next
                End If

                If Not String.IsNullOrEmpty(strMensajeEnviar) Then
                    If strTipoRespuesta <> "PREGUNTARCONFIRMACION" Then
                        If (ListaJustificacion.Count > 0) Then
                            logPermiteSinItemLista = False
                            logPermiteSinObservacion = True
                        Else
                            logPermiteSinItemLista = True
                            logPermiteSinObservacion = False
                        End If
                    Else
                        logPermiteSinItemLista = True
                        logPermiteSinObservacion = True
                    End If

                    mostrarMensajePregunta(strMensajeEnviar,
                                       Program.TituloSistema,
                                       strTipoRespuesta,
                                       AddressOf TerminoMensajePregunta,
                                       True,
                                       "¿Desea continuar?",
                                       IIf(ListaJustificacion.Count > 0, True, False),
                                       IIf(ListaJustificacion.Count > 0, True, False),
                                       logPermiteSinItemLista,
                                       logPermiteSinObservacion,
                                       strConfirmacion,
                                       strRegla,
                                       strNombreRegla,
                                       IIf(ListaJustificacion.Count > 0, ListaJustificacion, Nothing),
                                       "Reglas incumplidas en los detalles de las ordenes",
                                       logEsHtml,
                                       strMensajeDetallesHtml)
                End If

            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al momento de validar el mensaje para mostrar al usuario.", Me.ToString(), "ValidarMensajesMostrarUsuario", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub GuardarOrdenOYDPLUS(ByVal objOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            Dim strReceptores As String
            Dim lstReceptores = New List(Of String)
            Dim lstReceptoresRep = New List(Of Object)

            If logOrdenCruzada Then
                IsBusyCruzada = True
            Else
                IsBusy = True
            End If

            strReceptores = "<receptores>"
            For Each obj In _ListaReceptoresOrdenes
                If Not lstReceptores.Contains(obj.IDReceptor) And obj.Porcentaje > 0 Then
                    lstReceptores.Add(obj.IDReceptor)
                    strReceptores &= "<receptor Id=""" & obj.IDReceptor & """ Lider=""" & IIf(obj.Lider, "1", "0") & """ Porcentaje=""" & (obj.Porcentaje).ToString() & """ />"
                Else
                    lstReceptoresRep.Add(obj)
                End If
            Next
            strReceptores &= "</receptores>"

            objOrdenSelected.ReceptoresXML = strReceptores
            Dim logVerificarAsociacionSAE As Boolean = True
            Dim sum As Double = 0
            Dim Acumulador As Double = 0
            Dim strIdsGuardar As String = String.Empty
            Dim ListaComparar As New List(Of LiqAsociadasOrden)
            If logEliminarAsociacion = False Then
                If Not IsNothing(ListaLiqAsociadasOrdenes) Then
                    Dim strLiquidacionesProbablesGuardadas As String = "<liqprobables>"

                    Dim dblDiferenciaEdicion As Decimal
                    dblDiferenciaEdicion = ListaLiqAsociadasOrdenes.Sum(Function(i) i.Monto).Value - objOrdenSelected.Cantidad


                    For Each li In ListaLiqAsociadasOrdenes.OrderBy(Function(x) x.NroLiquidacion).ToList
                        If dblDiferenciaEdicion >= li.Monto Then
                            '  mostrarMensaje("La cantidad reducida de la orden es equivalente a 1 o más folios, es necesario deshacer la asociación!", "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            IsBusy = False
                            Exit For
                        End If

                        If sum + li.Monto > objOrdenSelected.Cantidad Then
                            strLiquidacionesProbablesGuardadas = String.Format("{0}<liqprobable Id=""{1}"" Parcial=""{2}"" FechaLiq=""{3}"" Monto=""{4}"" />",
                                                                  strLiquidacionesProbablesGuardadas,
                                                                  li.NroLiquidacion,
                                                                  0,
                                                                  li.FechaLiquidacion.Value.ToString("yyyy-MM-dd hh:mm:ss"),
                                                                  objOrdenSelected.Cantidad - sum)
                            Acumulador += objOrdenSelected.Cantidad - sum
                            ListaComparar.Add(li)
                        Else
                            sum += li.Monto
                            Acumulador += li.Monto
                            ListaComparar.Add(li)

                            strLiquidacionesProbablesGuardadas = String.Format("{0}<liqprobable Id=""{1}"" Parcial=""{2}"" FechaLiq=""{3}"" Monto=""{4}"" />",
                                                                  strLiquidacionesProbablesGuardadas,
                                                                  li.NroLiquidacion,
                                                                  0,
                                                                  li.FechaLiquidacion.Value.ToString("yyyy-MM-dd hh:mm:ss"),
                                                                  li.Monto)
                        End If

                        logVerificarAsociacionSAE = False

                        If Acumulador >= objOrdenSelected.Cantidad Then
                            Exit For
                        End If

                    Next
                    If ListaComparar.Count <> ListaLiqAsociadasOrdenes.Count Then
                        mostrarMensaje("La cantidad reducida de la orden es equivalente a 1 o más folios, es necesario deshacer la asociación!", "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        IsBusy = False
                        Exit Sub
                    End If
                    strLiquidacionesProbablesGuardadas = String.Format("{0}</liqprobables>", strLiquidacionesProbablesGuardadas)
                    objOrdenSelected.LiqAsociadasXML = strLiquidacionesProbablesGuardadas
                End If
            End If
            If logVerificarAsociacionSAE Then
                If objOrdenSelected.TipoOrden = TIPOORDEN_DIRECTA Then
                    If objOrdenSelected.Clase = CLASE_ACCIONES Then
                        If Not IsNothing(ListaLiquidacionesSAEAcciones) Then
                            If ListaLiquidacionesSAEAcciones.Count > 0 Then
                                Dim strLiquidacionesProbables As String = "<liqprobables>"

                                For Each li In ListaLiquidacionesSAEAcciones.OrderBy(Function(x) x.IDLiquidacion).ToList

                                    If sum + li.Cantidad > objOrdenSelected.Cantidad Then
                                        strLiquidacionesProbables = String.Format("{0}<liqprobable Id=""{1}"" Parcial=""{2}"" FechaLiq=""{3}"" Monto=""{4}"" />",
                                                                            strLiquidacionesProbables,
                                                                            li.IDLiquidacion,
                                                                            0,
                                                                            li.FechaReferencia.ToString("yyyy-MM-dd hh:mm:ss"),
                                                                            objOrdenSelected.Cantidad - sum)
                                        Acumulador += objOrdenSelected.Cantidad - sum
                                    Else
                                        sum += li.Cantidad
                                        Acumulador += li.Cantidad
                                        strLiquidacionesProbables = String.Format("{0}<liqprobable Id=""{1}"" Parcial=""{2}"" FechaLiq=""{3}"" Monto=""{4}"" />",
                                                                            strLiquidacionesProbables,
                                                                            li.IDLiquidacion,
                                                                            0,
                                                                            li.FechaReferencia.ToString("yyyy-MM-dd hh:mm:ss"),
                                                                            li.Cantidad)
                                    End If

                                    If Acumulador >= objOrdenSelected.Cantidad Then
                                        Exit For
                                    End If

                                Next
                                strLiquidacionesProbables = String.Format("{0}</liqprobables>", strLiquidacionesProbables)
                                objOrdenSelected.LiqAsociadasXML = strLiquidacionesProbables
                            Else
                                objOrdenSelected.LiqAsociadasXML = "<liqprobables><liqprobable Id=""0"" Parcial=""-1"" FechaLiq=""" & dtmFechaServidor.ToString("yyyy-MM-dd hh:mm:ss") & """ Monto=""0.0"" /></liqprobables>"
                            End If
                        Else
                            objOrdenSelected.LiqAsociadasXML = "<liqprobables><liqprobable Id=""0"" Parcial=""-1"" FechaLiq=""" & dtmFechaServidor.ToString("yyyy-MM-dd hh:mm:ss") & """ Monto=""0.0"" /></liqprobables>"
                        End If

                    Else
                        If Not IsNothing(ListaLiquidacionesSAERentaFija) Then
                            If ListaLiquidacionesSAERentaFija.Count > 0 Then
                                Dim strLiquidacionesProbables As String = "<liqprobables>"

                                For Each li In ListaLiquidacionesSAERentaFija.OrderBy(Function(x) x.IDLiquidacion).ToList
                                    If sum + li.Cantidad > objOrdenSelected.Cantidad Then
                                        strLiquidacionesProbables = String.Format("{0}<liqprobable Id=""{1}"" Parcial=""{2}"" FechaLiq=""{3}"" Monto=""{4}"" />",
                                                             strLiquidacionesProbables,
                                                             li.IDLiquidacion,
                                                             0,
                                                             li.FechaReferencia.ToString("yyyy-MM-dd hh:mm:ss"),
                                                             objOrdenSelected.Cantidad - sum)
                                        Acumulador += objOrdenSelected.Cantidad - sum
                                    Else
                                        sum += li.Cantidad
                                        Acumulador += li.Cantidad
                                        strLiquidacionesProbables = String.Format("{0}<liqprobable Id=""{1}"" Parcial=""{2}"" FechaLiq=""{3}"" Monto=""{4}"" />",
                                                                            strLiquidacionesProbables,
                                                                            li.IDLiquidacion,
                                                                            0,
                                                                            li.FechaReferencia.ToString("yyyy-MM-dd hh:mm:ss"),
                                                                            li.Cantidad)
                                    End If

                                    If Acumulador >= objOrdenSelected.Cantidad Then
                                        Exit For
                                    End If
                                Next
                                strLiquidacionesProbables = String.Format("{0}</liqprobables>", strLiquidacionesProbables)
                                objOrdenSelected.LiqAsociadasXML = strLiquidacionesProbables
                            Else
                                objOrdenSelected.LiqAsociadasXML = "<liqprobables><liqprobable Id=""0"" Parcial=""-1"" FechaLiq=""" & dtmFechaServidor.ToString("yyyy-MM-dd hh:mm:ss") & """ Monto=""0.0"" /></liqprobables>"
                            End If
                        Else
                            objOrdenSelected.LiqAsociadasXML = "<liqprobables><liqprobable Id=""0"" Parcial=""-1"" FechaLiq=""" & dtmFechaServidor.ToString("yyyy-MM-dd hh:mm:ss") & """ Monto=""0.0"" /></liqprobables>"
                        End If
                    End If
                End If
            End If

            objOrdenSelected.InstruccionesOrdenesXML = "<instrucciones>"
            If MostrarTabInstrucciones = Visibility.Visible Then
                If Not IsNothing(ListaInstruccionesOrdenes) Then
                    If ListaInstruccionesOrdenes.Count > 0 Then
                        For Each obj In ListaInstruccionesOrdenes
                            If IsNothing(obj.Valor) Then
                                obj.Valor = 0
                            End If
                            If obj.Cuenta <> "" Or obj.Valor <> 0 Or obj.Seleccionado Then
                                objOrdenSelected.InstruccionesOrdenesXML &= "<instruccione strRetorno=""" & CStr(obj.Retorno) & """ strInstruccion=""" & CStr(obj.Instruccion) & """ strCuenta=""" & CStr(obj.Cuenta) & """  dblValor=""" & CStr(obj.Valor) & """ logSeleccionado=""" & CStr(obj.Seleccionado) & """ />"
                            End If
                        Next
                    End If
                End If
            End If
            objOrdenSelected.InstruccionesOrdenesXML &= "</instrucciones>"

            objOrdenSelected.PagosOrdenesXML = String.Empty
            objOrdenSelected.ComisionesOrdenesXML = String.Empty

            Dim strReceptoresOrdenesCruzada As String

            strReceptoresOrdenesCruzada = "<receptores>"

            If objOrdenSelected.OrdenCruzadaReceptor Then
                If Not IsNothing(_ListaReceptoresOrdenesCruzada) Then
                    For Each obj In _ListaReceptoresOrdenesCruzada
                        If Not strReceptoresOrdenesCruzada.Contains(obj.IDReceptor) Then
                            strReceptoresOrdenesCruzada &= "<receptor strIDReceptor=""" & obj.IDReceptor & """ />"
                        End If
                    Next
                End If
            End If

            If objOrdenSelected.OrdenCruzadaCliente Then
                If Not strReceptoresOrdenesCruzada.Contains(objOrdenSelected.Receptor) Then
                    strReceptoresOrdenesCruzada &= "<receptor strIDReceptor=""" & objOrdenSelected.Receptor & """ />"
                End If
            End If

            strReceptoresOrdenesCruzada &= "</receptores>"

            objOrdenSelected.ReceptoresCruzadasXML = strReceptoresOrdenesCruzada

            Dim strXMLReceptores As String = System.Web.HttpUtility.HtmlEncode(objOrdenSelected.ReceptoresXML)
            Dim strXMLLiquidaciones As String = System.Web.HttpUtility.HtmlEncode(objOrdenSelected.LiqAsociadasXML)
            Dim strXMLPagosOrdenes As String = System.Web.HttpUtility.HtmlEncode(objOrdenSelected.PagosOrdenesXML)
            Dim strXMLInstrucciones As String = System.Web.HttpUtility.HtmlEncode(objOrdenSelected.InstruccionesOrdenesXML)
            Dim strXMLComisionesOrdenes As String = System.Web.HttpUtility.HtmlEncode(objOrdenSelected.ComisionesOrdenesXML)
            Dim strXMLReceptoresOrdenesCruzadas As String = System.Web.HttpUtility.HtmlEncode(objOrdenSelected.ReceptoresCruzadasXML)

            If logNuevoRegistro Then
                objOrdenSelected.FechaOrden = dtmFechaServidor
            End If

            If String.IsNullOrEmpty(objOrdenSelected.Bolsa) Then
                If Not IsNothing(DiccionarioCombosOYDPlus) Then
                    If DiccionarioCombosOYDPlusCompleta("BOLSA").Count > 0 Then
                        ' EOMC -- 11/20/2012
                        ' Retorno identifica la bolsa, se estaba asignando el id de la tabla de combosReceptor
                        objOrdenSelected.Bolsa = DiccionarioCombosOYDPlusCompleta("BOLSA").FirstOrDefault.Retorno
                        objOrdenSelected.NombreBolsa = DiccionarioCombosOYDPlusCompleta("BOLSA").FirstOrDefault.Descripcion
                    End If
                End If
            End If

            If logPlantillaRegistro = False Then
                strNombrePlantilla = String.Empty
            End If

            intIDOrdenGuardada = 0

            If Not IsNothing(dcProxy.tblRespuestaValidaciones) Then
                dcProxy.tblRespuestaValidaciones.Clear()
            End If

            dcProxy.Load(dcProxy.OYDPLUS_ValidarIngresoOrdenQuery(objOrdenSelected.IDNroOrden, objOrdenSelected.NroOrden, objOrdenSelected.Bolsa, objOrdenSelected.Receptor,
                                                                 objOrdenSelected.TipoOrden, objOrdenSelected.TipoNegocio, objOrdenSelected.TipoProducto,
                                                                 objOrdenSelected.TipoOperacion, objOrdenSelected.Clase, objOrdenSelected.FechaOrden, objOrdenSelected.EstadoOrden, objOrdenSelected.EstadoLEO,
                                                                 objOrdenSelected.Clasificacion, objOrdenSelected.TipoLimite, objOrdenSelected.Duracion, objOrdenSelected.FechaVigencia, objOrdenSelected.HoraVigencia, objOrdenSelected.Dias,
                                                                 objOrdenSelected.CondicionesNegociacion, objOrdenSelected.FormaPago, objOrdenSelected.TipoInversion,
                                                                 objOrdenSelected.Ejecucion, objOrdenSelected.Mercado, objOrdenSelected.IDComitente, objOrdenSelected.IDOrdenante,
                                                                 objOrdenSelected.UBICACIONTITULO, objOrdenSelected.CuentaDeposito, objOrdenSelected.UsuarioOperador,
                                                                 objOrdenSelected.CanalRecepcion, objOrdenSelected.MedioVerificable, objOrdenSelected.FechaRecepcion, objOrdenSelected.NroExtensionToma,
                                                                 objOrdenSelected.Especie, objOrdenSelected.ISIN, objOrdenSelected.FechaEmision, objOrdenSelected.FechaVencimiento, objOrdenSelected.Estandarizada,
                                                                 objOrdenSelected.FechaCumplimiento, objOrdenSelected.TasaFacial, objOrdenSelected.Modalidad, objOrdenSelected.Indicador, objOrdenSelected.PuntosIndicador,
                                                                 objOrdenSelected.EnPesos, objOrdenSelected.Cantidad, objOrdenSelected.Precio, objOrdenSelected.PrecioMaximoMinimo, objOrdenSelected.ValorCaptacionGiro,
                                                                 objOrdenSelected.ValorFuturoRepo, objOrdenSelected.TasaRegistro, objOrdenSelected.TasaCliente, objOrdenSelected.TasaNominal,
                                                                 objOrdenSelected.Castigo, objOrdenSelected.ValorAccion, objOrdenSelected.Comision, objOrdenSelected.ValorComision, objOrdenSelected.ValorOrden, objOrdenSelected.DiasRepo,
                                                                 objOrdenSelected.ProductoValores, objOrdenSelected.CostosAdicionales, objOrdenSelected.Instrucciones, objOrdenSelected.Notas, strXMLReceptores, strXMLLiquidaciones,
                                                                 strXMLPagosOrdenes, strXMLInstrucciones, strXMLComisionesOrdenes, Confirmaciones, ConfirmacionesUsuario, Justificaciones, JustificacionesUsuario, Aprobaciones, AprobacionesUsuario,
                                                                 objOrdenSelected.Custodia, objOrdenSelected.CustodiaSecuencia, objOrdenSelected.DiasCumplimiento,
                                                                 objOrdenSelected.RuedaNegocio, objOrdenSelected.PrecioLimpio, objOrdenSelected.EstadoTitulo, objOrdenSelected.IvaComision, objOrdenSelected.ValorFuturoCliente,
                                                                 strXMLReceptoresOrdenesCruzadas, objOrdenSelected.OrdenCruzada, objOrdenSelected.OrdenCruzadaCliente, objOrdenSelected.OrdenCruzadaReceptor, objOrdenSelected.IDOrdenOriginal,
                                                                 logPlantillaRegistro, strNombrePlantilla, objOrdenSelected.BrokenTrader, objOrdenSelected.Entidad, objOrdenSelected.Estrategia, Program.Maquina, Program.Usuario, Program.UsuarioWindows,
                                                                 objOrdenSelected.FechaConstancia, objOrdenSelected.Constancia, objOrdenSelected.IDComitenteADR, objOrdenSelected.ReceptorToma,
                                                                 objOrdenSelected.FechaSalida, objOrdenSelected.TipoGarantia, logEliminarAsociacion, objOrdenSelected.ExistePreacuerdo, objOrdenSelected.VendeTodo, objOrdenSelected.ExentoRetencion, objOrdenSelected.PorcentajePagoEfectivo, Program.HashConexion),
                                                                 AddressOf TerminoValidarIngresoOrden, String.Empty)
        Catch ex As Exception
            IsBusy = False

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al momento de guardar la orden.", Me.ToString(), "GuardarOrdenOYDPLUS", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Limpia las variables de tipo string Confirmacion, Justificacion, Aprobacion y los contadores acumulados de cada uno.
    ''' Desarrollado por Juan David Correa
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub LimpiarVariablesConfirmadas()
        Try
            CantidadAprobaciones = 0
            CantidadConfirmaciones = 0
            CantidadJustificaciones = 0

            CantidadTotalAprobaciones = 0
            cantidadTotalConfirmacion = 0
            cantidadTotalJustificacion = 0

            Aprobaciones = String.Empty
            AprobacionesUsuario = String.Empty
            Confirmaciones = String.Empty
            Justificaciones = String.Empty
            JustificacionesUsuario = String.Empty
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al limpiar los valores de las confirmaciones.", Me.ToString(), "LimpiarVariablesConfirmadas", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Se esta utilizando en la aplicación para que el menu de los controles se ponga en estado de navegación.
    ''' En este se recarga la pantalla de Ordenes.
    ''' Desarrollado por Juan David Correa
    ''' </summary>
    ''' <param name="so"></param>
    ''' <remarks></remarks>
    Overrides Sub TerminoSubmitChanges(ByVal so As SubmitOperation)
        Try
            MyBase.TerminoSubmitChanges(so)

            CargarReceptoresUsuarioOYDPLUS(String.Empty, "DESPUESDEGUARDAR")

            logRefrescarconsultaCambioTab = False

            mostrarMensajeResultadoAsincronico(so.UserState.ToString, "Ordenes", AddressOf TerminoMensajeResultadoAsincronico, "TERMINOGUARDARORDEN", A2Utilidades.wppMensajes.TiposMensaje.Exito)
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la actualización de la orden.", Me.ToString(), "TerminoSubmitChanges", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Async Sub EditarRegistro()
        Try
            If logCargoForma = False Then
                ViewOrdenesOYDPLUS.GridEdicion.Children.Add(viewFormaOrdenes)
                logCargoForma = True
            End If

            If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Then
                HabilitarTipoLimite = False
            Else
                HabilitarTipoLimite = True
            End If

            LiquidacionesHabilitarControles = String.Empty
            logEliminarAsociacion = False

            If dcProxy.IsLoading Then
                MyBase.RetornarValorEdicionNavegacion()
                A2Utilidades.Mensajes.mostrarMensaje("Por favor espere, el sistema no ha terminado de cargar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Exit Sub
            End If

            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                If _OrdenOYDPLUSSelected.IDNroOrden <> 0 Then
                    If VistaSeleccionada <> VISTA_PENDIENTESCRUZAR Then
                        IsBusy = True

                        dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
                        mdtmFechaCierreSistema = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaCierreSistema(MSTR_MODULO_OYD_ORDENES, Program.Usuario)

                        MostrarNegocio = Visibility.Visible
                        MostrarControles = Visibility.Visible
                        MostrarNoEdicion = Visibility.Collapsed
                        validarEstadoOrden("EDITARORDENOYDPLUS")
                        logCalcularValores = True
                        MensajeTasas = String.Empty
                        MostrarMensajeTasas = Visibility.Collapsed
                        MensajePreciosTick = String.Empty
                        MostrarMensajePreciosTick = Visibility.Collapsed
                        dblValorConsultadoPrecioSAE = 0
                        dblValorConsultadoPorcentajeGarantia = 0
                        ListaLiquidacionesSAERentaFija = New List(Of SAELiquidacionesSeleccionadas)
                        ListaLiquidacionesSAEAcciones = New List(Of SAELiquidacionesSeleccionadas)
                    Else
                        MyBase.RetornarValorEdicionNavegacion()
                        mostrarMensaje("La orden no se puede editar en la pestaña de ordenes cruzadas.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Me.IsBusy = False
                    End If
                Else
                    MyBase.RetornarValorEdicionNavegacion()
                    mostrarMensaje("No se ha seleccionado ninguna orden para editar.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    Me.IsBusy = False
                End If
            Else
                MyBase.RetornarValorEdicionNavegacion()
                mostrarMensaje("No se ha seleccionado ninguna orden para editar.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Me.IsBusy = False
            End If
        Catch ex As Exception
            Me.IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al intentar editar la orden.", Me.ToString(), "EditarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para editar la orden de OYDPLUS.
    ''' Despues de realizar las validaciones necesarias que permitan la edición de la orden de oydplus.
    ''' Desarrollado por Juan David Correa
    ''' </summary>
    Private Sub EditarOrdenOYDPLUS()
        Try
            OrdenAnteriorOYDPLUS = Nothing

            If _OrdenOYDPLUSSelected.FechaVigencia <= dtmFechaServidor Then
                CalcularFechaVigenciaOrden(_OrdenOYDPLUSSelected)
            End If

            ObtenerValoresOrdenAnterior(_OrdenOYDPLUSSelected, OrdenAnteriorOYDPLUS)
            dblCantidadAnterior = OrdenOYDPLUSSelected.Cantidad 'Apenas entra a editar, guardamos(en una Variable)la cantidad que tiene la orden.
            logCancelarRegistro = False
            logEditarRegistro = True
            logDuplicarRegistro = False
            logPlantillaRegistro = False
            logNuevoRegistro = False
            logCambiarDetallesOrden = True
            logDiasCumplimiento = True

            If (_OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA) And _OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA Then
                logOrdenDIRECTA_RENTAFIJA = True
            Else
                logOrdenDIRECTA_RENTAFIJA = False
            End If

            If _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_VENTA And _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA And HabilitarConstanciaFuncionalidad Then
                MostrarCamposConstancia = Visibility.Visible
                HabilitarConstancia = True
            Else
                MostrarCamposConstancia = Visibility.Collapsed
                HabilitarConstancia = False
            End If

            If _OrdenOYDPLUSSelected.EstadoLEO <> ESTADOORDENLEO_LANZADA Or IsNothing(_OrdenOYDPLUSSelected.UsuarioOperador) Or String.IsNullOrEmpty(_OrdenOYDPLUSSelected.UsuarioOperador) Then
                HabilitarUsuarioOperador = True
            End If

            'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
            'JUAN DAVID CORREA MARZO 2015
            ValidarTipoCalculoDefecto(False, _OrdenOYDPLUSSelected.TipoNegocio, _OrdenOYDPLUSSelected.EnPesos)

            ObtenerReceptorLiderOrdenOYDPLUS()

            BuscarControlValidacion(ViewOrdenesOYDPLUS, "tabItemValoresComisiones")

            ReceptorControles = _OrdenOYDPLUSSelected.Receptor

            CargarCombosOYDPLUS(OPCION_EDITAR, _OrdenOYDPLUSSelected.Receptor, OPCION_EDITAR)

            Dim Mensaje As String = String.Format("Se modifica la orden nro {0}", _OrdenOYDPLUSSelected.IDNroOrden)

            intCantidadMensajeValidacionFechaCumplimiento = 0
#If HAY_NOTIFICACIONES = 1 Then
            EnviarMensajeCliente(MensajeNotificacion.AccionEjecutada.Modificada, Mensaje, _OrdenOYDPLUSSelected.IDNroOrden, String.Empty)
#End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al editar la orden.", Me.ToString(), "EditarOrdenOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para validar el estado actual de la orden y realiza una consulta en base de datos para validar 
    ''' que la orden no se encuentre complementada.
    ''' Desarrollado por Juan David Correa
    ''' </summary>
    Private Sub validarEstadoOrden(ByVal pstrAccion As String)
        Try
            Dim strMsg As String = String.Empty

            If _OrdenOYDPLUSSelected.Modificable = False Then
                If pstrAccion = "EDITARORDENOYDPLUS" Then
                    MyBase.RetornarValorEdicionNavegacion()
                    strMsg = "Solamente las órdenes en estado pendiente pueden ser modificadas"
                Else
                    strMsg = "Solamente las órdenes en estado pendiente pueden ser anuladas"
                End If

                mostrarMensaje(strMsg, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                'ElseIf _OrdenOYDPLUSSelected.EstadoLEO <> ESTADOORDENLEO_RECIBIDA And pstrAccion = OPCION_EDITAR Then
                '    strMsg = "Solamente las órdenes en estado LEO recibida pueden ser modificadas"

                '    mostrarMensaje(strMsg, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Me.IsBusy = False
            Else
                Select Case _OrdenOYDPLUSSelected.TipoNegocio
                    Case TIPONEGOCIO_SIMULTANEA 'SIMULTANEA
                        If _OrdenOYDPLUSSelected.Clasificacion = RF_Simulatena_Regreso Then
                            strMsg = "La Orden No. " + _OrdenOYDPLUSSelected.NroOrden.ToString + " es una Simultanea de Regreso no puede ser modificada. Modifique la Orden No. " + (_OrdenOYDPLUSSelected.NroOrden - 1).ToString + " que es la correspondiente Simúltanea de Salida."
                        End If
                    Case TIPONEGOCIO_REPO, TIPONEGOCIO_REPOC 'REPO
                        If _OrdenOYDPLUSSelected.Clasificacion = RF_REPO And (_OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_RECOMPRA Or
                                                                              _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_REVENTA) Then
                            strMsg = "La Orden No. " + _OrdenOYDPLUSSelected.NroOrden.ToString + " es una REPO de Regreso no puede ser modificada. Modifique la Orden No. " + (_OrdenOYDPLUSSelected.NroOrden - 1).ToString + " que es la correspondiente REPO de Salida."
                        End If
                    Case TIPONEGOCIO_TTV, TIPONEGOCIO_TTVC 'TTV
                        If _OrdenOYDPLUSSelected.Clasificacion = RF_TTV_Regreso Then
                            strMsg = "La Orden No. " + _OrdenOYDPLUSSelected.NroOrden.ToString + " es una TTV de Regreso no puede ser modificada. Modifique la Orden No. " + (_OrdenOYDPLUSSelected.NroOrden - 1).ToString + " que es la correspondiente TTV de Salida."
                        End If
                End Select

                Select Case _OrdenOYDPLUSSelected.Clasificacion
                    Case "OPA"
                        If _OrdenOYDPLUSSelected.Clase = CLASE_ACCIONES Then
                            VisibilidadOfertaPublicaP = Visibility.Visible
                            HabilitarOfertaPublica = True
                        Else
                            VisibilidadOfertaPublicaP = Visibility.Collapsed
                            HabilitarOfertaPublica = False
                        End If
                End Select

                'Se quita la validación porque las ordenes si se pueden modificar pero el usuario tiene que realizar la modificación de la fecha de vigencia.
                'If _OrdenOYDPLUSSelected.FechaVigencia < dtmFechaServidor Then
                '    strMsg = "La fecha de vigencia de la Orden No. " + _OrdenOYDPLUSSelected.NroOrden.ToString + " es menor a la fecha actual."
                'End If

                If strMsg.Equals(String.Empty) Then
                    Dim strAccionMensaje As String = IIf(pstrAccion = "EDITARORDENOYDPLUS", "Editar", "Anular")
                    If ValidarFechaCierreSistema(_OrdenOYDPLUSSelected, strAccionMensaje) Then
                        Me.IsBusy = True
                        CargarTipoNegocioReceptor(pstrAccion, _OrdenOYDPLUSSelected.Receptor, _Modulo, pstrAccion)
                    Else
                        If pstrAccion = "EDITARORDENOYDPLUS" Then
                            MyBase.RetornarValorEdicionNavegacion()
                        End If
                        Me.IsBusy = False
                    End If
                Else
                    If pstrAccion = "EDITARORDENOYDPLUS" Then
                        MyBase.RetornarValorEdicionNavegacion()
                    End If
                    IsBusy = False
                    mostrarMensaje(strMsg, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If
            End If
        Catch ex As Exception
            Me.IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar el estado de la orden.", Me.ToString(), "validarEstadoOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Valida el estado de la orden en el servidor
    ''' Desarrollado por Juan David Correa
    ''' </summary>
    ''' <param name="pstrAccion">Indica si se valida la edición o anulación de la orden</param>
    Private Sub validarOrdenModificable(ByVal pstrAccion As String)
        Try
            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                If Not IsNothing(dcProxy.OrdenModificables) Then
                    dcProxy.OrdenModificables.Clear()
                End If

                dcProxy.Load(dcProxy.verificarOrdenModificableQuery(_OrdenOYDPLUSSelected.Clase, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.NroOrden, _OrdenOYDPLUSSelected.Version, MSTR_MODULO_OYD_ORDENES, pstrAccion, Program.Usuario, _OrdenOYDPLUSSelected.TipoNegocio, Program.HashConexion),
                             AddressOf TerminoVerificarOrdenModificable, pstrAccion)
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al iniciar la validación del estado de la orden", Me.ToString(), "ValidarOrdenModificable", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Public Overrides Sub CancelarEditarRegistro()
        Try
            If logEsModal Then
                RaiseEvent TerminoGuardarRegistro(False, 0)
                Editando = False
            Else
                If Not IsBusyCalculos Then
                    If Not IsNothing(_OrdenOYDPLUSSelected) Then
                        IsBusy = True
                        dcProxy1.OYDPLUS_CancelarOrdenOYDPLUS(_OrdenOYDPLUSSelected.NroOrden, "ORDENES", Program.Usuario, Program.HashConexion, AddressOf TerminoCancelarEditarRegistro, String.Empty)
                    End If
                    HabilitarTipoLimite = False
                Else
                    A2Utilidades.Mensajes.mostrarMensaje("Por favor espere, el sistema no ha terminado de cargar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    Exit Sub
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cancelar la edición del registro",
                     Me.ToString(), "CancelarEditarRegistro", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoCancelarEditarRegistro(ByVal lo As InvokeOperation(Of Integer))
        Try
            'If logEliminarAsociacion Then
            '    OrdenOYDPLUSSelected.LiqAsociadasXML = LiquidacionesAsociadasEditar
            '    GuardarOrdenOYDPLUS(OrdenOYDPLUSSelected)
            'End If

            logCancelarRegistro = True
            logEditarRegistro = False
            logDuplicarRegistro = False
            logPlantillaRegistro = False
            logNuevoRegistro = False
            logEliminarAsociacion = False


            MostrarControles = Visibility.Collapsed
            MostrarControlMensajes = Visibility.Collapsed
            MostrarCamposAcciones = Visibility.Collapsed
            MostrarCamposRentaFija = Visibility.Collapsed
            MostrarCamposCuentaPropia = Visibility.Collapsed
            MostrarNoEdicion = Visibility.Visible

            logCambiarDetallesOrden = True

            If BorrarEspecie = True Then
                BorrarEspecie = False
            End If

            If BorrarCliente = True Then
                BorrarCliente = False
            End If

            If BorrarClienteADR = True Then
                BorrarClienteADR = False
            End If

            BorrarCliente = True
            BorrarClienteADR = True
            BorrarEspecie = True

            ObtenerInformacionCombosCompletos()

            ObtenerValoresOrdenAnterior(OrdenAnteriorOYDPLUS, OrdenOYDPLUSSelected)

            ObtenerValoresOrdenEnLista(_OrdenOYDPLUSSelected)

            OrdenAnteriorOYDPLUS = Nothing
            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                MostrarNegocio = Visibility.Visible
            Else
                MostrarNegocio = Visibility.Collapsed
            End If

            HabilitarCamposOYDPLUS(_OrdenOYDPLUSSelected)

            logCalcularValores = False

            'Consultar los precios del mercado para activar el ticker.
            CargarMensajeDinamicoOYDPLUS("PRECIOSMERCADO", String.Empty, String.Empty, String.Empty)
            IsBusy = False
            MostrarCamposFaciales = Visibility.Collapsed
            MostrarCampoTasaFacial = Visibility.Collapsed
            MostrarCampoIndicador = Visibility.Collapsed
            MostrarCampoPuntosIndicador = Visibility.Collapsed
            Editando = False

            HabilitarOpcionesCruzada = False
            HabilitarEncabezado = False
            HabilitarNegocio = False
            HabilitarEspecieCumplimiento = False
            HabilitarNegocioComitente = False
            HabilitarOfertaPublica = False
            HabilitarEjecucion = False
            HabilitarDuracion = False
            HabilitarFechaVigencia = False
            HabilitarHoraVigencia = False
            HabilitarUsuarioOperador = False
            HabilitarConstancia = False
            HabilitarCantidad = False
            HabilitarValorOrden = False
            HabilitarValorRepoOrden = False
            HabilitarCaptacionRepoOrden = False
            HabilitarRepoEnPesos = False
            logEliminarAsociacion = False
            LiquidacionesHabilitarControles = String.Empty
            HabilitarPrecio = False
            HabilitarDatosLeo = False

            MensajeTasas = String.Empty
            MostrarMensajeTasas = Visibility.Collapsed
            MensajePreciosTick = String.Empty
            MostrarMensajePreciosTick = Visibility.Collapsed
            dblValorConsultadoPrecioSAE = 0
            dblValorConsultadoPorcentajeGarantia = 0

            IsBusy = False
            IsBusy = True
            RecargarPantallaOrdenes()
            IsBusy = False

            dcProxy.RejectChanges()
            MyBase.CambioItem("Editando")
            MyBase.CancelarEditarRegistro()
            intCantidadMensajeValidacionFechaCumplimiento = 0

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cancelar la edición del registro",
                     Me.ToString(), "TerminoCancelarEditarRegistro", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoCancelarAnularRegistro(ByVal lo As InvokeOperation(Of Integer))
        Try
            IsBusy = False
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cancelar la anulación del registro",
                     Me.ToString(), "TerminoCancelarAnularRegistro", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Public Overrides Async Sub BorrarRegistro()
        Try
            If dcProxy.IsLoading Then
                A2Utilidades.Mensajes.mostrarMensaje("Por favor espere, el sistema no ha terminado de cargar.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Exit Sub
            End If

            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                If _OrdenOYDPLUSSelected.IDNroOrden <> 0 Then
                    If VistaSeleccionada <> VISTA_PENDIENTESCRUZAR Then
                        IsBusy = True

                        dtmFechaServidor = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaServidor()
                        mdtmFechaCierreSistema = Await A2OYDPLUSUtilidades.FuncionesCompartidas.obtenerFechaCierreSistema(MSTR_MODULO_OYD_ORDENES, Program.Usuario)

                        validarEstadoOrden("ANULARORDENOYDPLUS")
                    Else
                        mostrarMensaje("La orden no se puede borrar en la pestaña de ordenes cruzadas.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                Else
                    mostrarMensaje("No se ha seleccionado ninguna orden para eliminar.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If
            Else
                mostrarMensaje("No se ha seleccionado ninguna orden para eliminar.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al anular la orden", Me.ToString(), "BorrarRegistro", Program.TituloSistema, Program.Maquina, ex)
        End Try

    End Sub

    Public Overrides Sub NuevoRegistroDetalle()
        Try
            Select Case NombreColeccionDetalle
                Case "cmReceptoresOrden"
                    Dim NewReceptoresOrden As New OyDPLUSOrdenesBolsa.ReceptoresOrden

                    NewReceptoresOrden.ClaseOrden = _OrdenOYDPLUSSelected.Clase
                    NewReceptoresOrden.TipoOrden = _OrdenOYDPLUSSelected.TipoOperacion
                    NewReceptoresOrden.NroOrden = _OrdenOYDPLUSSelected.NroOrden
                    NewReceptoresOrden.Version = _OrdenOYDPLUSSelected.Version
                    NewReceptoresOrden.IDComisionista = 0
                    NewReceptoresOrden.IDSucComisionista = 0
                    NewReceptoresOrden.FechaActualizacion = dtmFechaServidor
                    NewReceptoresOrden.Usuario = Program.Usuario
                    NewReceptoresOrden.Lider = False
                    NewReceptoresOrden.Porcentaje = 0
                    NewReceptoresOrden.Nombre = ""
                    NewReceptoresOrden.IDReceptor = String.Empty

                    Dim objListaReceptorOrden As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
                    If Not IsNothing(_ListaReceptoresOrdenes) Then
                        For Each li In _ListaReceptoresOrdenes
                            objListaReceptorOrden.Add(li)
                        Next
                    End If

                    objListaReceptorOrden.Add(NewReceptoresOrden)

                    ListaReceptoresOrdenes = objListaReceptorOrden
                    ReceptoresOrdenSelected = NewReceptoresOrden

                    MyBase.CambioItem("ListaReceptoresOrdenes")
                    MyBase.CambioItem("ListaReceptoresOrdenesPaged")

                Case "cmDistribucionComisionesCruzada"
                    Dim NewReceptoresOrden As New OyDPLUSOrdenesBolsa.ReceptoresOrden

                    NewReceptoresOrden.ClaseOrden = _OrdenCruzadaSelected.Clase
                    NewReceptoresOrden.TipoOrden = _OrdenCruzadaSelected.TipoOperacion
                    NewReceptoresOrden.NroOrden = _OrdenCruzadaSelected.NroOrden
                    NewReceptoresOrden.Version = _OrdenCruzadaSelected.Version
                    NewReceptoresOrden.IDComisionista = 0
                    NewReceptoresOrden.IDSucComisionista = 0
                    NewReceptoresOrden.FechaActualizacion = dtmFechaServidor
                    NewReceptoresOrden.Usuario = Program.Usuario
                    NewReceptoresOrden.Lider = False
                    NewReceptoresOrden.Porcentaje = 0
                    NewReceptoresOrden.Nombre = ""
                    NewReceptoresOrden.IDReceptor = String.Empty

                    Dim objListaReceptorOrden As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
                    If Not IsNothing(_ListaReceptoresOrdenes) Then
                        For Each li In _ListaReceptoresOrdenes
                            objListaReceptorOrden.Add(li)
                        Next
                    End If

                    objListaReceptorOrden.Add(NewReceptoresOrden)

                    ListaDistribucionComisionCruzada = objListaReceptorOrden
                    DistribucionComisionCruzadaSelected = NewReceptoresOrden

                    MyBase.CambioItem("ListaDistribucionComisionCruzada")
                    MyBase.CambioItem("ListaDistribucionComisionCruzadaPaged")

                Case "cmReceptoresOrdenCruzada"
                    Dim NewReceptoresOrdenCruzada As New OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar

                    NewReceptoresOrdenCruzada.IDOrdenOriginal = _OrdenOYDPLUSSelected.IDNroOrden
                    NewReceptoresOrdenCruzada.IDReceptor = String.Empty
                    NewReceptoresOrdenCruzada.NombreReceptor = String.Empty
                    NewReceptoresOrdenCruzada.Usuario = Program.Usuario

                    Dim objListaReceptorOrden As New List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
                    If Not IsNothing(_ListaReceptoresOrdenesCruzada) Then
                        For Each li In _ListaReceptoresOrdenesCruzada
                            objListaReceptorOrden.Add(li)
                        Next
                    End If

                    objListaReceptorOrden.Add(NewReceptoresOrdenCruzada)

                    ListaReceptoresOrdenesCruzada = objListaReceptorOrden
                    ReceptoresOrdenCruzadaSelected = NewReceptoresOrdenCruzada

                    MyBase.CambioItem("ListaReceptoresOrdenesCruzada")
                    MyBase.CambioItem("ListaReceptoresOrdenesCruzadaPaged")
            End Select
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al crear un nuevo detalle.", Me.ToString(), "NuevoRegistroDetalle", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub BorrarRegistroDetalle()
        Try
            Select Case NombreColeccionDetalle
                Case "cmReceptoresOrden"
                    If Not IsNothing(_ListaReceptoresOrdenes) Then
                        If Not _ReceptoresOrdenSelected Is Nothing Then
                            Dim intRegistroPosicionar As Integer = Program.BuscarPosicionarItemLista(ReceptoresOrdenSelected, ListaReceptoresOrdenes)

                            Dim objListaReceptoresOrden As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
                            For Each li In _ListaReceptoresOrdenes
                                objListaReceptoresOrden.Add(li)
                            Next

                            If objListaReceptoresOrden.Contains(_ReceptoresOrdenSelected) Then
                                objListaReceptoresOrden.Remove(_ReceptoresOrdenSelected)
                            End If

                            ReceptoresOrdenSelected = Nothing
                            ListaReceptoresOrdenes = objListaReceptoresOrden
                            Program.PosicionarItemLista(ReceptoresOrdenSelected, ListaReceptoresOrdenes, intRegistroPosicionar)
                        End If
                    End If
                Case "cmDistribucionComisionesCruzada"
                    If Not IsNothing(_ListaDistribucionComisionCruzada) Then
                        If Not _DistribucionComisionCruzadaSelected Is Nothing Then
                            Dim intRegistroPosicionar As Integer = Program.BuscarPosicionarItemLista(DistribucionComisionCruzadaSelected, ListaDistribucionComisionCruzada)

                            Dim objListaDistribucion As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
                            For Each li In _ListaDistribucionComisionCruzada
                                objListaDistribucion.Add(li)
                            Next

                            If objListaDistribucion.Contains(DistribucionComisionCruzadaSelected) Then
                                objListaDistribucion.Remove(DistribucionComisionCruzadaSelected)
                            End If

                            DistribucionComisionCruzadaSelected = Nothing
                            ListaDistribucionComisionCruzada = objListaDistribucion
                            Program.PosicionarItemLista(DistribucionComisionCruzadaSelected, ListaDistribucionComisionCruzada, intRegistroPosicionar)
                        End If
                    End If
                Case "cmReceptoresOrdenCruzada"
                    If Not IsNothing(_ListaReceptoresOrdenesCruzada) Then
                        If Not _ReceptoresOrdenCruzadaSelected Is Nothing Then
                            If _OrdenOYDPLUSSelected.OrdenCruzadaCliente And _ReceptoresOrdenCruzadaSelected.IDReceptor = _OrdenOYDPLUSSelected.Receptor Then
                                mostrarMensaje("Cuando esta habilitado Orden cruzada con uno de mis clientes no se puede eliminar de la lista el receptor de la orden.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Else
                                Dim intRegistroPosicionar As Integer = Program.BuscarPosicionarItemLista(ReceptoresOrdenCruzadaSelected, ListaReceptoresOrdenesCruzada)
                                Dim objListaReceptorOrden As New List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
                                For Each li In _ListaReceptoresOrdenesCruzada
                                    objListaReceptorOrden.Add(li)
                                Next

                                If objListaReceptorOrden.Contains(_ReceptoresOrdenCruzadaSelected) Then
                                    objListaReceptorOrden.Remove(_ReceptoresOrdenCruzadaSelected)
                                End If

                                ReceptoresOrdenCruzadaSelected = Nothing
                                ListaReceptoresOrdenesCruzada = objListaReceptorOrden
                                Program.PosicionarItemLista(ReceptoresOrdenCruzadaSelected, ListaReceptoresOrdenesCruzada, intRegistroPosicionar)
                            End If
                        End If
                    End If
            End Select
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al borrar el detalle.", Me.ToString(), "BorrarRegistroDetalle", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub CambiarAForma()
        Try
            If logCargoForma = False Then
                ViewOrdenesOYDPLUS.GridEdicion.Children.Add(viewFormaOrdenes)
                logCargoForma = True
            End If
            MyBase.CambiarAForma()
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al ver el detalle del registro.", Me.ToString(), "CambiarAForma", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Public Overrides Sub CambiarALista()
        Try
            MyBase.CambiarALista()
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al ver los registros.", Me.ToString(), "CambiarALista", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Este metodo limpia las propiedades de busqueda que hallan sido ingresado anteriormente.
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub OrganizarNuevaBusqueda()
        Try
            Dim objBusqueda As New CamposBusquedaOrdenOYDPLUS
            objBusqueda.NroOrden = 0
            objBusqueda.Receptor = "TDS"
            objBusqueda.TipoNegocio = String.Empty
            objBusqueda.TipoOperacion = String.Empty
            objBusqueda.TipoOrden = String.Empty
            objBusqueda.TipoProducto = String.Empty

            Dim objListaReceptoresBusqueda As New List(Of OYDPLUSUtilidades.tblReceptoresUsuario)
            ListaReceptoresUsuarioBusqueda = Nothing

            If Not IsNothing(ListaReceptoresCompleta) Then
                objListaReceptoresBusqueda.Add(New OYDPLUSUtilidades.tblReceptoresUsuario With {.ID = -1,
                                                                                                .CodigoReceptor = "TDS",
                                                                                                .Nombre = "(Todos)",
                                                                                                .Prioridad = -1,
                                                                                                .Usuario = Program.Usuario})
                For Each li In ListaReceptoresCompleta.OrderBy(Function(i) i.ID).ToList
                    objListaReceptoresBusqueda.Add(li)
                Next
            End If

            ListaReceptoresUsuarioBusqueda = objListaReceptoresBusqueda

            BusquedaOrdenOyDPlus = objBusqueda

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al organizar la nueva busqueda.", Me.ToString(), "OrganizarNuevaBusqueda", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    '''Metodo para cargar los combos especificos para la pantalla de OYDPLUS.
    ''' Se realiza la consulta en base de datos dependiendo 
    ''' </summary>
    Public Sub CargarCombosOYDPLUS(ByVal pstrOpcion As String, ByVal pstrIDReceptor As String, Optional ByVal pstrUserState As String = "")
        Try
            If logNuevoRegistro Or logEditarRegistro And pstrOpcion = OPCION_ORDENCRUZADA Then
                IsBusy = True
            End If

            If pstrOpcion = OPCION_ORDENCRUZADA Then
                IsBusyCruzada = True
            End If

            If Not IsNothing(mdcProxyUtilidad03.CombosReceptors) Then
                mdcProxyUtilidad03.CombosReceptors.Clear()
            End If

            If String.IsNullOrEmpty(pstrOpcion) Then
                mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarCombosReceptorQuery(String.Empty, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarCombosOYDCOMPLETOS, pstrUserState)
            Else
                If pstrOpcion.ToUpper = "INICIO" Then
                    mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarCombosReceptorQuery(String.Empty, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarCombosOYDCOMPLETOS, pstrUserState)
                Else
                    mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarCombosReceptorQuery(pstrIDReceptor, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarCombosOYD, pstrUserState)
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar los combos de la pantalla.",
                                 Me.ToString(), "CargarCombosOYDPLUS", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodod para cargar los tipos de negocio a los cuales tiene derecho el receptor.
    ''' Desarrollado por Juan David Correa
    ''' Fecha 02 de Octubre del 2012
    ''' </summary>
    Public Sub CargarTipoNegocioReceptor(ByVal pstrOpcion As String, ByVal pstrReceptor As String, ByVal pstrModulo As String, Optional ByVal pstrUserState As String = "")
        Try
            If logEditarRegistro Or logNuevoRegistro Then
                IsBusy = True
            End If

            If Not IsNothing(mdcProxyUtilidad03.tblTipoNegocioReceptors) Then
                mdcProxyUtilidad03.tblTipoNegocioReceptors.Clear()
            End If

            If String.IsNullOrEmpty(pstrOpcion) Then
                mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_TipoNegocioReceptorQuery(String.Empty, pstrModulo, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarTipoNegocioOYDCOMPLETOS, pstrUserState)
            Else
                If pstrOpcion.ToUpper = "INICIO" Then
                    mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_TipoNegocioReceptorQuery(String.Empty, pstrModulo, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarTipoNegocioOYDCOMPLETOS, pstrUserState)
                Else
                    mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_TipoNegocioReceptorQuery(pstrReceptor, pstrModulo, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarTipoNegocioOYD, pstrUserState)
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar los combos de la pantalla.",
                                 Me.ToString(), "CargarCombosOYDPLUS", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    '''Metodo para cargar la configuración del receptor de la tabla de tblConfiguracionesAdicionalesReceptor OYDPLUS.
    '''Desarrollado por: Juan David Correa
    ''' </summary>
    Public Sub CargarConfiguracionReceptorOYDPLUS(ByVal pstrReceptor As String, ByVal pUserState As String)
        Try
            If logNuevoRegistro Then
                IsBusy = True
            End If
            If Not IsNothing(mdcProxyUtilidad03.tblConfiguracionesAdicionalesReceptors) Then
                mdcProxyUtilidad03.tblConfiguracionesAdicionalesReceptors.Clear()
            End If
            mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarConfiguracionReceptorQuery(pstrReceptor, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarConfiguracionReceptor, pUserState)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar la configuración del receptor.",
                                 Me.ToString(), "CargarConfiguracionReceptor", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    '''Metodo para cargar los parametros por defecto que tiene el receptor en la tabla de tblParametrosReceptor OYDPLUS.
    '''Desarrollado por: Juan David Correa
    ''' </summary>
    Public Sub CargarParametrosReceptorOYDPLUS(ByVal pstrReceptor As String, ByVal pUserState As String)
        Try
            If logNuevoRegistro Then
                IsBusy = True
            End If
            If Not IsNothing(mdcProxyUtilidad03.tblParametrosReceptors) Then
                mdcProxyUtilidad03.tblParametrosReceptors.Clear()
            End If
            mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarParametrosReceptorQuery(pstrReceptor, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarParametrosReceptor, pUserState)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al cargar los parametros del receptor.",
                                 Me.ToString(), "CargarParametrosReceptor", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    '''Metodo para cargar los mensajes para la pantalla
    ''' Desarrollado por: Juan David Correa
    ''' </summary>
    Public Sub CargarMensajeDinamicoOYDPLUS(ByVal pstrOpcion As String, ByVal pstrIDReceptor As String, ByVal pstrIDCliente As String, ByVal pstrIDEspecie As String, Optional ByVal pstrUserState As String = "")
        Try
            If Not IsNothing(mdcProxyUtilidad03.tblMensajes) Then
                mdcProxyUtilidad03.tblMensajes.Clear()
            End If
            mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarMensajePantallaQuery(pstrOpcion, pstrIDReceptor, pstrIDCliente, pstrIDEspecie, Program.Usuario, Program.HashConexion),
                                    AddressOf TerminoCargarMensaje, pstrUserState)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó cargar el mensaje dinamico.",
                                 Me.ToString(), "CargarMensajeDinamico", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para limpiar valores del control.
    ''' Desarrollado por: Juan David Correa
    ''' </summary>
    Public Async Sub LimpiarControlesOYDPLUS(ByVal pstrOpcion As String, ByVal objOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            Dim logLimpiarDatos As Boolean = True
            Select Case pstrOpcion.ToUpper
                Case OPCION_RECEPTOR
                    objOrdenSelected.TipoOrden = Nothing
                    objOrdenSelected.TipoNegocio = Nothing
                    objOrdenSelected.TipoProducto = Nothing
                    objOrdenSelected.TipoOperacion = Nothing
                    objOrdenSelected.TipoLimite = Nothing
                    objOrdenSelected.Duracion = Nothing
                    objOrdenSelected.CondicionesNegociacion = Nothing
                    objOrdenSelected.FormaPago = Nothing
                    objOrdenSelected.TipoInversion = Nothing
                    objOrdenSelected.Ejecucion = Nothing
                    objOrdenSelected.Mercado = Nothing
                    objOrdenSelected.Modalidad = Nothing
                    objOrdenSelected.CanalRecepcion = Nothing
                    objOrdenSelected.UsuarioOperador = Nothing
                    objOrdenSelected.MedioVerificable = Nothing
                    objOrdenSelected.ProductoValores = Nothing

                    Me.ComitenteSeleccionadoOYDPLUS = Nothing

                    If Not IsNothing(Me.ListaOrdenantesOYDPLUS) Then
                        Me.ListaOrdenantesOYDPLUS.Clear()
                    End If

                    Me.OrdenanteSeleccionadoOYDPLUS = Nothing

                    If Not IsNothing(Me.ListaCuentasDepositoOYDPLUS) Then
                        Me.ListaCuentasDepositoOYDPLUS.Clear()
                    End If

                    Me.CtaDepositoSeleccionadaOYDPLUS = Nothing
                    DiccionarioCombosOYDPlus = Nothing
                    MensajeTasas = String.Empty
                    MostrarMensajeTasas = Visibility.Collapsed
                    MensajePreciosTick = String.Empty
                    MostrarMensajePreciosTick = Visibility.Collapsed
                    dblValorConsultadoPrecioSAE = 0
                    dblValorConsultadoPorcentajeGarantia = 0
                Case OPCION_TIPONEGOCIO
                    objOrdenSelected.TipoOperacion = Nothing
                    logCalcularValores = False

                    objOrdenSelected.EnPesos = False
                    If logEsModal = False Then
                        objOrdenSelected.Cantidad = 0
                        objOrdenSelected.Precio = 0
                    End If

                    objOrdenSelected.Castigo = 0
                    objOrdenSelected.Comision = 0
                    objOrdenSelected.IvaComision = 0
                    objOrdenSelected.PrecioLimpio = 0
                    objOrdenSelected.PrecioMaximoMinimo = 0
                    objOrdenSelected.TasaCliente = 0
                    objOrdenSelected.TasaNominal = 0
                    objOrdenSelected.TasaRegistro = 0
                    objOrdenSelected.ValorAccion = 0
                    objOrdenSelected.ValorCaptacionGiro = 0
                    objOrdenSelected.ValorComision = 0
                    objOrdenSelected.ValorFuturoCliente = 0
                    objOrdenSelected.ValorFuturoRepo = 0
                    objOrdenSelected.ValorOrden = 0
                    objOrdenSelected.Clasificacion = ""
                    logCalcularValores = True
                    MensajeTasas = String.Empty
                    MostrarMensajeTasas = Visibility.Collapsed
                    MensajePreciosTick = String.Empty
                    MostrarMensajePreciosTick = Visibility.Collapsed
                    dblValorConsultadoPrecioSAE = 0
                    dblValorConsultadoPorcentajeGarantia = 0
                Case OPCION_DATOSNEGOCIACION
                    If logLimpiarDatosNegociacionCambioNemotecnico = False And logEditarRegistro Then
                        logLimpiarDatos = False
                    End If

                    If logLimpiarDatos Then
                        If Not IsNothing(ListaOrdenSAEAcciones) Then
                            If ListaOrdenSAEAcciones.Where(Function(i) i.Seleccionada = True).Count = 0 Then
                                If logEsModal = False Then
                                    objOrdenSelected.Cantidad = 0
                                    objOrdenSelected.Precio = 0
                                End If

                                objOrdenSelected.Castigo = 0
                                objOrdenSelected.Comision = 0
                                objOrdenSelected.IvaComision = 0
                                objOrdenSelected.PrecioLimpio = 0
                                objOrdenSelected.PrecioMaximoMinimo = 0
                                objOrdenSelected.TasaCliente = 0
                                objOrdenSelected.TasaNominal = 0
                                objOrdenSelected.TasaRegistro = 0
                                objOrdenSelected.ValorAccion = 0
                                objOrdenSelected.ValorCaptacionGiro = 0
                                objOrdenSelected.ValorComision = 0
                                objOrdenSelected.ValorFuturoCliente = 0
                                objOrdenSelected.ValorFuturoRepo = 0
                                objOrdenSelected.ValorOrden = 0
                                dblValorConsultadoPrecioSAE = 0
                                dblValorConsultadoPorcentajeGarantia = 0

                            End If
                        ElseIf objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                            If logEsModal = False Then
                                objOrdenSelected.Cantidad = 0
                                objOrdenSelected.Precio = 0
                            End If

                            objOrdenSelected.Castigo = 0
                            objOrdenSelected.Comision = 0
                            objOrdenSelected.IvaComision = 0
                            objOrdenSelected.PrecioLimpio = 0
                            objOrdenSelected.PrecioMaximoMinimo = 0
                            objOrdenSelected.TasaCliente = 0
                            objOrdenSelected.TasaNominal = 0
                            objOrdenSelected.TasaRegistro = 0
                            objOrdenSelected.ValorAccion = 0
                            objOrdenSelected.ValorCaptacionGiro = 0
                            objOrdenSelected.ValorComision = 0
                            objOrdenSelected.ValorFuturoCliente = 0
                            objOrdenSelected.ValorFuturoRepo = 0
                            objOrdenSelected.ValorOrden = 0
                            dblValorConsultadoPrecioSAE = 0
                            dblValorConsultadoPorcentajeGarantia = 0
                            'objOrdenSelected.DiasCumplimiento = 0
                        End If
                        If Not IsNothing(ListaOrdenSAERentaFija) Then
                            If ListaOrdenSAERentaFija.Where(Function(i) i.Seleccionada = True).Count = 0 Then
                                If logEsModal = False Then
                                    objOrdenSelected.Cantidad = 0
                                    objOrdenSelected.Precio = 0
                                End If

                                objOrdenSelected.Castigo = 0
                                objOrdenSelected.Comision = 0
                                objOrdenSelected.IvaComision = 0
                                objOrdenSelected.PrecioLimpio = 0
                                objOrdenSelected.PrecioMaximoMinimo = 0
                                objOrdenSelected.TasaCliente = 0
                                objOrdenSelected.TasaNominal = 0
                                objOrdenSelected.TasaRegistro = 0
                                objOrdenSelected.ValorAccion = 0
                                objOrdenSelected.ValorCaptacionGiro = 0
                                objOrdenSelected.ValorComision = 0
                                objOrdenSelected.ValorFuturoCliente = 0
                                objOrdenSelected.ValorFuturoRepo = 0
                                objOrdenSelected.ValorOrden = 0
                                dblValorConsultadoPrecioSAE = 0
                                dblValorConsultadoPorcentajeGarantia = 0

                            End If
                        End If
                        ValidarTipoCalculoDefecto(False, objOrdenSelected.TipoNegocio, objOrdenSelected.EnPesos)
                        logCalcularValores = True
                        MensajeTasas = String.Empty
                        MostrarMensajeTasas = Visibility.Collapsed
                        MensajePreciosTick = String.Empty
                        MostrarMensajePreciosTick = Visibility.Collapsed
                        dblValorConsultadoPrecioSAE = 0
                        dblValorConsultadoPorcentajeGarantia = 0
                    End If
                Case OPCION_DATOSNEGOCIACIONESPECIE
                    If logLimpiarDatosNegociacionCambioNemotecnico = False And logEditarRegistro Then
                        logLimpiarDatos = False
                    End If

                    If logLimpiarDatos Then
                        If Not IsNothing(ListaOrdenSAERentaFija) Then
                            If ListaOrdenSAERentaFija.Where(Function(i) i.Seleccionada = True).Count = 0 Then
                                logCalcularValores = False
                                objOrdenSelected.EnPesos = False

                                If logEsModal = False Then
                                    objOrdenSelected.Cantidad = 0
                                    objOrdenSelected.Precio = 0
                                End If

                                objOrdenSelected.Comision = 0
                                objOrdenSelected.IvaComision = 0
                                objOrdenSelected.PrecioLimpio = 0
                                objOrdenSelected.TasaCliente = 0
                                objOrdenSelected.TasaNominal = 0
                                objOrdenSelected.TasaRegistro = 0
                                objOrdenSelected.ValorCaptacionGiro = 0
                                objOrdenSelected.ValorComision = 0
                                objOrdenSelected.ValorFuturoCliente = 0
                                objOrdenSelected.ValorFuturoRepo = 0
                                objOrdenSelected.ValorOrden = 0
                                objOrdenSelected.ValorAccion = 0
                                objOrdenSelected.Castigo = 0
                                objOrdenSelected.PrecioMaximoMinimo = 0
                            End If
                        Else
                            logCalcularValores = False
                            objOrdenSelected.EnPesos = False

                            If logEsModal = False Then
                                objOrdenSelected.Cantidad = 0
                                objOrdenSelected.Precio = 0
                            End If

                            objOrdenSelected.Comision = 0
                            objOrdenSelected.IvaComision = 0
                            objOrdenSelected.PrecioLimpio = 0
                            objOrdenSelected.TasaCliente = 0
                            objOrdenSelected.TasaNominal = 0
                            objOrdenSelected.TasaRegistro = 0
                            objOrdenSelected.ValorCaptacionGiro = 0
                            objOrdenSelected.ValorComision = 0
                            objOrdenSelected.ValorFuturoCliente = 0
                            objOrdenSelected.ValorFuturoRepo = 0
                            objOrdenSelected.ValorOrden = 0
                            objOrdenSelected.ValorAccion = 0
                            objOrdenSelected.Castigo = 0
                            objOrdenSelected.PrecioMaximoMinimo = 0
                        End If
                    End If

                    ValidarTipoCalculoDefecto(False, objOrdenSelected.TipoNegocio, objOrdenSelected.EnPesos)
                    logCalcularValores = True
                    MensajeTasas = String.Empty
                    MostrarMensajeTasas = Visibility.Collapsed
                    MensajePreciosTick = String.Empty
                    MostrarMensajePreciosTick = Visibility.Collapsed
                Case OPCION_CANTIDAD
                    logCalcularValores = False
                    objOrdenSelected.EnPesos = False
                    objOrdenSelected.Comision = 0
                    objOrdenSelected.IvaComision = 0
                    objOrdenSelected.PrecioLimpio = 0
                    objOrdenSelected.TasaCliente = 0
                    objOrdenSelected.TasaNominal = 0
                    objOrdenSelected.TasaRegistro = 0
                    objOrdenSelected.ValorCaptacionGiro = 0
                    objOrdenSelected.ValorComision = 0
                    objOrdenSelected.ValorFuturoCliente = 0
                    objOrdenSelected.ValorFuturoRepo = 0
                    objOrdenSelected.ValorOrden = 0

                    If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                        If objOrdenSelected.ValorAccion <> dblValorConsultadoPrecioSAE Then
                            objOrdenSelected.ValorAccion = 0
                        End If
                        If logEsModal = False Then
                            objOrdenSelected.Precio = 0
                        End If
                    Else
                        If logEsModal = False Then
                            If objOrdenSelected.Precio <> dblValorConsultadoPrecioSAE Then
                                objOrdenSelected.Precio = 0
                            End If
                        End If

                        objOrdenSelected.ValorAccion = 0
                    End If

                    If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                        If objOrdenSelected.Castigo <> dblValorConsultadoPorcentajeGarantia Then
                            objOrdenSelected.Castigo = 0
                        End If
                        objOrdenSelected.PrecioMaximoMinimo = 0
                    Else
                        If objOrdenSelected.PrecioMaximoMinimo <> dblValorConsultadoPorcentajeGarantia Then
                            objOrdenSelected.PrecioMaximoMinimo = 0
                        End If
                        objOrdenSelected.Castigo = 0
                    End If

                    ValidarTipoCalculoDefecto(False, objOrdenSelected.TipoNegocio, objOrdenSelected.EnPesos)
                    logCalcularValores = True
                    MensajeTasas = String.Empty
                    MostrarMensajeTasas = Visibility.Collapsed
                    MensajePreciosTick = String.Empty
                    MostrarMensajePreciosTick = Visibility.Collapsed
                Case OPCION_ENPESOS
                    logCalcularValores = False
                    'C-20200380_JAPC20200508: Se ajusta validacion para que no limpie valores de la operacion cuando son acciones
                    If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then

                    Else
                        If logEsModal = False Then
                            objOrdenSelected.Cantidad = 0
                        End If

                        objOrdenSelected.Comision = 0
                        objOrdenSelected.IvaComision = 0
                        objOrdenSelected.PrecioLimpio = 0
                        objOrdenSelected.TasaCliente = 0
                        objOrdenSelected.TasaNominal = 0
                        objOrdenSelected.TasaRegistro = 0
                        objOrdenSelected.ValorCaptacionGiro = 0
                        objOrdenSelected.ValorComision = 0
                        objOrdenSelected.ValorFuturoCliente = 0
                        objOrdenSelected.ValorFuturoRepo = 0
                        objOrdenSelected.ValorOrden = 0
                    End If


                    If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                        If objOrdenSelected.ValorAccion <> dblValorConsultadoPrecioSAE Then
                            'objOrdenSelected.ValorAccion = 0
                            objOrdenSelected.ValorAccion = OrdenOYDPLUSSelected.ValorAccion
                        End If
                        If logEsModal = False Then
                            objOrdenSelected.Precio = 0
                        End If
                    Else
                        If logEsModal = False Then
                            'C-20200380_JAPC20200508: Se ajusta validacion para que no limpie valores de la operacion cuando son acciones
                            If objOrdenSelected.Precio <> dblValorConsultadoPrecioSAE And objOrdenSelected.TipoNegocio <> TIPONEGOCIO_ACCIONES Then
                                objOrdenSelected.Precio = 0
                            End If
                        End If

                        objOrdenSelected.ValorAccion = 0
                    End If

                    If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                        If objOrdenSelected.Castigo <> dblValorConsultadoPorcentajeGarantia Then
                            'objOrdenSelected.Castigo = 0
                            objOrdenSelected.Castigo = OrdenOYDPLUSSelected.Castigo
                        End If
                        objOrdenSelected.PrecioMaximoMinimo = 0
                    Else
                        If objOrdenSelected.PrecioMaximoMinimo <> dblValorConsultadoPorcentajeGarantia Then
                            objOrdenSelected.PrecioMaximoMinimo = 0
                        End If
                        objOrdenSelected.Castigo = 0
                    End If

                    ValidarTipoCalculoDefecto(False, objOrdenSelected.TipoNegocio, objOrdenSelected.EnPesos)
                    logCalcularValores = True
                    MensajeTasas = String.Empty
                    MostrarMensajeTasas = Visibility.Collapsed
                    MensajePreciosTick = String.Empty
                    MostrarMensajePreciosTick = Visibility.Collapsed
            End Select
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al limpiar los controles.",
                                 Me.ToString(), "LimpiarControles", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub


    ''' <summary>
    ''' Cargar los receptores activos del usuario logueado.
    ''' Cuando el parametro opción se encuentra vacio carga todos los receptores del usuario.
    ''' Desarrollado por: Juan David Correa
    ''' </summary>
    Public Sub CargarReceptoresUsuarioOYDPLUS(ByVal pstrOpcion As String, Optional ByVal pstrUserState As String = "")
        Try
            IsBusy = True
            If Not IsNothing(mdcProxyUtilidad03.tblReceptoresUsuarios) Then
                mdcProxyUtilidad03.tblReceptoresUsuarios.Clear()
            End If
            If String.IsNullOrEmpty(pstrOpcion) Then
                mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarReceptoresUsuarioQuery(False, Program.Usuario, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarReceptoresUsuarioCOMPLETOS, pstrUserState)
            Else
                If pstrOpcion.ToUpper = "INICIO" Then
                    mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarReceptoresUsuarioQuery(False, Program.Usuario, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarReceptoresUsuarioCOMPLETOS, pstrUserState)
                Else
                    mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarReceptoresUsuarioQuery(True, Program.Usuario, Program.Usuario, Program.HashConexion), AddressOf TerminoConsultarReceptoresUsuario, pstrUserState)
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó cargar los receptores del usuario.",
                                 Me.ToString(), "CargarReceptoresUsuario", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Cargar la información del cliente de la orden.
    ''' Desarrollado por: Juan David Correa
    ''' </summary>
    Public Sub BuscarClienteOYDPLUS(ByVal pstrIdComitente As String, Optional ByVal pstrUserState As String = "")
        Try
            If Not String.IsNullOrEmpty(pstrIdComitente) Then
                If Not IsNothing(mdcProxyUtilidad01.BuscadorClientes) Then
                    mdcProxyUtilidad01.BuscadorClientes.Clear()
                End If

                Dim strClienteABuscar = Right(Space(17) & pstrIdComitente, MINT_LONG_MAX_CODIGO_OYD)

                If Not String.IsNullOrEmpty(strClienteABuscar) Then
                    mdcProxyUtilidad01.Load(mdcProxyUtilidad01.buscarClienteEspecificoQuery(strClienteABuscar, Program.Usuario, "IdComitente", Program.HashConexion), AddressOf buscarComitenteCompleted, pstrUserState)
                End If
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó cargar la información del cliente.",
                                 Me.ToString(), "SeleccionarCliente", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Public Sub BuscarClienteOYDPLUSRestriccion(ByVal pstrIdComitente As String, ByVal pstrIDReceptor As String, ByVal pstrTipoNegocio As String, ByVal pstrTipoProducto As String, Optional ByVal pstrUserState As String = "")
        Try
            If Not String.IsNullOrEmpty(pstrIdComitente) Then
                If Not IsNothing(mdcProxyUtilidad01.BuscadorClientes) Then
                    mdcProxyUtilidad01.BuscadorClientes.Clear()
                End If

                Dim strClienteABuscar = Right(Space(17) & pstrIdComitente, MINT_LONG_MAX_CODIGO_OYD)

                If Not String.IsNullOrEmpty(strClienteABuscar) Then
                    mdcProxyUtilidad01.Load(mdcProxyUtilidad01.buscarClientesOYDPLUSQuery(pstrIdComitente, "A", "C", String.Empty,
                                                                     True, False, pstrIDReceptor, pstrTipoNegocio, pstrTipoProducto, String.Empty, Program.Usuario,
                                                                     False, Nothing, Program.HashConexion), AddressOf buscarComitenteCompletedRestriccion, pstrUserState)
                End If
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó cargar la información del cliente.",
                                 Me.ToString(), "SeleccionarCliente", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Public Sub BuscarEspecieOYDPLUS(ByVal pstrMercado As String, ByVal pstrEspecie As String, Optional ByVal pstrUserState As String = "")
        Try
            If Not String.IsNullOrEmpty(pstrEspecie) Then
                If Not IsNothing(mdcProxyUtilidad01.BuscadorEspecies) Then
                    mdcProxyUtilidad01.BuscadorEspecies.Clear()
                End If

                mdcProxyUtilidad01.Load(mdcProxyUtilidad01.buscarNemotecnicoEspecificoQuery(pstrMercado, pstrEspecie, Program.Usuario, Program.HashConexion), AddressOf buscarEspecieCompleted, pstrUserState)
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó cargar la información de la especie.",
                                 Me.ToString(), "BuscarEspecieOYDPLUS", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Public Sub BuscarEspecieOYDPLUSRestriccion(ByVal pstrEspecie As String, ByVal pstrMercado As String, ByVal pstrTipoNegocio As String, ByVal pstrTipoProducto As String, Optional ByVal pstrUserState As String = "")
        Try
            If Not String.IsNullOrEmpty(pstrEspecie) Then
                If Not IsNothing(mdcProxyUtilidad01.BuscadorEspecies) Then
                    mdcProxyUtilidad01.BuscadorEspecies.Clear()
                End If

                mdcProxyUtilidad01.Load(mdcProxyUtilidad01.buscarEspeciesOyDPLUSQuery(pstrEspecie, pstrMercado, "A", String.Empty, pstrTipoNegocio, pstrTipoProducto, Program.Usuario, False, Program.HashConexion), AddressOf buscarEspecieCompletedRestriccion, pstrUserState)
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó cargar la información de la especie.",
                                 Me.ToString(), "BuscarEspecieOYDPLUS", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Seleccionar información del cliente seleccionado
    ''' Desarrollado por: Juan David Correa
    ''' </summary>
    Public Sub CargarDatosClienteOYDPLUS(ByVal pComitente As OYDUtilidades.BuscadorClientes)
        Try
            If Not IsNothing(pComitente) Then
                If Not IsNothing(_OrdenOYDPLUSSelected) Then
                    _OrdenOYDPLUSSelected.CategoriaCliente = pComitente.Categoria
                    _OrdenOYDPLUSSelected.NroDocumento = pComitente.NroDocumento
                    _OrdenOYDPLUSSelected.TipoProducto = pComitente.CodTipoProducto
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó cargar la información del cliente.",
                                 Me.ToString(), "SeleccionarCliente", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para tomar los valores por defecto de los controles.
    ''' Desarrollado por: Juan David Correa
    ''' </summary>
    Public Sub ObtenerValoresDefectoOYDPLUS(ByVal pstrOpcion As String, ByVal objOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If logNuevoRegistro Or logEditarRegistro Then
                Select Case pstrOpcion.ToUpper
                    Case OPCION_RECEPTOR
                        If ListaReceptoresUsuario.Count > 1 Then
                            If ListaReceptoresUsuario.Where(Function(i) i.Prioridad = 0).Count > 0 Then
                                objOrdenSelected.Receptor = ListaReceptoresUsuario.Where(Function(i) i.Prioridad = 0).FirstOrDefault.CodigoReceptor
                            End If
                        ElseIf ListaReceptoresUsuario.Count = 1 Then
                            objOrdenSelected.Receptor = ListaReceptoresUsuario.FirstOrDefault.CodigoReceptor
                        End If

                        If ListaReceptoresUsuario.Count = 1 Then
                            objOrdenSelected.ReceptorToma = ListaReceptoresUsuario.FirstOrDefault.CodigoReceptor
                            objOrdenSelected.NombreReceptorToma = ListaReceptoresUsuario.FirstOrDefault.Nombre
                        End If

                        If String.IsNullOrEmpty(objOrdenSelected.Receptor) Then
                            IsBusy = False
                        End If
                        intCantidadMensajeValidacionFechaCumplimiento = 0

                    Case OPCION_COMBOSRECEPTOR
                        logRealizarConsultaPropiedades = False
                        If Not IsNothing(ListaParametrosReceptor) And Not IsNothing(ConfiguracionReceptor) Then
                            If String.IsNullOrEmpty(objOrdenSelected.TipoOrden) Then
                                'Obtiene el valor por defecto del tipo de Orden
                                objOrdenSelected.TipoOrden = ConfiguracionReceptor.TipoOrdenDefecto
                            End If

                            If logOrdenCruzada = False Then
                                If Not IsNothing(ListaTipoNegocio) Then
                                    If ListaTipoNegocio.Where(Function(i) i.Prioridad = 0).Count > 0 Then
                                        objOrdenSelected.TipoNegocio = ListaTipoNegocio.Where(Function(i) i.Prioridad = 0).FirstOrDefault.CodigoTipoNegocio
                                        ObtenerValoresCombos(False, objOrdenSelected, OPCION_TIPONEGOCIO)
                                    End If
                                End If
                            End If

                            objOrdenSelected.TipoProducto = AsignarValorTopicoCategoria(objOrdenSelected.TipoProducto, "TIPOPRODUCTO", "TIPOPRODUCTO", String.Empty)
                            If logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objOrdenSelected) Then
                                objOrdenSelected.FechaRecepcion = dtmFechaServidor
                            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(objOrdenSelected) = False Then
                                objOrdenSelected.FechaRecepcion = Nothing
                            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                                If logLlevarFechaActualRecepcion Then
                                    If logLlevarHoraActualRecepcion Then
                                        objOrdenSelected.FechaRecepcion = dtmFechaServidor
                                    Else
                                        objOrdenSelected.FechaRecepcion = dtmFechaServidor.Date
                                    End If
                                Else
                                    objOrdenSelected.FechaRecepcion = Nothing
                                End If
                                LlevarRecetorOrdenDistribucionComision(objOrdenSelected, True)
                            End If
                            objOrdenSelected.TipoOperacion = AsignarValorTopicoCategoria(objOrdenSelected.TipoOperacion, "TIPOOPERACION", "TIPOOPERACION", String.Empty)
                            'objOrdenSelected.TipoNegocio=AsignarValorTopicoCategoria(objOrdenSelected.TipoNegocio, "TIPONEGOCIO", "TIPOPRODUCTO", String.Empty)
                            objOrdenSelected.TipoLimite = AsignarValorTopicoCategoria(objOrdenSelected.TipoLimite, "TIPOLIMITE", "TIPOLIMITE", TIPOLIMITEXDEFECTO)
                            objOrdenSelected.CondicionesNegociacion = AsignarValorTopicoCategoria(objOrdenSelected.CondicionesNegociacion, "CONDICNEGOCIACION", "CONDICNEGOCIACION", CONDNEGOCIACIONXDEFECTO)
                            objOrdenSelected.TipoInversion = AsignarValorTopicoCategoria(objOrdenSelected.TipoInversion, "TIPOINVERSION", "TIPOINVERSION", String.Empty)

                            objOrdenSelected.Entidad = AsignarValorTopicoCategoria(objOrdenSelected.Entidad, "ENTIDAD", "ENTIDAD", String.Empty)
                            objOrdenSelected.Estrategia = AsignarValorTopicoCategoria(objOrdenSelected.Estrategia, "ESTRATEGIA", "ESTRATEGIA", String.Empty)
                            objOrdenSelected.BrokenTrader = AsignarValorTopicoCategoria(objOrdenSelected.BrokenTrader, "BROKER_TRADE", "BROKER_TRADE", String.Empty)


                            If String.IsNullOrEmpty(objOrdenSelected.TipoInversion) Then
                                If objOrdenSelected.TipoProducto = TIPOPRODUCTO_CUENTAPROPIA Then
                                    objOrdenSelected.TipoInversion = TIPOINVERSIONXDEFECTO        ' EOMC -- Dato por defecto si hay más de un item en el combo -- 11/20/2012
                                End If
                            End If

                            objOrdenSelected.FormaPago = AsignarValorTopicoCategoria(objOrdenSelected.FormaPago, "FORMAPAGO", "FORMAPAGO", String.Empty)

                            If String.IsNullOrEmpty(objOrdenSelected.FormaPago) Then
                                If DiccionarioCombosOYDPlus.ContainsKey("FORMAPAGO") Then
                                    If DiccionarioCombosOYDPlus("FORMAPAGO").Count > 0 Then
                                        If DiccionarioCombosOYDPlus("FORMAPAGO").Where(Function(i) i.Retorno = strValorDefectoFormaPago).Count > 0 Then
                                            objOrdenSelected.FormaPago = DiccionarioCombosOYDPlus("FORMAPAGO").Where(Function(i) i.Retorno = strValorDefectoFormaPago).First.Retorno
                                        End If
                                    End If
                                End If
                            End If

                            objOrdenSelected.Ejecucion = AsignarValorTopicoCategoria(objOrdenSelected.Ejecucion, "EJECUCION", "EJECUCION", String.Empty)
                            If String.IsNullOrEmpty(objOrdenSelected.Ejecucion) Then
                                If objOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                                    objOrdenSelected.Ejecucion = EJECUCIONXDEFECTO
                                End If
                            End If

                            objOrdenSelected.CanalRecepcion = AsignarValorTopicoCategoria(objOrdenSelected.CanalRecepcion, "CANALLEO", "CANALLEO", String.Empty)
                            objOrdenSelected.MedioVerificable = AsignarValorTopicoCategoria(objOrdenSelected.MedioVerificable, "MEDIOVERLEO", "MEDIOVERLEO", String.Empty)

                            If IsNothing(objOrdenSelected.ProductoValores) Then
                                If DiccionarioCombosOYDPlus.ContainsKey("PRODUCTO_VALORES") Then
                                    'Valida sí el diccionario tiene solo un valor para asignarselo por defecto
                                    If DiccionarioCombosOYDPlus("PRODUCTO_VALORES").Count = 1 Then
                                        objOrdenSelected.ProductoValores = DiccionarioCombosOYDPlus("PRODUCTO_VALORES").FirstOrDefault.Retorno
                                    Else
                                        If Not IsNothing(ListaParametrosReceptor) Then
                                            'Valida que tenga configurado para el topico un valor por defecto.
                                            If ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = "PRODUCTO_VALORES").Count > 0 Then
                                                objOrdenSelected.ProductoValores = ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = "PRODUCTO_VALORES").First.Valor
                                            End If
                                        End If
                                    End If
                                End If
                            End If

                            If logLlevarPorDefectoReceptorTomaDeReceptor Then
                                If Not IsNothing(ListaReceptoresUsuario) Then
                                    If ListaReceptoresUsuario.Where(Function(i) i.CodigoReceptor = objOrdenSelected.Receptor).Count > 0 Then
                                        objOrdenSelected.ReceptorToma = ListaReceptoresUsuario.Where(Function(i) i.CodigoReceptor = objOrdenSelected.Receptor).First.CodigoReceptor
                                        objOrdenSelected.NombreReceptorToma = ListaReceptoresUsuario.Where(Function(i) i.CodigoReceptor = objOrdenSelected.Receptor).First.Nombre
                                    End If
                                End If
                            Else
                                If DiccionarioCombosOYDPlus.ContainsKey("RECEPTORTOMA") Then
                                    'Valida sí el diccionario tiene solo un valor para asignarselo por defecto
                                    If DiccionarioCombosOYDPlus("RECEPTORTOMA").Count = 1 Then
                                        objOrdenSelected.ReceptorToma = DiccionarioCombosOYDPlus("RECEPTORTOMA").FirstOrDefault.Retorno
                                        objOrdenSelected.NombreReceptorToma = DiccionarioCombosOYDPlus("RECEPTORTOMA").FirstOrDefault.Descripcion
                                    Else
                                        If Not IsNothing(ListaParametrosReceptor) Then
                                            'Valida que tenga configurado para el topico un valor por defecto.
                                            If ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = "RECEPTORTOMA").Count > 0 Then
                                                objOrdenSelected.ReceptorToma = ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = "RECEPTORTOMA").First.Valor
                                                objOrdenSelected.NombreReceptorToma = ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = "RECEPTORTOMA").First.Descripcion
                                            End If
                                        End If
                                    End If
                                End If
                            End If


                            'Obtiene el valor por defecto de la extersión
                            objOrdenSelected.NroExtensionToma = ConfiguracionReceptor.ExtensionDefecto

                            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                                If DiccionarioCombosOYDPlus.ContainsKey("BOLSA") Then
                                    If DiccionarioCombosOYDPlus("BOLSA").Count > 0 Then
                                        ' EOMC -- 11/20/2012
                                        ' Retorno identifica la bolsa, se estaba asignando el id de la tabla de combosReceptor
                                        objOrdenSelected.Bolsa = DiccionarioCombosOYDPlus("BOLSA").FirstOrDefault.Retorno
                                        objOrdenSelected.NombreBolsa = DiccionarioCombosOYDPlus("BOLSA").FirstOrDefault.Descripcion
                                    End If
                                End If
                            End If

                            If logLlevarPorDefectoUsuarioOperador Then
                                If DiccionarioCombosOYDPlus.ContainsKey("USUARIO_OPERADOR") Then
                                    If DiccionarioCombosOYDPlus("USUARIO_OPERADOR").Where(Function(i) i.Retorno = objOrdenSelected.Usuario).Count > 0 Then
                                        objOrdenSelected.UsuarioOperador = DiccionarioCombosOYDPlus("USUARIO_OPERADOR").Where(Function(i) i.Retorno = objOrdenSelected.Usuario).First.Retorno
                                    Else
                                        objOrdenSelected.UsuarioOperador = AsignarValorTopicoCategoria(objOrdenSelected.UsuarioOperador, "USUARIO_OPERADOR", "USUARIO_OPERADOR", String.Empty)
                                    End If
                                End If
                            Else
                                objOrdenSelected.UsuarioOperador = AsignarValorTopicoCategoria(objOrdenSelected.UsuarioOperador, "USUARIO_OPERADOR", "USUARIO_OPERADOR", String.Empty)
                            End If

                            If DiccionarioCombosOYDPlus.ContainsKey("BASECOMERCIALCAPTACIONREPO_ORDENOYDPLUS") Then
                                If DiccionarioCombosOYDPlus("BASECOMERCIALCAPTACIONREPO_ORDENOYDPLUS").Count > 0 Then
                                    Try
                                        strParametroBaseComercialCaptacionRepo = DiccionarioCombosOYDPlus("BASECOMERCIALCAPTACIONREPO_ORDENOYDPLUS").First.Retorno
                                    Catch ex As Exception
                                        strParametroBaseComercialCaptacionRepo = String.Empty
                                    End Try
                                End If
                            End If

                        End If
                        intCantidadMensajeValidacionFechaCumplimiento = 0

                        RaiseEvent TerminoConfigurarReceptor()

                        IsBusy = False
                    Case OPCION_TIPONEGOCIO
                        logRealizarConsultaPropiedades = False

                        If objOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                            objOrdenSelected.Clasificacion = AsignarValorTopicoCategoria(objOrdenSelected.Clasificacion, "CLASIFICACIONACCIONES", "CLASIFICACIONACCIONES", CLASIFICACIONXDEFECTO)
                        ElseIf objOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Then
                            objOrdenSelected.Clasificacion = AsignarValorTopicoCategoria(objOrdenSelected.Clasificacion, "CLASIFICACIONRENTAFIJA", "CLASIFICACIONRENTAFIJA", CLASIFICACIONXDEFECTO)
                        ElseIf objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Then
                            objOrdenSelected.Clasificacion = AsignarValorTopicoCategoria(String.Empty, "CLASIFICACIONREPO", "CLASIFICACIONREPO", String.Empty)
                        ElseIf objOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                            objOrdenSelected.Clasificacion = AsignarValorTopicoCategoria(String.Empty, "CLASIFICACIONSIMULTANEAS", "CLASIFICACIONSIMULTANEAS", String.Empty)
                        ElseIf objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                            objOrdenSelected.Clasificacion = AsignarValorTopicoCategoria(String.Empty, "CLASIFICACIONTTV", "CLASIFICACIONTTV", String.Empty)
                        ElseIf objOrdenSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                            objOrdenSelected.Clasificacion = AsignarValorTopicoCategoria(String.Empty, "CLASIFICACIONADR", "CLASIFICACIONADR", String.Empty)
                        End If

                        'If objOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                        '    objOrdenSelected.Duracion = String.Empty
                        '    objOrdenSelected.Duracion = AsignarValorTopicoCategoria(String.Empty, "DURACION", "DURACION", DURACIONXDEFECTO)
                        'Else
                        '    objOrdenSelected.Duracion = String.Empty
                        '    objOrdenSelected.Duracion = AsignarValorTopicoCategoria(String.Empty, "DURACIONRENTAFIJA", "DURACIONRENTAFIJA", DURACIONXDEFECTORENTAFIJA)
                        'End If

                        objOrdenSelected.Mercado = AsignarValorTopicoCategoria(objOrdenSelected.Mercado, "MERCADO", "MERCADO", MERCADOXDEFECTO)

                        If objOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                            If String.IsNullOrEmpty(objOrdenSelected.Duracion) Then
                                objOrdenSelected.Duracion = AsignarValorTopicoCategoria(objOrdenSelected.Duracion, "DURACION", "DURACION", DURACIONXDEFECTO)
                            End If
                        Else
                            If String.IsNullOrEmpty(objOrdenSelected.Duracion) Then
                                objOrdenSelected.Duracion = AsignarValorTopicoCategoria(objOrdenSelected.Duracion, "DURACIONRENTAFIJA", "DURACIONRENTAFIJA", DURACIONXDEFECTORENTAFIJA)
                            End If
                        End If

                        If objOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                            If String.IsNullOrEmpty(objOrdenSelected.Ejecucion) Then
                                objOrdenSelected.Ejecucion = AsignarValorTopicoCategoria(objOrdenSelected.Ejecucion, "EJECUCION", "EJECUCION", EJECUCIONXDEFECTO)
                            End If
                        End If

                        If objOrdenSelected.TipoOperacion = TIPONEGOCIO_TTV Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                            objOrdenSelected.FechaSalida = dtmFechaServidor
                        End If

                        intCantidadMensajeValidacionFechaCumplimiento = 0

                        If objOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                            logCalcularValores = False

                            FiltrarOpcionesTipoLimite("TIPOLIMITE", objOrdenSelected)
                            FiltrarOpcionesTipoLimite("EJECUCION", objOrdenSelected)

                            logCalcularValores = True
                        End If

                        IsBusy = False
                    Case OPCION_DUPLICAR
                        If Not IsNothing(ListaParametrosReceptor) And Not IsNothing(ConfiguracionReceptor) Then
                            If Not IsNothing(_OrdenDuplicarOYDPLUS) Then
                                '_OrdenDuplicarOYDPLUS.CanalRecepcion = Nothing
                                '_OrdenDuplicarOYDPLUS.UsuarioOperador = Nothing
                                '_OrdenDuplicarOYDPLUS.MedioVerificable = Nothing

                                '_OrdenDuplicarOYDPLUS.CanalRecepcion = AsignarValorTopicoCategoria(_OrdenDuplicarOYDPLUS.CanalRecepcion, "CANALLEO", "CANALLEO", String.Empty)
                                '_OrdenDuplicarOYDPLUS.UsuarioOperador = AsignarValorTopicoCategoria(_OrdenDuplicarOYDPLUS.UsuarioOperador, "USUARIO_OPERADOR", "USUARIO_OPERADOR", String.Empty)
                                '_OrdenDuplicarOYDPLUS.MedioVerificable = AsignarValorTopicoCategoria(_OrdenDuplicarOYDPLUS.MedioVerificable, "MEDIOVERLEO", "MEDIOVERLEO", String.Empty)

                                'Obtiene el valor por defecto de la extersión
                                _OrdenDuplicarOYDPLUS.NroExtensionToma = ConfiguracionReceptor.ExtensionDefecto

                                logCambiarDetallesOrden = False
                                ObtenerValoresOrdenAnterior(OrdenDuplicarOYDPLUS, OrdenOYDPLUSSelected)
                                logCambiarDetallesOrden = True

                                logModificarDatosTipoNegocio = False
                                If Not IsNothing(ListaTipoNegocio) Then
                                    If ListaTipoNegocio.Where(Function(i) i.CodigoTipoNegocio = _OrdenOYDPLUSSelected.TipoNegocio).Count > 0 Then
                                        TipoNegocioSelected = ListaTipoNegocio.Where(Function(i) i.CodigoTipoNegocio = _OrdenOYDPLUSSelected.TipoNegocio).FirstOrDefault
                                    End If
                                End If
                                logModificarDatosTipoNegocio = True

                                consultarOrdenantesOYDPLUS(_OrdenOYDPLUSSelected.IDComitente, OPCION_EDITAR)
                                consultarCuentasDepositoOYDPLUS(_OrdenOYDPLUSSelected.IDComitente, OPCION_EDITAR)
                                HabilitarCamposOYDPLUS(_OrdenOYDPLUSSelected)
                                logCalcularValores = False
                                CalcularFechaVigenciaOrden(_OrdenOYDPLUSSelected)
                                logCalcularValores = True
                                Dim objNuevaListaDistribucion As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
                                For Each li In ListaDistribucionComisionSalvar
                                    objNuevaListaDistribucion.Add(li)
                                Next

                                ListaReceptoresOrdenes = objNuevaListaDistribucion

                                BeneficiariosOrdenSelected = Nothing
                                If Not IsNothing(ListaBeneficiariosOrdenes) Then
                                    Dim objListaBen As New List(Of OyDPLUSOrdenesBolsa.BeneficiariosOrden)
                                    ListaBeneficiariosOrdenes = Nothing
                                    BeneficiariosOrdenSelected = Nothing
                                    ListaBeneficiariosOrdenes = objListaBen
                                End If

                                If Not IsNothing(ListaLiquidacionesOrdenes) Then
                                    Dim objListaLiq As New List(Of OyDPLUSOrdenesBolsa.LiquidacionesOrden)
                                    ListaLiquidacionesOrdenes = Nothing
                                    ListaLiquidacionesOrdenes = objListaLiq
                                End If

                                If Not IsNothing(ListaLiqAsociadasOrdenes) Then
                                    Dim objListaLiq As New List(Of OyDPLUSOrdenesBolsa.LiqAsociadasOrden)
                                    ListaLiqAsociadasOrdenes = Nothing
                                    ListaLiqAsociadasOrdenes = objListaLiq
                                End If

                                ReceptoresOrdenCruzadaSelected = Nothing
                                If Not IsNothing(ListaReceptoresOrdenesCruzada) Then
                                    Dim objListaReceptores As New List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
                                    ListaReceptoresOrdenesCruzada = Nothing
                                    ListaReceptoresOrdenesCruzada = objListaReceptores
                                End If

                                OrdenesCruzadasSelected = Nothing
                                If Not IsNothing(ListaOrdenesCruzadas) Then
                                    Dim objListaOrdenesCruzadas As New List(Of OyDPLUSOrdenesBolsa.tblOrdenesCruzadas)
                                    ListaOrdenesCruzadas = Nothing
                                    ListaOrdenesCruzadas = objListaOrdenesCruzadas
                                End If

                                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                                    logCalcularValores = False

                                    Dim strEjecucionSalvar As String = _OrdenOYDPLUSSelected.Ejecucion
                                    Dim strDuracionSalvar As String = _OrdenOYDPLUSSelected.Duracion

                                    FiltrarOpcionesTipoLimite("TIPOLIMITE", _OrdenOYDPLUSSelected)

                                    _OrdenOYDPLUSSelected.Ejecucion = strEjecucionSalvar
                                    FiltrarOpcionesTipoLimite("EJECUCION", _OrdenOYDPLUSSelected)
                                    _OrdenOYDPLUSSelected.Duracion = strDuracionSalvar

                                    logCalcularValores = True
                                End If

                                MostrarNegocio = Visibility.Visible
                                MostrarControles = Visibility.Visible

                                If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                    If _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_COMPRA Or _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_RECOMPRA Then
                                        MostrarCamposCompra = Visibility.Visible
                                        MostrarCamposVenta = Visibility.Collapsed
                                    Else
                                        MostrarCamposCompra = Visibility.Collapsed
                                        MostrarCamposVenta = Visibility.Visible
                                    End If
                                End If

                                HabilitarConsultaControles(_OrdenOYDPLUSSelected)
                                HabilitarDeshabilitarControlesEspecies(False, _OrdenOYDPLUSSelected.EspecieEsAccion, _OrdenOYDPLUSSelected.TipoTasaFija, _OrdenOYDPLUSSelected.Indicador)

                                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                                    _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Then
                                    HabilitarTipoLimite = False
                                Else
                                    HabilitarTipoLimite = True
                                End If

                                ValidarTipoCalculoDefecto(False, _OrdenOYDPLUSSelected.TipoNegocio, _OrdenOYDPLUSSelected.EnPesos)

                            End If
                        End If

                        logPlantillaRegistro = False
                        strNombrePlantilla = String.Empty

                        VerificarValoresEnCombos()

                        If logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(_OrdenOYDPLUSSelected) Then
                            _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                        ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(_OrdenOYDPLUSSelected) = False Then
                            _OrdenOYDPLUSSelected.FechaRecepcion = Nothing
                        ElseIf logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                            If logLlevarFechaActualRecepcion Then
                                If logLlevarHoraActualRecepcion Then
                                    _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                                Else
                                    _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor.Date
                                End If
                            Else
                                _OrdenOYDPLUSSelected.FechaRecepcion = Nothing
                            End If
                        End If
                        If logDuplicarParametroAceptar = True Then
                            _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                        Else
                            If Not IsNothing(FechaDuplicaParametro) Then
                                _OrdenOYDPLUSSelected.FechaRecepcion = FechaDuplicaParametro
                            Else
                                _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                            End If
                        End If
                        intCantidadMensajeValidacionFechaCumplimiento = 0

                        consultarClaseEspecie("DUPLICAR")

                    Case OPCION_PLANTILLA, OPCION_CREARORDENPLANTILLA
                        If Not IsNothing(_OrdenPlantillaOYDPLUS) Then
                            logCambiarDetallesOrden = False
                            ObtenerValoresOrdenAnterior(OrdenPlantillaOYDPLUS, OrdenOYDPLUSSelected)
                            logCambiarDetallesOrden = True

                            logModificarDatosTipoNegocio = False
                            If Not IsNothing(ListaTipoNegocio) Then
                                If ListaTipoNegocio.Where(Function(i) i.CodigoTipoNegocio = _OrdenOYDPLUSSelected.TipoNegocio).Count > 0 Then
                                    TipoNegocioSelected = ListaTipoNegocio.Where(Function(i) i.CodigoTipoNegocio = _OrdenOYDPLUSSelected.TipoNegocio).FirstOrDefault
                                End If
                            End If
                            logModificarDatosTipoNegocio = False

                            consultarOrdenantesOYDPLUS(_OrdenOYDPLUSSelected.IDComitente, OPCION_EDITAR)
                            consultarCuentasDepositoOYDPLUS(_OrdenOYDPLUSSelected.IDComitente, OPCION_EDITAR)
                            HabilitarCamposOYDPLUS(_OrdenOYDPLUSSelected)
                            logCalcularValores = False
                            CalcularFechaVigenciaOrden(_OrdenOYDPLUSSelected)
                            logCalcularValores = True

                            Dim objNuevaListaDistribucion As New List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)
                            objNuevaListaDistribucion.Add(New OyDPLUSOrdenesBolsa.ReceptoresOrden With {.ClaseOrden = _OrdenOYDPLUSSelected.Clase,
                                                                                               .FechaActualizacion = dtmFechaServidor,
                                                                                               .IDComisionista = 0,
                                                                                               .IDReceptor = _OrdenOYDPLUSSelected.Receptor,
                                                                                               .IDReceptorOrden = 0,
                                                                                               .IDSucComisionista = 0,
                                                                                               .Lider = True,
                                                                                               .Nombre = _OrdenOYDPLUSSelected.NombreReceptor,
                                                                                               .NroOrden = _OrdenOYDPLUSSelected.NroOrden,
                                                                                               .Porcentaje = 100,
                                                                                               .TipoOrden = _OrdenOYDPLUSSelected.TipoOrden,
                                                                                               .Usuario = Program.Usuario,
                                                                                               .Version = _OrdenOYDPLUSSelected.Version})

                            ListaReceptoresOrdenes = objNuevaListaDistribucion

                            BeneficiariosOrdenSelected = Nothing
                            If Not IsNothing(ListaBeneficiariosOrdenes) Then
                                Dim objListaBen As New List(Of OyDPLUSOrdenesBolsa.BeneficiariosOrden)
                                ListaBeneficiariosOrdenes = Nothing
                                BeneficiariosOrdenSelected = Nothing
                                ListaBeneficiariosOrdenes = objListaBen
                            End If

                            If Not IsNothing(ListaLiquidacionesOrdenes) Then
                                Dim objListaLiq As New List(Of OyDPLUSOrdenesBolsa.LiquidacionesOrden)
                                ListaLiquidacionesOrdenes = Nothing
                                ListaLiquidacionesOrdenes = objListaLiq
                            End If

                            If Not IsNothing(ListaLiqAsociadasOrdenes) Then
                                Dim objListaLiq As New List(Of OyDPLUSOrdenesBolsa.LiqAsociadasOrden)
                                ListaLiqAsociadasOrdenes = Nothing
                                ListaLiqAsociadasOrdenes = objListaLiq
                            End If

                            ReceptoresOrdenCruzadaSelected = Nothing
                            If Not IsNothing(ListaReceptoresOrdenesCruzada) Then
                                Dim objListaReceptores As New List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
                                ListaReceptoresOrdenesCruzada = Nothing
                                ListaReceptoresOrdenesCruzada = objListaReceptores
                            End If

                            OrdenesCruzadasSelected = Nothing
                            If Not IsNothing(ListaOrdenesCruzadas) Then
                                Dim objListaOrdenesCruzadas As New List(Of OyDPLUSOrdenesBolsa.tblOrdenesCruzadas)
                                ListaOrdenesCruzadas = Nothing
                                ListaOrdenesCruzadas = objListaOrdenesCruzadas
                            End If

                            HabilitarDeshabilitarControlesEspecies(False, _OrdenOYDPLUSSelected.EspecieEsAccion, _OrdenOYDPLUSSelected.TipoTasaFija, _OrdenOYDPLUSSelected.Indicador)
                        End If

                        If pstrOpcion.ToUpper = OPCION_CREARORDENPLANTILLA Then
                            logPlantillaRegistro = False
                            strNombrePlantilla = String.Empty

                            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                If _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_COMPRA Or _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_RECOMPRA Then
                                    MostrarCamposCompra = Visibility.Visible
                                    MostrarCamposVenta = Visibility.Collapsed
                                Else
                                    MostrarCamposCompra = Visibility.Collapsed
                                    MostrarCamposVenta = Visibility.Visible
                                End If
                            End If

                            HabilitarConsultaControles(_OrdenOYDPLUSSelected)
                            HabilitarDeshabilitarControlesEspecies(False, _OrdenOYDPLUSSelected.EspecieEsAccion, _OrdenOYDPLUSSelected.TipoTasaFija, _OrdenOYDPLUSSelected.Indicador)
                        End If

                        VerificarValoresEnCombos()

                        If logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(_OrdenOYDPLUSSelected) Then
                            _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                        ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(_OrdenOYDPLUSSelected) = False Then
                            _OrdenOYDPLUSSelected.FechaRecepcion = Nothing
                        ElseIf logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                            If logLlevarFechaActualRecepcion Then
                                If logLlevarHoraActualRecepcion Then
                                    _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                                Else
                                    _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor.Date
                                End If
                            Else
                                _OrdenOYDPLUSSelected.FechaRecepcion = Nothing
                            End If
                        End If
                        intCantidadMensajeValidacionFechaCumplimiento = 0

                        consultarClaseEspecie("PLANTILLA")

                    Case OPCION_EDITAR
                        VerificarValoresEnCombos()

                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                            If _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_COMPRA Or _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_RECOMPRA Then
                                MostrarCamposCompra = Visibility.Visible
                                MostrarCamposVenta = Visibility.Collapsed
                            Else
                                MostrarCamposCompra = Visibility.Collapsed
                                MostrarCamposVenta = Visibility.Visible
                            End If

                            HabilitarConsultaControles(_OrdenOYDPLUSSelected)
                            HabilitarDeshabilitarControlesEspecies(False, _OrdenOYDPLUSSelected.EspecieEsAccion, _OrdenOYDPLUSSelected.TipoTasaFija, _OrdenOYDPLUSSelected.Indicador)
                        End If
                End Select

                MyBase.CambioItem("OrdenOYDPLUSSelected")

                logCalcularValores = True
                logRealizarConsultaPropiedades = True
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al obtener los valores por defecto.",
                                 Me.ToString(), "ObtenerValoresDefecto", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Private Sub VerificarValoresEnCombos()
        Try
            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOrden) AndAlso Not ValidarCampoEnDiccionario("TIPOORDEN", _OrdenOYDPLUSSelected.TipoOrden) Then
                    _OrdenOYDPLUSSelected.TipoOrden = String.Empty
                    _OrdenOYDPLUSSelected.NombreTipoOrden = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoProducto) AndAlso Not ValidarCampoEnDiccionario("TIPOPRODUCTO", _OrdenOYDPLUSSelected.TipoProducto) Then
                    _OrdenOYDPLUSSelected.NombreTipoProducto = String.Empty
                    _OrdenOYDPLUSSelected.TipoProducto = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOperacion) AndAlso Not ValidarCampoEnDiccionario("TIPOOPERACION", _OrdenOYDPLUSSelected.TipoOperacion) Then
                    _OrdenOYDPLUSSelected.TipoOperacion = String.Empty
                    _OrdenOYDPLUSSelected.NombreTipoOperacion = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Clasificacion) AndAlso Not ValidarCampoEnDiccionario("CLASIFICACION", _OrdenOYDPLUSSelected.Clasificacion) Then
                    _OrdenOYDPLUSSelected.Clasificacion = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Mercado) AndAlso Not ValidarCampoEnDiccionario("MERCADO", _OrdenOYDPLUSSelected.Mercado) Then
                    _OrdenOYDPLUSSelected.Mercado = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoLimite) AndAlso Not ValidarCampoEnDiccionario("TIPOLIMITE", _OrdenOYDPLUSSelected.TipoLimite) Then
                    _OrdenOYDPLUSSelected.TipoLimite = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.CondicionesNegociacion) AndAlso Not ValidarCampoEnDiccionario("CONDICNEGOCIACION", _OrdenOYDPLUSSelected.CondicionesNegociacion) Then
                    _OrdenOYDPLUSSelected.CondicionesNegociacion = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.FormaPago) AndAlso Not ValidarCampoEnDiccionario("FORMAPAGO", _OrdenOYDPLUSSelected.FormaPago) Then
                    _OrdenOYDPLUSSelected.FormaPago = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoInversion) AndAlso Not ValidarCampoEnDiccionario("TIPOINVERSION", _OrdenOYDPLUSSelected.TipoInversion) Then
                    _OrdenOYDPLUSSelected.TipoInversion = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Ejecucion) AndAlso Not ValidarCampoEnDiccionario("EJECUCION", _OrdenOYDPLUSSelected.Ejecucion) Then
                    _OrdenOYDPLUSSelected.Ejecucion = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Duracion) AndAlso Not ValidarCampoEnDiccionario("DURACION", _OrdenOYDPLUSSelected.Duracion) Then
                    _OrdenOYDPLUSSelected.Duracion = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.CanalRecepcion) AndAlso Not ValidarCampoEnDiccionario("CANALLEO", _OrdenOYDPLUSSelected.CanalRecepcion) Then
                    _OrdenOYDPLUSSelected.CanalRecepcion = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.UsuarioOperador) AndAlso Not ValidarCampoEnDiccionario("USUARIO_OPERADOR", _OrdenOYDPLUSSelected.UsuarioOperador) Then
                    _OrdenOYDPLUSSelected.UsuarioOperador = String.Empty
                End If
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.MedioVerificable) AndAlso Not ValidarCampoEnDiccionario("MEDIOVERLEO", _OrdenOYDPLUSSelected.MedioVerificable) Then
                    _OrdenOYDPLUSSelected.MedioVerificable = String.Empty
                End If

            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al validar los valores de los combos.",
                                 Me.ToString(), "VerificarValoresEnCombos", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Asignar el valor x defecto de una variable
    ''' Desarrollo Juan David Correa.
    ''' 
    ''' </summary>
    ''' <param name="pobjValor"></param>
    ''' <param name="pstrTopicoDiccionario"></param>
    ''' <param name="pstrTopicoParametros"></param>
    ''' <param name="pstrValorDefecto"></param>
    ''' <remarks></remarks>
    Private Function AsignarValorTopicoCategoria(ByVal pobjValor As String, ByVal pstrTopicoDiccionario As String, ByVal pstrTopicoParametros As String, pstrValorDefecto As String) As String
        Dim objRetorno As String = String.Empty
        Try
            'Valida que la opción no se encuentre llena para no sobreescribirla
            If String.IsNullOrEmpty(pobjValor) Then
                'Valida que el topico exista
                If DiccionarioCombosOYDPlus.ContainsKey(pstrTopicoDiccionario) Then
                    'Valida sí el diccionario tiene solo un valor para asignarselo por defecto
                    If DiccionarioCombosOYDPlus(pstrTopicoDiccionario).Count = 1 Then
                        objRetorno = DiccionarioCombosOYDPlus(pstrTopicoDiccionario).FirstOrDefault.Retorno
                    Else
                        If Not IsNothing(ListaParametrosReceptor) Then
                            'Valida que tenga configurado para el topico un valor por defecto.
                            If ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = pstrTopicoParametros).Count > 0 Then
                                Dim objValorParametros As String = ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = pstrTopicoParametros).First.Valor
                                If DiccionarioCombosOYDPlus(pstrTopicoDiccionario).Where(Function(i) i.Retorno = objValorParametros).Count > 0 Then
                                    objRetorno = objValorParametros
                                Else
                                    objRetorno = String.Empty
                                End If
                            Else
                                objRetorno = pstrValorDefecto
                            End If
                        Else
                            objRetorno = pstrValorDefecto
                        End If
                    End If
                Else
                    objRetorno = String.Empty
                End If
            Else
                objRetorno = pobjValor
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al obtener los valor por defecto del combo.",
                                Me.ToString(), "ExtraerValorTopicoCategoria", Application.Current.ToString(), Program.Maquina, ex)
        End Try

        Return objRetorno
    End Function

    ''' <summary>
    ''' Metodo para obtener los valores de los combos.
    ''' Cuando el parametro esta en true es para obtener los combos por completo.
    ''' Solo se necesita para que cuando este en modo vista.
    ''' Cuando se encuentre en modo edición se cargan los combos dependiendo de las caracteristicas que tenga el receptor habilitadas
    ''' Fecha 23 de agosto del 2012
    ''' </summary>
    ''' <param name="ValoresCompletos"></param>
    ''' <remarks></remarks>
    Public Async Sub ObtenerValoresCombos(ByVal ValoresCompletos As Boolean, ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS, Optional ByVal Opcion As String = "")
        Try
            Dim objDiccionario As New Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
            Dim objListaCategoria As New List(Of OYDPLUSUtilidades.CombosReceptor)
            Dim objListaCategoria1 As New List(Of OYDPLUSUtilidades.CombosReceptor)
            Dim objListaCategoria2 As New List(Of OYDPLUSUtilidades.CombosReceptor)
            Dim objListaCategoria3 As New List(Of OYDPLUSUtilidades.CombosReceptor)

            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                For Each li In DiccionarioCombosOYDPlus
                    objDiccionario.Add(li.Key, li.Value)
                Next
            End If

            If Not IsNothing(objDiccionario) Then
                If ValoresCompletos Then 'Cuando ValoresCompletos = True
                    Call PrRemoverValoresDic(objDiccionario, {"CLASIFICACION", "TIPOOPERACION", "TIPOORDEN", "DURACION", "MERCADO"})

                    'Valores por defecto para el tipo de orden
                    '************************************************************************************
                    If objDiccionario.ContainsKey("TIPOORDENGENERAL") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "TIPOORDENGENERAL", "TIPOORDEN"))
                    If objListaCategoria.Count > 0 Then objDiccionario.Add("TIPOORDEN", objListaCategoria.OrderBy(Function(i) i.Descripcion).ToList)
                    '************************************************************************************
                    If Not IsNothing(objListaCategoria) Then objListaCategoria.Clear()

                    'Valores para el combo de clasificación
                    '************************************************************************************
                    If objDiccionario.ContainsKey("CLASIFICACIONACCIONES") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONACCIONES", "CLASIFICACION"))
                    If objDiccionario.ContainsKey("CLASIFICACIONRENTAFIJA") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONRENTAFIJA", "CLASIFICACION"))
                    If objDiccionario.ContainsKey("CLASIFICACIONREPO") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONREPO", "CLASIFICACION"))
                    If objDiccionario.ContainsKey("CLASIFICACIONSIMULTANEAS") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONSIMULTANEAS", "CLASIFICACION"))
                    If objDiccionario.ContainsKey("CLASIFICACIONTTV") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONTTV", "CLASIFICACION"))
                    If objDiccionario.ContainsKey("CLASIFICACIONADR") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONADR", "CLASIFICACION"))

                    If objListaCategoria.Count > 0 Then objDiccionario.Add("CLASIFICACION", objListaCategoria.OrderBy(Function(i) i.Descripcion).ToList)

                    '************************************************************************************
                    If Not IsNothing(objListaCategoria) Then objListaCategoria.Clear()

                    'Valores para el tipo de Operación
                    '************************************************************************************
                    If objDiccionario.ContainsKey("TIPOOPERACIONGENERAL") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "TIPOOPERACIONGENERAL", "TIPOOPERACION"))

                    If objListaCategoria.Count > 0 Then objDiccionario.Add("TIPOOPERACION", objListaCategoria.OrderBy(Function(i) i.Descripcion).ToList)

                    '************************************************************************************
                    If Not IsNothing(objListaCategoria) Then objListaCategoria.Clear()

                    'Valores para el combo de duración
                    '************************************************************************************
                    If objDiccionario.ContainsKey("DURACIONGENERAL") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "DURACIONGENERAL", "DURACION"))

                    If objListaCategoria.Count > 0 Then objDiccionario.Add("DURACION", objListaCategoria.OrderBy(Function(i) i.Descripcion).ToList)

                    '************************************************************************************
                    If Not IsNothing(objListaCategoria) Then objListaCategoria.Clear()

                    'Valores para el combo de Mercado
                    '************************************************************************************
                    If objDiccionario.ContainsKey("MERCADO_GENERAL") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "MERCADO_GENERAL", "MERCADO"))

                    If objListaCategoria.Count > 0 Then objDiccionario.Add("MERCADO", objListaCategoria.OrderBy(Function(i) i.Descripcion).ToList)

                    If Not IsNothing(objListaCategoria) Then objListaCategoria.Clear()

                    If Not IsNothing(objDiccionario) Then
                        If objDiccionario.ContainsKey("CANTIDADMAXDETALLEORDENES") Then
                            If objDiccionario("CANTIDADMAXDETALLEORDENES").Count > 0 Then
                                intCantidadMaximaDetalles = CInt(objDiccionario("CANTIDADMAXDETALLEORDENES").First.Retorno)
                            End If
                        End If

                        'If objDiccionario.ContainsKey("HABILITARPLANTILLASORDENES") Then
                        '    If objDiccionario("HABILITARPLANTILLASORDENES").Count > 0 Then
                        '        If objDiccionario("HABILITARPLANTILLASORDENES").First.Retorno = "1" Then
                        '            HabilitarPlantillaOrdenes = True
                        '        Else
                        '            HabilitarPlantillaOrdenes = False
                        '        End If
                        '    End If
                        'End If

                        If objDiccionario.ContainsKey("MOTORCALCULOS_RUTASERVICIO") Then
                            If objDiccionario("MOTORCALCULOS_RUTASERVICIO").Count > 0 Then
                                STR_URLMOTORCALCULOS = objDiccionario("MOTORCALCULOS_RUTASERVICIO").First.Retorno
                            End If
                        End If


                        If objDiccionario.ContainsKey("DEFECTOENBLANCOCAMPOSLEO") Then
                            If objDiccionario("DEFECTOENBLANCOCAMPOSLEO").Count > 0 Then
                                If objDiccionario("DEFECTOENBLANCOCAMPOSLEO").First.Retorno = "SI" Then
                                    LOG_BORRARCAMPOSLEO = True
                                End If
                            End If
                        End If


                        If objDiccionario.ContainsKey("MOTORCALCULOS_HACERLOGMOTOR") Then
                            If objDiccionario("MOTORCALCULOS_HACERLOGMOTOR").Count > 0 Then
                                If objDiccionario("MOTORCALCULOS_HACERLOGMOTOR").First.Retorno = "SI" Then
                                    LOG_HACERLOGMOTORCALCULOS = True
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("MOTORCALCULOS_RUTALOGMOTOR") Then
                            If objDiccionario("MOTORCALCULOS_RUTALOGMOTOR").Count > 0 Then
                                STR_RUTALOGMOTORCALCULOS = objDiccionario("MOTORCALCULOS_RUTALOGMOTOR").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("VALORIVA") Then
                            If objDiccionario("VALORIVA").Count > 0 Then
                                dblValorIva = CDbl(objDiccionario("VALORIVA").First.Retorno)
                            End If
                        End If

                        If objDiccionario.ContainsKey("VALORBASE") Then
                            If objDiccionario("VALORBASE").Count > 0 Then
                                dblValorBase = CDbl(objDiccionario("VALORBASE").First.Retorno)
                            End If
                        End If

                        If objDiccionario.ContainsKey("VALORBASEREPO") Then
                            If objDiccionario("VALORBASEREPO").Count > 0 Then
                                dblValorBaseRepo = CDbl(objDiccionario("VALORBASEREPO").First.Retorno)
                            End If
                        End If

                        If objDiccionario.ContainsKey("FORMAPAGODEFECTO_ORDENOYDPLUS") Then
                            If objDiccionario("FORMAPAGODEFECTO_ORDENOYDPLUS").Count > 0 Then
                                strValorDefectoFormaPago = objDiccionario("FORMAPAGODEFECTO_ORDENOYDPLUS").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("FECHAACTUAL_SERVIDOR") Then
                            If objDiccionario("FECHAACTUAL_SERVIDOR").Count > 0 Then
                                Try
                                    dtmFechaServidor = DateTime.ParseExact(objDiccionario("FECHAACTUAL_SERVIDOR").First.Retorno, "yyyy-MM-dd hh:mm:ss", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None)
                                Catch ex As Exception
                                    dtmFechaServidor = Now
                                End Try
                            End If
                        End If

                        If objDiccionario.ContainsKey("HABILITARCONSTANCIA") Then
                            If objDiccionario("HABILITARCONSTANCIA").Count > 0 Then
                                If objDiccionario("HABILITARCONSTANCIA").First.Retorno = "1" Then
                                    HabilitarConstanciaFuncionalidad = True
                                Else
                                    HabilitarConstanciaFuncionalidad = False
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("LLEVARPRECIOPORTAFOLIO_ORDENOYDPLUS") Then
                            If objDiccionario("LLEVARPRECIOPORTAFOLIO_ORDENOYDPLUS").Count > 0 Then
                                If objDiccionario("LLEVARPRECIOPORTAFOLIO_ORDENOYDPLUS").First.Retorno = "SI" Then
                                    logLlevarPrecioPortafolio = True
                                Else
                                    logLlevarPrecioPortafolio = False
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("LLEVARFECHAACTUALRECEPCIONTOMA_ORDENOYDPLUS") Then
                            If objDiccionario("LLEVARFECHAACTUALRECEPCIONTOMA_ORDENOYDPLUS").Count > 0 Then
                                If objDiccionario("LLEVARFECHAACTUALRECEPCIONTOMA_ORDENOYDPLUS").First.Retorno = "SI" Then
                                    logLlevarFechaActualRecepcion = True
                                Else
                                    logLlevarFechaActualRecepcion = False
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("LLEVARHORAACTUALRECEPCIONTOMA_ORDENOYDPLUS") Then
                            If objDiccionario("LLEVARHORAACTUALRECEPCIONTOMA_ORDENOYDPLUS").Count > 0 Then
                                If objDiccionario("LLEVARHORAACTUALRECEPCIONTOMA_ORDENOYDPLUS").First.Retorno = "SI" Then
                                    logLlevarHoraActualRecepcion = True
                                Else
                                    logLlevarHoraActualRecepcion = False
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("TIPOCALCULOESPECIALREPO_ORDENOYDPLUS") Then
                            If objDiccionario("TIPOCALCULOESPECIALREPO_ORDENOYDPLUS").Count > 0 Then
                                strRealizarTipoCalculoEspecialREPO = objDiccionario("TIPOCALCULOESPECIALREPO_ORDENOYDPLUS").First.Retorno.ToUpper
                            End If
                        End If

                        If objDiccionario.ContainsKey("UTILIZARPRECIOMAXIMOCALCULO_ORDENOYDPLUS") Then
                            If objDiccionario("UTILIZARPRECIOMAXIMOCALCULO_ORDENOYDPLUS").Count > 0 Then
                                strUtilizarPrecioMaximoMinimoCalculo = objDiccionario("UTILIZARPRECIOMAXIMOCALCULO_ORDENOYDPLUS").First.Retorno.ToUpper
                            End If
                        End If

                        If objDiccionario.ContainsKey("DEFECTORECEPTORTOMA_ORDENOYDPLUS") Then
                            If objDiccionario("DEFECTORECEPTORTOMA_ORDENOYDPLUS").Count > 0 Then
                                If objDiccionario("DEFECTORECEPTORTOMA_ORDENOYDPLUS").First.Retorno = "SI" Then
                                    logLlevarPorDefectoReceptorTomaDeReceptor = True
                                Else
                                    logLlevarPorDefectoReceptorTomaDeReceptor = False
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("DEFECTOUSUARIOOPERADOR_ORDENOYDPLUS") Then
                            If objDiccionario("DEFECTOUSUARIOOPERADOR_ORDENOYDPLUS").Count > 0 Then
                                If objDiccionario("DEFECTOUSUARIOOPERADOR_ORDENOYDPLUS").First.Retorno = "SI" Then
                                    logLlevarPorDefectoUsuarioOperador = True
                                Else
                                    logLlevarPorDefectoUsuarioOperador = False
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("HABILITARFUNCIONALIDADPOSICIONPROPIA_ORDENOYDPLUS") Then
                            If objDiccionario("HABILITARFUNCIONALIDADPOSICIONPROPIA_ORDENOYDPLUS").Count > 0 Then
                                If objDiccionario("HABILITARFUNCIONALIDADPOSICIONPROPIA_ORDENOYDPLUS").First.Retorno = "SI" Then
                                    logHabilitarCondicionesTipoProductoCuentaPropia = True
                                Else
                                    logHabilitarCondicionesTipoProductoCuentaPropia = False
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("TIPOPRODUCTOPOSICIONPROPIA") Then
                            If objDiccionario("TIPOPRODUCTOPOSICIONPROPIA").Count > 0 Then
                                strTiposProductoPosicionPropia = objDiccionario("TIPOPRODUCTOPOSICIONPROPIA").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_ACCIONES") Then
                            If objDiccionario("EVENTO_DEFECTO_ACCIONES").Count > 0 Then
                                strEventoDefecto_ACCIONES = objDiccionario("EVENTO_DEFECTO_ACCIONES").First.Retorno
                            End If
                        End If
                        If objDiccionario.ContainsKey("EVENTOORDENDIRECTARENTAFIJA") Then
                            If objDiccionario("EVENTOORDENDIRECTARENTAFIJA").Count > 0 Then
                                strEventoDefecto_RENTAFIJA_ORDENDIRECTA = objDiccionario("EVENTOORDENDIRECTARENTAFIJA").First.Retorno
                            End If
                        End If
                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_RENTAFIJA") Then
                            If objDiccionario("EVENTO_DEFECTO_RENTAFIJA").Count > 0 Then
                                strEventoDefecto_RENTAFIJA = objDiccionario("EVENTO_DEFECTO_RENTAFIJA").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_RENTAFIJACRUZADA") Then
                            If objDiccionario("EVENTO_DEFECTO_RENTAFIJACRUZADA").Count > 0 Then
                                strEventoDefecto_RENTAFIJA_CRUZADA = objDiccionario("EVENTO_DEFECTO_RENTAFIJACRUZADA").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_RENTAFIJA_ENPESOS") Then
                            If objDiccionario("EVENTO_DEFECTO_RENTAFIJA_ENPESOS").Count > 0 Then
                                strEventoDefecto_RENTAFIJA_ENPESOS = objDiccionario("EVENTO_DEFECTO_RENTAFIJA_ENPESOS").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_REPO") Then
                            If objDiccionario("EVENTO_DEFECTO_REPO").Count > 0 Then
                                strEventoDefecto_REPO = objDiccionario("EVENTO_DEFECTO_REPO").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_REPORENTAFIJA") Then
                            If objDiccionario("EVENTO_DEFECTO_REPORENTAFIJA").Count > 0 Then
                                strEventoDefecto_REPORENTAFIJA = objDiccionario("EVENTO_DEFECTO_REPORENTAFIJA").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_REPO_ENPESOS") Then
                            If objDiccionario("EVENTO_DEFECTO_REPO_ENPESOS").Count > 0 Then
                                strEventoDefecto_REPO_ENPESOS = objDiccionario("EVENTO_DEFECTO_REPO_ENPESOS").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_REPORENTAFIJA_ENPESOS") Then
                            If objDiccionario("EVENTO_DEFECTO_REPORENTAFIJA_ENPESOS").Count > 0 Then
                                strEventoDefecto_REPORENTAFIJA_ENPESOS = objDiccionario("EVENTO_DEFECTO_REPORENTAFIJA_ENPESOS").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_SIMULTANEA") Then
                            If objDiccionario("EVENTO_DEFECTO_SIMULTANEA").Count > 0 Then
                                strEventoDefecto_SIMULTANEA = objDiccionario("EVENTO_DEFECTO_SIMULTANEA").First.Retorno
                            End If
                        End If
                        If objDiccionario.ContainsKey("EVENTOORDENDIRECTASIMULTANEA") Then
                            If objDiccionario("EVENTOORDENDIRECTASIMULTANEA").Count > 0 Then
                                strEventoDefecto_SIMULTANEA_ORDENDIRECTA = objDiccionario("EVENTOORDENDIRECTASIMULTANEA").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_TTV") Then
                            If objDiccionario("EVENTO_DEFECTO_TTV").Count > 0 Then
                                strEventoDefecto_TTV = objDiccionario("EVENTO_DEFECTO_TTV").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("EVENTO_DEFECTO_TTVRENTAFIJA") Then
                            If objDiccionario("EVENTO_DEFECTO_TTVRENTAFIJA").Count > 0 Then
                                strEventoDefecto_TTVRENTAFIJA = objDiccionario("EVENTO_DEFECTO_TTVRENTAFIJA").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("DIASDEFECTO_CUMPLIMIENTOACCIONES") Then
                            If objDiccionario("DIASDEFECTO_CUMPLIMIENTOACCIONES").Count > 0 Then
                                Try
                                    intDiasDefectoCumplimientoAcciones = CInt(objDiccionario("DIASDEFECTO_CUMPLIMIENTOACCIONES").First.Retorno)
                                Catch ex As Exception
                                    intDiasDefectoCumplimientoAcciones = 3
                                End Try
                            End If
                        End If

                        If objDiccionario.ContainsKey("DIASDEFECTO_CUMPLIMIENTORENTAFIJA") Then
                            If objDiccionario("DIASDEFECTO_CUMPLIMIENTORENTAFIJA").Count > 0 Then
                                Try
                                    intDiasDefectoCumplimientoRentaFija = CInt(objDiccionario("DIASDEFECTO_CUMPLIMIENTORENTAFIJA").First.Retorno)
                                Catch ex As Exception
                                    intDiasDefectoCumplimientoRentaFija = 1
                                End Try
                            End If
                        End If

                        'JAPC20200608_ C-20200423 : se agrega parametro para Habilitar visualizacion de mensaje de validación cuando la especie no tiene las configuraciones de isin correspondientes a la operacion de bolsa
                        If objDiccionario.ContainsKey("HABILITARMENSAJE_CARACTERISTICASFACIALES") Then
                            If objDiccionario("HABILITARMENSAJE_CARACTERISTICASFACIALES").Count > 0 Then
                                Try
                                    If objDiccionario("HABILITARMENSAJE_CARACTERISTICASFACIALES").First.Retorno = "SI" Then
                                        logHabilitarMensajeCaracteristicasFaciales = True
                                    End If
                                Catch ex As Exception
                                    logHabilitarMensajeCaracteristicasFaciales = False
                                End Try
                            End If
                        End If

                        If objDiccionario.ContainsKey("OYDPLUS_TIPONEGOCIO_NUEVOREGISTRO") Then
                            If objDiccionario("OYDPLUS_TIPONEGOCIO_NUEVOREGISTRO").Count > 0 Then
                                strTiposNegocioHabilitadosNuevoRegistro = objDiccionario("OYDPLUS_TIPONEGOCIO_NUEVOREGISTRO").First.Retorno
                            End If
                        End If

                        If objDiccionario.ContainsKey("OYDPLUS_LIMPIARNEGOCIACION_CAMBIONEMO") Then
                            If objDiccionario("OYDPLUS_LIMPIARNEGOCIACION_CAMBIONEMO").Count > 0 Then
                                If objDiccionario("OYDPLUS_LIMPIARNEGOCIACION_CAMBIONEMO").First.Retorno = "NO" Then
                                    logLimpiarDatosNegociacionCambioNemotecnico = False
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("OYDPLUS_RECALCULARVALORORDEN") Then
                            If objDiccionario("OYDPLUS_RECALCULARVALORORDEN").Count > 0 Then
                                If objDiccionario("OYDPLUS_RECALCULARVALORORDEN").First.Retorno = "NO" Then
                                    logRecalcularDatosNegociacion = False
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("OYDPLUS_CALCULOSVB") Then
                            If objDiccionario("OYDPLUS_CALCULOSVB").Count > 0 Then
                                If objDiccionario("OYDPLUS_CALCULOSVB").First.Retorno = "SI" Then
                                    logCalculosValoresBancolombia = True
                                    strTituloFechaSalida = "Fecha cumplimiento salida"
                                    strTituloFechaCumplimiento = "Fecha cumplimiento regreso"
                                    strTituloPrecioMaximoMinimoSimultanea = "TIR"
                                End If
                            End If
                        End If

                        If objDiccionario.ContainsKey("OYDNet_ORDEN_APLICA_TAB_INSTRUCCIONES") Then
                            If objDiccionario("OYDNet_ORDEN_APLICA_TAB_INSTRUCCIONES").Count > 0 Then
                                If objDiccionario("OYDNet_ORDEN_APLICA_TAB_INSTRUCCIONES").First.Retorno.ToUpper.Equals("S") Then
                                    MostrarTabInstrucciones = Visibility.Visible
                                End If
                            End If
                        End If

                    End If

                    DiccionarioCombosOYDPlus = objDiccionario

                Else ' Cuando ValoresCompletos = False
                    If Not String.IsNullOrEmpty(Opcion) Then
                        Dim OpcionValoresDefecto As String = String.Empty


                        Select Case Opcion.ToUpper
                            Case OPCION_RECEPTOR
                                If objDiccionario.ContainsKey("TIPOORDEN") Then Call PrRemoverValoresDic(objDiccionario, {"TIPOORDEN"})
                                If Not IsNothing(objDiccionario("TIPOORDENGENERAL")) Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "TIPOORDENGENERAL", "TIPOORDEN"))
                                If objListaCategoria.Count > 0 Then objDiccionario.Add("TIPOORDEN", objListaCategoria.OrderBy(Function(i) i.Descripcion).ToList)
                                OpcionValoresDefecto = OPCION_COMBOSRECEPTOR

                            Case OPCION_TIPOOPERACION
                                Call PrRemoverValoresDic(objDiccionario, {"TIPOOPERACION"})
                                If objDiccionario.ContainsKey("TIPOOPERACIONGENERAL") Then objListaCategoria1.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "TIPOOPERACIONGENERAL", "TIPOOPERACION"))
                                objDiccionario.Add("TIPOOPERACION", objListaCategoria1.OrderBy(Function(i) i.Descripcion).ToList)

                            Case OPCION_EDITAR, OPCION_DUPLICAR, OPCION_TIPONEGOCIO, OPCION_ORDENCRUZADA, OPCION_PLANTILLA, OPCION_CREARORDENPLANTILLA
                                Dim strValorCampo As String = String.Empty

                                If Opcion.ToUpper.ToString.Equals(OPCION_TIPONEGOCIO) Then
                                    PrRemoverValoresDic(objDiccionario, {"CLASIFICACION", "DURACION", "MERCADO", "TIPOOPERACION"})
                                Else
                                    PrRemoverValoresDic(objDiccionario, {"CLASIFICACION", "TIPOOPERACION", "TIPOORDEN", "DURACION", "MERCADO"})
                                    If objDiccionario.ContainsKey("TIPOORDENGENERAL") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "TIPOORDENGENERAL", "TIPOORDEN"))
                                    If objListaCategoria.Count > 0 Then objDiccionario.Add("TIPOORDEN", objListaCategoria.OrderBy(Function(i) i.Descripcion).ToList)
                                    If Not IsNothing(objListaCategoria) Then objListaCategoria.Clear()
                                End If

                                If Not String.IsNullOrEmpty(pobjOrdenSelected.TipoNegocio) Then
                                    Select Case pobjOrdenSelected.TipoNegocio.ToUpper

                                        'Santiago Alexander Vergara Orrego - Mayo 15/2014 - lógica para llenar los combos de los tipos de negocio otras firmas acciones y renta fija
                                        Case TIPONEGOCIO_ACCIONES, TIPONEGOCIO_RENTAFIJA, TIPONEGOCIO_ADR

                                            If objDiccionario.ContainsKey("TIPOOPERACIONGENERAL") Then objListaCategoria1.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "TIPOOPERACIONGENERAL", "TIPOOPERACION")) 'a y c

                                            If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_ACCIONES Or pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_ADR Then

                                                If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_ADR Then
                                                    If objDiccionario.ContainsKey("CLASIFICACIONADR") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONADR", "CLASIFICACION"))
                                                Else
                                                    If objDiccionario.ContainsKey("CLASIFICACIONACCIONES") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONACCIONES", "CLASIFICACION")) 'a
                                                End If

                                                If objDiccionario.ContainsKey("MERCADO_GENERAL") Then objListaCategoria2.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "MERCADO_GENERAL", "MERCADO").Where(Function(i) i.Retorno = "S" Or i.Retorno = "P")) 'a

                                            Else
                                                If objDiccionario.ContainsKey("CLASIFICACIONRENTAFIJA") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONRENTAFIJA", "CLASIFICACION")) 'c
                                                If objDiccionario.ContainsKey("MERCADO_GENERAL") Then objListaCategoria2.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "MERCADO_GENERAL", "MERCADO").Where(Function(i) i.Retorno = "S" Or i.Retorno = "P" Or i.Retorno = "R")) 'c
                                            End If

                                        Case TIPONEGOCIO_REPO, TIPONEGOCIO_REPOC
                                            If objDiccionario.ContainsKey("CLASIFICACIONREPO") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONREPO", "CLASIFICACION"))
                                            If objDiccionario.ContainsKey("TIPOOPERACIONREPO") Then objListaCategoria1.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "TIPOOPERACIONREPO", "TIPOOPERACION"))
                                            If objDiccionario.ContainsKey("MERCADO_GENERAL") Then objListaCategoria2.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "MERCADO_GENERAL", "MERCADO").Where(Function(i) i.Retorno = "E"))
                                        Case TIPONEGOCIO_SIMULTANEA, TIPONEGOCIO_TTV, TIPONEGOCIO_TTVC

                                            If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_SIMULTANEA Then
                                                If objDiccionario.ContainsKey("CLASIFICACIONSIMULTANEAS") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONSIMULTANEAS", "CLASIFICACION"))
                                            Else
                                                If objDiccionario.ContainsKey("CLASIFICACIONTTV") Then objListaCategoria.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "CLASIFICACIONTTV", "CLASIFICACION"))
                                            End If

                                            If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTV Or pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Then
                                                If objDiccionario.ContainsKey("TIPOOPERACIONTTV") Then objListaCategoria1.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "TIPOOPERACIONTTV", "TIPOOPERACION"))
                                            Else
                                                If objDiccionario.ContainsKey("TIPOOPERACIONSIMULTANEA") Then objListaCategoria1.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "TIPOOPERACIONSIMULTANEA", "TIPOOPERACION"))
                                            End If

                                            If objDiccionario.ContainsKey("MERCADO_GENERAL") Then objListaCategoria2.InsertRange(0, ExtraerListaPorCategoria(objDiccionario, "MERCADO_GENERAL", "MERCADO").Where(Function(i) i.Retorno = "S"))

                                    End Select

                                    objDiccionario.Add("CLASIFICACION", objListaCategoria.OrderBy(Function(i) i.Descripcion).ToList)
                                    objDiccionario.Add("TIPOOPERACION", objListaCategoria1.OrderBy(Function(i) i.Descripcion).ToList)
                                    objDiccionario.Add("MERCADO", objListaCategoria2.OrderBy(Function(i) i.Descripcion).ToList)

                                    'Valores para el combo de duración
                                    '************************************************************************************
                                    If pobjOrdenSelected.TipoNegocio.ToUpper <> TIPONEGOCIO_ACCIONES And pobjOrdenSelected.TipoNegocio.ToUpper <> TIPONEGOCIO_ADR Then
                                        If objDiccionario.ContainsKey("DURACIONRENTAFIJA") Then
                                            objListaCategoria3 = ExtraerListaPorCategoria(objDiccionario, "DURACIONRENTAFIJA", "DURACION")

                                            objDiccionario.Add("DURACION", objListaCategoria3.OrderBy(Function(i) i.Descripcion).ToList)
                                        End If
                                    Else
                                        If objDiccionario.ContainsKey("DURACIONGENERAL") Then
                                            objListaCategoria3 = ExtraerListaPorCategoria(objDiccionario, "DURACIONGENERAL", "DURACION")

                                            objDiccionario.Add("DURACION", objListaCategoria3.OrderBy(Function(i) i.Descripcion).ToList)
                                        End If
                                    End If


                                    '************************************************************************************

                                    If Opcion.ToUpper.ToString.Equals(OPCION_TIPONEGOCIO) Then OpcionValoresDefecto = OPCION_TIPONEGOCIO

                                End If

                        End Select

                        DiccionarioCombosOYDPlus = objDiccionario

                        If Opcion.ToUpper = OPCION_EDITAR Then
                            'Se llevan los anteriores a la orden ya que al momendo de actualizar los combos se pierde los valores del seleccionado de los combos.

                            ObtenerValoresOrdenAnterior(OrdenAnteriorOYDPLUS, OrdenOYDPLUSSelected)

                            Editando = True
                            MyBase.CambioItem("Editando")

                            'Se posiciona en el primer registro
                            BuscarControlValidacion(ViewOrdenesOYDPLUS, "cboClasificacion")

                            HabilitarEncabezado = False
                            HabilitarOpcionesCruzada = False
                            HabilitarNegocio = True
                            HabilitarEspecieCumplimiento = True
                            HabilitarNegocioComitente = True
                            Confirmaciones = String.Empty
                            Justificaciones = String.Empty
                            Aprobaciones = String.Empty
                            CantidadConfirmaciones = 0
                            CantidadAprobaciones = 0
                            CantidadJustificaciones = 0
                            MostrarControlMensajes = Visibility.Visible

                            logModificarDatosTipoNegocio = False
                            If Not IsNothing(ListaTipoNegocio) Then
                                If ListaTipoNegocio.Where(Function(i) i.CodigoTipoNegocio = pobjOrdenSelected.TipoNegocio).Count > 0 Then
                                    TipoNegocioSelected = ListaTipoNegocio.Where(Function(i) i.CodigoTipoNegocio = pobjOrdenSelected.TipoNegocio).FirstOrDefault
                                End If
                            End If
                            logModificarDatosTipoNegocio = True

                            consultarOrdenantesOYDPLUS(_OrdenOYDPLUSSelected.IDComitente, OPCION_EDITAR)
                            consultarCuentasDepositoOYDPLUS(_OrdenOYDPLUSSelected.IDComitente, OPCION_EDITAR)
                            HabilitarCamposOYDPLUS(_OrdenOYDPLUSSelected)

                            OpcionValoresDefecto = OPCION_EDITAR

                            HabilitarDeshabilitarControlesEspecies(False, _OrdenOYDPLUSSelected.EspecieEsAccion, _OrdenOYDPLUSSelected.TipoTasaFija, _OrdenOYDPLUSSelected.Indicador)

                            If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                                logCalcularValores = False

                                Dim strEjecucionSalvar As String = _OrdenOYDPLUSSelected.Ejecucion
                                Dim strDuracionSalvar As String = _OrdenOYDPLUSSelected.Duracion

                                FiltrarOpcionesTipoLimite("TIPOLIMITE", _OrdenOYDPLUSSelected)

                                _OrdenOYDPLUSSelected.Ejecucion = strEjecucionSalvar
                                FiltrarOpcionesTipoLimite("EJECUCION", _OrdenOYDPLUSSelected)
                                _OrdenOYDPLUSSelected.Duracion = strDuracionSalvar

                                logCalcularValores = True
                            End If

                            IsBusy = False

                        ElseIf Opcion.ToUpper = OPCION_DUPLICAR Or Opcion.ToUpper = OPCION_PLANTILLA Or Opcion.ToUpper = OPCION_CREARORDENPLANTILLA Then
                            'Se llevan los anteriores a la orden ya que al momendo de actualizar los combos se pierde los valores del seleccionado de los combos.
                            logCambiarDetallesOrden = False

                            HabilitarEncabezado = True
                            HabilitarOpcionesCruzada = True
                            HabilitarNegocio = True
                            HabilitarEspecieCumplimiento = True
                            HabilitarNegocioComitente = True
                            Confirmaciones = String.Empty
                            Justificaciones = String.Empty
                            Aprobaciones = String.Empty
                            CantidadConfirmaciones = 0
                            CantidadAprobaciones = 0
                            CantidadJustificaciones = 0
                            HabilitarPrecio = True
                            HabilitarDatosLeo = True

                            Editando = True
                            MyBase.CambioItem("Editando")

                            'Se posiciona en el primer registro
                            BuscarControlValidacion(ViewOrdenesOYDPLUS, "cboClasificacion")

                            MostrarControlMensajes = Visibility.Visible

                            logCambiarDetallesOrden = True

                            OpcionValoresDefecto = Opcion.ToUpper

                            IsBusy = False

                        End If

                        If Opcion.ToUpper = OPCION_ORDENCRUZADA Then
                            ObtenerValoresOrdenAnterior(OrdenAnteriorOYDPLUS, OrdenCruzadaSelected)

                            OrdenCruzadaSelected.CanalRecepcion = AsignarValorTopicoCategoria(OrdenCruzadaSelected.CanalRecepcion, "CANALLEO", "CANALLEO", String.Empty)
                            OrdenCruzadaSelected.MedioVerificable = AsignarValorTopicoCategoria(OrdenCruzadaSelected.MedioVerificable, "MEDIOVERLEO", "MEDIOVERLEO", String.Empty)

                            Dim strTipoProductoCruzada As String = String.Empty
                            strTipoProductoCruzada = AsignarValorTopicoCategoria(strTipoProductoCruzada, "TIPOPRODUCTO", "TIPOPRODUCTO", String.Empty)

                            If Not String.IsNullOrEmpty(strTipoProductoCruzada) Then
                                OrdenCruzadaSelected.TipoProducto = strTipoProductoCruzada
                            End If

                            If logLlevarPorDefectoReceptorTomaDeReceptor Then
                                If Not IsNothing(ListaReceptoresUsuario) Then
                                    If ListaReceptoresUsuario.Where(Function(i) i.CodigoReceptor = OrdenCruzadaSelected.Receptor).Count > 0 Then
                                        OrdenCruzadaSelected.ReceptorToma = ListaReceptoresUsuario.Where(Function(i) i.CodigoReceptor = OrdenCruzadaSelected.Receptor).First.CodigoReceptor
                                        OrdenCruzadaSelected.NombreReceptorToma = ListaReceptoresUsuario.Where(Function(i) i.CodigoReceptor = OrdenCruzadaSelected.Receptor).First.Nombre
                                    End If
                                End If
                            Else
                                If DiccionarioCombosOYDPlus.ContainsKey("RECEPTORTOMA") Then
                                    'Valida sí el diccionario tiene solo un valor para asignarselo por defecto
                                    If DiccionarioCombosOYDPlus("RECEPTORTOMA").Count = 1 Then
                                        OrdenCruzadaSelected.ReceptorToma = DiccionarioCombosOYDPlus("RECEPTORTOMA").FirstOrDefault.Retorno
                                        OrdenCruzadaSelected.NombreReceptorToma = DiccionarioCombosOYDPlus("RECEPTORTOMA").FirstOrDefault.Descripcion
                                    Else
                                        If Not IsNothing(ListaParametrosReceptor) Then
                                            'Valida que tenga configurado para el topico un valor por defecto.
                                            If ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = "RECEPTORTOMA").Count > 0 Then
                                                OrdenCruzadaSelected.ReceptorToma = ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = "RECEPTORTOMA").First.Valor
                                                OrdenCruzadaSelected.NombreReceptorToma = ListaParametrosReceptor.Where(Function(i) i.Prioridad = 0 And i.Topico = "RECEPTORTOMA").First.Descripcion
                                            End If
                                        End If
                                    End If
                                End If
                            End If


                            'Obtiene el valor por defecto de la extersión
                            OrdenCruzadaSelected.NroExtensionToma = ConfiguracionReceptor.ExtensionDefecto

                            If logLlevarPorDefectoUsuarioOperador Then
                                If DiccionarioCombosOYDPlus.ContainsKey("USUARIO_OPERADOR") Then
                                    If DiccionarioCombosOYDPlus("USUARIO_OPERADOR").Where(Function(i) i.Retorno = OrdenCruzadaSelected.Usuario).Count > 0 Then
                                        OrdenCruzadaSelected.UsuarioOperador = DiccionarioCombosOYDPlus("USUARIO_OPERADOR").Where(Function(i) i.Retorno = OrdenCruzadaSelected.Usuario).First.Retorno
                                    Else
                                        OrdenCruzadaSelected.UsuarioOperador = AsignarValorTopicoCategoria(OrdenCruzadaSelected.UsuarioOperador, "USUARIO_OPERADOR", "USUARIO_OPERADOR", String.Empty)
                                    End If
                                End If
                            Else
                                OrdenCruzadaSelected.UsuarioOperador = AsignarValorTopicoCategoria(OrdenCruzadaSelected.UsuarioOperador, "USUARIO_OPERADOR", "USUARIO_OPERADOR", String.Empty)
                            End If

                            HabilitarCamposOYDPLUS(_OrdenCruzadaSelected)

                            If String.IsNullOrEmpty(OrdenCruzadaSelected.TipoProducto) Then
                                HabilitarClienteCruzada = False
                            Else
                                HabilitarClienteCruzada = True
                            End If

                            If logCalcularValores Then
                                Await CalcularValorOrden(_OrdenCruzadaSelected)
                            End If

                            If OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or
                                OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                                OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPOC Or
                                OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Or
                                OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                                OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                OrdenCruzadaSelected.ValorCaptacionGiro = 0
                                OrdenCruzadaSelected.ValorFuturoRepo = 0
                                OrdenCruzadaSelected.TasaCliente = 0
                                OrdenCruzadaSelected.TasaNominal = 0
                                OrdenCruzadaSelected.Comision = 0
                                OrdenCruzadaSelected.ValorComision = 0
                                OrdenCruzadaSelected.IvaComision = 0
                                OrdenCruzadaSelected.ValorOrden = 0
                            End If

                            If OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                                logCalcularValores = False

                                Dim strEjecucionSalvar As String = OrdenCruzadaSelected.Ejecucion
                                Dim strDuracionSalvar As String = OrdenCruzadaSelected.Duracion

                                FiltrarOpcionesTipoLimite("TIPOLIMITE", OrdenCruzadaSelected)

                                OrdenCruzadaSelected.Ejecucion = strEjecucionSalvar
                                FiltrarOpcionesTipoLimite("EJECUCION", OrdenCruzadaSelected)
                                OrdenCruzadaSelected.Duracion = strDuracionSalvar

                                logCalcularValores = True
                            End If

                            IsBusyCruzada = False
                        Else
                            ObtenerValoresDefectoOYDPLUS(OpcionValoresDefecto, pobjOrdenSelected)
                        End If

                    End If

                End If
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al obtener los valores por defecto de los combos.",
                                 Me.ToString(), "ObtenerValoresCombos", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para validar si se debe de habilitar la negociación de la pantalla de ordenes.
    ''' </summary>
    Public Sub ValidarHabilitarNegocio(Optional ByVal CambioTipoOperacion As Boolean = False)
        Try
            If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOrden) And
                Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoNegocio) And
                Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOperacion) And
                Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoProducto) Then
                HabilitarNegocio = True

                If _OrdenOYDPLUSSelected.TipoOrden = "D" Then
                    HabilitarEspecieCumplimiento = False
                Else
                    HabilitarEspecieCumplimiento = True
                End If

                HabilitarNegocioComitente = True
                HabilitarPrecio = True
                HabilitarDatosLeo = True

                If logNuevoRegistro Or logEditarRegistro Then
                    HabilitarDuracion = True
                End If

                MostrarNegocio = Visibility.Visible
                MostrarControles = Visibility.Visible

                If CambioTipoOperacion = False Then
                    ComitenteSeleccionadoOYDPLUS = Nothing
                    NemotecnicoSeleccionadoOYDPLUS = Nothing
                    _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
                    If BorrarCliente Then
                        BorrarCliente = False
                    End If
                    BorrarCliente = True
                    If BorrarEspecie Then
                        BorrarEspecie = False
                    End If
                    BorrarEspecie = True
                    If BorrarClienteADR Then
                        BorrarClienteADR = False
                    End If
                    BorrarClienteADR = True
                End If

                HabilitarCamposOYDPLUS(_OrdenOYDPLUSSelected)
            Else
                HabilitarNegocio = False
                HabilitarEspecieCumplimiento = False
                HabilitarNegocioComitente = False
                HabilitarPrecio = False
                HabilitarDatosLeo = False
                HabilitarDuracion = False
                HabilitarCantidad = False
                HabilitarValorOrden = False
                HabilitarValorRepoOrden = False
                HabilitarCaptacionRepoOrden = False
                HabilitarRepoEnPesos = False
                MostrarNegocio = Visibility.Collapsed
                MostrarCamposCompra = Visibility.Collapsed
                MostrarCamposVenta = Visibility.Collapsed
                MostrarCamposAcciones = Visibility.Collapsed
                HabilitarEjecucion = False
                MostrarCamposRentaFija = Visibility.Collapsed
                MostrarCampoIndicador = Visibility.Collapsed
                MostrarCampoPuntosIndicador = Visibility.Collapsed
                MostrarCamposCuentaPropia = Visibility.Collapsed
                MostrarControles = Visibility.Collapsed
                ComitenteSeleccionadoOYDPLUS = Nothing
                NemotecnicoSeleccionadoOYDPLUS = Nothing
                _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar la habilitación del negocio.",
                                Me.ToString(), "ValidarHabilitarNegocio", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Seleccionar especie elegida en el buscador.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 24 de agosto del 2012
    ''' </summary>
    Public Async Sub SeleccionarEspecieOYDPLUS(ByVal pobjEspecie As OYDUtilidades.BuscadorEspecies)
        Try
            HabilitarControlesEspecieOYDPLUS(pobjEspecie)

            If Not IsNothing(pobjEspecie) Then
                If logEditarRegistro Or logNuevoRegistro Then
                    _OrdenOYDPLUSSelected.Especie = pobjEspecie.Nemotecnico

                    If pobjEspecie.EsAccion Then
                        _OrdenOYDPLUSSelected.ISIN = pobjEspecie.ISIN

                        _OrdenOYDPLUSSelected.Indicador = String.Empty
                        _OrdenOYDPLUSSelected.PuntosIndicador = 0
                        _OrdenOYDPLUSSelected.FechaEmision = Nothing
                        _OrdenOYDPLUSSelected.FechaVencimiento = Nothing
                        _OrdenOYDPLUSSelected.TasaFacial = Nothing
                        _OrdenOYDPLUSSelected.Modalidad = String.Empty
                    Else
                        _OrdenOYDPLUSSelected.ISIN = pobjEspecie.ISIN
                        _OrdenOYDPLUSSelected.FechaEmision = pobjEspecie.Emision
                        _OrdenOYDPLUSSelected.FechaVencimiento = pobjEspecie.Vencimiento
                        _OrdenOYDPLUSSelected.Modalidad = pobjEspecie.CodModalidad
                        _OrdenOYDPLUSSelected.Indicador = String.Empty
                        _OrdenOYDPLUSSelected.PuntosIndicador = 0
                        _OrdenOYDPLUSSelected.TasaFacial = 0

                        If pobjEspecie.CodTipoTasaFija = TIPOTASA_FIJA Then
                            If Not IsNothing(pobjEspecie.TasaFacial) Then
                                _OrdenOYDPLUSSelected.TasaFacial = pobjEspecie.TasaFacial
                                _OrdenOYDPLUSSelected.TipoTasaFija = TIPOTASA_FIJA
                            End If
                        ElseIf pobjEspecie.CodTipoTasaFija = TIPOTASA_VARIABLE Then
                            _OrdenOYDPLUSSelected.TipoTasaFija = TIPOTASA_VARIABLE
                            If Not IsNothing(pobjEspecie.IdIndicador) Then
                                _OrdenOYDPLUSSelected.Indicador = pobjEspecie.IdIndicador.ToString
                            End If

                            If Not IsNothing(pobjEspecie.PuntosIndicador) Then
                                If pobjEspecie.PuntosIndicador > 99 Or pobjEspecie.PuntosIndicador < -99 Then
                                    mostrarMensaje("Los puntos del indicador estan en un rango no permitido (-99->99), por favor corrija los valores", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                Else
                                    If Not IsNothing(pobjEspecie.PuntosIndicador) Then
                                        _OrdenOYDPLUSSelected.PuntosIndicador = pobjEspecie.PuntosIndicador
                                    End If
                                End If
                            End If
                        ElseIf pobjEspecie.IdIndicador = INDICADOR_TASA_FIJA Then
                            If Not IsNothing(pobjEspecie.IdIndicador) Then
                                _OrdenOYDPLUSSelected.Indicador = pobjEspecie.IdIndicador.ToString
                            End If

                            If Not IsNothing(pobjEspecie.TasaFacial) Then
                                _OrdenOYDPLUSSelected.TasaFacial = pobjEspecie.TasaFacial
                            End If
                        End If
                    End If

                    _OrdenOYDPLUSSelected.Estandarizada = pobjEspecie.Estandarizada

                    BorrarEspecie = False

                    If logNuevoRegistro Or logEditarRegistro Then
                        LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACION, _OrdenOYDPLUSSelected)
                    End If

                    If _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_COMPRA And _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                        'Consultar los precios del mercado para activar el ticker.
                        CargarMensajeDinamicoOYDPLUS("preciosmejorespuntascompra", String.Empty, String.Empty, _OrdenOYDPLUSSelected.Especie, "preciosmejorespuntascompra")
                    ElseIf _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_VENTA And _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                        'Consultar los precios del mercado para activar el ticker.
                        CargarMensajeDinamicoOYDPLUS("preciosmejorespuntasventa", String.Empty, String.Empty, _OrdenOYDPLUSSelected.Especie, "preciosmejorespuntasventa")
                    End If

                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or
                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                        LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACION, _OrdenOYDPLUSSelected)
                    End If

                    Dim logConsultarPorcentajeGarantia As Boolean = True

                    If IsNothing(OrdenSAERentaFijaSelected) Then
                        If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoLimite) And
                        Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Especie) And
                                Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOperacion) Then
                            If _OrdenOYDPLUSSelected.TipoLimite = TIPOMERCADO_PRECIO_ESPECIE Or _OrdenOYDPLUSSelected.TipoLimite = TIPOMERCADO_PORLOMEJOR_PRECIO_ESPECIE Then
                                Await ConsultarUltimoPrecioEspecieAsync(_OrdenOYDPLUSSelected.Especie, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.TipoNegocio, "CAMBIOESPECIE")
                                logConsultarPorcentajeGarantia = False
                            End If
                        End If
                    ElseIf OrdenSAERentaFijaSelected.Seleccionada = False Then
                        If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoLimite) And
                       Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Especie) And
                       Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOperacion) Then
                            If _OrdenOYDPLUSSelected.TipoLimite = TIPOMERCADO_PRECIO_ESPECIE Or _OrdenOYDPLUSSelected.TipoLimite = TIPOMERCADO_PORLOMEJOR_PRECIO_ESPECIE Then
                                Await ConsultarUltimoPrecioEspecieAsync(_OrdenOYDPLUSSelected.Especie, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.TipoNegocio, "CAMBIOESPECIE")
                                logConsultarPorcentajeGarantia = False
                            End If
                        End If
                        'Else
                        '    ConsultarUltimoPrecioEspecie(String.Empty, String.Empty, String.Empty)
                    End If

                    If logConsultarPorcentajeGarantia Then
                        If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES And (_OrdenOYDPLUSSelected.TipoOrden <> "I" And _OrdenOYDPLUSSelected.TipoOperacion <> "V") Then
                            Await ConsultarUltimoPrecioEspecieAsync(_OrdenOYDPLUSSelected.Especie, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.TipoNegocio)
                        End If
                    End If

                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or
                      _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                        LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACION, _OrdenOYDPLUSSelected)
                    End If

                    If logConsultarPorcentajeGarantia Then
                        If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC _
                            Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                            Await ConsultarPorcentajeGarantia()
                        End If
                    End If
                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Then
                        ValidarTipoCalculoDefecto(False, _OrdenOYDPLUSSelected.TipoNegocio)
                        Await ObtenerCalculosMotor(_OrdenOYDPLUSSelected)
                        Exit Sub
                    End If

                    If logMostrarIsinesCorresponden Or logMostrarIsines Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Then
                        If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                            ValidarTipoCalculoDefecto(False, _OrdenOYDPLUSSelected.TipoNegocio)
                            Exit Sub
                        Else
                            objTipoCalculo = VerificarTipoCalculo(_OrdenOYDPLUSSelected, TIPOCALCULOS_MOTOR.COMISION.ToString, String.Empty)
                        End If
                        Await ObtenerCalculosMotor(_OrdenOYDPLUSSelected)
                        logMostrarIsinesCorresponden = False
                        logMostrarIsines = False
                    End If
                Else
                    _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
                    _OrdenOYDPLUSSelected.ISIN = "(No Seleccionado)"
                    _OrdenOYDPLUSSelected.FechaEmision = Nothing
                    _OrdenOYDPLUSSelected.FechaVencimiento = Nothing
                    _OrdenOYDPLUSSelected.TasaFacial = 0
                    _OrdenOYDPLUSSelected.Modalidad = String.Empty
                    _OrdenOYDPLUSSelected.Indicador = String.Empty
                    _OrdenOYDPLUSSelected.PuntosIndicador = 0
                    _OrdenOYDPLUSSelected.Estandarizada = False
                    VisibilidadExentoRetencion = Visibility.Collapsed
                    _OrdenOYDPLUSSelected.ExentoRetencion = Nothing

                    If BorrarEspecie Then
                        BorrarEspecie = False
                    End If
                    BorrarEspecie = True

                    If logNuevoRegistro Or logEditarRegistro Then
                        LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACION, _OrdenOYDPLUSSelected)
                    End If
                End If
            Else
                _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
                _OrdenOYDPLUSSelected.ISIN = "(No Seleccionado)"
                _OrdenOYDPLUSSelected.FechaEmision = Nothing
                _OrdenOYDPLUSSelected.FechaVencimiento = Nothing
                _OrdenOYDPLUSSelected.TasaFacial = 0
                _OrdenOYDPLUSSelected.Modalidad = String.Empty
                _OrdenOYDPLUSSelected.Indicador = String.Empty
                _OrdenOYDPLUSSelected.PuntosIndicador = 0
                _OrdenOYDPLUSSelected.Estandarizada = False
                VisibilidadExentoRetencion = Visibility.Collapsed
                _OrdenOYDPLUSSelected.ExentoRetencion = Nothing
                BorrarEspecie = True
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un error al asignar los datos de la especie.", Me.ToString, "SeleccionarEspecie", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Sub HabilitarControlesEspecieOYDPLUS(ByVal pobjEspecie As OYDUtilidades.BuscadorEspecies)
        Try
            If Not IsNothing(pobjEspecie) Then
                HabilitarDeshabilitarControlesEspecies(False, pobjEspecie.EsAccion, pobjEspecie.CodTipoTasaFija, pobjEspecie.IdIndicador)
            Else
                HabilitarDeshabilitarControlesEspecies(True)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un error al asignar los datos de la especie.", Me.ToString, "HabilitarControlesEspecieOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Sub HabilitarControlesEspecieOYDPLUS(ByVal pobjEspecie As EspeciesAgrupadas)
        Try
            If Not IsNothing(pobjEspecie) Then
                HabilitarDeshabilitarControlesEspecies(False, pobjEspecie.EsAccion, pobjEspecie.CodTipoTasaFija, pobjEspecie.IdIndicador, pobjEspecie.Nemotecnico)
            Else
                HabilitarDeshabilitarControlesEspecies(True)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un error al asignar los datos de la especie.", Me.ToString, "HabilitarControlesEspecieOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub HabilitarDeshabilitarControlesEspecies(ByVal plogDeshabilitarControles As Boolean, Optional ByVal plogEsAccion As Nullable(Of Boolean) = False, Optional ByVal pstrTipoTasaFija As String = "", Optional ByVal pstrIndicador As String = "", Optional ByVal pstrNemotecnico As String = "")
        Try
            If plogDeshabilitarControles = False Then
                If logEditarRegistro Or logNuevoRegistro Then
                    If plogEsAccion Or IsNothing(plogEsAccion) Then
                        MostrarCamposFaciales = Visibility.Collapsed
                        MostrarCampoTasaFacial = Visibility.Collapsed
                        MostrarCampoIndicador = Visibility.Collapsed
                        MostrarCampoPuntosIndicador = Visibility.Collapsed
                    Else
                        MostrarCamposFaciales = Visibility.Visible

                        If pstrTipoTasaFija = TIPOTASA_FIJA Then
                            MostrarCampoTasaFacial = Visibility.Visible
                            MostrarCampoIndicador = Visibility.Collapsed
                            MostrarCampoPuntosIndicador = Visibility.Collapsed
                        ElseIf pstrTipoTasaFija = TIPOTASA_VARIABLE Then
                            MostrarCampoIndicador = Visibility.Visible

                            If String.IsNullOrEmpty(pstrIndicador) Then
                                MostrarCampoTasaFacial = Visibility.Collapsed
                                MostrarCampoPuntosIndicador = Visibility.Collapsed
                            Else
                                If pstrIndicador = INDICADOR_TASA_FIJA Then
                                    MostrarCampoTasaFacial = Visibility.Visible
                                    MostrarCampoPuntosIndicador = Visibility.Collapsed
                                Else
                                    MostrarCampoTasaFacial = Visibility.Collapsed
                                    MostrarCampoPuntosIndicador = Visibility.Visible
                                End If
                            End If

                        ElseIf String.IsNullOrEmpty(pstrTipoTasaFija) Then
                            If String.IsNullOrEmpty(pstrIndicador) Then
                                MostrarCampoTasaFacial = Visibility.Collapsed
                                MostrarCampoIndicador = Visibility.Visible
                                MostrarCampoPuntosIndicador = Visibility.Collapsed
                            Else
                                MostrarCampoIndicador = Visibility.Visible
                                If pstrIndicador = INDICADOR_TASA_FIJA Then
                                    MostrarCampoTasaFacial = Visibility.Visible
                                    MostrarCampoPuntosIndicador = Visibility.Collapsed
                                Else
                                    MostrarCampoTasaFacial = Visibility.Collapsed
                                    MostrarCampoPuntosIndicador = Visibility.Visible
                                End If
                            End If
                        End If
                    End If
                Else
                    MostrarCamposFaciales = Visibility.Collapsed
                    MostrarCampoTasaFacial = Visibility.Collapsed
                    MostrarCampoIndicador = Visibility.Collapsed
                    MostrarCampoPuntosIndicador = Visibility.Collapsed
                End If
            Else
                MostrarCamposFaciales = Visibility.Collapsed
                MostrarCampoTasaFacial = Visibility.Collapsed
                MostrarCampoIndicador = Visibility.Collapsed
                MostrarCampoPuntosIndicador = Visibility.Collapsed
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un error al asignar los datos de la especie.", Me.ToString, "HabilitarDeshabilitarControlesEspecies", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Seleccionar el cliente elegido en el buscador.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 24 de agosto del 2012
    ''' </summary>
    ''' <param name="pobjCliente"></param>
    ''' <remarks></remarks>
    Public Sub SeleccionarClienteOYDPLUS(ByVal pobjCliente As OYDUtilidades.BuscadorClientes, ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS, Optional ByVal pstrOpcion As String = "")
        Try
            If Not IsNothing(pobjCliente) Then
                If logEditarRegistro Or logNuevoRegistro Then

                    If Not IsNothing(pobjOrdenSelected) Then

                        pobjOrdenSelected.IDComitente = pobjCliente.IdComitente
                        pobjOrdenSelected.NombreCliente = pobjCliente.Nombre
                        pobjOrdenSelected.NroDocumento = pobjCliente.NroDocumento
                        pobjOrdenSelected.CategoriaCliente = pobjCliente.Categoria
                        If String.IsNullOrEmpty(pobjOrdenSelected.TipoProducto) Then
                            pobjOrdenSelected.TipoProducto = pobjCliente.CodTipoProducto
                        End If
                        If logNuevoRegistro Or logEditarRegistro Then
                            If ValidarTipoProductoPosicionPropia(pobjOrdenSelected) = False Then
                                consultarReceptoresComitente(pobjOrdenSelected.Clase, pobjOrdenSelected.TipoOperacion, pobjOrdenSelected.IDComitente, String.Empty)
                            End If
                        End If

                        If pstrOpcion = OPCION_ORDENCRUZADA Then
                            BorrarClienteCruzada = False
                        Else
                            BorrarCliente = False
                        End If


                        'Consultar los precios del mercado para activar el ticker.
                        CargarMensajeDinamicoOYDPLUS("DOCUMENTOSCLIENTE", String.Empty, pobjOrdenSelected.IDComitente, String.Empty)

                    End If
                End If
            Else
                If Not IsNothing(pobjOrdenSelected) Then
                    pobjOrdenSelected.IDComitente = "-9999999999"
                    pobjOrdenSelected.NombreCliente = "(No Seleccionado)"
                    pobjOrdenSelected.NroDocumento = 0
                    pobjOrdenSelected.CategoriaCliente = "(No Seleccionado)"
                    pobjOrdenSelected.CuentaDeposito = 0
                    pobjOrdenSelected.UBICACIONTITULO = String.Empty
                    pobjOrdenSelected.IDOrdenante = String.Empty

                    If pstrOpcion = OPCION_ORDENCRUZADA Then
                        OrdenanteSeleccionadoCruzada = Nothing
                        CtaDepositoSeleccionadaCruzada = Nothing

                        ListaOrdenantesCruzada = Nothing
                        ListaCuentasDepositoCruzada = Nothing

                        BorrarClienteCruzada = True
                    Else
                        OrdenanteSeleccionadoOYDPLUS = Nothing
                        CtaDepositoSeleccionadaOYDPLUS = Nothing

                        ListaOrdenantesOYDPLUS = Nothing
                        ListaCuentasDepositoOYDPLUS = Nothing

                        BorrarCliente = True
                    End If

                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un error al asignar los datos del cliente.", Me.ToString, "SeleccionarClienteOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Modificado por Juan David Correa
    '''Obtiene el receptor de la orden siempre y cuando el receptor de la orden este vacio
    '''Fecha 23 de agosto del 2012
    '''Cargar el receptor de la orden si no lo tiene ingresado.
    ''' </summary>
    Public Sub ObtenerReceptorLiderOrdenOYDPLUS()
        Try
            If logOrdenCruzada Then
                If Not IsNothing(_OrdenCruzadaSelected) Then
                    If Not IsNothing(_ListaDistribucionComisionCruzada) Then
                        If String.IsNullOrEmpty(_OrdenCruzadaSelected.Receptor) Then
                            If _ListaDistribucionComisionCruzada.Where(Function(i) i.Lider = True).Count > 0 Then
                                If _OrdenCruzadaSelected.Receptor <> _ListaDistribucionComisionCruzada.Where(Function(i) i.Lider = True).FirstOrDefault.IDReceptor Then
                                    _OrdenCruzadaSelected.Receptor = _ListaDistribucionComisionCruzada.Where(Function(i) i.Lider = True).FirstOrDefault.IDReceptor
                                End If
                            End If
                        End If
                    End If
                End If
            Else
                If Not IsNothing(_OrdenOYDPLUSSelected) Then
                    If Not IsNothing(_ListaReceptoresOrdenes) Then
                        If String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Receptor) Then
                            If _ListaReceptoresOrdenes.Where(Function(i) i.Lider = True).Count > 0 Then
                                If _OrdenOYDPLUSSelected.Receptor <> _ListaReceptoresOrdenes.Where(Function(i) i.Lider = True).FirstOrDefault.IDReceptor Then
                                    _OrdenOYDPLUSSelected.Receptor = _ListaReceptoresOrdenes.Where(Function(i) i.Lider = True).FirstOrDefault.IDReceptor
                                End If
                            End If
                        End If
                    End If
                End If
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al obtener el receptor lider de la orden.", Me.ToString, "ObtenerReceptorLiderOrdenOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para habilitar o deshabilitar los campos dependiendo del tipo de orden que sea.
    ''' Desarrollado por Juan david Correa
    ''' Fecha 24 de agosto del 2012
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub HabilitarCamposOYDPLUS(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If Not IsNothing(pobjOrdenSelected) Then

                If Editando Then
                    HabilitarPrecio = True
                    HabilitarDatosLeo = True
                Else
                    HabilitarPrecio = False
                    HabilitarDatosLeo = False
                End If

                If _OrdenOYDPLUSSelected.Clase = CLASE_ACCIONES And _OrdenOYDPLUSSelected.Clasificacion = "OPA" Then
                    VisibilidadOfertaPublicaP = Visibility.Visible
                    If logNuevoRegistro = True Then
                        _OrdenOYDPLUSSelected.VendeTodo = Nothing
                        _OrdenOYDPLUSSelected.ExistePreacuerdo = Nothing
                        _OrdenOYDPLUSSelected.PorcentajePagoEfectivo = 0
                        HabilitarOfertaPublica = True
                    End If
                    If logEditarRegistro = True Then
                        HabilitarOfertaPublica = True
                    End If
                Else
                    VisibilidadOfertaPublicaP = Visibility.Collapsed
                    HabilitarOfertaPublica = False
                    If logNuevoRegistro = True Then
                        _OrdenOYDPLUSSelected.VendeTodo = Nothing
                        _OrdenOYDPLUSSelected.ExistePreacuerdo = Nothing
                        _OrdenOYDPLUSSelected.PorcentajePagoEfectivo = 0
                    End If
                End If

                'Llevar el texto al campo precio dependiendo de lo seleccionado en la Orden.
                If Not IsNothing(pobjOrdenSelected.TipoNegocio) Then

                    'Mostrar Consulta de ISINES PARA TIPOS NEGOCIOS RENTA FIJA : JDOL 20150602
                    If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Or pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_REPOC Or pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_SIMULTANEA Or pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_RENTAFIJA Then
                        HabilitarComboISIN = True
                    Else
                        HabilitarComboISIN = False
                    End If

                    If logEditarRegistro = True Or logNuevoRegistro = True Then
                        If pobjOrdenSelected.EnPesos Then
                            HabilitarCantidad = False
                            If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_RENTAFIJA Then
                                HabilitarPrecio = False
                            End If
                            HabilitarValorOrden = True

                            '' -------------------------------------------------------------------------------------------------
                            ''Se consulta de nuevo valor de parámetro para validar si es base comercial de captación futura o no 
                            If DiccionarioCombosOYDPlus.ContainsKey("BASECOMERCIALCAPTACIONREPO_ORDENOYDPLUS") Then
                                If DiccionarioCombosOYDPlus("BASECOMERCIALCAPTACIONREPO_ORDENOYDPLUS").Count > 0 Then
                                    Try
                                        strParametroBaseComercialCaptacionRepo = DiccionarioCombosOYDPlus("BASECOMERCIALCAPTACIONREPO_ORDENOYDPLUS").First.Retorno
                                    Catch ex As Exception
                                        strParametroBaseComercialCaptacionRepo = String.Empty
                                    End Try
                                End If
                            End If
                            '' -------------------------------------------------------------------------------------------------

                            If strParametroBaseComercialCaptacionRepo = "FUT" Then
                                HabilitarValorRepoOrden = False
                                HabilitarCaptacionRepoOrden = True
                            Else
                                HabilitarValorRepoOrden = True
                                HabilitarCaptacionRepoOrden = False
                            End If

                        Else
                            HabilitarCantidad = True
                            If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_RENTAFIJA Then
                                HabilitarPrecio = True
                            End If
                            HabilitarValorOrden = False
                            HabilitarValorRepoOrden = False
                            HabilitarCaptacionRepoOrden = False
                            If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_REPO Then
                                If Not IsNothing(OrdenSAERentaFijaSelected) Then
                                    ' ObtenerInformacionOrdenSAERentaFija(OrdenSAERentaFijaSelected, pobjOrdenSelected, True)
                                End If
                            End If
                        End If
                        'Validar que REPOS DIRECTOS VENTAS NO PERMITA Pesos 
                        If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO And pobjOrdenSelected.TipoOperacion = TIPOOPERACION_VENTA And pobjOrdenSelected.TipoOrden = TIPOORDEN_DIRECTA Then
                            HabilitarRepoEnPesos = False
                        Else
                            HabilitarRepoEnPesos = True
                        End If
                    Else
                        HabilitarCantidad = False
                        If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_RENTAFIJA Then
                            HabilitarPrecio = False
                        End If
                        HabilitarValorOrden = False
                        HabilitarValorRepoOrden = False
                        HabilitarCaptacionRepoOrden = False
                    End If

                    If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_ACCIONES Then

                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposAcciones = Visibility.Visible
                            HabilitarEjecucion = True
                            HabilitarDuracion = True
                        End If
                        MostrarCamposRentaFija = Visibility.Collapsed
                        NumeroColumnaDia = 2
                        pobjOrdenSelected.Clase = CLASE_ACCIONES

                        MostrarTipoNegocioAcciones = Visibility.Visible
                        MostrarTipoNegocioRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioRepo = Visibility.Collapsed
                        MostrarTipoNegocioRepoRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioSimultanea = Visibility.Collapsed
                        MostrarTipoNegocioTTV = Visibility.Collapsed
                        MostrarTipoNegocioTTVRentaFija = Visibility.Collapsed
                        MostrarCamposFaciales = Visibility.Collapsed
                        MostrarCampoTasaFacial = Visibility.Collapsed
                        MostrarCampoIndicador = Visibility.Collapsed
                        MostrarCampoPuntosIndicador = Visibility.Collapsed
                        MostrarTipoNegocioAccionesOF = Visibility.Collapsed
                        MostrarTipoNegocioRentaFijaOF = Visibility.Collapsed
                        MostrarCamposConstancia = Visibility.Collapsed
                        MostrarCamposADR = Visibility.Collapsed
                        MostrarSaldoPortafolioTTV = False

                        If pobjOrdenSelected.EnPesos Then
                            TextoCantidad = "Valor en pesos"
                        Else
                            TextoCantidad = "Cantidad"
                        End If

                        TextoPrecio = "Precio"

                        'Validar si se muestra la pestaña del portafolio o el saldo
                        'C:Compra
                        'V:Venta
                        If pobjOrdenSelected.TipoOperacion = TIPOOPERACION_COMPRA Or pobjOrdenSelected.TipoOperacion = TIPOOPERACION_RECOMPRA Then
                            TextoPrecioMaximoMinimo = "Precio máximo"
                        ElseIf pobjOrdenSelected.TipoOperacion = TIPOOPERACION_VENTA Or pobjOrdenSelected.TipoOperacion = TIPOOPERACION_REVENTA Then
                            TextoPrecioMaximoMinimo = "Precio mínimo"
                        End If

                    ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_REPO Then
                        MostrarCamposAcciones = Visibility.Collapsed

                        HabilitarEjecucion = False
                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposRentaFija = Visibility.Visible

                            If pobjOrdenSelected.TipoOperacion = TIPOOPERACION_COMPRA Then
                                HabilitarPrecioRepo = True
                            Else
                                HabilitarPrecioRepo = False
                            End If

                            HabilitarDuracion = True
                        Else
                            HabilitarDuracion = False
                            HabilitarPrecioRepo = False
                        End If

                        NumeroColumnaDia = 0
                        pobjOrdenSelected.Clase = CLASE_RENTAFIJA

                        MostrarTipoNegocioRepo = Visibility.Visible

                        MostrarTipoNegocioRepoRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioAcciones = Visibility.Collapsed
                        MostrarTipoNegocioSimultanea = Visibility.Collapsed
                        MostrarTipoNegocioTTV = Visibility.Collapsed
                        MostrarTipoNegocioTTVRentaFija = Visibility.Collapsed
                        MostrarCamposFaciales = Visibility.Collapsed
                        MostrarCampoIndicador = Visibility.Collapsed
                        MostrarCampoPuntosIndicador = Visibility.Collapsed
                        MostrarCampoTasaFacial = Visibility.Collapsed
                        MostrarTipoNegocioAccionesOF = Visibility.Collapsed
                        MostrarTipoNegocioRentaFijaOF = Visibility.Collapsed
                        MostrarCamposConstancia = Visibility.Collapsed
                        MostrarCamposADR = Visibility.Collapsed
                        MostrarSaldoPortafolioTTV = False

                        TextoCantidad = "# Acciones"
                        TextoPrecioMaximoMinimo = "Precio con garantia"
                        TextoValorCaptacionGiro = "Valor captación"

                        'Validar si se muestra la pestaña del portafolio o el saldo
                        'C:Compra
                        'V:Venta
                        If pobjOrdenSelected.TipoOperacion = TIPOOPERACION_COMPRA Or pobjOrdenSelected.TipoOperacion = TIPOOPERACION_RECOMPRA Then
                            TextoPrecio = "Valor colocación"
                        ElseIf pobjOrdenSelected.TipoOperacion = TIPOOPERACION_VENTA Or pobjOrdenSelected.TipoOperacion = TIPOOPERACION_REVENTA Then
                            TextoPrecio = "Valor venta"
                        End If

                    ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_REPOC Then
                        MostrarCamposAcciones = Visibility.Collapsed

                        HabilitarEjecucion = False
                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposRentaFija = Visibility.Visible

                            HabilitarDuracion = True
                        Else
                            HabilitarDuracion = False
                            HabilitarPrecioRepo = False
                        End If

                        NumeroColumnaDia = 0
                        pobjOrdenSelected.Clase = CLASE_RENTAFIJA

                        MostrarTipoNegocioRepoRentaFija = Visibility.Visible

                        MostrarTipoNegocioSimultanea = Visibility.Collapsed
                        MostrarTipoNegocioRepo = Visibility.Collapsed
                        MostrarTipoNegocioRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioAcciones = Visibility.Collapsed
                        MostrarTipoNegocioTTV = Visibility.Collapsed
                        MostrarTipoNegocioTTVRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioAccionesOF = Visibility.Collapsed
                        MostrarTipoNegocioRentaFijaOF = Visibility.Collapsed
                        MostrarCamposConstancia = Visibility.Collapsed
                        MostrarCamposADR = Visibility.Collapsed
                        MostrarSaldoPortafolioTTV = False

                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposFaciales = Visibility.Visible
                            If Not IsNothing(pobjOrdenSelected.Especie) And pobjOrdenSelected.Especie <> "(No Seleccionado)" Then
                                HabilitarDeshabilitarControlesEspecies(False, pobjOrdenSelected.EspecieEsAccion, pobjOrdenSelected.TipoTasaFija, pobjOrdenSelected.Indicador)
                            End If
                        End If

                        TextoCantidad = "Nominal"
                        TextoPrecio = "Precio"
                        TextoPrecioMaximoMinimo = "Precio con garantia"
                        TextoValorCaptacionGiro = "Valor Captacion"

                    ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_SIMULTANEA Then
                        MostrarCamposAcciones = Visibility.Collapsed
                        HabilitarEjecucion = False

                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposRentaFija = Visibility.Visible
                            HabilitarDuracion = True
                        End If
                        NumeroColumnaDia = 0
                        pobjOrdenSelected.Clase = CLASE_RENTAFIJA

                        MostrarTipoNegocioSimultanea = Visibility.Visible
                        MostrarTipoNegocioRepo = Visibility.Collapsed
                        MostrarTipoNegocioRepoRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioAcciones = Visibility.Collapsed
                        MostrarTipoNegocioTTV = Visibility.Collapsed
                        MostrarTipoNegocioTTVRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioAccionesOF = Visibility.Collapsed
                        MostrarTipoNegocioRentaFijaOF = Visibility.Collapsed
                        MostrarCamposConstancia = Visibility.Collapsed
                        MostrarCamposADR = Visibility.Collapsed
                        MostrarSaldoPortafolioTTV = False

                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposFaciales = Visibility.Visible
                            If Not IsNothing(pobjOrdenSelected.Especie) And pobjOrdenSelected.Especie <> "(No Seleccionado)" Then
                                HabilitarDeshabilitarControlesEspecies(False, pobjOrdenSelected.EspecieEsAccion, pobjOrdenSelected.TipoTasaFija, pobjOrdenSelected.Indicador)
                            End If
                        End If

                        TextoCantidad = "Nominal"
                        TextoPrecio = "Precio"
                        TextoPrecioMaximoMinimo = "Precio con garantia"
                        TextoValorCaptacionGiro = "Valor Captacion"

                    ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTV Or pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Then
                        MostrarCamposAcciones = Visibility.Collapsed
                        HabilitarEjecucion = False

                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposRentaFija = Visibility.Visible
                            HabilitarDuracion = True
                        End If
                        NumeroColumnaDia = 0
                        pobjOrdenSelected.Clase = CLASE_RENTAFIJA

                        If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTV Then
                            MostrarTipoNegocioTTV = Visibility.Visible
                            MostrarTipoNegocioTTVRentaFija = Visibility.Collapsed
                        Else
                            MostrarTipoNegocioTTV = Visibility.Collapsed
                            MostrarTipoNegocioTTVRentaFija = Visibility.Visible
                        End If

                        MostrarTipoNegocioSimultanea = Visibility.Collapsed
                        MostrarTipoNegocioRepo = Visibility.Collapsed
                        MostrarTipoNegocioRepoRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioAcciones = Visibility.Collapsed
                        MostrarCamposFaciales = Visibility.Collapsed
                        MostrarCampoTasaFacial = Visibility.Collapsed
                        MostrarCampoIndicador = Visibility.Collapsed
                        MostrarCampoPuntosIndicador = Visibility.Collapsed
                        MostrarTipoNegocioAccionesOF = Visibility.Collapsed
                        MostrarTipoNegocioRentaFijaOF = Visibility.Collapsed
                        MostrarCamposConstancia = Visibility.Collapsed
                        MostrarCamposADR = Visibility.Collapsed

                        TextoCantidad = "Cantidad"
                        TextoPrecio = "Precio"
                        TextoValorCaptacionGiro = "Valor giro"

                        If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTV Then

                            If pobjOrdenSelected.TipoOperacion.ToUpper = TIPOOPERACION_COMPRA Then
                                MostrarSaldoPortafolioTTV = True
                            Else
                                MostrarSaldoPortafolioTTV = False
                            End If

                            If pobjOrdenSelected.TipoOperacion.ToUpper = TIPOOPERACION_COMPRA And pobjOrdenSelected.Clasificacion = RF_TTV_Salida Then
                                MostrarTipoGarantia = Visibility.Visible
                            Else
                                MostrarTipoGarantia = Visibility.Collapsed
                            End If

                            If pobjOrdenSelected.Clasificacion = RF_TTV_Regreso Then
                                strTituloValorGiroTTV = "Valor TTV"
                            Else
                                strTituloValorGiroTTV = "Valor TTV"
                            End If

                        Else
                            MostrarTipoGarantia = Visibility.Collapsed
                            MostrarSaldoPortafolioTTV = False
                        End If


                    ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_RENTAFIJA Then
                        MostrarCamposAcciones = Visibility.Collapsed
                        HabilitarEjecucion = False

                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposRentaFija = Visibility.Visible
                            HabilitarDuracion = True
                        End If
                        NumeroColumnaDia = 0
                        pobjOrdenSelected.Clase = CLASE_RENTAFIJA

                        MostrarTipoNegocioRentaFija = Visibility.Visible
                        MostrarTipoNegocioAcciones = Visibility.Collapsed
                        MostrarTipoNegocioRepo = Visibility.Collapsed
                        MostrarTipoNegocioRepoRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioSimultanea = Visibility.Collapsed
                        MostrarTipoNegocioTTV = Visibility.Collapsed
                        MostrarTipoNegocioTTVRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioAccionesOF = Visibility.Collapsed
                        MostrarTipoNegocioRentaFijaOF = Visibility.Collapsed
                        MostrarCamposADR = Visibility.Collapsed
                        MostrarSaldoPortafolioTTV = False

                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposFaciales = Visibility.Visible
                            If Not IsNothing(pobjOrdenSelected.Especie) And pobjOrdenSelected.Especie <> "(No Seleccionado)" Then
                                HabilitarDeshabilitarControlesEspecies(False, pobjOrdenSelected.EspecieEsAccion, pobjOrdenSelected.TipoTasaFija, pobjOrdenSelected.Indicador)
                            End If
                        End If

                        TextoCantidad = "Nominal"
                        TextoPrecio = "Precio"
                        TextoPrecioMaximoMinimo = "Precio con garantia"
                        TextoValorCaptacionGiro = "Valor Bruto Operación"

                        If pobjOrdenSelected.TipoOperacion = TIPOOPERACION_VENTA And HabilitarConstanciaFuncionalidad Then
                            MostrarCamposConstancia = Visibility.Visible
                            If logEditarRegistro = True Or logNuevoRegistro = True Then
                                HabilitarConstancia = True
                            End If
                        Else
                            MostrarCamposConstancia = Visibility.Collapsed
                            If logEditarRegistro = True Or logNuevoRegistro = True Then
                                HabilitarConstancia = False
                            End If
                        End If


                    ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_ADR Then

                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposAcciones = Visibility.Visible
                            HabilitarEjecucion = True
                            HabilitarDuracion = True
                        End If
                        MostrarCamposRentaFija = Visibility.Collapsed
                        NumeroColumnaDia = 2
                        pobjOrdenSelected.Clase = CLASE_ACCIONES

                        MostrarTipoNegocioAcciones = Visibility.Visible
                        MostrarTipoNegocioRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioRepo = Visibility.Collapsed
                        MostrarTipoNegocioRepoRentaFija = Visibility.Collapsed
                        MostrarTipoNegocioSimultanea = Visibility.Collapsed
                        MostrarTipoNegocioTTV = Visibility.Collapsed
                        MostrarTipoNegocioTTVRentaFija = Visibility.Collapsed
                        MostrarCamposFaciales = Visibility.Collapsed
                        MostrarCampoTasaFacial = Visibility.Collapsed
                        MostrarCampoIndicador = Visibility.Collapsed
                        MostrarCampoPuntosIndicador = Visibility.Collapsed
                        MostrarTipoNegocioAccionesOF = Visibility.Collapsed
                        MostrarTipoNegocioRentaFijaOF = Visibility.Collapsed
                        MostrarCamposConstancia = Visibility.Collapsed
                        MostrarCamposADR = Visibility.Visible
                        MostrarSaldoPortafolioTTV = False

                        If pobjOrdenSelected.EnPesos Then
                            TextoCantidad = "Valor en pesos"
                        Else
                            TextoCantidad = "Cantidad"
                        End If

                        TextoPrecio = "Precio"

                        'Validar si se muestra la pestaña del portafolio o el saldo
                        'C:Compra
                        'V:Venta
                        If pobjOrdenSelected.TipoOperacion = TIPOOPERACION_COMPRA Or pobjOrdenSelected.TipoOperacion = TIPOOPERACION_RECOMPRA Then
                            TextoPrecioMaximoMinimo = "Precio máximo"
                        ElseIf pobjOrdenSelected.TipoOperacion = TIPOOPERACION_VENTA Or pobjOrdenSelected.TipoOperacion = TIPOOPERACION_REVENTA Then
                            TextoPrecioMaximoMinimo = "Precio mínimo"
                        End If

                    End If

                End If

                'Se lleva a la variable para saber si la orden de OYDPLUS es de RENTA FIJA o ACCIONES
                If Not IsNothing(pobjOrdenSelected.Clase) Then
                    If pobjOrdenSelected.Clase.ToUpper <> CLASE_ACCIONES Then
                        _mlogEsOrdenRENTAFIJAOYDPLUS = True
                    Else
                        _mlogEsOrdenRENTAFIJAOYDPLUS = False
                    End If
                End If

                'Validar si se muestra la pestaña del portafolio o el saldo
                'C:Compra
                'V:Venta
                If pobjOrdenSelected.TipoOperacion = TIPOOPERACION_COMPRA Or pobjOrdenSelected.TipoOperacion = TIPOOPERACION_RECOMPRA Then
                    If logEditarRegistro = True Or logNuevoRegistro = True Then
                        MostrarCamposCompra = Visibility.Visible
                    End If
                    MostrarCamposVenta = Visibility.Collapsed
                    If Not IsNothing(pobjOrdenSelected.TipoNegocio) Then
                        'Santiago Alexander Vergara Orrego - Mayo 15/2014 - Cambio de label para los campos de acciones de otras firmas 
                        If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_ACCIONESOF Then
                            TextoPrecioMaximoMinimo = "Precio inferior"
                        End If
                    End If

                    TextoSaldoPortafolio = "Saldo"
                ElseIf pobjOrdenSelected.TipoOperacion = TIPOOPERACION_VENTA Or pobjOrdenSelected.TipoOperacion = TIPOOPERACION_REVENTA Then
                    If logEditarRegistro = True Or logNuevoRegistro = True Then
                        MostrarCamposVenta = Visibility.Visible
                    End If
                    MostrarCamposCompra = Visibility.Collapsed

                    If Not IsNothing(pobjOrdenSelected.TipoNegocio) Then
                        'Santiago Alexander Vergara Orrego - Mayo 15/2014 - Cambio de label para los campos de acciones de otras firmas 
                        If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_ACCIONESOF Then
                            TextoPrecioMaximoMinimo = "Precio inferior"
                        End If
                    End If
                    TextoSaldoPortafolio = "Portafolio"
                End If

                If pobjOrdenSelected.TipoProducto = TIPOPRODUCTO_CUENTAPROPIA Then
                    If String.IsNullOrEmpty(pobjOrdenSelected.TipoInversion) Then
                        pobjOrdenSelected.TipoInversion = TIPOINVERSIONXDEFECTO        ' EOMC -- Dato por defecto si hay más de un item en el combo -- 11/20/2012
                    End If
                    If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Then
                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposVenta = Visibility.Visible
                        End If
                        MostrarCamposCompra = Visibility.Collapsed
                    End If
                End If

                If Not IsNothing(pobjOrdenSelected.OrdenCruzadaReceptor) Then
                    If pobjOrdenSelected.OrdenCruzadaReceptor Then
                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCruzadaCon = Visibility.Visible
                        End If
                    Else
                        MostrarCruzadaCon = Visibility.Collapsed
                    End If
                End If



                If Not IsNothing(pobjOrdenSelected.TipoProducto) Then
                    If pobjOrdenSelected.TipoProducto.ToUpper = TIPOPRODUCTO_CUENTAPROPIA Then
                        'BuscarControlValidacion(ViewOrdenesOYDPLUS, "TabOperacionesXCumplir")
                        If logEditarRegistro = True Or logNuevoRegistro = True Then
                            MostrarCamposCuentaPropia = Visibility.Visible
                        End If
                    Else
                        MostrarCamposCuentaPropia = Visibility.Collapsed
                    End If
                    If pobjOrdenSelected.TipoOrden = TIPOORDEN_DIRECTA Then
                        BuscarControlValidacion_NEW(viewFormaOrdenes, "TabOrdenSAE")
                    Else
                        BuscarControlValidacion(ViewOrdenesOYDPLUS, "TabSaldoCliente")
                    End If
                End If

                'Valida sí se debe de mostrar el tab de receptores ordenes por cruzar
                If pobjOrdenSelected.OrdenCruzadaReceptor Then
                    MostrarReceptoresCruzada = Visibility.Visible
                Else
                    MostrarReceptoresCruzada = Visibility.Collapsed
                End If

                'Valida sí se debe de mostrar el tab de ordenes cruzadas
                If pobjOrdenSelected.OrdenCruzadaReceptor Or pobjOrdenSelected.OrdenCruzadaCliente Or pobjOrdenSelected.OrdenCruzada Then
                    If pobjOrdenSelected.OrdenCruzada Then
                        TextoTabOrdenCruzada = "Orden original"
                    Else
                        TextoTabOrdenCruzada = "Ordenes que han cruzado"
                    End If
                    MostrarOrdenesCruzadas = Visibility.Visible
                Else
                    MostrarOrdenesCruzadas = Visibility.Collapsed
                End If

                'Validaciones para mostrar la información de las ordenes cruzadas.
                If pobjOrdenSelected.OrdenCruzadaReceptor Or pobjOrdenSelected.OrdenCruzadaCliente Or pobjOrdenSelected.OrdenCruzada And logOrdenCruzada = False Then
                    MostrarDescripcionOrdenCruzada = Visibility.Visible

                    If pobjOrdenSelected.OrdenCruzada Then
                        TextoCruces = "con órden nro. " & pobjOrdenSelected.IDNroOrdenOriginal
                    Else
                        TextoCruces = "pendiente por cruces"
                    End If
                Else
                    MostrarDescripcionOrdenCruzada = Visibility.Collapsed
                End If

                If logEditarRegistro And logPreguntoAsociacion Then
                    If logEliminarAsociacion = False Then
                        HabilitarNegocio = False
                        HabilitarEspecieCumplimiento = False
                        HabilitarEjecucion = False
                        HabilitarTipoLimite = False
                        HabilitarDuracion = False
                        HabilitarPrecio = False
                        HabilitarUsuarioOperador = True
                        If pobjOrdenSelected.SaldoOrden = 0 Then
                            HabilitarNegocioComitente = False
                        Else
                            HabilitarNegocioComitente = True
                        End If
                    End If
                End If

            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al habilitar los controles dependiendo del tipo de orden.", Me.ToString, "HabilitarCamposOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para habilitar las consultas en los controles.
    ''' Desarrollado por Juan David Correa
    ''' Fecha 22 de octubre del 2012
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub HabilitarConsultaControles(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If logEditarRegistro Or logNuevoRegistro Then
                If Not IsNothing(pobjOrdenSelected) Then
                    TipoNegocioControles = pobjOrdenSelected.TipoNegocio
                    TipoOperacionControles = pobjOrdenSelected.TipoOperacion
                    CodigoOYDControles = pobjOrdenSelected.IDComitente
                    ReceptorControles = pobjOrdenSelected.Receptor
                    EspecieControles = pobjOrdenSelected.Especie
                    FechaEmisionControles = pobjOrdenSelected.FechaEmision
                    FechaVencimientoControles = pobjOrdenSelected.FechaVencimiento
                    ModalidadControles = pobjOrdenSelected.Modalidad

                    If Not IsNothing(ListaOrdenSAEAcciones) Then
                        If ListaOrdenSAEAcciones.Where(Function(x) x.Seleccionada = True).Count > 0 Then
                            logCambiarConsultaSAE = False
                        End If
                    End If
                    If Not IsNothing(ListaOrdenSAERentaFija) Then
                        If ListaOrdenSAERentaFija.Where(Function(x) x.Seleccionada = True).Count > 0 Then
                            logCambiarConsultaSAE = False
                        End If
                    End If

                    If logCambiarConsultaPortafolio Then
                        If Not String.IsNullOrEmpty(pobjOrdenSelected.TipoNegocio) And
                        (pobjOrdenSelected.TipoOperacion = TIPOOPERACION_VENTA Or pobjOrdenSelected.TipoOperacion = TIPOOPERACION_COMPRA And pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV) And
                       (Not String.IsNullOrEmpty(pobjOrdenSelected.IDComitente) Or
                        Not String.IsNullOrEmpty(pobjOrdenSelected.Especie)) Then
                            If ConsultarPortafolio Then
                                ConsultarPortafolio = False
                            End If
                            ConsultarPortafolio = True
                        Else
                            ConsultarPortafolio = False
                        End If
                    End If

                    If logCambiarConsultaSaldo Then
                        If pobjOrdenSelected.TipoOperacion = TIPOOPERACION_COMPRA And
                        Not String.IsNullOrEmpty(pobjOrdenSelected.IDComitente) Then
                            If ConsultarSaldo Then
                                ConsultarSaldo = False
                            End If
                            ConsultarSaldo = True
                        Else
                            ConsultarSaldo = False
                        End If
                    End If

                    If logCambiarConsultaOperaciones Then
                        If Not String.IsNullOrEmpty(pobjOrdenSelected.TipoNegocio) And
                       (Not String.IsNullOrEmpty(pobjOrdenSelected.IDComitente) Or
                        Not String.IsNullOrEmpty(pobjOrdenSelected.Especie)) Then
                            If ConsultarOperaciones Then
                                ConsultarOperaciones = False
                            End If
                            ConsultarOperaciones = True
                        Else
                            ConsultarOperaciones = False
                        End If
                    End If

                Else
                    ConsultarOrdenesSAE = False
                    ConsultarSaldo = False
                    ConsultarPortafolio = False
                    ConsultarOperaciones = False
                End If
            Else
                ConsultarOrdenesSAE = False
                ConsultarSaldo = False
                ConsultarPortafolio = False
                ConsultarOperaciones = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al habilitar la busqueda en los controles dependiendo del tipo de orden.", Me.ToString, "HabilitarConsultaControles", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Public Sub consultarClaseEspecie(Optional ByVal pstrUserState As String = "")
        Try
            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Especie) And ActivoExento = "SI" And _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Then
                    dcProxy2.ConsultarClaseEspecie(_OrdenOYDPLUSSelected.Especie, Program.Usuario, Program.HashConexion, AddressOf TerminoTraerClaseOrden, pstrUserState)
                Else
                    VisibilidadExentoRetencion = Visibility.Collapsed
                    HabilitarExentoRetencion = False
                    If logEditarRegistro Or logNuevoRegistro Or logDuplicarRegistro Then
                        _OrdenOYDPLUSSelected.ExentoRetencion = False
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la consulta de la clase de la especie",
                                 Me.ToString(), "consultarClaseEspecie", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoTraerClaseOrden(ByVal lo As InvokeOperation(Of Boolean))
        If Not lo.HasError Then
            If Not IsNothing(lo.Value) Then
                EsBono = lo.Value
                If EsBono = True Then
                    VisibilidadExentoRetencion = Visibility.Visible

                    If logEditarRegistro Or logNuevoRegistro Or logDuplicarRegistro Then
                        HabilitarExentoRetencion = True
                        If logNuevoRegistro Then
                            _OrdenOYDPLUSSelected.ExentoRetencion = False
                        End If
                    Else
                        HabilitarExentoRetencion = False
                    End If
                Else
                    VisibilidadExentoRetencion = Visibility.Collapsed
                    HabilitarExentoRetencion = False
                    If logEditarRegistro Or logNuevoRegistro Or logDuplicarRegistro Then
                        _OrdenOYDPLUSSelected.ExentoRetencion = Nothing
                    End If
                End If
            End If
        Else
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar la clase de la orden",
                     Me.ToString(), "TerminoTraerClaseOrden", Application.Current.ToString(), Program.Maquina, lo.Error)
            lo.MarkErrorAsHandled()   '????
        End If
    End Sub

    ''' <summary>
    ''' Desarrollado por Juan David Correa.
    ''' Consultar los ordenantes del comitente asociado a la orden de OYDPLUS
    ''' Fecha 24 de agosto del 2012
    ''' </summary>
    Private Sub consultarOrdenantesOYDPLUS(ByVal pstrIdComitente As String, Optional ByVal pstrUserState As String = "")
        Try
            If logNuevoRegistro Or logEditarRegistro Then
                If Not IsNothing(mdcProxyUtilidad01.BuscadorOrdenantes) Then
                    mdcProxyUtilidad01.BuscadorOrdenantes.Clear()
                End If

                Dim strClienteABuscar = Right(Space(17) & pstrIdComitente, MINT_LONG_MAX_CODIGO_OYD)

                mdcProxyUtilidad01.Load(mdcProxyUtilidad01.buscarOrdenantesComitenteQuery(strClienteABuscar, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerOrdenantes, pstrUserState)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al consultar los ordenantes del cliente.", Me.ToString, "consultarOrdenantesOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Desarrollado por Juan David Correa.
    ''' Consultar las cuentas depósito del comitente asociado a la orden de OYDPLUS
    ''' Fecha 24 de agosto del 2012
    ''' </summary>
    Private Sub consultarCuentasDepositoOYDPLUS(ByVal pstrIdComitente As String, Optional ByVal pstrUserState As String = "")
        Try
            If logNuevoRegistro Or logEditarRegistro Then
                If Not IsNothing(mdcProxyUtilidad02.BuscadorCuentasDepositos) Then
                    mdcProxyUtilidad02.BuscadorCuentasDepositos.Clear()
                End If
                ListaCuentasDepositoOYDPLUS = Nothing
                Dim strClienteABuscar = Right(Space(17) & pstrIdComitente, MINT_LONG_MAX_CODIGO_OYD)

                mdcProxyUtilidad02.Load(mdcProxyUtilidad02.buscarCuentasDepositoComitenteQuery(strClienteABuscar, True, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerCuentasDeposito, pstrUserState)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al consultar las cuentas deposito del cliente.", Me.ToString, "consultarCuentasDepositoOYDPLUS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Desarrollado por Juan David Correa.
    ''' Se realizan las validaciones para el guardado de la orden de oydplus.
    ''' Fecha 27 de agosto del 2012
    ''' </summary>
    ''' <remarks></remarks>
    Public Async Function ValidarGuardadoOrden(ByVal pobjOrden As OyDPLUSOrdenesBolsa.OrdenOYDPLUS) As Task(Of Boolean)
        Try
            'Valida los campos que son requeridos por el sistema de OYDPLUS.
            Dim logTieneError As Boolean = False
            strMensajeValidacion = String.Empty

            If Not IsNothing(pobjOrden) Then
                'Valida el campo de Receptor
                If logNuevoRegistro Then
                    If IsNothing(pobjOrden.Receptor) Or String.IsNullOrEmpty(pobjOrden.Receptor) Then
                        strMensajeValidacion = String.Format("{0}{1} - Receptor", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If

                'Valida el campo de Tipo de Orden
                If IsNothing(pobjOrden.TipoOrden) Or String.IsNullOrEmpty(pobjOrden.TipoOrden) Then
                    strMensajeValidacion = String.Format("{0}{1} - Tipo orden", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo de Tipo de producto
                If IsNothing(pobjOrden.TipoProducto) Or String.IsNullOrEmpty(pobjOrden.TipoProducto) Then
                    strMensajeValidacion = String.Format("{0}{1} - Tipo producto", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo de Tipo de negocio
                If IsNothing(pobjOrden.TipoNegocio) Or String.IsNullOrEmpty(pobjOrden.TipoNegocio) Then
                    strMensajeValidacion = String.Format("{0}{1} - Tipo negocio", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo de Tipo de operación
                If IsNothing(pobjOrden.TipoOperacion) Or String.IsNullOrEmpty(pobjOrden.TipoOperacion) Then
                    strMensajeValidacion = String.Format("{0}{1} - Tipo operación", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If

                'Valida el campo de Clasificación
                If IsNothing(pobjOrden.Clasificacion) Or String.IsNullOrEmpty(pobjOrden.Clasificacion) Then
                    strMensajeValidacion = String.Format("{0}{1} - Clasificación", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo de tipo limite

                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                             _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Then
                    _OrdenOYDPLUSSelected.TipoLimite = String.Empty
                Else
                    If IsNothing(pobjOrden.TipoLimite) Or String.IsNullOrEmpty(pobjOrden.TipoLimite) Then
                        strMensajeValidacion = String.Format("{0}{1} - Tipo limite", strMensajeValidacion, vbCrLf)


                        logTieneError = True
                    End If
                End If

                'Valida el campo de las condiciones de la negociación
                If IsNothing(pobjOrden.CondicionesNegociacion) Or String.IsNullOrEmpty(pobjOrden.CondicionesNegociacion) Then
                    strMensajeValidacion = String.Format("{0}{1} - Condiciones negociación", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo de la forma de pago
                If IsNothing(pobjOrden.FormaPago) Or String.IsNullOrEmpty(pobjOrden.FormaPago) Then
                    strMensajeValidacion = String.Format("{0}{1} - Forma de pago", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo de la especie
                If IsNothing(pobjOrden.Especie) Or String.IsNullOrEmpty(pobjOrden.Especie) Or pobjOrden.Especie = "(No Seleccionado)" Then
                    strMensajeValidacion = String.Format("{0}{1} - Especie", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo del cliente
                If IsNothing(pobjOrden.IDComitente) Or String.IsNullOrEmpty(pobjOrden.IDComitente) Or pobjOrden.IDComitente = "(No Seleccionado)" Then
                    strMensajeValidacion = String.Format("{0}{1} - Cliente", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo del ordenante
                If IsNothing(pobjOrden.IDOrdenante) Or String.IsNullOrEmpty(pobjOrden.IDOrdenante) Then
                    strMensajeValidacion = String.Format("{0}{1} - Ordenante", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo del cuenta deposito
                If (IsNothing(pobjOrden.CuentaDeposito) Or pobjOrden.CuentaDeposito = 0) And String.IsNullOrEmpty(pobjOrden.UBICACIONTITULO) Then
                    strMensajeValidacion = String.Format("{0}{1} - Cuenta deposito", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If


                If logOrdenDIRECTA_RENTAFIJA = True And (pobjOrden.TipoNegocio = TIPONEGOCIO_SIMULTANEA Or pobjOrden.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or pobjOrden.TipoNegocio = TIPONEGOCIO_TTVC) And pobjOrden.UBICACIONTITULO <> UbicacionTituloDirecta Then
                    strMensajeValidacion = String.Format("{0}{1} - El tipo depósito de la operación " + IIf(IsNothing(UbicacionTituloDirecta), " - ", IIf(UbicacionTituloDirecta.ToUpper = "V", "(DCV)", "(DECEVAL)")) + " es diferente al tipo depósito del cliente " + IIf(IsNothing(pobjOrden.UBICACIONTITULO), " - ", IIf(pobjOrden.UBICACIONTITULO.ToUpper = "V", "(DCV)", "(DECEVAL)")), strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If

                If (pobjOrden.TipoNegocio = TIPONEGOCIO_REPO Or pobjOrden.TipoNegocio = TIPONEGOCIO_ACCIONES) And pobjOrden.UBICACIONTITULO <> "D" Then
                    strMensajeValidacion = String.Format("{0}{1} - El tipo depósito seleccionado no es permitido para este tipo de Negocio", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                'Valida el campo de las duración
                'Validamos que la (Duración)sea Hasta Fecha y/o Hasta Cancelación cuando la Orden no sea Acciones y ADR (TIPONEGOCIO_ACCIONES, TIPONEGOCIO_ADR) 
                If pobjOrden.TipoNegocio <> TIPONEGOCIO_ACCIONESOF And pobjOrden.TipoNegocio <> TIPONEGOCIO_RENTAFIJAOF Then
                    If IsNothing(pobjOrden.Duracion) Or String.IsNullOrEmpty(pobjOrden.Duracion) Then
                        strMensajeValidacion = String.Format("{0}{1} - Duración", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    Else
                        If (pobjOrden.Duracion <> "F" And pobjOrden.Duracion <> "C") And (pobjOrden.TipoNegocio <> TIPONEGOCIO_ACCIONES And pobjOrden.TipoNegocio <> TIPONEGOCIO_ADR) Then
                            pobjOrden.Duracion = Nothing
                            strMensajeValidacion = String.Format("{0}{1} - Duración", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If
                End If

                'Valida el campo del tipo de inversión
                If pobjOrden.TipoProducto = TIPOPRODUCTO_CUENTAPROPIA Then
                    If IsNothing(pobjOrden.TipoInversion) Or String.IsNullOrEmpty(pobjOrden.TipoInversion) Then
                        strMensajeValidacion = String.Format("{0}{1} - Tipo inversión", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If

                'Valida las faciales de la espcies sí es una especie estandarizada y el tipo de negocio es renta fija o Simulatanea.
                If pobjOrden.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or pobjOrden.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                    'If String.IsNullOrEmpty(pobjOrden.ISIN) Or pobjOrden.ISIN = "(No Seleccionado)" Then
                    '    strMensajeValidacion = String.Format("{0}{1} - ISIN", strMensajeValidacion, vbCrLf)
                    '    logTieneError = True
                    'End If
                    If IsNothing(pobjOrden.FechaEmision) Then
                        strMensajeValidacion = String.Format("{0}{1} - Fecha emisión", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                    If IsNothing(pobjOrden.FechaVencimiento) Then
                        strMensajeValidacion = String.Format("{0}{1} - Fecha vencimiento", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                    If String.IsNullOrEmpty(pobjOrden.Modalidad) Then
                        strMensajeValidacion = String.Format("{0}{1} - Modalidad", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If

                    If pobjOrden.TipoTasaFija = TIPOTASA_VARIABLE Then
                        If String.IsNullOrEmpty(pobjOrden.Indicador) Then
                            strMensajeValidacion = String.Format("{0}{1} - Indicador", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If

                        If IsNothing(pobjOrden.PuntosIndicador) Or pobjOrden.PuntosIndicador = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Puntos indicador", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        Else
                            If pobjOrden.PuntosIndicador > 99 Or pobjOrden.PuntosIndicador < -99 Then
                                strMensajeValidacion = String.Format("{0}{1} - Los Puntos indicador estan fuera del rango permitido (-99->99) por favor corrija.", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If
                        End If
                    ElseIf pobjOrden.TipoTasaFija = TIPOTASA_FIJA Then
                        If (IsNothing(pobjOrden.TasaFacial) Or pobjOrden.TasaFacial = 0) And pobjOrden.Estandarizada = True Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa facial", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    ElseIf String.IsNullOrEmpty(pobjOrden.TipoTasaFija) Then
                        If String.IsNullOrEmpty(pobjOrden.Indicador) Then
                            strMensajeValidacion = String.Format("{0}{1} - Indicador", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        Else
                            If pobjOrden.Indicador = INDICADOR_TASA_FIJA Then
                                If (IsNothing(pobjOrden.TasaFacial) Or pobjOrden.TasaFacial = 0) And pobjOrden.Estandarizada = True Then
                                    strMensajeValidacion = String.Format("{0}{1} - Tasa facial", strMensajeValidacion, vbCrLf)
                                    logTieneError = True
                                End If
                            Else
                                If IsNothing(pobjOrden.PuntosIndicador) Or pobjOrden.PuntosIndicador = 0 Then
                                    strMensajeValidacion = String.Format("{0}{1} - Puntos indicador", strMensajeValidacion, vbCrLf)
                                    logTieneError = True
                                Else
                                    If pobjOrden.PuntosIndicador > 99 Or pobjOrden.PuntosIndicador < -99 Then
                                        strMensajeValidacion = String.Format("{0}{1} - Los Puntos indicador estan fuera del rango permitido (-99->99) por favor corrija.", strMensajeValidacion, vbCrLf)
                                        logTieneError = True
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                If IsNothing(pobjOrden.FechaCumplimiento) Then
                    strMensajeValidacion = String.Format("{0}{1} - Fecha cumplimiento", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If

                If pobjOrden.FechaCumplimiento.Value.Date < pobjOrden.FechaOrden.Value.Date Then
                    strMensajeValidacion = String.Format("{0}{1} - Fecha cumplimiento, no puede ser menor a la fecha de la orden", strMensajeValidacion, vbCrLf)
                    logTieneError = True
                End If
                If pobjOrden.TipoNegocio = TIPONEGOCIO_TTV Or pobjOrden.TipoNegocio = TIPONEGOCIO_TTVC Then
                    If IsNothing(pobjOrden.FechaSalida) Then
                        strMensajeValidacion = String.Format("{0}{1} - Fecha salida", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                    'If pobjOrden.TipoNegocio = TIPONEGOCIO_TTV Then
                    '    If pobjOrden.TipoOperacion = TIPOOPERACION_COMPRA Then
                    '        If String.IsNullOrEmpty(pobjOrden.TipoGarantia) Then
                    '            strMensajeValidacion = String.Format("{0}{1} - Tipo garantía", strMensajeValidacion, vbCrLf)
                    '            logTieneError = True
                    '        End If
                    '    End If
                    'End If
                End If

                If pobjOrden.TipoNegocio = TIPONEGOCIO_REPO Or pobjOrden.TipoNegocio = TIPONEGOCIO_REPOC Then
                    If IsNothing(pobjOrden.FechaSalida) Then
                        strMensajeValidacion = String.Format("{0}{1} - Fecha salida", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If

                If pobjOrden.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                    If IsNothing(pobjOrden.FechaSalida) Then
                        strMensajeValidacion = String.Format("{0}{1} - Fecha salida", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If

                'Santiago Alexander Vergara Orrego - Mayo 15/2014 - Para los tipos de negocio de otras firmas no se validan los campos de LEO
                If pobjOrden.TipoNegocio <> TIPONEGOCIO_ACCIONESOF And pobjOrden.TipoNegocio <> TIPONEGOCIO_RENTAFIJAOF Then

                    'Valida el campo fecha de recepción
                    If IsNothing(pobjOrden.FechaRecepcion) Then
                        strMensajeValidacion = String.Format("{0}{1} - Fecha recepción", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    Else
                        Dim strHoraRecepcion As String = String.Format("{0:00}:{1:00}:{2:00}",
                                                                       pobjOrden.FechaRecepcion.Value.Hour,
                                                                       pobjOrden.FechaRecepcion.Value.Minute,
                                                                       pobjOrden.FechaRecepcion.Value.Second)

                        If strHoraRecepcion = "00:00:00" Then
                            strMensajeValidacion = String.Format("{0}{1} - Hora recepción", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If

                    'Valida el campo receptor toma
                    If IsNothing(pobjOrden.ReceptorToma) Or String.IsNullOrEmpty(pobjOrden.ReceptorToma) Then
                        strMensajeValidacion = String.Format("{0}{1} - Receptor toma", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If

                    'Valida el campo canal de recepción
                    If IsNothing(pobjOrden.CanalRecepcion) Or String.IsNullOrEmpty(pobjOrden.CanalRecepcion) Then
                        strMensajeValidacion = String.Format("{0}{1} - Canal recepción", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If

                    'Valida el campo usuario operador
                    If IsNothing(pobjOrden.UsuarioOperador) Or String.IsNullOrEmpty(pobjOrden.UsuarioOperador) Then
                        strMensajeValidacion = String.Format("{0}{1} - Usuario operador", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If

                    'Valida el campo medio verificable
                    If IsNothing(pobjOrden.MedioVerificable) Or String.IsNullOrEmpty(pobjOrden.MedioVerificable) Then
                        strMensajeValidacion = String.Format("{0}{1} - Medio verificable", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If

                End If

                'Valida el campos dependiendo de la clase de la orden Acciones o Renta Fija
                If Not String.IsNullOrEmpty(pobjOrden.TipoNegocio) And Not String.IsNullOrEmpty(pobjOrden.TipoOperacion) Then
                    If pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_ACCIONES Or pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_ADR Then
                        'Valida el campo de las ejecución
                        If IsNothing(pobjOrden.Ejecucion) Or String.IsNullOrEmpty(pobjOrden.Ejecucion) Then
                            strMensajeValidacion = String.Format("{0}{1} - Ejecución", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo de la cantidad
                        If IsNothing(pobjOrden.Cantidad) Or pobjOrden.Cantidad = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Cantidad", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo precio
                        If (IsNothing(pobjOrden.Precio) Or pobjOrden.Precio = 0) And (IsNothing(pobjOrden.PrecioMaximoMinimo) Or pobjOrden.PrecioMaximoMinimo = 0) Then
                            strMensajeValidacion = String.Format("{0}{1} - Precio", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If

                        If pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_ADR Then
                            'Valida el campo tasa cliente
                            If String.IsNullOrEmpty(pobjOrden.IDComitenteADR) Then
                                strMensajeValidacion = String.Format("{0}{1} - Cliente ADR", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If
                        End If

                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_RENTAFIJA Then

                        'Valida el campo de la cantidad
                        If IsNothing(pobjOrden.Cantidad) Or pobjOrden.Cantidad = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Nominal", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If

                        'Valida el campo precio
                        If IsNothing(pobjOrden.Precio) Or pobjOrden.Precio = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Precio", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If

                        'Valida el campo tasa de comprador vendedor
                        If Not String.IsNullOrEmpty(pobjOrden.Modalidad) Then
                            If (IsNothing(pobjOrden.TasaRegistro) Or pobjOrden.TasaRegistro = 0) And pobjOrden.Modalidad.ToUpper <> "NO" Then
                                strMensajeValidacion = String.Format("{0}{1} - Tasa registro", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If

                            'Valida el campo tasa cliente
                            If (IsNothing(pobjOrden.TasaCliente) Or pobjOrden.TasaCliente = 0) And pobjOrden.Modalidad.ToUpper <> "NO" Then
                                strMensajeValidacion = String.Format("{0}{1} - Tasa cliente", strMensajeValidacion, vbCrLf)
                                logTieneError = True
                            End If
                        End If

                        ''Valida el campo valor captación giro
                        If IsNothing(pobjOrden.ValorCaptacionGiro) Or pobjOrden.ValorCaptacionGiro = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Valor giro", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_REPO Then
                        'Valida el campo precio
                        If IsNothing(pobjOrden.Cantidad) Or pobjOrden.Cantidad = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - # Acciones", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo del valor de la acción
                        If IsNothing(pobjOrden.ValorAccion) Or pobjOrden.ValorAccion = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Valor Acción", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo del castigo
                        If IsNothing(pobjOrden.Castigo) Or pobjOrden.Castigo = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Castigo", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo tasa de comprador vendedor
                        If IsNothing(pobjOrden.TasaRegistro) Or pobjOrden.TasaRegistro = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa registro", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If

                        If (IsNothing(pobjOrden.TasaCliente) Or pobjOrden.TasaCliente = 0) And
                            (IsNothing(pobjOrden.Comision) Or pobjOrden.Comision = 0) And
                            (IsNothing(pobjOrden.ValorComision) Or pobjOrden.ValorComision = 0) Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa cliente o Comisión o Valor comisión", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_REPOC Then
                        'Valida el campo de la cantidad
                        If IsNothing(pobjOrden.Cantidad) Or pobjOrden.Cantidad = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Nominal", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo de la precio
                        If IsNothing(pobjOrden.Precio) Or pobjOrden.Precio = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Precio", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo de la precio con garantia
                        If IsNothing(pobjOrden.PrecioMaximoMinimo) Or pobjOrden.PrecioMaximoMinimo = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa registro garantia", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo tasa de comprador vendedor
                        If IsNothing(pobjOrden.TasaRegistro) Or pobjOrden.TasaRegistro = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa registro", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If

                        If (IsNothing(pobjOrden.TasaCliente) Or pobjOrden.TasaCliente = 0) And
                            (IsNothing(pobjOrden.Comision) Or pobjOrden.Comision = 0) And
                            (IsNothing(pobjOrden.ValorComision) Or pobjOrden.ValorComision = 0) Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa cliente o Comisión o Valor comisión", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_SIMULTANEA Then
                        'Valida el campo de la cantidad
                        If IsNothing(pobjOrden.Cantidad) Or pobjOrden.Cantidad = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Nominal", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo de la precio
                        If IsNothing(pobjOrden.Precio) Or pobjOrden.Precio = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Precio", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo de la precio con garantia
                        If IsNothing(pobjOrden.PrecioMaximoMinimo) Or pobjOrden.PrecioMaximoMinimo = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa registro garantia", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo tasa de comprador vendedor
                        If IsNothing(pobjOrden.TasaRegistro) Or pobjOrden.TasaRegistro = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa registro", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If

                        If (IsNothing(pobjOrden.TasaCliente) Or pobjOrden.TasaCliente = 0) And
                            (IsNothing(pobjOrden.Comision) Or pobjOrden.Comision = 0) And
                            (IsNothing(pobjOrden.ValorComision) Or pobjOrden.ValorComision = 0) Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa cliente o Comisión o Valor comisión", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_TTV Or
                           pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Then
                        'Valida el campo de la cantidad
                        If IsNothing(pobjOrden.Cantidad) Or pobjOrden.Cantidad = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Cantidad", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo de la cantidad
                        If IsNothing(pobjOrden.Precio) Or pobjOrden.Precio = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Precio", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo tasa de comprador vendedor
                        If IsNothing(pobjOrden.TasaRegistro) Or pobjOrden.TasaRegistro = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa registro", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'Valida el campo tasa cliente
                        If IsNothing(pobjOrden.TasaCliente) Or pobjOrden.TasaCliente = 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Tasa cliente", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If
                End If

                'Validar si se ha seleccionado por lo menos una liquidación probable, sea Acciones o RF
                'Julian Rincón (Alcuadrado S.A)
                If Not IsNothing(ListaLiquidacionesSAEAcciones) Then
                    If (logNuevoRegistro) Or (Editando And logEliminarAsociacion) Or (Editando And logDuplicarRegistro) Then
                        If pobjOrden.Clase = CLASE_ACCIONES And ListaLiquidacionesSAEAcciones.Count = 0 And pobjOrden.TipoOrden = TIPOORDEN_DIRECTA Then
                            strMensajeValidacion = String.Format("{0}{1} - Debe seleccionar por lo menos una liquidación probable", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If

                End If

                If Not IsNothing(ListaLiquidacionesSAERentaFija) Then
                    If (logNuevoRegistro) Or (Editando And logEliminarAsociacion) Or (Editando And logDuplicarRegistro) Then
                        If pobjOrden.Clase = CLASE_RENTAFIJA And ListaLiquidacionesSAERentaFija.Count = 0 And pobjOrden.TipoOrden = TIPOORDEN_DIRECTA Then
                            strMensajeValidacion = String.Format("{0}{1} - Debe seleccionar por lo menos una liquidación probable", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If

                End If


            Else
                mostrarMensaje("Señor Usuario, la orden tiene que tener un dato como minimo.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            End If

            If logTieneError Then

                strMensajeValidacion = String.Format("Señor usuario los siguientes campos son requeridos:{0}", strMensajeValidacion)
                mostrarMensaje(strMensajeValidacion, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Return False
            Else
                'Valida la fecha de vigencia no sea mayor al parametro de diascancelación
                'Valida la fecha de vigencia no sea mayor al parametro de diascancelación
                Dim diasCancelacion As Integer = ObtenerDiasCancelacion()

                FechaCancelacionValidada = CalculoFechaCancelacionConDiasNoHabil(pobjOrden.FechaOrden, diasCancelacion)

                If pobjOrden.FechaVigencia.Value.Date > FechaCancelacionValidada And pobjOrden.Duracion = "C" Then
                    mostrarMensaje(String.Format("La fecha de vigencia no puede ser una fecha mayor a ({0:dd/MM/yyyy}) ya que los días maximos de cancelación de la orden son ({1}).", DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, diasCancelacion, dtmFechaServidor.Date)), diasCancelacion), Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    Return False
                End If

                'If pobjOrden.FechaVigencia.Value.Date > DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, diasCancelacion, dtmFechaServidor.Date)) Then
                '    mostrarMensaje(String.Format("La fecha de vigencia no puede ser una fecha mayor a ({0:dd/MM/yyyy}) ya que los días maximos de cancelación de la orden son ({1}).", DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, diasCancelacion, dtmFechaServidor.Date)), diasCancelacion), Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                '    Return False
                'End If

                If pobjOrden.FechaRecepcion > dtmFechaServidor Then
                    mostrarMensaje("La fecha ó hora LEO de ingreso es mayor que la fecha ó hora del sistema.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    Return False
                End If

                'Valida la distribución de comisiones
                Dim objListaReceptores As List(Of OyDPLUSOrdenesBolsa.ReceptoresOrden)

                If logOrdenCruzada Then
                    objListaReceptores = _ListaDistribucionComisionCruzada
                Else
                    objListaReceptores = _ListaReceptoresOrdenes
                End If

                If Not IsNothing(objListaReceptores) Then
                    Dim sumarPorcentaje As Double = 0
                    Dim intNumeroLideres As Integer = 0
                    Dim logReceptorVacion As Boolean = False
                    For Each li In objListaReceptores
                        If li.Lider Then
                            intNumeroLideres += 1
                        End If
                        If String.IsNullOrEmpty(li.IDReceptor) Then
                            logReceptorVacion = True
                        End If
                        sumarPorcentaje += li.Porcentaje
                    Next

                    If logReceptorVacion Then
                        strMensajeValidacion = "Hay algunos registros de los receptores de la distrubución de comisiones que se encuentran vacios."
                        logTieneError = True
                    End If

                    If intNumeroLideres = 0 Then
                        strMensajeValidacion = "Tiene que haber como minimo un receptor lider en la distribución de comisiones"
                        logTieneError = True
                    ElseIf intNumeroLideres > 1 Then
                        strMensajeValidacion = "Solo puede haber un receptor lider en la distribución de comisiones"
                        logTieneError = True
                    Else
                        If sumarPorcentaje <> 100 Then
                            strMensajeValidacion = "El porcentaje en la distribución de comisiones debe de sumar 100%"
                            logTieneError = True
                        End If
                    End If
                Else
                    strMensajeValidacion = "Debe de ingresar la distribución de comisiones"
                    IsBusy = False
                    logTieneError = True
                End If

                If logTieneError Then
                    mostrarMensaje(strMensajeValidacion, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    Return False
                Else
                    'Valida los receptores de la orden cruzadas
                    If pobjOrden.OrdenCruzadaReceptor Then
                        If Not IsNothing(_ListaReceptoresOrdenesCruzada) Then
                            Dim strReceptoresRepetidos As String = String.Empty

                            For Each li In _ListaReceptoresOrdenesCruzada
                                If String.IsNullOrEmpty(li.IDReceptor) Then
                                    strMensajeValidacion = "Hay algunos registros de los receptores de la orden cruzada que se encuentran vacios."
                                    logTieneError = True
                                    Exit For
                                End If
                                If _ListaReceptoresOrdenesCruzada.Where(Function(i) i.IDReceptor = li.IDReceptor).Count > 1 Then
                                    If String.IsNullOrEmpty(strReceptoresRepetidos) Then
                                        strReceptoresRepetidos = li.NombreReceptor
                                    Else
                                        strReceptoresRepetidos = String.Format("{0}-{1}", strReceptoresRepetidos, li.NombreReceptor)
                                    End If
                                End If
                            Next

                            If Not String.IsNullOrEmpty(strReceptoresRepetidos) Then
                                strMensajeValidacion = String.Format("Hay algunos registros de los receptores de la orden cruzada que se encuentran repetidos: {0}", strReceptoresRepetidos)
                                logTieneError = True
                            End If

                            'Valida sí la orden es cruzada que se seleccione un receptor diferente al de la orden
                            If _ListaReceptoresOrdenesCruzada.Where(Function(i) i.IDReceptor <> pobjOrden.Receptor).Count = 0 Then
                                strMensajeValidacion = String.Format("Debe de seleccionar al menos un receptor diferente al que ingreso la orden en receptores de la orden cruzada.")
                                logTieneError = True
                            End If
                        Else
                            strMensajeValidacion = "Debe de ingresar al menos un receptor para la orden cruzada."
                            IsBusy = False
                            logTieneError = True
                        End If
                    End If
                End If

                If logTieneError Then
                    mostrarMensaje(strMensajeValidacion, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    Return False
                Else
                    'Valida el valor de la orden que no sea cero.
                    If IsNothing(pobjOrden.ValorOrden) And pobjOrden.ValorOrden = 0 Then
                        strMensajeValidacion = String.Format("{0}{1} - El valor de la orden no puede estar en cero, ingrese todos los datos para que sea calculado el valor de la orden.", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If
                End If

                If logTieneError Then
                    mostrarMensaje(strMensajeValidacion, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    Return False
                Else
                    'Valida los valores negativos.
                    If pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_ACCIONES Or pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_ADR Then
                        'Valida el campo de la cantidad
                        If pobjOrden.Cantidad < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La cantidad no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Precio < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El precio no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.PrecioMaximoMinimo < 0 Then
                            If pobjOrden.TipoOperacion = TIPOOPERACION_COMPRA Then
                                strMensajeValidacion = String.Format("{0}{1} - El precio maximo no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            Else
                                strMensajeValidacion = String.Format("{0}{1} - El precio minimo no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            End If
                            logTieneError = True
                        End If
                        If pobjOrden.Comision < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La comisión no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'If pobjOrden.ValorComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El valor de comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        'If pobjOrden.IvaComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El IVA comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.ValorCaptacionGiro < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor bruto operación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorOrden < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor neto operación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If MostrarMensajePreciosTick = Visibility.Visible Then
                            strMensajeValidacion = String.Format("{0}{1} - {2}", strMensajeValidacion, vbCrLf, MensajePreciosTick)
                            logTieneError = True
                        End If
                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_RENTAFIJA Then
                        If pobjOrden.Cantidad < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El valor Nominal no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Precio < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Precio registro no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.TasaRegistro < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Tasa registro no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.TasaCliente < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Tasa neta cliente no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Comision < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La comisión no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'If pobjOrden.ValorComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El valor de comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        'If pobjOrden.IvaComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El IVA comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.ValorCaptacionGiro < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor bruto operación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorOrden < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor neto operación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_REPO Then
                        If pobjOrden.DiasCumplimiento <= 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La fecha de cumplimiento no puede ser menor o igual a la fecha de la orden.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Cantidad < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Cantidad no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Precio < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Precio registro no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Castigo < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Castigo no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.TasaRegistro < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Tasa registro no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.TasaCliente < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Tasa neta cliente no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Comision < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La comisión no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'If pobjOrden.ValorComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El valor de comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        'If pobjOrden.IvaComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El IVA comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.ValorCaptacionGiro < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor captación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorOrden < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor neto operación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorFuturoRepo < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor futuro no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_REPOC Then
                        'Valida el campo de la dias repo
                        'If pobjOrden.DiasCumplimiento <= 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - La fecha de cumplimiento no puede ser menor o igual a la fecha de la orden.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.Cantidad < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor nominal no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Precio < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Precio registro no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.PrecioMaximoMinimo < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Tasa registro garantía no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'If pobjOrden.TasaRegistro < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - La Tasa operación no puede ser negativa.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        'If pobjOrden.TasaCliente < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - La Tasa neta no puede ser negativa.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.Comision < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La comisión no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'If pobjOrden.ValorComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El valor de comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        'If pobjOrden.IvaComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El IVA comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.ValorCaptacionGiro < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor captación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorOrden < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor neto operación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorFuturoRepo < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor futuro no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_SIMULTANEA Then
                        'Valida el campo de la dias repo
                        'If pobjOrden.DiasCumplimiento <= 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - La fecha de cumplimiento no puede ser menor o igual a la fecha de la orden.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.Cantidad < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor nominal no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Precio < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Precio registro no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.PrecioMaximoMinimo < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Tasa registro garantía no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'If (pobjOrden.TipoNegocio <> TIPONEGOCIO_SIMULTANEA And pobjOrden.TipoNegocio <> TIPONEGOCIO_RENTAFIJA) And pobjOrden.TasaRegistro < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - La Tasa operación no puede ser negativa.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        'If (pobjOrden.TipoNegocio <> TIPONEGOCIO_SIMULTANEA And pobjOrden.TipoNegocio <> TIPONEGOCIO_RENTAFIJA) And pobjOrden.TasaCliente < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - La Tasa neta no puede ser negativa.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.Comision < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La comisión no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'If pobjOrden.ValorComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El valor de comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        'If pobjOrden.IvaComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El IVA comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.ValorCaptacionGiro < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor captación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorOrden < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor neto operación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorFuturoRepo < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor futuro no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    ElseIf pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_TTV Or
                           pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Then
                        If pobjOrden.Cantidad < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Cantidad no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Precio < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Precio registro no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.PrecioMaximoMinimo < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El % Garantia no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.TasaRegistro < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Tasa operación no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.TasaCliente < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La Tasa neta no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.Comision < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - La comisión no puede ser negativa.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        'If pobjOrden.ValorComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El valor de comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        'If pobjOrden.IvaComision < 0 Then
                        '    strMensajeValidacion = String.Format("{0}{1} - El IVA comisión no puede ser negativo.", strMensajeValidacion, vbCrLf)
                        '    logTieneError = True
                        'End If
                        If pobjOrden.ValorCaptacionGiro < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor operación no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorAccion < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor garantía no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorOrden < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor interes no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                        If pobjOrden.ValorFuturoRepo < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - El Valor futuro no puede ser negativo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If
                End If

                If logTieneError Then
                    mostrarMensaje(strMensajeValidacion, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    Return False
                Else
                    'Valida los precios.
                    If pobjOrden.TipoNegocio = TIPONEGOCIO_ACCIONES Or
                        pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_ADR Then
                        If pobjOrden.TipoOperacion = TIPOOPERACION_COMPRA Then
                            If pobjOrden.PrecioMaximoMinimo > 0 Then
                                If pobjOrden.Precio > pobjOrden.PrecioMaximoMinimo Then
                                    strMensajeValidacion = String.Format("{0}{1} - Precio no puede ser mayor que el precio maximo", strMensajeValidacion, vbCrLf)
                                    logTieneError = True
                                End If
                            End If
                        Else
                            If pobjOrden.PrecioMaximoMinimo > 0 Then
                                If pobjOrden.Precio < pobjOrden.PrecioMaximoMinimo Then
                                    strMensajeValidacion = String.Format("{0}{1} - Precio no puede ser menor que el precio minimo", strMensajeValidacion, vbCrLf)
                                    logTieneError = True
                                End If
                            End If
                        End If
                    End If

                    If pobjOrden.FechaVigencia <= dtmFechaServidor And pobjOrden.TipoNegocio <> TIPONEGOCIO_ACCIONESOF And pobjOrden.TipoNegocio <> TIPONEGOCIO_RENTAFIJAOF Then
                        'Santiago Alexander Vergara Orrego - Mayo 27/2014 - Se añade la condición para que sólo se valide la fecha de vigencia cuando el tipo de negocio no sea de otras firmas
                        strMensajeValidacion = String.Format("{0}{1} - La fecha de vigencia de la orden no puede ser menor a la fecha actual.", strMensajeValidacion, vbCrLf)
                        logTieneError = True
                    End If

                    If Not IsNothing(_ListaReceptoresOrdenes) Then
                        If _ListaReceptoresOrdenes.Count > intCantidadMaximaDetalles Then
                            strMensajeValidacion = String.Format("{0}{1} - Señor Usuario, la cantidad máxima de registros permitida por detalle es ({2}), por favor valide el detalle de receptores orden.", strMensajeValidacion, vbCrLf, intCantidadMaximaDetalles)
                            logTieneError = True
                        End If
                    End If

                    If Not IsNothing(_ListaReceptoresOrdenesCruzada) Then
                        If _ListaReceptoresOrdenesCruzada.Count > intCantidadMaximaDetalles Then
                            strMensajeValidacion = String.Format("{0}{1} - Señor Usuario, la cantidad máxima de registros permitida por detalle es ({2}), por favor valide el detalle de receptores orden cruzada.", strMensajeValidacion, vbCrLf, intCantidadMaximaDetalles)
                            logTieneError = True
                        End If
                    End If

                    If pobjOrden.TipoNegocio = TIPONEGOCIO_TTV Or pobjOrden.TipoNegocio = TIPONEGOCIO_TTVC Then
                        If pobjOrden.FechaCumplimiento.Value.Date < pobjOrden.FechaSalida.Value.Date Then
                            strMensajeValidacion = String.Format("{0}{1} - La fecha de salida no puede ser mayor a la fecha de cumplimiento de la orden no puede ser menor a la fecha actual.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If

                    If pobjOrden.Clase = CLASE_ACCIONES And pobjOrden.Clasificacion = "OPA" Then
                        If pobjOrden.ExistePreacuerdo = "" Then
                            strMensajeValidacion = String.Format("{0}{1} - Debe escoger un valor en Existe Preacuerdo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If

                    If pobjOrden.Clase = CLASE_ACCIONES And pobjOrden.Clasificacion = "OPA" Then
                        If pobjOrden.VendeTodo = "" Then
                            strMensajeValidacion = String.Format("{0}{1} - Debe escoger un valor en Vende todo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If

                    If pobjOrden.Clase = CLASE_ACCIONES And pobjOrden.Clasificacion = "OPA" Then
                        If pobjOrden.PorcentajePagoEfectivo Is Nothing Then
                            strMensajeValidacion = String.Format("{0}{1} - Debe digitar un porcentaje pago efectivo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If

                    If pobjOrden.Clase = CLASE_ACCIONES And pobjOrden.Clasificacion = "OPA" Then
                        If pobjOrden.PorcentajePagoEfectivo < 0 Then
                            strMensajeValidacion = String.Format("{0}{1} - Debe digitar un porcentaje entre 0 y 100 en el pago efectivo.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If

                    If pobjOrden.TipoNegocio = TIPONEGOCIO_REPO Or pobjOrden.TipoNegocio = TIPONEGOCIO_REPOC Then
                        If pobjOrden.FechaCumplimiento.Value.Date < pobjOrden.FechaSalida.Value.Date Then
                            strMensajeValidacion = String.Format("{0}{1} - La fecha de salida no puede ser mayor a la fecha de cumplimiento de la orden no puede ser menor a la fecha actual.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If
                    If pobjOrden.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                        If pobjOrden.FechaCumplimiento.Value.Date < pobjOrden.FechaSalida.Value.Date Then
                            strMensajeValidacion = String.Format("{0}{1} - La fecha de salida no puede ser mayor a la fecha de cumplimiento de la orden no puede ser menor a la fecha actual.", strMensajeValidacion, vbCrLf)
                            logTieneError = True
                        End If
                    End If

                    If logTieneError Then
                        mostrarMensaje(strMensajeValidacion, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Return False
                    Else
                        If pobjOrden.TipoNegocio = TIPONEGOCIO_REPO Or
                            pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_REPOC Or
                            pobjOrden.TipoNegocio = TIPONEGOCIO_SIMULTANEA Or
                            pobjOrden.TipoNegocio = TIPONEGOCIO_TTV Or
                            pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Then
                            If MostrarMensajeTasas = Visibility.Visible Then
                                strMensajeValidacion = String.Format("{0}{1} - Señor Usuario, {2}.", strMensajeValidacion, vbCrLf, MensajeTasas)
                                logTieneError = True
                            End If
                            'If pobjOrden.TipoOperacion = TIPOOPERACION_COMPRA Then
                            '    If pobjOrden.TipoNegocio = TIPONEGOCIO_TTV Or
                            '            pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Then
                            '        If pobjOrden.TasaCliente < pobjOrden.TasaRegistro Then
                            '            strMensajeValidacion = String.Format("{0}{1} - Señor Usuario, la tasa neta no puede ser menor a la tasa operación.", strMensajeValidacion, vbCrLf, intCantidadMaximaDetalles)
                            '            logTieneError = True
                            '        End If
                            '    Else
                            '        If pobjOrden.TasaCliente > pobjOrden.TasaRegistro Then
                            '            strMensajeValidacion = String.Format("{0}{1} - Señor Usuario, la tasa cliente no puede ser mayor a la tasa registro.", strMensajeValidacion, vbCrLf, intCantidadMaximaDetalles)
                            '            logTieneError = True
                            '        End If
                            '    End If
                            'ElseIf pobjOrden.TipoOperacion = TIPOOPERACION_VENTA Then
                            '    If pobjOrden.TipoNegocio = TIPONEGOCIO_TTV Or
                            '           pobjOrden.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Then
                            '        If pobjOrden.TasaCliente > pobjOrden.TasaRegistro Then
                            '            strMensajeValidacion = String.Format("{0}{1} - Señor Usuario, la tasa neta no puede ser mayor a la tasa operación.", strMensajeValidacion, vbCrLf, intCantidadMaximaDetalles)
                            '            logTieneError = True
                            '        End If
                            '    Else
                            '        If pobjOrden.TasaCliente < pobjOrden.TasaRegistro Then
                            '            strMensajeValidacion = String.Format("{0}{1} - Señor Usuario, la tasa cliente no puede ser menor a la tasa registro.", strMensajeValidacion, vbCrLf, intCantidadMaximaDetalles)
                            '            logTieneError = True
                            '        End If
                            '    End If

                            'End If
                        End If

                        If logTieneError Then
                            mostrarMensaje(strMensajeValidacion, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            Return False
                        Else
                            strMensajeValidacion = String.Empty
                            Return True
                        End If
                    End If

                End If

            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar la valición de la orden.", Me.ToString, "ValidarGuardadoOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            Return False
        End Try
    End Function

    Private Function ValidarCampoEnDiccionario(ByVal pstrOpcionDiccionario As String, ByVal pstrValor As String) As Boolean
        Dim logRetorno As Boolean = False
        Try
            If Not IsNothing(_DiccionarioCombosOYDPlus) Then
                If _DiccionarioCombosOYDPlus.ContainsKey(pstrOpcionDiccionario) Then
                    If Not IsNothing(_DiccionarioCombosOYDPlus(pstrOpcionDiccionario)) Then
                        If _DiccionarioCombosOYDPlus(pstrOpcionDiccionario).Where(Function(i) i.Retorno.ToUpper = pstrValor.ToUpper).Count > 0 Then
                            logRetorno = True
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar la valición de que el valor exista en el diccionario.", Me.ToString, "ValidarCampoEnDiccionario", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
        Return logRetorno
    End Function

    ''' <summary>
    ''' Desarrollado por Juan David Correa
    ''' Se crea un metodo para ubicarse en la opción o campo que se encuentra vacio.
    ''' Fecha 27 de agosto del 2012
    ''' </summary>
    ''' <param name="pViewOrdenes"></param>
    ''' <param name="pstrOpcion"></param>
    ''' <remarks></remarks>
    Public Sub BuscarControlValidacion(ByVal pViewOrdenes As OrdenesPLUSView, ByVal pstrOpcion As String)
        Try
            'If Not IsNothing(pViewOrdenes) Then
            '    If TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is TabItem Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), TabItem).IsSelected = True
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is TextBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), TextBox).Focus()
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is ComboBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), ComboBox).Focus()
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is C1.Silverlight.C1ComboBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), C1.Silverlight.C1ComboBox).Focus()
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is A2Utilidades.A2NumericBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), A2Utilidades.A2NumericBox).Focus()
            '    End If
            'End If
            If Not IsNothing(pViewOrdenes) Then
                If TypeOf pViewOrdenes.FindName(pstrOpcion) Is TabItem Then
                    CType(pViewOrdenes.FindName(pstrOpcion), TabItem).IsSelected = True
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is TextBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), TextBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is ComboBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), ComboBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is Telerik.Windows.Controls.RadComboBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), Telerik.Windows.Controls.RadComboBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is A2Utilidades.A2NumericBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), A2Utilidades.A2NumericBox).Focus()
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al buscar el control dentro de la orden.", Me.ToString, "BuscarControlValidacion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub
    Public Sub BuscarControlValidacion_NEW(ByVal pViewOrdenes As FormaOrdenesView, ByVal pstrOpcion As String)
        Try
            'If Not IsNothing(pViewOrdenes) Then
            '    If TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is TabItem Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), TabItem).IsSelected = True
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is TextBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), TextBox).Focus()
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is ComboBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), ComboBox).Focus()
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is C1.Silverlight.C1ComboBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), C1.Silverlight.C1ComboBox).Focus()
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is A2Utilidades.A2NumericBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), A2Utilidades.A2NumericBox).Focus()
            '    End If
            'End If
            If Not IsNothing(pViewOrdenes) Then
                If TypeOf pViewOrdenes.FindName(pstrOpcion) Is TabItem Then
                    CType(pViewOrdenes.FindName(pstrOpcion), TabItem).IsSelected = True
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is TextBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), TextBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is ComboBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), ComboBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is Telerik.Windows.Controls.RadComboBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), Telerik.Windows.Controls.RadComboBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is A2Utilidades.A2NumericBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), A2Utilidades.A2NumericBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is BuscadorEspecie Then
                    CType(pViewOrdenes.FindName(pstrOpcion), BuscadorEspecie).Focus()
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al buscar el control dentro de la orden.", Me.ToString, "BuscarControlValidacion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub
    ''' <summary>
    ''' Desarrollado por Juan David Correa
    ''' Se crea un metodo para ubicarse en la opción o campo que se encuentra vacio.
    ''' Fecha 27 de agosto del 2012
    ''' </summary>
    ''' <param name="pViewOrdenes"></param>
    ''' <param name="pstrOpcion"></param>
    ''' <remarks></remarks>
    Public Sub BuscarControlValidacionCruzada(ByVal pViewOrdenes As OrdenesCruzadasOYDPLUSView, ByVal pstrOpcion As String)
        Try
            'If Not IsNothing(pViewOrdenes) Then
            '    If TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is TabItem Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), TabItem).IsSelected = True
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is TextBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), TextBox).Focus()
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is ComboBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), ComboBox).Focus()
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is C1.Silverlight.C1ComboBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), C1.Silverlight.C1ComboBox).Focus()
            '    ElseIf TypeOf pViewOrdenes.df.FindName(pstrOpcion) Is A2Utilidades.A2NumericBox Then
            '        CType(pViewOrdenes.df.FindName(pstrOpcion), A2Utilidades.A2NumericBox).Focus()
            '    End If
            'End If
            If Not IsNothing(pViewOrdenes) Then
                If TypeOf pViewOrdenes.FindName(pstrOpcion) Is TabItem Then
                    CType(pViewOrdenes.FindName(pstrOpcion), TabItem).IsSelected = True
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is TextBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), TextBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is ComboBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), ComboBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is Telerik.Windows.Controls.RadComboBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), Telerik.Windows.Controls.RadComboBox).Focus()
                ElseIf TypeOf pViewOrdenes.FindName(pstrOpcion) Is A2Utilidades.A2NumericBox Then
                    CType(pViewOrdenes.FindName(pstrOpcion), A2Utilidades.A2NumericBox).Focus()
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al buscar el control dentro de la orden.", Me.ToString, "BuscarControlValidacion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para consultar los receptores de la orden
    ''' </summary>
    ''' <param name="pstrClaseOrden"></param>
    ''' <param name="pstrTipo"></param>
    ''' <param name="pintNroOrden"></param>
    ''' <param name="pintVersion"></param>
    ''' <param name="pstrUserState"></param>
    ''' <remarks></remarks>
    Private Sub consultarReceptoresOrden(ByVal pstrClaseOrden As String, ByVal pstrTipo As String, ByVal pintNroOrden As Integer, ByVal pintVersion As Integer, ByVal pstrEstado As String, Optional ByVal pstrUserState As String = "")
        Try
            If Not IsNothing(dcProxy.ReceptoresOrdens) Then
                dcProxy.ReceptoresOrdens.Clear()
            End If
            dcProxy.Load(dcProxy.Traer_ReceptoresOrdenes_OrdenQuery(pstrClaseOrden, pstrTipo, pintNroOrden, pintVersion, Program.Usuario, pstrEstado, _OrdenOYDPLUSSelected.TipoNegocio, Program.HashConexion), AddressOf TerminoTraerReceptoresOrdenes, "")
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al buscar los receptores de la orden.", Me.ToString, "consultarReceptoresOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para consultar los receptores del comitente seleccionado.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 28 de agosto del 2012
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub consultarReceptoresComitente(ByVal pstrClaseOrden As String, ByVal pstrTipo As String, ByVal pstrComitente As String, Optional ByVal pstrUserState As String = "")
        Try
            If Not IsNothing(dcProxy.ReceptoresOrdens) Then
                dcProxy.ReceptoresOrdens.Clear()
            End If

            Dim strClienteABuscar = Right(Space(17) & pstrComitente, MINT_LONG_MAX_CODIGO_OYD)

            dcProxy.Load(dcProxy.Traer_ReceptoresOrdenes_ClienteQuery(pstrClaseOrden, pstrTipo, strClienteABuscar, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerReceptoresOrdenes, pstrUserState)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al buscar los receptores del comitente.", Me.ToString, "consultarReceptoresComitente", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para consultar las ordenes cruzadas de una orden.
    ''' Desarrollado por Juan David Correa
    ''' Fecha 18 de marzo del 2013
    ''' </summary>
    ''' <param name="pintIDOrden"></param>
    ''' <param name="plogOrdenPorAprobar"></param>
    ''' <param name="pstrUserState"></param>
    ''' <remarks></remarks>
    Private Sub ConsultarReceptoresOrdenCruzada(ByVal pintIDOrden As Integer, ByVal plogOrdenPorAprobar As Boolean, Optional ByVal pstrUserState As String = "")
        Try
            If Not IsNothing(dcProxy.tblReceptoresOrdenesPorCruzars) Then
                dcProxy.tblReceptoresOrdenesPorCruzars.Clear()
            End If

            dcProxy.Load(dcProxy.OYDPLUS_ConsultarReceptoresOrdenesPorCruzarQuery(pintIDOrden, plogOrdenPorAprobar, Program.Usuario, Program.HashConexion), AddressOf TerminoTraerReceptoresOrdenesCruzadas, pstrUserState)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al buscar los receptores seleccionados en una orden cruzada.", Me.ToString, "consultarReceptoresOrdenCruzada", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Carcula la fecha de vigencia de la orden dependiendo de la duración.
    ''' Desarrollado por Juan David Correa
    ''' Fecha Agosto 29 del 2012
    ''' </summary>
    ''' <remarks></remarks>
    Public Async Sub CalcularFechaVigenciaOrden(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If Not IsNothing(pobjOrdenSelected) Then
                If Not IsNothing(pobjOrdenSelected.Duracion) Then
                    If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONESOF Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJAOF Then
                        pobjOrdenSelected.Duracion = Nothing
                        HabilitarFechaVigencia = True
                        HabilitarHoraVigencia = False
                        pobjOrdenSelected.Dias = 1
                        pobjOrdenSelected.FechaVigencia = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, 1, dtmFechaServidor.Date))
                    ElseIf pobjOrdenSelected.Duracion.ToUpper = DURACION_DIA Or
                        pobjOrdenSelected.Duracion.ToUpper = DURACION_INMEDIATA Or
                        pobjOrdenSelected.Duracion.ToUpper = DURACION_SESSION Then
                        HabilitarFechaVigencia = False
                        HabilitarHoraVigencia = False
                        pobjOrdenSelected.Dias = 1
                        logCalcularDiasPlazo = False
                        pobjOrdenSelected.FechaVigencia = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, 1, dtmFechaServidor.Date))
                        logCalcularDiasPlazo = True
                    ElseIf pobjOrdenSelected.Duracion.ToUpper = DURACION_HASTAHORA Then
                        HabilitarFechaVigencia = False
                        If logEditarRegistro Or logNuevoRegistro = True Then
                            HabilitarHoraVigencia = True
                        Else
                            HabilitarHoraVigencia = False
                        End If

                        pobjOrdenSelected.Dias = 1
                        logCalcularDiasPlazo = False
                        If pobjOrdenSelected.IDNroOrden = 0 Then
                            pobjOrdenSelected.FechaVigencia = DateAdd(DateInterval.Hour, 1, dtmFechaServidor)
                        End If
                        logCalcularDiasPlazo = True
                    ElseIf pobjOrdenSelected.Duracion.ToUpper = DURACION_CANCELACION Then
                        'Obtener los dias de cancelación de la Orden.
                        Dim DiasCancelacion As Integer = 0
                        DiasCancelacion = ObtenerDiasCancelacion()

                        HabilitarFechaVigencia = False
                        HabilitarHoraVigencia = False

                        ' pobjOrdenSelected.FechaVigencia = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, DiasCancelacion, dtmFechaServidor.Date))
                        pobjOrdenSelected.Dias = DiasCancelacion
                        pobjOrdenSelected.FechaVigencia = CalculoFechaCancelacionConDiasNoHabil(pobjOrdenSelected.FechaOrden, DiasCancelacion)
                        ' CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_ORDEN, pobjOrdenSelected, DiasCancelacion)
                    ElseIf pobjOrdenSelected.Duracion.ToUpper = DURACION_FECHA Then
                        HabilitarFechaVigencia = True
                        HabilitarHoraVigencia = False
                        logCalcularDiasPlazo = True

                        If pobjOrdenSelected.IDNroOrden = 0 Then
                            pobjOrdenSelected.Dias = 1
                            pobjOrdenSelected.FechaVigencia = DateAdd(DateInterval.Hour, 1, dtmFechaServidor)
                        Else
                            Me.CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_ORDEN, _OrdenOYDPLUSSelected, -1)
                        End If

                    End If
                Else
                    If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONESOF Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJAOF Then
                        HabilitarFechaVigencia = True
                        HabilitarHoraVigencia = False
                        'pobjOrdenSelected.Dias = 1
                        'pobjOrdenSelected.FechaVigencia = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, 1, dtmFechaServidor.Date))
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al calcular la fecha de vigencia de la orden.", Me.ToString, "CalcularFechaVigenciaOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Function ObtenerDiasCancelacion() As Integer
        Try
            Dim Dias As Integer = 0

            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta("DIASCANCELACION").Count > 0 Then
                    Try
                        Dias = Convert.ToInt32(DiccionarioCombosOYDPlusCompleta("DIASCANCELACION").FirstOrDefault.Retorno)
                    Catch ex As Exception
                        Dias = 30
                    End Try
                End If
            Else
                Dias = 30
            End If

            Return Dias
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar los días de vigencia", Me.ToString(), "ObtenerDiasCancelacion", Program.TituloSistema, Program.Maquina, ex)
            Return 30
        End Try
    End Function

    ''' <summary>
    ''' Metodo para calcular los dias de vigencia de la orden.
    ''' Desarrollado por Juan David Correa
    ''' Fecha Agosto 29 del 2012
    ''' </summary>
    ''' <param name="pstrTipoCalculo"></param>
    ''' <param name="pintDias"></param>
    ''' <param name="plogGuardarOrden"></param>
    ''' <remarks></remarks>
    Public Sub CalcularDiasOrdenOYDPLUS(ByVal pstrTipoCalculo As String, ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS, Optional ByVal pintDias As Integer = -1, Optional ByVal plogGuardarOrden As Boolean = False, Optional ByVal plogNuevoRegistro As Boolean = False)
        Try
            If IsNothing(pobjOrdenSelected) Then
                Exit Sub
            End If

            If (logNuevoRegistro Or logEditarRegistro) And pstrTipoCalculo.ToLower <> MSTR_CALCULAR_DIAS_PLAZO Then
                If Editando And pobjOrdenSelected.FechaVigencia <= dtmFechaServidor And pobjOrdenSelected.TipoNegocio <> TIPONEGOCIO_ACCIONESOF And pobjOrdenSelected.TipoNegocio <> TIPONEGOCIO_RENTAFIJAOF Then
                    'Santiago Alexander Vergara Orrego - Mayo 27/2014 - Se añade la condición para que sólo se valide la fecha de vigencia cuando el tipo de negocio no sea de otras firmas
                    mostrarMensaje("La fecha de vigencia no puede ser menor a la fecha actual." & vbNewLine & vbNewLine & "Por favor modifique la fecha de vigencia de la orden.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    IsBusy = False
                    IsBusyCruzada = False
                    Exit Sub
                ElseIf Editando And Not IsNothing(pobjOrdenSelected.FechaEmision) And Not IsNothing(pobjOrdenSelected.FechaVencimiento) Then
                    If pobjOrdenSelected.FechaVencimiento < pobjOrdenSelected.FechaEmision Then
                        mostrarMensaje("La fecha de emisión del título no puede ser mayor a la fecha de vencimiento." & vbNewLine & vbNewLine & "Por favor modifique la fecha de emisión o la fecha de vencimiento del título.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        IsBusy = False
                        IsBusyCruzada = False
                        Exit Sub
                    End If
                End If
            End If

            'IsBusy = True

            dcProxy.ValidarFechas.Clear()
            Dim FechaInicial As Date = dtmFechaServidor.Date
            Dim FechaFinal As Date = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, 1, dtmFechaServidor.Date))

            If pintDias <= 0 Then
                ' Calcular los días al vencimiento de la orden a partir de la fecha de elaboración y vencimiento
                If pstrTipoCalculo.ToLower = MSTR_CALCULAR_DIAS_TITULO Then
                    FechaInicial = pobjOrdenSelected.FechaEmision.Value.Date
                    FechaFinal = pobjOrdenSelected.FechaVencimiento.Value.Date

                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(pstrTipoCalculo, FechaInicial, FechaFinal, -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_CALCULAR_DIAS)
                ElseIf pstrTipoCalculo.ToLower = MSTR_CALCULAR_DIAS_PLAZO Then
                    If Not IsNothing(pobjOrdenSelected.TipoNegocio) And Not IsNothing(pobjOrdenSelected.FechaOrden) And Not IsNothing(pobjOrdenSelected.FechaCumplimiento) Then
                        If (pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC) Or (pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC) Or (pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA) Then
                            If Not IsNothing(pobjOrdenSelected.FechaSalida) Then
                                FechaInicial = pobjOrdenSelected.FechaSalida.Value.Date
                            Else
                                Exit Sub
                            End If
                        Else
                            FechaInicial = pobjOrdenSelected.FechaOrden.Value.Date
                        End If

                        If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Then
                            pstrTipoCalculo = "vencimiento_rentafija"
                        ElseIf pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                            pstrTipoCalculo = "vencimiento_acciones"
                        End If

                        FechaFinal = pobjOrdenSelected.FechaCumplimiento.Value.Date
                        'logDiasCumplimiento = False
                        dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(pstrTipoCalculo, FechaInicial, FechaFinal, -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_CALCULAR_DIAS_PLAZO)


                    End If
                Else
                    If plogNuevoRegistro Then
                        FechaInicial = dtmFechaServidor
                        FechaFinal = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, 1, dtmFechaServidor.Date))
                    Else
                        If Not IsNothing(pobjOrdenSelected) Then
                            FechaInicial = pobjOrdenSelected.FechaOrden
                            FechaFinal = pobjOrdenSelected.FechaVigencia.Value.Date
                        Else
                            FechaInicial = dtmFechaServidor
                            FechaFinal = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, 1, dtmFechaServidor.Date))
                        End If
                    End If

                    If logOrdenCruzada Then
                        _OrdenCruzadaSelected.Dias = DateDiff(DateInterval.Day, FechaInicial.Date, FechaFinal.Date) + 1
                    Else
                        _OrdenOYDPLUSSelected.Dias = DateDiff(DateInterval.Day, FechaInicial.Date, FechaFinal.Date) + 1
                    End If

                    If plogGuardarOrden Then
                        dcProxy.ValidarFechas.Clear()
                        If logOrdenCruzada Then
                            If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTVC Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPOC Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                                If Not IsNothing(_OrdenCruzadaSelected.FechaSalida) And Not IsNothing(_OrdenCruzadaSelected.FechaCumplimiento) Then
                                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(MSTR_CALCULAR_DIAS_ORDEN, _OrdenCruzadaSelected.FechaSalida, _OrdenCruzadaSelected.FechaCumplimiento.Value.Date, -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO)
                                End If
                            Else
                                If Not IsNothing(_OrdenCruzadaSelected.FechaOrden) And Not IsNothing(_OrdenCruzadaSelected.FechaCumplimiento) Then
                                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(MSTR_CALCULAR_DIAS_ORDEN, _OrdenCruzadaSelected.FechaOrden, _OrdenCruzadaSelected.FechaCumplimiento.Value.Date, -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO)
                                End If
                            End If
                        Else
                            If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                                If Not IsNothing(_OrdenOYDPLUSSelected.FechaSalida) And Not IsNothing(_OrdenOYDPLUSSelected.FechaCumplimiento) Then
                                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(MSTR_CALCULAR_DIAS_ORDEN, _OrdenOYDPLUSSelected.FechaSalida, IIf(IsNothing(_OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date), 0, _OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date), -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO)
                                End If
                            Else
                                If Not IsNothing(_OrdenOYDPLUSSelected.FechaOrden) And Not IsNothing(_OrdenOYDPLUSSelected.FechaCumplimiento) Then
                                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(MSTR_CALCULAR_DIAS_ORDEN, _OrdenOYDPLUSSelected.FechaOrden, IIf(IsNothing(_OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date), 0, _OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date), -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO)
                                End If
                            End If
                        End If
                    End If
                End If
            Else
                ' Calcular la fecha de vencimiento de la orden a partir de la fecha de elaboración y los días al vencimiento
                If pstrTipoCalculo.ToLower = MSTR_CALCULAR_DIAS_TITULO Then
                    FechaInicial = pobjOrdenSelected.FechaEmision.Value.Date

                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(pstrTipoCalculo, FechaInicial, Nothing, pintDias, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_CALCULAR_FECHA)
                ElseIf pstrTipoCalculo.ToLower = MSTR_CALCULAR_CUMPLIMIENTO_ORDEN Then
                    FechaInicial = pobjOrdenSelected.FechaOrden.Value.Date

                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(pstrTipoCalculo, FechaInicial, Nothing, pintDias, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_CALCULAR_CUMPLIMIENTO_ORDEN)

                ElseIf pstrTipoCalculo.ToLower = MSTR_CALCULAR_FECHA_CUMPLIMIENTO_DE_DIAS Then 'Calcular fecha cumpliento apartir de dias ingresados CFMG 20160830

                    If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTV Or pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Then
                        pstrTipoCalculo = "vencimiento_liquidez"
                        FechaInicial = pobjOrdenSelected.FechaSalida.Value.Date
                        'FechaFinal = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, pintDias, FechaInicial.Date))
                        'logDiasCumplimiento = False
                        dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(pstrTipoCalculo, FechaInicial, Nothing, pintDias, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_CALCULAR_FECHA_CUMPLIMIENTO_DE_DIAS)
                    ElseIf pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Then
                        FechaInicial = pobjOrdenSelected.FechaOrden.Value.Date
                        pstrTipoCalculo = "vencimiento_dias"
                        dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(pstrTipoCalculo, FechaInicial, Nothing, pintDias, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_CALCULAR_FECHA_CUMPLIMIENTO_DE_DIAS)
                    ElseIf pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Then
                        pstrTipoCalculo = "vencimiento_liquidez"
                        'FechaInicial = pobjOrdenSelected.FechaOrden.Value.Date
                        FechaInicial = pobjOrdenSelected.FechaSalida.Value.Date
                        dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(pstrTipoCalculo, FechaInicial, Nothing, pintDias, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_CALCULAR_FECHA_CUMPLIMIENTO_DE_DIAS)

                    End If
                Else
                    FechaInicial = pobjOrdenSelected.FechaOrden.Value.Date

                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(pstrTipoCalculo, FechaInicial, Nothing, pintDias, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_CALCULAR_FECHA)

                End If
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyCruzada = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema para calcular los días al vencimiento", Me.ToString(), "CalcularDiasOrdenOYDPLUS", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para validar el valor de la orden, sí es un repo se calcula el valor del repo.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 02 de Octubre del 2012
    ''' CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
    ''' JUAN DAVID CORREA MARZO 2015
    ''' </summary>
    Public Async Function CalcularValorOrden(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS) As System.Threading.Tasks.Task
        Try
            If Not IsNothing(pobjOrdenSelected) Then

                If Not String.IsNullOrEmpty(pobjOrdenSelected.TipoNegocio) And Not String.IsNullOrEmpty(pobjOrdenSelected.TipoOperacion) Then
                    logCalcularValores = False

                    Dim logCalcularValorOrden As Boolean = True

                    'If logRecalcularDatosNegociacion = False And logEditarRegistro Then
                    '    logCalcularValorOrden = False
                    'Else
                    '    If HabilitarCantidad Then
                    '        If pobjOrdenSelected.Cantidad = 0 Then
                    '            logCalcularValorOrden = False
                    '        End If
                    '    End If
                    'End If

                    If HabilitarCantidad Then
                        If pobjOrdenSelected.Cantidad = 0 Then
                            logCalcularValorOrden = False
                        End If
                    End If

                    If logCalcularValorOrden Then
                        If Await ObtenerCalculosMotor(pobjOrdenSelected) = False Then
                            'mostrarMensaje("Ocurrio un problema al calcular los valores de la orden, por favor comuniquese con el administrador para que se revise la comunicación entre la aplicación y el servicio del motor.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        End If
                    End If

                    logCalcularValores = True
                End If
            End If

        Catch ex As Exception
            IsBusy = False
            IsBusyCalculos = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema para calcular el valor de la orden.", Me.ToString(), "CalcularValorOrden", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Function

    Private Function VerificarValorParaDivision(ByVal pdblValor1 As Double) As Double
        If pdblValor1 = 0 Then
            Return 1
        Else
            Return pdblValor1
        End If
    End Function

    Private Function ConvertirValorConDecimales(ByRef pdblValor As Double, ByVal pintNroDecimales As Integer)
        pdblValor = Math.Round(CDbl(pdblValor), pintNroDecimales)
        Return pdblValor
    End Function

    Private Async Function ObtenerCalculosMotor(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS) As System.Threading.Tasks.Task(Of Boolean)
        Dim logLlamadoExitoso As Boolean = False
        Try
            If Not IsNothing(pobjOrdenSelected) Then
                If Not String.IsNullOrEmpty(pobjOrdenSelected.TipoNegocio) And Not String.IsNullOrEmpty(pobjOrdenSelected.TipoOperacion) Then

                    Try
                        Dim objRet As LoadOperation(Of OyDPLUSOrdenesBolsa.OrdenOYDPLUS_Calculos)
                        Dim objProxy As OYDPLUSOrdenesBolsaDomainContext

                        If System.Diagnostics.Debugger.IsAttached And Program.ejecutarAppSegunAmbiente() Then
                            objProxy = New OYDPLUSOrdenesBolsaDomainContext()
                        Else
                            objProxy = New OYDPLUSOrdenesBolsaDomainContext(New System.Uri(Program.RutaServicioNegocio))
                        End If

                        'Se realiza para aumentar el tiempo de consulta de ria y evitar el timeup en algunas consultas
                        DirectCast(objProxy.DomainClient, WebDomainClient(Of OYDPLUSOrdenesBolsaDomainContext.IOYDPLUSOrdenesBolsaDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)

                        IsBusyCalculos = True
                        ErrorForma = String.Empty

                        If Not IsNothing(objProxy.OrdenOYDPLUS_Calculos) Then
                            objProxy.OrdenOYDPLUS_Calculos.Clear()
                        End If

                        objRet = Await objProxy.Load(objProxy.OYDPLUS_CalcuarValorOrdenSyncQuery(objTipoCalculo,
                                                                                                 pobjOrdenSelected.Receptor,
                                                                                                 pobjOrdenSelected.TipoOrden,
                                                                                                 pobjOrdenSelected.TipoNegocio,
                                                                                                 pobjOrdenSelected.TipoProducto,
                                                                                                 pobjOrdenSelected.TipoOperacion,
                                                                                                 pobjOrdenSelected.Clase,
                                                                                                 pobjOrdenSelected.FechaOrden,
                                                                                                 pobjOrdenSelected.Clasificacion,
                                                                                                 pobjOrdenSelected.TipoLimite,
                                                                                                 pobjOrdenSelected.Duracion,
                                                                                                 pobjOrdenSelected.FechaVigencia,
                                                                                                 pobjOrdenSelected.HoraVigencia,
                                                                                                 pobjOrdenSelected.Dias,
                                                                                                 pobjOrdenSelected.CondicionesNegociacion,
                                                                                                 pobjOrdenSelected.FormaPago,
                                                                                                 pobjOrdenSelected.TipoInversion,
                                                                                                 pobjOrdenSelected.Ejecucion,
                                                                                                 pobjOrdenSelected.Mercado,
                                                                                                 pobjOrdenSelected.IDComitente,
                                                                                                 pobjOrdenSelected.IDOrdenante,
                                                                                                 pobjOrdenSelected.UBICACIONTITULO,
                                                                                                 pobjOrdenSelected.CuentaDeposito,
                                                                                                 pobjOrdenSelected.UsuarioOperador,
                                                                                                 pobjOrdenSelected.CanalRecepcion,
                                                                                                 pobjOrdenSelected.MedioVerificable,
                                                                                                 pobjOrdenSelected.FechaRecepcion,
                                                                                                 pobjOrdenSelected.NroExtensionToma,
                                                                                                 pobjOrdenSelected.Especie,
                                                                                                 pobjOrdenSelected.ISIN,
                                                                                                 pobjOrdenSelected.FechaEmision,
                                                                                                 pobjOrdenSelected.FechaVencimiento,
                                                                                                 pobjOrdenSelected.Estandarizada,
                                                                                                 pobjOrdenSelected.FechaCumplimiento,
                                                                                                 pobjOrdenSelected.TasaFacial,
                                                                                                 pobjOrdenSelected.Modalidad,
                                                                                                 pobjOrdenSelected.Indicador,
                                                                                                 pobjOrdenSelected.PuntosIndicador,
                                                                                                 pobjOrdenSelected.EnPesos,
                                                                                                 pobjOrdenSelected.Cantidad,
                                                                                                 pobjOrdenSelected.Precio,
                                                                                                 pobjOrdenSelected.PrecioMaximoMinimo,
                                                                                                 pobjOrdenSelected.ValorCaptacionGiro,
                                                                                                 pobjOrdenSelected.ValorFuturoRepo,
                                                                                                 pobjOrdenSelected.TasaRegistro,
                                                                                                 pobjOrdenSelected.TasaCliente,
                                                                                                 pobjOrdenSelected.TasaNominal,
                                                                                                 pobjOrdenSelected.Castigo,
                                                                                                 pobjOrdenSelected.ValorAccion,
                                                                                                 pobjOrdenSelected.Comision,
                                                                                                 pobjOrdenSelected.ValorComision,
                                                                                                 pobjOrdenSelected.ValorOrden,
                                                                                                 pobjOrdenSelected.DiasRepo,
                                                                                                 pobjOrdenSelected.ProductoValores,
                                                                                                 pobjOrdenSelected.CostosAdicionales,
                                                                                                 pobjOrdenSelected.DiasCumplimiento,
                                                                                                 pobjOrdenSelected.IvaComision,
                                                                                                 pobjOrdenSelected.ValorFuturoCliente,
                                                                                                 pobjOrdenSelected.BrokenTrader,
                                                                                                 pobjOrdenSelected.Entidad,
                                                                                                 pobjOrdenSelected.Estrategia,
                                                                                                 Program.Maquina,
                                                                                                 Program.Usuario,
                                                                                                 Program.UsuarioWindows,
                                                                                                 pobjOrdenSelected.FechaConstancia,
                                                                                                 pobjOrdenSelected.Constancia,
                                                                                                 pobjOrdenSelected.IDComitenteADR,
                                                                                                 pobjOrdenSelected.ReceptorToma,
                                                                                                 pobjOrdenSelected.FechaSalida,
                                                                                                 pobjOrdenSelected.TipoGarantia, Program.HashConexion)).AsTask()
                        IsBusy = False

                        If Not objRet Is Nothing Then
                            If objRet.HasError Then
                                If objRet.Error Is Nothing Then
                                    A2Utilidades.Mensajes.mostrarMensaje("Se presentó un problema al calcular los valores.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Errores)
                                Else
                                    A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los valores.", Me.ToString(), "ObtenerCalculosMotor", Program.TituloSistema, Program.Maquina, objRet.Error)
                                End If
                                IsBusy = False
                                IsBusyCalculos = False
                                objRet.MarkErrorAsHandled()
                            Else
                                MensajeTasas = String.Empty
                                MostrarMensajeTasas = Visibility.Collapsed
                                MensajePreciosTick = String.Empty
                                MostrarMensajePreciosTick = Visibility.Collapsed

                                If objRet.Entities.Count > 0 Then
                                    If objRet.Entities.First.Exitoso Then
                                        Dim objResultadoCalculos = objRet.Entities.First

                                        logCalcularValores = False

                                        If pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_ACCIONES Or pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_ADR Then 'ACCIONES
                                            pobjOrdenSelected.Cantidad = objResultadoCalculos.Cantidad
                                            pobjOrdenSelected.Precio = objResultadoCalculos.Precio
                                            pobjOrdenSelected.PrecioMaximoMinimo = objResultadoCalculos.PrecioMaximoMinimo
                                            pobjOrdenSelected.Comision = objResultadoCalculos.Comision
                                            pobjOrdenSelected.ValorComision = objResultadoCalculos.ValorComision
                                            pobjOrdenSelected.IvaComision = objResultadoCalculos.IvaComision
                                            pobjOrdenSelected.ValorCaptacionGiro = objResultadoCalculos.ValorCaptacionGiro
                                            pobjOrdenSelected.ValorOrden = objResultadoCalculos.ValorOrden

                                            If objRet.Entities.First.CodigoMensaje = "PRECIOTICK" Then
                                                MostrarMensajePreciosTick = Visibility.Visible
                                                MensajePreciosTick = objRet.Entities.First.Mensaje
                                            Else
                                                MostrarMensajePreciosTick = Visibility.Collapsed
                                                MensajePreciosTick = String.Empty
                                            End If
                                        ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_RENTAFIJA Then 'RENTA FIJA
                                            pobjOrdenSelected.Cantidad = objResultadoCalculos.Cantidad
                                            pobjOrdenSelected.Precio = objResultadoCalculos.Precio
                                            pobjOrdenSelected.PrecioMaximoMinimo = objResultadoCalculos.PrecioMaximoMinimo
                                            pobjOrdenSelected.ValorCaptacionGiro = objResultadoCalculos.ValorCaptacionGiro
                                            pobjOrdenSelected.TasaRegistro = objResultadoCalculos.TasaRegistro
                                            pobjOrdenSelected.TasaCliente = objResultadoCalculos.TasaCliente
                                            pobjOrdenSelected.Comision = objResultadoCalculos.Comision
                                            pobjOrdenSelected.ValorComision = objResultadoCalculos.ValorComision
                                            pobjOrdenSelected.IvaComision = objResultadoCalculos.IvaComision
                                            pobjOrdenSelected.ValorCaptacionGiro = objResultadoCalculos.ValorCaptacionGiro
                                            pobjOrdenSelected.ValorOrden = objResultadoCalculos.ValorOrden
                                        ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_REPO Then 'REPO
                                            pobjOrdenSelected.Cantidad = objResultadoCalculos.Cantidad
                                            pobjOrdenSelected.ValorAccion = objResultadoCalculos.ValorAccion
                                            pobjOrdenSelected.Castigo = objResultadoCalculos.Castigo
                                            pobjOrdenSelected.TasaRegistro = objResultadoCalculos.TasaRegistro
                                            pobjOrdenSelected.TasaCliente = objResultadoCalculos.TasaCliente
                                            pobjOrdenSelected.Comision = objResultadoCalculos.Comision
                                            pobjOrdenSelected.ValorComision = objResultadoCalculos.ValorComision
                                            pobjOrdenSelected.IvaComision = objResultadoCalculos.IvaComision
                                            pobjOrdenSelected.ValorCaptacionGiro = objResultadoCalculos.ValorCaptacionGiro
                                            pobjOrdenSelected.ValorOrden = objResultadoCalculos.ValorOrden
                                            pobjOrdenSelected.ValorFuturoRepo = objResultadoCalculos.ValorFuturoRepo
                                            pobjOrdenSelected.ValorFuturoCliente = objResultadoCalculos.ValorFuturoCliente
                                        ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_REPOC Then 'REPO RENTA FIJA
                                            pobjOrdenSelected.Cantidad = objResultadoCalculos.Cantidad
                                            pobjOrdenSelected.Precio = objResultadoCalculos.Precio
                                            pobjOrdenSelected.PrecioMaximoMinimo = objResultadoCalculos.PrecioMaximoMinimo
                                            pobjOrdenSelected.TasaRegistro = objResultadoCalculos.TasaRegistro
                                            pobjOrdenSelected.TasaCliente = objResultadoCalculos.TasaCliente
                                            pobjOrdenSelected.Comision = objResultadoCalculos.Comision
                                            pobjOrdenSelected.ValorComision = objResultadoCalculos.ValorComision
                                            pobjOrdenSelected.IvaComision = objResultadoCalculos.IvaComision
                                            pobjOrdenSelected.ValorCaptacionGiro = objResultadoCalculos.ValorCaptacionGiro
                                            pobjOrdenSelected.ValorOrden = objResultadoCalculos.ValorOrden
                                            pobjOrdenSelected.ValorFuturoRepo = objResultadoCalculos.ValorFuturoRepo
                                            pobjOrdenSelected.ValorFuturoCliente = objResultadoCalculos.ValorFuturoCliente
                                        ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_SIMULTANEA Then 'SIMULTANEA
                                            pobjOrdenSelected.Cantidad = objResultadoCalculos.Cantidad
                                            pobjOrdenSelected.Precio = objResultadoCalculos.Precio
                                            pobjOrdenSelected.PrecioMaximoMinimo = objResultadoCalculos.PrecioMaximoMinimo
                                            pobjOrdenSelected.TasaRegistro = objResultadoCalculos.TasaRegistro
                                            pobjOrdenSelected.TasaCliente = objResultadoCalculos.TasaCliente
                                            pobjOrdenSelected.Comision = objResultadoCalculos.Comision
                                            pobjOrdenSelected.ValorComision = objResultadoCalculos.ValorComision
                                            pobjOrdenSelected.IvaComision = objResultadoCalculos.IvaComision
                                            pobjOrdenSelected.ValorCaptacionGiro = objResultadoCalculos.ValorCaptacionGiro
                                            pobjOrdenSelected.ValorOrden = objResultadoCalculos.ValorOrden
                                            pobjOrdenSelected.ValorFuturoRepo = objResultadoCalculos.ValorFuturoRepo
                                            pobjOrdenSelected.ValorFuturoCliente = objResultadoCalculos.ValorFuturoCliente
                                        ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTV Then 'TTV
                                            pobjOrdenSelected.Cantidad = objResultadoCalculos.Cantidad
                                            pobjOrdenSelected.Precio = objResultadoCalculos.Precio
                                            pobjOrdenSelected.PrecioMaximoMinimo = objResultadoCalculos.PrecioMaximoMinimo
                                            pobjOrdenSelected.TasaRegistro = objResultadoCalculos.TasaRegistro
                                            pobjOrdenSelected.TasaCliente = objResultadoCalculos.TasaCliente
                                            pobjOrdenSelected.Comision = objResultadoCalculos.Comision
                                            pobjOrdenSelected.ValorComision = objResultadoCalculos.ValorComision
                                            pobjOrdenSelected.IvaComision = objResultadoCalculos.IvaComision
                                            pobjOrdenSelected.ValorCaptacionGiro = objResultadoCalculos.ValorCaptacionGiro
                                            pobjOrdenSelected.ValorAccion = objResultadoCalculos.ValorAccion
                                            pobjOrdenSelected.ValorOrden = objResultadoCalculos.ValorOrden
                                            pobjOrdenSelected.ValorFuturoRepo = objResultadoCalculos.ValorFuturoRepo
                                            pobjOrdenSelected.ValorFuturoCliente = objResultadoCalculos.ValorFuturoCliente

                                        ElseIf pobjOrdenSelected.TipoNegocio.ToUpper = TIPONEGOCIO_TTVC Then 'TTVC
                                            pobjOrdenSelected.Cantidad = objResultadoCalculos.Cantidad
                                            pobjOrdenSelected.Precio = objResultadoCalculos.Precio
                                            pobjOrdenSelected.PrecioMaximoMinimo = objResultadoCalculos.PrecioMaximoMinimo
                                            pobjOrdenSelected.Castigo = objResultadoCalculos.Castigo
                                            pobjOrdenSelected.TasaRegistro = objResultadoCalculos.TasaRegistro
                                            pobjOrdenSelected.TasaCliente = objResultadoCalculos.TasaCliente
                                            pobjOrdenSelected.Comision = objResultadoCalculos.Comision
                                            pobjOrdenSelected.ValorComision = objResultadoCalculos.ValorComision
                                            pobjOrdenSelected.IvaComision = objResultadoCalculos.IvaComision
                                            pobjOrdenSelected.ValorCaptacionGiro = objResultadoCalculos.ValorCaptacionGiro
                                            pobjOrdenSelected.ValorAccion = objResultadoCalculos.ValorAccion
                                            pobjOrdenSelected.ValorOrden = objResultadoCalculos.ValorOrden
                                            pobjOrdenSelected.ValorFuturoRepo = objResultadoCalculos.ValorFuturoRepo
                                            pobjOrdenSelected.ValorFuturoCliente = objResultadoCalculos.ValorFuturoCliente
                                        End If
                                        If objRet.Entities.First.CodigoMensaje <> "PRECIOTICK" And objRet.Entities.First.TieneMensajeValidacion Then
                                            MensajeTasas = objRet.Entities.First.Mensaje
                                            MostrarMensajeTasas = Visibility.Visible
                                        End If

                                        logCalcularValores = True
                                        'VerificarTasaRegistro_TasaCliente(pobjOrdenSelected)
                                        VerificarComision(pobjOrdenSelected)

                                        logLlamadoExitoso = True
                                    Else
                                        logLlamadoExitoso = False
                                        Dim strMensajesValidacion As String = String.Empty

                                        For Each li In objRet.Entities.ToList
                                            If li.CodigoMensaje = "FECHACUMPLIMIENTO" Then
                                                If intCantidadMensajeValidacionFechaCumplimiento = 0 Then
                                                    If String.IsNullOrEmpty(strMensajesValidacion) Then
                                                        strMensajesValidacion = li.Mensaje
                                                    Else
                                                        strMensajesValidacion = String.Format("{0}{1}{2}", strMensajesValidacion, vbCrLf, li.Mensaje)
                                                    End If
                                                    intCantidadMensajeValidacionFechaCumplimiento += 1
                                                End If
                                            Else
                                                If String.IsNullOrEmpty(strMensajesValidacion) Then
                                                    strMensajesValidacion = li.Mensaje
                                                Else
                                                    strMensajesValidacion = String.Format("{0}{1}{2}", strMensajesValidacion, vbCrLf, li.Mensaje)
                                                End If
                                            End If
                                        Next
                                        If Not String.IsNullOrEmpty(strMensajesValidacion) Then
                                            If logMostrarIsines Then
                                                If logMostrarIsinesCorresponden = False Then
                                                    mostrarMensajeResultadoAsincronico(strMensajesValidacion, "Ordenes", AddressOf TerminoMensajeResultadoAsincronicoFACIALES, "FACIALES_ESPECIE", A2Utilidades.wppMensajes.TiposMensaje.Exito)
                                                Else 'Cuando hay mas de 1 Operacion Con las caracteristicas Correspondientes
                                                    ConsultandoIsines = True
                                                    ConsultarIsines = False
                                                    ConsultarIsines = True
                                                    EspecieBuscar = Nothing
                                                    EspecieBuscar = strEspecieDirecta
                                                    FechaEmisionBuscador = Nothing
                                                    FechaEmisionBuscador = dtmFechaEmisionDirecta
                                                    FechaVencimientoBuscador = Nothing
                                                    FechaVencimientoBuscador = dtmFechaVencimientoDirecta
                                                    ModalidadBuscador = String.Empty
                                                    ModalidadBuscador = strModalidadDirecta
                                                    logMostrarIsines = False
                                                End If
                                            Else
                                                mostrarMensaje(strMensajesValidacion, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                                            End If
                                        End If

                                    End If
                                End If
                            End If
                        End If
                    Catch ex As Exception
                        IsBusy = False
                        IsBusyCalculos = False
                        A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los valores.", Me.ToString(), "CalcularValorRegistro", Application.Current.ToString(), Program.Maquina, ex)
                        logLlamadoExitoso = False
                    Finally
                    End Try
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            IsBusyCalculos = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema para calcular el valor en el motor de calculos.", Me.ToString(), "ObtenerCalculosMotor", Program.TituloSistema, Program.Maquina, ex)
        End Try

        logCalcularValores = True
        If ConsultandoIsines = False Then
            IsBusyCalculos = False
        End If

        Return logLlamadoExitoso
    End Function

    ''' <summary>
    ''' Metodo para obtener la información completa de los combos de la aplicación cuando sea necesario.
    ''' Desarrollado por Juan David Correa
    ''' Fecha 10 de Septiembre del 2012
    ''' </summary>
    Public Sub ObtenerInformacionCombosCompletos()
        Try
            Dim objDiccionarioCombosOYDPlus As New Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
            Dim objTipoNegocioReceptor As New List(Of OYDPLUSUtilidades.tblTipoNegocioReceptor)
            Dim strNombreCategoria As String = String.Empty

            objTipoNegocioReceptor = ListaTipoNegocioCOMPLETOS.OrderBy(Function(i) i.ID).ToList

            For Each dic In DiccionarioCombosOYDPlusCompleta
                strNombreCategoria = dic.Key
                objDiccionarioCombosOYDPlus.Add(strNombreCategoria, dic.Value)
            Next

            DiccionarioCombosOYDPlus = Nothing
            DiccionarioCombosOYDPlus = objDiccionarioCombosOYDPlus

            ListaReceptoresUsuario = Nothing
            ListaReceptoresUsuario = ListaReceptoresCompleta.OrderBy(Function(i) i.ID).ToList

            ListaTipoNegocio = Nothing
            ListaTipoNegocio = objTipoNegocioReceptor

            ObtenerValoresCombos(True, _OrdenOYDPLUSSelected)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Obtener la información de los combos.", Me.ToString, "ObtenerInformacionCombosCompletos", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Desarrollado por Juan David Correa.
    ''' Obtener el registro anterior de la orden.
    ''' Fecha: Febrero 25 del 2013
    ''' </summary>
    ''' <param name="pobjOrden"></param>
    ''' <param name="pobjOrdenSalvarDatos"></param>
    ''' <remarks></remarks>
    Public Sub ObtenerValoresOrdenAnterior(ByVal pobjOrden As OyDPLUSOrdenesBolsa.OrdenOYDPLUS, ByRef pobjOrdenSalvarDatos As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If Not IsNothing(pobjOrden) Then
                Dim objNewOrdenOYD As New OyDPLUSOrdenesBolsa.OrdenOYDPLUS

                objNewOrdenOYD.IDNroOrden = pobjOrden.IDNroOrden
                objNewOrdenOYD.NroOrden = pobjOrden.NroOrden
                objNewOrdenOYD.Version = pobjOrden.Version
                objNewOrdenOYD.Bolsa = pobjOrden.Bolsa
                objNewOrdenOYD.NombreBolsa = pobjOrden.NombreBolsa
                objNewOrdenOYD.Receptor = pobjOrden.Receptor
                objNewOrdenOYD.NombreReceptor = pobjOrden.NombreReceptor
                objNewOrdenOYD.TipoOrden = pobjOrden.TipoOrden
                objNewOrdenOYD.NombreTipoOrden = pobjOrden.NombreTipoOrden
                objNewOrdenOYD.TipoNegocio = pobjOrden.TipoNegocio
                objNewOrdenOYD.NombreTipoNegocio = pobjOrden.NombreTipoNegocio
                objNewOrdenOYD.TipoProducto = pobjOrden.TipoProducto
                objNewOrdenOYD.NombreTipoProducto = pobjOrden.NombreTipoProducto
                objNewOrdenOYD.TipoOperacion = pobjOrden.TipoOperacion
                objNewOrdenOYD.NombreTipoOperacion = pobjOrden.NombreTipoOperacion
                objNewOrdenOYD.Clase = pobjOrden.Clase
                objNewOrdenOYD.FechaOrden = pobjOrden.FechaOrden
                objNewOrdenOYD.EstadoOrden = pobjOrden.EstadoOrden
                objNewOrdenOYD.NombreEstadoOrden = pobjOrden.NombreEstadoOrden
                objNewOrdenOYD.EstadoLEO = pobjOrden.EstadoLEO
                objNewOrdenOYD.NombreEstadoLEO = pobjOrden.NombreEstadoLEO
                objNewOrdenOYD.NroOrdenSAE = pobjOrden.NroOrdenSAE
                objNewOrdenOYD.EstadoSAE = pobjOrden.EstadoSAE
                objNewOrdenOYD.NombreEstadoSAE = pobjOrden.NombreEstadoSAE
                objNewOrdenOYD.Clasificacion = pobjOrden.Clasificacion
                objNewOrdenOYD.TipoLimite = pobjOrden.TipoLimite
                objNewOrdenOYD.Duracion = pobjOrden.Duracion
                objNewOrdenOYD.FechaVigencia = pobjOrden.FechaVigencia
                objNewOrdenOYD.HoraVigencia = pobjOrden.HoraVigencia
                objNewOrdenOYD.Dias = pobjOrden.Dias
                objNewOrdenOYD.CondicionesNegociacion = pobjOrden.CondicionesNegociacion
                objNewOrdenOYD.FormaPago = pobjOrden.FormaPago
                objNewOrdenOYD.TipoInversion = pobjOrden.TipoInversion
                objNewOrdenOYD.Ejecucion = pobjOrden.Ejecucion
                objNewOrdenOYD.Mercado = pobjOrden.Mercado
                objNewOrdenOYD.IDComitente = pobjOrden.IDComitente
                objNewOrdenOYD.NombreCliente = pobjOrden.NombreCliente
                objNewOrdenOYD.NroDocumento = pobjOrden.NroDocumento
                objNewOrdenOYD.CategoriaCliente = pobjOrden.CategoriaCliente
                objNewOrdenOYD.IDOrdenante = pobjOrden.IDOrdenante
                objNewOrdenOYD.NombreOrdenante = pobjOrden.NombreOrdenante
                objNewOrdenOYD.UBICACIONTITULO = pobjOrden.UBICACIONTITULO
                objNewOrdenOYD.CuentaDeposito = pobjOrden.CuentaDeposito
                objNewOrdenOYD.DescripcionCta = pobjOrden.DescripcionCta
                objNewOrdenOYD.UsuarioOperador = pobjOrden.UsuarioOperador
                objNewOrdenOYD.CanalRecepcion = pobjOrden.CanalRecepcion
                objNewOrdenOYD.MedioVerificable = pobjOrden.MedioVerificable
                objNewOrdenOYD.FechaRecepcion = pobjOrden.FechaRecepcion
                objNewOrdenOYD.NroExtensionToma = pobjOrden.NroExtensionToma
                objNewOrdenOYD.Especie = pobjOrden.Especie
                objNewOrdenOYD.ISIN = pobjOrden.ISIN
                objNewOrdenOYD.FechaEmision = pobjOrden.FechaEmision
                objNewOrdenOYD.FechaVencimiento = pobjOrden.FechaVencimiento
                objNewOrdenOYD.Estandarizada = pobjOrden.Estandarizada
                objNewOrdenOYD.FechaCumplimiento = pobjOrden.FechaCumplimiento
                objNewOrdenOYD.TasaFacial = pobjOrden.TasaFacial
                objNewOrdenOYD.Modalidad = pobjOrden.Modalidad
                objNewOrdenOYD.NombreModalidad = pobjOrden.NombreModalidad
                objNewOrdenOYD.Indicador = pobjOrden.Indicador
                objNewOrdenOYD.PuntosIndicador = pobjOrden.PuntosIndicador
                objNewOrdenOYD.EnPesos = pobjOrden.EnPesos
                objNewOrdenOYD.Cantidad = pobjOrden.Cantidad
                objNewOrdenOYD.Precio = pobjOrden.Precio
                objNewOrdenOYD.PrecioMaximoMinimo = pobjOrden.PrecioMaximoMinimo
                objNewOrdenOYD.ValorCaptacionGiro = pobjOrden.ValorCaptacionGiro
                objNewOrdenOYD.ValorFuturoRepo = pobjOrden.ValorFuturoRepo
                objNewOrdenOYD.TasaRegistro = pobjOrden.TasaRegistro
                objNewOrdenOYD.TasaCliente = pobjOrden.TasaCliente
                objNewOrdenOYD.TasaNominal = pobjOrden.TasaNominal
                objNewOrdenOYD.Castigo = pobjOrden.Castigo
                objNewOrdenOYD.ValorAccion = pobjOrden.ValorAccion
                objNewOrdenOYD.Comision = pobjOrden.Comision
                objNewOrdenOYD.ValorComision = pobjOrden.ValorComision
                objNewOrdenOYD.ValorOrden = pobjOrden.ValorOrden
                objNewOrdenOYD.DiasRepo = pobjOrden.DiasRepo
                objNewOrdenOYD.ProductoValores = pobjOrden.ProductoValores
                objNewOrdenOYD.CostosAdicionales = pobjOrden.CostosAdicionales
                objNewOrdenOYD.Instrucciones = pobjOrden.Instrucciones
                objNewOrdenOYD.Notas = pobjOrden.Notas
                objNewOrdenOYD.Custodia = pobjOrden.Custodia
                objNewOrdenOYD.CustodiaSecuencia = pobjOrden.CustodiaSecuencia
                objNewOrdenOYD.DiasCumplimiento = pobjOrden.DiasCumplimiento
                objNewOrdenOYD.RuedaNegocio = pobjOrden.RuedaNegocio
                objNewOrdenOYD.PrecioLimpio = pobjOrden.PrecioLimpio
                objNewOrdenOYD.EstadoTitulo = pobjOrden.EstadoTitulo
                objNewOrdenOYD.ReferenciaBolsa = pobjOrden.ReferenciaBolsa
                objNewOrdenOYD.FechaReferenciaBolsa = pobjOrden.FechaReferenciaBolsa
                objNewOrdenOYD.CantidadBolsa = pobjOrden.CantidadBolsa
                objNewOrdenOYD.ComisionesOrdenesXML = pobjOrden.ComisionesOrdenesXML
                objNewOrdenOYD.InstruccionesOrdenesXML = pobjOrden.InstruccionesOrdenesXML
                objNewOrdenOYD.LiqAsociadasXML = pobjOrden.LiqAsociadasXML
                objNewOrdenOYD.PagosOrdenesXML = pobjOrden.PagosOrdenesXML
                objNewOrdenOYD.ReceptoresCruzadasXML = pobjOrden.ReceptoresCruzadasXML
                objNewOrdenOYD.ReceptoresXML = pobjOrden.ReceptoresXML
                objNewOrdenOYD.OrdenCruzada = pobjOrden.OrdenCruzada
                objNewOrdenOYD.OrdenCruzadaCliente = pobjOrden.OrdenCruzadaCliente
                objNewOrdenOYD.OrdenCruzadaReceptor = pobjOrden.OrdenCruzadaReceptor
                objNewOrdenOYD.IDOrdenOriginal = pobjOrden.IDOrdenOriginal
                objNewOrdenOYD.IDNroOrdenOriginal = pobjOrden.IDNroOrdenOriginal
                objNewOrdenOYD.NombreReceptorParaCruzada = pobjOrden.NombreReceptorParaCruzada
                objNewOrdenOYD.Usuario = pobjOrden.Usuario
                objNewOrdenOYD.Modificable = pobjOrden.Modificable
                objNewOrdenOYD.FechaActualizacion = pobjOrden.FechaActualizacion
                objNewOrdenOYD.ValorFuturoCliente = pobjOrden.ValorFuturoCliente
                objNewOrdenOYD.IvaComision = pobjOrden.IvaComision
                objNewOrdenOYD.BrokenTrader = pobjOrden.BrokenTrader
                objNewOrdenOYD.Entidad = pobjOrden.Entidad
                objNewOrdenOYD.Estrategia = pobjOrden.Estrategia
                objNewOrdenOYD.Constancia = pobjOrden.Constancia
                objNewOrdenOYD.FechaConstancia = pobjOrden.FechaConstancia
                objNewOrdenOYD.IDComitenteADR = pobjOrden.IDComitenteADR
                objNewOrdenOYD.NombreClienteADR = pobjOrden.NombreClienteADR
                objNewOrdenOYD.TipoIdentificacionADR = pobjOrden.TipoIdentificacionADR
                objNewOrdenOYD.NroDocumentoADR = pobjOrden.NroDocumentoADR
                objNewOrdenOYD.ReceptorToma = pobjOrden.ReceptorToma
                objNewOrdenOYD.NombreReceptorToma = pobjOrden.NombreReceptorToma
                objNewOrdenOYD.TipoTasaFija = pobjOrden.TipoTasaFija
                objNewOrdenOYD.EspecieEsAccion = pobjOrden.EspecieEsAccion
                objNewOrdenOYD.SaldoOrden = pobjOrden.SaldoOrden
                objNewOrdenOYD.FechaSalida = pobjOrden.FechaSalida
                objNewOrdenOYD.TipoGarantia = pobjOrden.TipoGarantia
                objNewOrdenOYD.VendeTodo = pobjOrden.VendeTodo
                objNewOrdenOYD.ExistePreacuerdo = pobjOrden.ExistePreacuerdo
                objNewOrdenOYD.ExentoRetencion = pobjOrden.ExentoRetencion
                objNewOrdenOYD.PorcentajePagoEfectivo = pobjOrden.PorcentajePagoEfectivo

                pobjOrdenSalvarDatos = objNewOrdenOYD
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener los datos de la orden anterior.", Me.ToString(), "ObtenerValoresOrdenAnterior", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Desarrollado por Juan David Correa.
    ''' Llevar los datos de la orden que se estaba editando a la orden de la lista.
    ''' Esto soluciona el error cuando se edita una orden y luego se da cancelar, como los combos se vuelven a cargar 
    ''' </summary>
    ''' <param name="pobjOrden"></param>
    ''' <remarks></remarks>
    Public Sub ObtenerValoresOrdenEnLista(ByVal pobjOrden As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If Not IsNothing(pobjOrden) Then
                If ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).Count > 0 Then
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.Receptor = pobjOrden.Receptor
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.TipoOrden = pobjOrden.TipoOrden
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.TipoNegocio = pobjOrden.TipoNegocio
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.TipoProducto = pobjOrden.TipoProducto
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.TipoOperacion = pobjOrden.TipoOperacion
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.Clasificacion = pobjOrden.Clasificacion
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.TipoLimite = pobjOrden.TipoLimite
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.Duracion = pobjOrden.Duracion
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.CondicionesNegociacion = pobjOrden.CondicionesNegociacion
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.FormaPago = pobjOrden.FormaPago
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.TipoInversion = pobjOrden.TipoInversion
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.Ejecucion = pobjOrden.Ejecucion
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.Mercado = pobjOrden.Mercado
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.UsuarioOperador = pobjOrden.UsuarioOperador
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.CanalRecepcion = pobjOrden.CanalRecepcion
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.MedioVerificable = pobjOrden.MedioVerificable
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.Modalidad = pobjOrden.Modalidad
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.Indicador = pobjOrden.Indicador
                    ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjOrden.IDNroOrden).FirstOrDefault.ProductoValores = pobjOrden.ProductoValores
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener los datos de la orden anterior.", Me.ToString(), "ObtenerValoresOrdenAnterior", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Sub ReemplazarValorEnLista()

    End Sub

    ''' <summary>
    ''' Metodo para obtener la información de la orden de SAE.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 20 de septiembre del 2012
    ''' </summary>
    Public Async Sub ObtenerInformacionOrdenSAEAcciones(ByVal objOrdenSAE As OYDPLUSUtilidades.tblOrdenesSAEAcciones, ByVal objOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS, ByVal logBorrarEspecie As Boolean)
        Try
            If Not IsNothing(objOrdenSAE) Then
                If objOrdenSAE.Seleccionada Then

                    logCambiarConsultaSAE = False

                    If logBorrarEspecie Then
                        objOrdenSelected.Especie = objOrdenSAE.Especie
                        BorrarEspecie = False
                    End If

                    objOrdenSelected.Cantidad = objOrdenSAE.Cantidad
                    objOrdenSelected.Precio = objOrdenSAE.Precio
                    objOrdenSelected.ReferenciaBolsa = objOrdenSAE.NroLiquidacion
                    objOrdenSelected.FechaReferenciaBolsa = objOrdenSAE.FechaReferencia
                    objOrdenSelected.CantidadBolsa = objOrdenSAE.Cantidad

                    logCambiarConsultaSAE = True
                    Dim objListaLiquidacionesSAEAcciones = New List(Of SAELiquidacionesSeleccionadas)

                    If Not IsNothing(_ListaOrdenSAEAcciones) Then
                        For Each li In _ListaOrdenSAEAcciones
                            If li.Seleccionada Then
                                objListaLiquidacionesSAEAcciones.Add(New SAELiquidacionesSeleccionadas With {.IDLiquidacion = li.NroLiquidacion,
                                                                                                           .FechaReferencia = li.FechaReferencia,
                                                                                                           .Cantidad = li.Cantidad})
                            End If
                        Next
                    End If

                    ListaLiquidacionesSAEAcciones = objListaLiquidacionesSAEAcciones
                    Await CalcularValorOrden(objOrdenSelected)
                    'ObtenerValoresDefectoOYDPLUS("RECEPTOR", objOrdenSelected)
                Else
                    ListaLiquidacionesSAEAcciones = New List(Of SAELiquidacionesSeleccionadas)
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener la información de la orden de SAE.", Me.ToString(), "ObtenerInformacionOrdenSAEAcciones", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Async Function ObtenerInformacionOrdenSAERentaFija(ByVal objOrdenSAE As OYDPLUSUtilidades.tblOrdenesSAERentaFija, ByVal objOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS, ByVal logBorrarEspecie As Boolean) As Task(Of Boolean)
        Try
            If Not IsNothing(objOrdenSAE) Then

                If objOrdenSAE.Seleccionada Then
                    If String.IsNullOrEmpty(objOrdenSAE.Mensajes) Then
                        logCambiarConsultaSAE = False
                        logMostrarIsinesCorresponden = False
                        logMostrarIsines = False
                        If logBorrarEspecie Then

                            'Julian Rincón (Alcuadrado S.A)
                            'NemotecnicoSeleccionadoOYDPLUS = Nothing

                            objOrdenSelected.Especie = objOrdenSAE.Especie
                            If objOrdenSelected.TipoNegocio <> TIPONEGOCIO_REPO And objOrdenSelected.TipoNegocio <> TIPONEGOCIO_TTV Then
                                strEspecieDirecta = objOrdenSAE.Especie
                                dtmFechaEmisionDirecta = objOrdenSAE.FechaEmision
                                dtmFechaVencimientoDirecta = objOrdenSAE.FechaVencimiento
                                strModalidadDirecta = objOrdenSAE.Modalidad
                            End If


                            Await SeleccionarFacialesEspecie_SAE(objOrdenSAE)

                            'If BorrarEspecie Then
                            '    BorrarEspecie = False
                            'End If
                            'BorrarEspecie = True
                        End If
                        logOrdenDIRECTA_RENTAFIJA = True
                        UbicacionTituloDirecta = objOrdenSAE.UBICACIONTITULO
                        objOrdenSelected.Precio = objOrdenSAE.PrecioSucio ' Solicitud de BTG  debe ser PRECIO SUCIO de operaciones!
                        objOrdenSelected.PrecioMaximoMinimo = objOrdenSAE.PrecioSucio ' Solicitud de BTG  debe ser PRECIO SUCIO de operaciones!
                        objOrdenSelected.PrecioLimpio = objOrdenSAE.PrecioLimpio
                        objOrdenSelected.PrecioSucio = objOrdenSAE.PrecioSucio
                        objOrdenSelected.TasaCliente = objOrdenSAE.Precio
                        objOrdenSelected.TasaRegistro = objOrdenSAE.Precio

                        If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                            objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Or
                            objOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Or
                            objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                            objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                            objOrdenSelected.ValorFuturoRepo = objOrdenSAE.CantidadFutura
                            objOrdenSelected.ValorCaptacionGiro = objOrdenSAE.CantidadCaptacion
                            objOrdenSelected.Cantidad = objOrdenSAE.Cantidad
                            objOrdenSelected.ValorOrden = objOrdenSAE.CantidadCaptacion
                        Else
                            objOrdenSelected.Cantidad = objOrdenSAE.Cantidad
                        End If

                        If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                            objOrdenSelected.ValorFuturoRepo = objOrdenSAE.CantidadFutura
                            objOrdenSelected.ValorCaptacionGiro = objOrdenSAE.CantidadCaptacion
                            objOrdenSelected.ValorOrden = objOrdenSAE.CantidadCaptacion
                        End If

                        logCalcularValores = False
                        'If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                        If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Then
                            objOrdenSelected.FechaCumplimiento = objOrdenSAE.dtmFechaCumplimientoRepo
                            'objOrdenSelected.DiasCumplimiento = DateDiff(DateInterval.Day, objOrdenSelected.FechaOrden.Value.Date, objOrdenSAE.dtmFechaCumplimientoRepo.Value.Date)
                            objOrdenSelected.DiasCumplimiento = DateDiff(DateInterval.Day, objOrdenSelected.FechaSalida.Value.Date, objOrdenSAE.dtmFechaCumplimientoRepo.Value.Date)
                            objOrdenSelected.Comision = 0
                            objOrdenSelected.ValorComision = 0
                        Else
                            objOrdenSelected.FechaCumplimiento = objOrdenSAE.FechaCumplimiento
                            If objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                objOrdenSelected.DiasCumplimiento = DateDiff(DateInterval.Day, objOrdenSelected.FechaSalida.Value.Date, objOrdenSAE.FechaCumplimiento.Value.Date)
                            Else
                                objOrdenSelected.DiasCumplimiento = DateDiff(DateInterval.Day, objOrdenSelected.FechaOrden.Value.Date, objOrdenSAE.FechaCumplimiento.Value.Date)
                            End If
                        End If
                        logCalcularValores = True
                        Dim objListaLiquidacionesSAERentaFija = New List(Of SAELiquidacionesSeleccionadas)

                        If Not IsNothing(_ListaOrdenSAERentaFija) Then
                            For Each li In _ListaOrdenSAERentaFija
                                If li.Seleccionada Then
                                    objListaLiquidacionesSAERentaFija.Add(New SAELiquidacionesSeleccionadas With {.IDLiquidacion = li.NroLiquidacion,
                                                                                                               .FechaReferencia = li.FechaReferencia,
                                                                                                               .Cantidad = li.Cantidad})
                                End If
                            Next
                        End If

                        ListaLiquidacionesSAERentaFija = objListaLiquidacionesSAERentaFija

                        logCambiarConsultaSAE = True
                        If objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Then
                            'ValidarTipoCalculoDefecto(False, objOrdenSelected.TipoNegocio)
                            Exit Function
                        Else
                            objTipoCalculo = VerificarTipoCalculo(objOrdenSelected, TIPOCALCULOS_MOTOR.COMISION.ToString, String.Empty)
                        End If

                        If (Not (objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Or objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC) And EjecutoPorcentajeGarantia = False) Then
                            Await CalcularValorOrden(objOrdenSelected)
                        End If

                    Else
                        objOrdenSelected.Precio = Nothing
                        objOrdenSelected.Cantidad = Nothing
                        objOrdenSelected.ISIN = Nothing
                        objOrdenSelected.Mercado = Nothing
                        objOrdenSelected.Modalidad = Nothing
                        objOrdenSelected.CondicionesNegociacion = Nothing
                        objOrdenSelected.NombreModalidad = Nothing
                        objOrdenSelected.ReferenciaBolsa = Nothing
                        objOrdenSelected.FechaReferenciaBolsa = Nothing
                        objOrdenSelected.CantidadBolsa = 0
                        objOrdenSelected.PuntosIndicador = Nothing
                        objOrdenSelected.RuedaNegocio = Nothing
                        objOrdenSelected.Seleccionada = Nothing
                        objOrdenSelected.TasaFacial = Nothing
                        objOrdenSelected.TasaNominal = Nothing
                        objOrdenSelected.UBICACIONTITULO = Nothing
                        objOrdenSelected.FechaEmision = Nothing
                        objOrdenSelected.FechaVencimiento = Nothing
                        objOrdenSelected.Especie = Nothing
                        objOrdenSelected.Indicador = Nothing
                        objOrdenSelected.FechaCumplimiento = Nothing
                        objOrdenSelected.DiasCumplimiento = Nothing
                        objOrdenSelected.CondicionesNegociacion = Nothing
                        objOrdenSelected.Clasificacion = Nothing
                        objOrdenSelected.EstadoTitulo = Nothing
                        If ConsultarOrdenesSAE Then
                            ConsultarOrdenesSAE = False
                        End If
                        ConsultarOrdenesSAE = True
                        A2Utilidades.Mensajes.mostrarMensaje(objOrdenSAE.Mensajes, Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        ListaLiquidacionesSAERentaFija = New List(Of SAELiquidacionesSeleccionadas)
                    End If
                End If
            End If
            Return Nothing
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener la información de la orden de SAE.", Me.ToString(), "ObtenerInformacionOrdenSAERentaFija", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            Return Nothing
        End Try
    End Function

    Private Sub LimpiarReferenciaBolsa(ByVal objOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If objOrdenSelected.Clase = TIPONEGOCIO_ACCIONES Or objOrdenSelected.Clase = TIPONEGOCIO_ACCIONESOF Then
                If Not IsNothing(_ListaOrdenSAEAcciones) Then
                    If _ListaOrdenSAEAcciones.Where(Function(i) i.Seleccionada).Count = 0 Then
                        objOrdenSelected.ReferenciaBolsa = String.Empty
                        objOrdenSelected.FechaReferenciaBolsa = Nothing
                        objOrdenSelected.CantidadBolsa = 0

                        'Se limpian todos los valores de la orden si no tiene ninguna orden SAE seleccionada
                        'Julian Rincón (Alcuadrado S.A)
                        If ((Editando And logNuevoRegistro) And logEliminarAsociacion = False) Then
                            If logEsModal = False Then
                                objOrdenSelected.Cantidad = 0
                                objOrdenSelected.Precio = 0
                            End If

                            objOrdenSelected.ValorOrden = 0
                            objOrdenSelected.ValorCaptacionGiro = 0
                            objOrdenSelected.IvaComision = 0
                            objOrdenSelected.ValorComision = 0
                            objOrdenSelected.Comision = 0
                        End If


                        ListaLiquidacionesSAEAcciones = New List(Of SAELiquidacionesSeleccionadas)

                    End If
                End If
            Else
                If Not IsNothing(_ListaOrdenSAERentaFija) Then
                    If _ListaOrdenSAERentaFija.Where(Function(i) i.Seleccionada).Count = 0 Then
                        objOrdenSelected.ReferenciaBolsa = String.Empty
                        objOrdenSelected.FechaReferenciaBolsa = Nothing
                        objOrdenSelected.CantidadBolsa = 0

                        'Se limpian todos los valores de la orden si no tiene ninguna orden SAE seleccionada
                        'Julian Rincón (Alcuadrado S.A)
                        If ((Editando And logNuevoRegistro) And logEliminarAsociacion = False) Then
                            If logEsModal = False Then
                                objOrdenSelected.Cantidad = 0
                                objOrdenSelected.Precio = 0
                            End If

                            objOrdenSelected.TasaFacial = 0
                            objOrdenSelected.TasaRegistro = 0
                            objOrdenSelected.TasaCliente = 0
                            objOrdenSelected.TasaNominal = 0
                            objOrdenSelected.PrecioSucio = 0
                            objOrdenSelected.ValorOrden = 0
                            objOrdenSelected.ValorCaptacionGiro = 0
                            objOrdenSelected.IvaComision = 0
                            objOrdenSelected.ValorComision = 0
                            objOrdenSelected.Comision = 0
                            objOrdenSelected.ValorFuturoRepo = 0
                        End If
                        ListaLiquidacionesSAERentaFija = New List(Of SAELiquidacionesSeleccionadas)
                    End If
                End If
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al limpiar la información de la orden de SAE.", Me.ToString(), "LimpiarReferenciaBolsa", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para obtener la información del portafolio del cliente.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 20 de septiembre del 2012
    ''' </summary>
    Public Async Sub ObtenerInformacionPortafolioCliente(ByVal objPortafolioCliente As OYDPLUSUtilidades.tblPortafolioCliente, ByVal objOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS, ByVal logBorarEspecie As Boolean)
        Try
            If Not IsNothing(objPortafolioCliente) Then
                If objPortafolioCliente.Seleccionada Then

                    logCambiarConsultaPortafolio = False

                    If logBorarEspecie Then
                        If Not IsNothing(objPortafolioCliente.Especie) Then
                            EspecieBuscar = String.Empty
                            EspecieBuscar = objPortafolioCliente.Especie
                            BorrarEspecie = False
                        End If

                        If Not IsNothing(objPortafolioCliente.Especie) Then

                            If objOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or
                                objOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                                LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACION, objOrdenSelected)
                            End If

                            objOrdenSelected.Especie = objPortafolioCliente.Especie
                            objOrdenSelected.ISIN = String.Empty
                            EspecieControles = objPortafolioCliente.Especie
                            FechaEmisionControles = objPortafolioCliente.FechaEmision
                            FechaVencimientoControles = objPortafolioCliente.FechaVencimiento
                            ModalidadControles = objPortafolioCliente.Modalidad

                            If Not IsNothing(objPortafolioCliente.FechaEmision) Then
                                objOrdenSelected.FechaEmision = objPortafolioCliente.FechaEmision
                                objOrdenSelected.FechaVencimiento = objPortafolioCliente.FechaVencimiento
                                objOrdenSelected.Modalidad = objPortafolioCliente.Modalidad

                                If Not IsNothing(objPortafolioCliente.TasaFacial) Then
                                    objOrdenSelected.TasaFacial = objPortafolioCliente.TasaFacial
                                Else
                                    objOrdenSelected.TasaFacial = 0
                                End If
                                If Not IsNothing(objPortafolioCliente.Indicador) Then
                                    objOrdenSelected.Indicador = objPortafolioCliente.Indicador
                                Else
                                    objOrdenSelected.Indicador = String.Empty
                                End If
                                If Not IsNothing(objPortafolioCliente.PuntosIndicador) Then
                                    objOrdenSelected.PuntosIndicador = objPortafolioCliente.PuntosIndicador
                                Else
                                    objOrdenSelected.PuntosIndicador = 0
                                End If

                                HabilitarDeshabilitarControlesEspecies(False, False, objPortafolioCliente.TipoTasa, objOrdenSelected.Indicador)
                            End If
                        End If
                    End If

                    objOrdenSelected.Cantidad = objPortafolioCliente.Cantidad

                    If logLlevarPrecioPortafolio Then
                        objOrdenSelected.Precio = objPortafolioCliente.PrecioCompra
                    End If

                    objOrdenSelected.Custodia = objPortafolioCliente.Custodia
                    objOrdenSelected.CustodiaSecuencia = objPortafolioCliente.CustodiaSecuencia

                    If Not String.IsNullOrEmpty(objPortafolioCliente.CentralDeposito) And Not String.IsNullOrEmpty(objPortafolioCliente.CuentaDeposito) Then
                        If logOrdenCruzada Then
                            If Not IsNothing(_ListaCuentasDepositoCruzada) Then
                                For Each li In _ListaCuentasDepositoCruzada
                                    If li.Deposito = objPortafolioCliente.CentralDeposito.ToString And li.NroCuentaDeposito = objPortafolioCliente.CuentaDeposito Then
                                        CtaDepositoSeleccionadaCruzada = li
                                    End If
                                Next
                            End If
                        Else
                            If Not IsNothing(_ListaCuentasDepositoOYDPLUS) Then
                                For Each li In _ListaCuentasDepositoOYDPLUS
                                    If li.Deposito = objPortafolioCliente.CentralDeposito.ToString And li.NroCuentaDeposito = objPortafolioCliente.CuentaDeposito Then
                                        CtaDepositoSeleccionadaOYDPLUS = li
                                    End If
                                Next
                            End If
                        End If

                    End If

                    logCambiarConsultaPortafolio = True
                    If Not (objOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or
                        objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Or
                        objOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Or
                        objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC) Then
                        Await CalcularValorOrden(objOrdenSelected)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener la información del portafolio del cliente.", Me.ToString(), "ObtenerInformacionPortafolioCliente", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para obtener la información de las operaciones x cumplir.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 20 de septiembre del 2012
    ''' </summary>
    Public Async Sub ObtenerInformacionOperacionesXCumplir(ByVal objOperacionXCumplir As OYDPLUSUtilidades.tblOperacionesCumplir, ByVal objOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS, ByVal logBorrarEspecie As Boolean)
        Try
            If Not IsNothing(objOperacionXCumplir) Then
                If objOperacionXCumplir.Seleccionada Then

                    logCambiarConsultaOperaciones = False

                    If logBorrarEspecie Then
                        If Not IsNothing(objOperacionXCumplir.Especie) Then
                            EspecieBuscar = String.Empty
                            EspecieBuscar = objOperacionXCumplir.Especie
                            BorrarEspecie = False
                        End If

                        If Not IsNothing(objOperacionXCumplir.Especie) Then

                            If objOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or
                                objOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                                LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACION, objOrdenSelected)
                            End If

                            objOrdenSelected.Especie = objOperacionXCumplir.Especie
                            objOrdenSelected.ISIN = String.Empty

                            If Not IsNothing(objOperacionXCumplir.FechaEmision) Then
                                objOrdenSelected.FechaEmision = objOperacionXCumplir.FechaEmision
                                objOrdenSelected.FechaVencimiento = objOperacionXCumplir.FechaVencimiento
                                objOrdenSelected.Modalidad = objOperacionXCumplir.Modalidad

                                If Not IsNothing(objOperacionXCumplir.TasaFacial) Then
                                    objOrdenSelected.TasaFacial = objOperacionXCumplir.TasaFacial
                                Else
                                    objOrdenSelected.TasaFacial = 0
                                End If
                                If Not IsNothing(objOperacionXCumplir.Indicador) Then
                                    objOrdenSelected.Indicador = objOperacionXCumplir.Indicador
                                Else
                                    objOrdenSelected.Indicador = String.Empty
                                End If
                                If Not IsNothing(objOperacionXCumplir.PuntosIndicador) Then
                                    objOrdenSelected.PuntosIndicador = objOperacionXCumplir.PuntosIndicador
                                Else
                                    objOrdenSelected.PuntosIndicador = 0
                                End If

                                HabilitarDeshabilitarControlesEspecies(False, False, objOperacionXCumplir.TipoTasaFija, objOrdenSelected.Indicador)

                            End If
                        End If
                    End If

                    objOrdenSelected.Cantidad = objOperacionXCumplir.Cantidad
                    objOrdenSelected.Precio = objOperacionXCumplir.PrecioLiquidacion

                    logCambiarConsultaOperaciones = True
                    If Not (objOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or
                                objOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Or
                                objOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Or
                                objOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC) Then
                        Await CalcularValorOrden(objOrdenSelected)
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener la información de las operaciones x cumplir.", Me.ToString(), "ObtenerInformacionOperacionesXCumplir", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Consultar los beneficiarios de la cuenta depósito asignada a la orden.
    ''' Desarrollado por Juan David Correa.
    ''' Fecha 21 de septiembre del 2012.
    ''' </summary>
    Private Sub consultarBeneficiariosOrden()
        Try
            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                If Not IsNothing(dcProxy.BeneficiariosOrdens) Then
                    dcProxy.BeneficiariosOrdens.Clear()
                End If

                dcProxy.Load(dcProxy.Traer_BeneficiariosOrdenes_OrdenQuery(_OrdenOYDPLUSSelected.Clase, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.NroOrden, _OrdenOYDPLUSSelected.Version, Program.Usuario, _OrdenOYDPLUSSelected.TipoNegocio, Program.HashConexion), AddressOf TerminoTraerBeneficiariosOrdenes, "")
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener los beneficiarios de la orden.", Me.ToString(), "consultarBeneficiariosOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try

    End Sub

    ''' <summary>
    ''' Consultar las liquidaciones asociadas a la orden
    ''' Desarrollado por: Juan David Correa.
    ''' Fecha 21 de septiembre del 2012
    ''' </summary>
    Private Sub consultarLiquidacionesOrden()
        Try
            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                If Not IsNothing(dcProxy.LiquidacionesOrdens) Then
                    dcProxy.LiquidacionesOrdens.Clear()
                End If
                dcProxy.Load(dcProxy.ConsultarLiquidacionesAsociadasOrdenQuery(_OrdenOYDPLUSSelected.Clase, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.NroOrden, Program.Usuario, _OrdenOYDPLUSSelected.TipoNegocio, Program.HashConexion), AddressOf TerminoConsultarLiquidacionesOrden, "consultarLiquidaciones")
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al obtener las liquidaciones de la orden.", Me.ToString(), "consultarLiquidacionesOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub consultarLiqProbablesOrden()
        Try
            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                If logEliminarAsociacion = False Then
                    If Not IsNothing(dcProxy.LiqAsociadasOrdens) Then
                        dcProxy.LiqAsociadasOrdens.Clear()
                    End If

                    dcProxy.Load(dcProxy.Traer_LiqProbables_OrdenQuery(_OrdenOYDPLUSSelected.Clase, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.NroOrden, _OrdenOYDPLUSSelected.Version, "DPA", Program.Usuario, Program.HashConexion),
                                 AddressOf TerminoTraerLiqProbablesOrdenes, "")
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar Saldo de la Orden", Me.ToString(),
                                                    "ConsultarSaldoOrdenSAE", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub consultarEnrutamientoOrden()
        Try
            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                If Not IsNothing(dcProxy.EnrutamientoOrdens) Then
                    dcProxy.EnrutamientoOrdens.Clear()
                End If

                dcProxy.Load(dcProxy.OYDPLUS_ConsultarEnrutamientoOrdenesQuery(_OrdenOYDPLUSSelected.IDNroOrden, Program.Usuario, Program.HashConexion),
                             AddressOf TerminoTraerEnrutamientoOrdenes, "")
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar Saldo de la Orden", Me.ToString(),
                                                    "ConsultarSaldoOrdenSAE", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Async Function ConsultarSaldoOrden() As Task(Of Boolean)
        Dim logResultado As Boolean = False
        Dim objRet As LoadOperation(Of OyDPLUSOrdenesBolsa.tblSaldoOrdenSinCalzar)

        If Not IsNothing(dcProxy1.tblSaldoOrdenSinCalzars) Then
            dcProxy1.tblSaldoOrdenSinCalzars.Clear()
        End If

        Try
            IsBusy = True
            objRet = Await dcProxy1.Load(dcProxy1.OYDPLUS_ConsultarSaldoOrdenSyncQuery(CInt(OrdenOYDPLUSSelected.IDNroOrden), Program.Usuario, Program.HashConexion)).AsTask()

            If Not objRet Is Nothing Then
                If objRet.HasError Then
                    A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cargar el saldo de la orden.", Me.ToString(), "ConsultarSaldoOrden", Program.TituloSistema, Program.Maquina, objRet.Error, Program.RutaServicioLog)
                    IsBusy = False
                Else
                    If objRet.Entities.ToList.Count > 0 Then
                        OrdenOYDPLUSSelected.SaldoOrden = objRet.Entities.FirstOrDefault.SaldoOrden
                    Else
                        OrdenOYDPLUSSelected.SaldoOrden = 0
                    End If

                End If
            Else
                OrdenOYDPLUSSelected.SaldoOrden = 0
            End If
            Return Nothing
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del objeto de negocio.", Me.ToString(), "inicializar", Application.Current.ToString(), Program.Maquina, ex)
            Return Nothing
        Finally
            IsBusy = False
        End Try
    End Function

    Private Async Sub ConsultarSaldoOrdenSAE()
        Try
            Await ConsultarSaldoOrden()
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar Saldo de la Orden", Me.ToString(),
                                                         "ConsultarSaldoOrdenSAE", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub LimpiarDatosTipoNegocio()
        Try
            ComitenteSeleccionadoOYDPLUS = Nothing
            If Not IsNothing(ListaOrdenantesOYDPLUS) Then
                ListaOrdenantesOYDPLUS.Clear()
            End If

            NemotecnicoSeleccionadoOYDPLUS = Nothing
            _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al limpiar los datos del tipo de negocio.", Me.ToString(), "LimpiarDatosTipoNegocio", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Actualizar elemento buscado con los datos recibidos como parámetro
    ''' </summary>
    ''' <param name="pstrTipoItem">Tipo de objeto que se recibe</param>
    ''' <param name="pobjItem">Item enviado como parámetro</param>


    Public Sub actualizarItemOrden(ByVal pstrTipoItem As String, ByVal pobjItem As OYDUtilidades.BuscadorGenerico)
        Try
            If Not IsNothing(pobjItem) Then
                Select Case pstrTipoItem.ToLower
                    Case "idreceptor"
                        Me.ReceptoresOrdenSelected.IDReceptor = pobjItem.IdItem
                        Me.ReceptoresOrdenSelected.Nombre = pobjItem.Nombre
                    Case "idreceptortoma"
                        If logOrdenCruzada Then
                            Me.OrdenCruzadaSelected.ReceptorToma = pobjItem.IdItem
                            Me.OrdenCruzadaSelected.NombreReceptorToma = String.Format("{0} - {1}", pobjItem.IdItem, pobjItem.Nombre)
                        Else
                            Me.OrdenOYDPLUSSelected.ReceptorToma = pobjItem.IdItem
                            Me.OrdenOYDPLUSSelected.NombreReceptorToma = String.Format("{0} - {1}", pobjItem.IdItem, pobjItem.Nombre)
                        End If
                    Case "usuariooperador"
                        Me.OrdenOYDPLUSSelected.UsuarioOperador = pobjItem.IdItem
                End Select
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al actualizar el item de la orden.", Me.ToString(), "actualizarItemOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    ''' <summary>
    ''' Obtiene los datos de receptor seleccionado en la orden cruzada.
    ''' Desarrollado por Juan David Correa
    ''' Fecha 14 de Marzo del 2013
    ''' </summary>
    ''' <param name="pstrIDReceptor"></param>
    ''' <param name="pstrNombreReceptor"></param>
    ''' <remarks></remarks>
    Public Async Sub ObtenerReceptorCruzada(ByVal pstrIDReceptor As String, ByVal pstrNombreReceptor As String)
        Try
            If Not String.IsNullOrEmpty(pstrIDReceptor) Then
                'Valida que el receptor no sea el mismo de la orden.
                If pstrIDReceptor = _OrdenOYDPLUSSelected.Receptor Then
                    mostrarMensaje("El receptor no puede ser igual al receptor de la orden, por favor seleccione otro.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                ElseIf _ListaReceptoresOrdenesCruzada.Where(Function(i) i.IDReceptor = pstrIDReceptor).Count > 0 Then
                    mostrarMensaje("El receptor ya existe en la lista, por favor seleccione otro.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Else
                    Await ValidarOrdenCruzadaReceptor(pstrIDReceptor, pstrNombreReceptor)
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al actualizar los datos del receptor seleccionado.", Me.ToString(), "ObtenerReceptorCruzada", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub ObtenerReceptorCruzadaCliente(ByVal pstrIDReceptor As String, ByVal plogReceptorCliente As Boolean)
        Try
            If Not String.IsNullOrEmpty(pstrIDReceptor) Then
                'Valida que el receptor no sea el mismo de la orden.
                If IsNothing(_ListaReceptoresOrdenesCruzada) Then
                    _ListaReceptoresOrdenesCruzada = New List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
                End If

                Dim objListaReceptores As New List(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar)
                Dim objReceptor As OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar

                For Each li In _ListaReceptoresOrdenesCruzada
                    objListaReceptores.Add(li)
                Next

                If plogReceptorCliente Then
                    If objListaReceptores.Where(Function(i) i.IDReceptor = pstrIDReceptor).Count = 0 Then
                        objListaReceptores.Add(New OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar With {.IDOrdenOriginal = _OrdenOYDPLUSSelected.IDNroOrden,
                                                                                                  .IDReceptor = pstrIDReceptor,
                                                                                                  .NombreReceptor = ListaReceptoresUsuario.Where(Function(i) i.CodigoReceptor = pstrIDReceptor).First.Nombre,
                                                                                                  .Usuario = Program.Usuario})
                    End If
                Else
                    If objListaReceptores.Where(Function(i) i.IDReceptor = pstrIDReceptor).Count > 0 Then
                        objReceptor = objListaReceptores.Where(Function(i) i.IDReceptor = pstrIDReceptor).First

                        objListaReceptores.Remove(objReceptor)
                    End If
                End If

                ListaReceptoresOrdenesCruzada = objListaReceptores
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al actualizar los datos del receptor seleccionado.", Me.ToString(), "ObtenerReceptorCruzadaCliente", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Async Function ConsultarUltimoPrecioEspecieAsync(ByVal pstrEspecie As String,
                                            ByVal pstrTipoOperacion As String,
                                            ByVal pstrTipoNegocio As String,
                                            Optional ByVal pstrUserState As String = "") As Task(Of Boolean)
        Dim logResultado As Boolean = False
        Dim objRet As LoadOperation(Of OyDPLUSOrdenesBolsa.MejorPrecioEspecieOrden)

        If Not IsNothing(dcProxy1.MejorPrecioEspecieOrdens) Then
            dcProxy1.MejorPrecioEspecieOrdens.Clear()
        End If

        Try
            IsBusyCalculos = True
            ErrorForma = String.Empty
            If Not String.IsNullOrEmpty(pstrEspecie) And Not String.IsNullOrEmpty(pstrTipoOperacion) Then
                If pstrEspecie <> "(No Seleccionado)" Then
                    objRet = Await dcProxy1.Load(dcProxy1.OYDPLUS_ConsultarMejorPrecioEspecie_OrdenQuery(pstrTipoOperacion, pstrEspecie, Program.Usuario, pstrTipoNegocio, Program.HashConexion)).AsTask()
                Else
                    objRet = Nothing
                End If
            Else
                objRet = Nothing
            End If
            If Not objRet Is Nothing Then
                If objRet.HasError Then
                    A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cargar el mejor precio de la especie.", Me.ToString(), "ConsultarUltimoPrecioEspecieAsync", Program.TituloSistema, Program.Maquina, objRet.Error, Program.RutaServicioLog)
                    IsBusyCalculos = False
                Else
                    If objRet.Entities.ToList.Count > 0 Then
                        If objRet.UserState = OPCION_ORDENCRUZADA Then
                            If Not IsNothing(_OrdenCruzadaSelected) Then
                                If Not IsNothing(objRet.Entities.FirstOrDefault.Precio) Then
                                    If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                                        _OrdenCruzadaSelected.ValorAccion = 0
                                        _OrdenCruzadaSelected.ValorAccion = objRet.Entities.FirstOrDefault.Precio
                                        dblValorConsultadoPrecioSAE = objRet.Entities.FirstOrDefault.Precio
                                    Else
                                        _OrdenCruzadaSelected.Precio = 0
                                        _OrdenCruzadaSelected.Precio = objRet.Entities.FirstOrDefault.Precio
                                        dblValorConsultadoPrecioSAE = objRet.Entities.FirstOrDefault.Precio
                                    End If
                                End If
                            End If
                        Else
                            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                If Not IsNothing(objRet.Entities.FirstOrDefault.Precio) Then
                                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Or
                                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                        _OrdenOYDPLUSSelected.ValorAccion = 0
                                        _OrdenOYDPLUSSelected.ValorAccion = objRet.Entities.FirstOrDefault.Precio
                                        dblValorConsultadoPrecioSAE = objRet.Entities.FirstOrDefault.Precio
                                        If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Then 'Ajuste porque no traia precio del mercado para TTV RV - JDOL20170629
                                            _OrdenOYDPLUSSelected.Precio = objRet.Entities.FirstOrDefault.Precio
                                        End If
                                    Else
                                        If logEsModal = False Then
                                            _OrdenOYDPLUSSelected.Precio = 0
                                            _OrdenOYDPLUSSelected.Precio = objRet.Entities.FirstOrDefault.Precio
                                        End If

                                        dblValorConsultadoPrecioSAE = objRet.Entities.FirstOrDefault.Precio
                                    End If
                                End If
                            End If
                        End If
                    End If

                End If
            End If

            If pstrUserState = "CAMBIOESPECIE" Then
                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC _
                        Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                    Await ConsultarPorcentajeGarantia()
                End If
            End If

            Return Nothing
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del objeto de negocio.", Me.ToString(), "inicializar", Application.Current.ToString(), Program.Maquina, ex)
            Return Nothing
        Finally
            IsBusyCalculos = False
        End Try
    End Function

    'Public Sub ConsultarUltimoPrecioEspecie(ByVal pstrEspecie As String, ByVal pstrTipoOperacion As String, ByVal pstrTipoNegocio As String, Optional ByVal pstrUserState As String = "")
    '    Try
    '        If Not String.IsNullOrEmpty(pstrEspecie) And Not String.IsNullOrEmpty(pstrTipoOperacion) Then
    '            If pstrEspecie <> "(No Seleccionado)" Then
    '                If Not IsNothing(dcProxy1.MejorPrecioEspecieOrdens) Then
    '                    dcProxy1.MejorPrecioEspecieOrdens.Clear()
    '                End If

    '                dcProxy1.Load(dcProxy1.OYDPLUS_ConsultarMejorPrecioEspecie_OrdenQuery(pstrTipoOperacion, pstrEspecie, Program.Usuario, pstrTipoNegocio), AddressOf TerminoConsultarMejorPrecioEspecie, pstrUserState)
    '            End If
    '        End If
    '    Catch ex As Exception
    '        A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar el ultimo precio de la especie.", Me.ToString(), "ConsultarUltimoPrecioEspecie", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
    '    End Try
    'End Sub

    Public Sub RecargarPantallaOrdenes()
        Try
            If logEditarRegistro = False And logNuevoRegistro = False Then
                If Not IsNothing(ListaOrdenOYDPLUS) Then
                    If Not IsNothing(_OrdenOYDPLUSSelected) Then
                        If ListaOrdenOYDPLUS.Count > 0 Then
                            If strUltimaAccionBusquedaFiltro = "BUSQUEDAAVANZADA" Then
                                intIDOrdenTimer = _OrdenOYDPLUSSelected.IDNroOrden
                                ConfirmarBuscar_DespuesGuardado_Refrescar()
                            Else
                                If ListaOrdenOYDPLUS.First.IDNroOrden = _OrdenOYDPLUSSelected.IDNroOrden Then
                                    Dim vista As String = VistaSeleccionada
                                    VistaSeleccionada = String.Empty
                                    VistaSeleccionada = vista
                                Else
                                    intIDOrdenTimer = _OrdenOYDPLUSSelected.IDNroOrden

                                    If VistaSeleccionada = VISTA_PENDIENTESAPROBAR Then
                                        FiltrarRegistrosOYDPLUS("D", String.Empty, "TIMERSELECTED", "TIMERSELECTED")
                                    Else
                                        FiltrarRegistrosOYDPLUS("P", String.Empty, "TIMERSELECTED", "TIMERSELECTED")
                                    End If
                                End If
                            End If
                        Else
                            Dim vista As String = VistaSeleccionada
                            VistaSeleccionada = String.Empty
                            VistaSeleccionada = vista
                        End If
                    Else
                        Dim vista As String = VistaSeleccionada
                        VistaSeleccionada = String.Empty
                        VistaSeleccionada = vista
                    End If
                Else
                    Dim vista As String = VistaSeleccionada
                    VistaSeleccionada = String.Empty
                    VistaSeleccionada = vista
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recargar la pantalla de Ordenes.", Me.ToString(), "RecargarPantallaOrdenes", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Sub ConsultarOrdenesCruzadas(ByVal pintIDOrden As Integer, ByVal plogOrdenOriginal As Boolean, ByVal pstrUserState As String)
        Try
            If Not IsNothing(dcProxy.tblOrdenesCruzadas) Then
                dcProxy.tblOrdenesCruzadas.Clear()
            End If

            dcProxy.Load(dcProxy.OYDPLUS_ConsultarOrdenesCruzadasQuery(pintIDOrden, plogOrdenOriginal, Program.Usuario, False, String.Empty, Program.HashConexion), AddressOf TerminoConsultarOrdenesCruzadas, pstrUserState)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar las ordenes cruzadas de la orden.", Me.ToString(), "ConsultarOrdenesCruzadas", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    ''' <summary>
    ''' Metodo para validar sí existe alguna orden por cruzar para el usuario.
    ''' </summary>
    ''' <param name="pstrUsuarioConsulta"></param>
    ''' <param name="pstrUserState"></param>
    ''' <remarks></remarks>
    Public Sub ValidarExistenciaOrdenCruzada(ByVal pstrUsuarioConsulta As String, Optional ByVal pstrUserState As String = "")
        Try
            dcProxy.OYDPLUS_ValidarExistenciaOrdenCruzada(pstrUsuarioConsulta, Program.Usuario, Program.HashConexion, AddressOf TerminoValidarExistenciaCruzada, pstrUserState)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al validar la existencia de las ordenes cruzadas.", Me.ToString(), "ValidarExistenciaOrdenCruzada", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Public Sub CalcularFechaCumplimiento(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            Dim objDiccionario As New Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))


            If Not IsNothing(DiccionarioCombosOYDPlus) Then
                For Each li In DiccionarioCombosOYDPlus
                    objDiccionario.Add(li.Key, li.Value)
                Next
            End If

            If objDiccionario.ContainsKey("DIASDEFECTO_CUMPLIMIENTOACCIONES") Then
                If objDiccionario("DIASDEFECTO_CUMPLIMIENTOACCIONES").Count > 0 Then
                    Try
                        intDiasDefectoCumplimientoAcciones = CInt(objDiccionario("DIASDEFECTO_CUMPLIMIENTOACCIONES").First.Retorno)
                    Catch ex As Exception
                        intDiasDefectoCumplimientoAcciones = 3
                    End Try
                End If
            End If

            If objDiccionario.ContainsKey("DIASDEFECTO_CUMPLIMIENTORENTAFIJA") Then
                If objDiccionario("DIASDEFECTO_CUMPLIMIENTORENTAFIJA").Count > 0 Then
                    Try
                        intDiasDefectoCumplimientoRentaFija = CInt(objDiccionario("DIASDEFECTO_CUMPLIMIENTORENTAFIJA").First.Retorno)
                    Catch ex As Exception
                        intDiasDefectoCumplimientoRentaFija = 1
                    End Try
                End If
            End If

            If Not IsNothing(pobjOrdenSelected) Then
                ObtenerFechaServidor()

                If (pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ADR) Then
                    CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_CUMPLIMIENTO_ORDEN, pobjOrdenSelected, intDiasDefectoCumplimientoAcciones)
                Else
                    'If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                    If (pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC) Or (pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC) Or (pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA) Then
                        pobjOrdenSelected.FechaSalida = dtmFechaServidor
                        pobjOrdenSelected.FechaCumplimiento = DateAdd(DateInterval.Day, intDiasDefectoCumplimientoRentaFija, pobjOrdenSelected.FechaSalida.Value.Date)
                        pobjOrdenSelected.DiasCumplimiento = DateDiff(DateInterval.Day, pobjOrdenSelected.FechaSalida.Value.Date, pobjOrdenSelected.FechaCumplimiento.Value.Date)
                    Else
                        'pobjOrdenSelected.FechaCumplimiento = DateAdd(DateInterval.Day, intDiasDefectoCumplimientoRentaFija, pobjOrdenSelected.FechaOrden.Value.Date)
                        'pobjOrdenSelected.DiasCumplimiento = DateDiff(DateInterval.Day, pobjOrdenSelected.FechaOrden.Value.Date, pobjOrdenSelected.FechaCumplimiento.Value.Date)
                        CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_CUMPLIMIENTO_ORDEN, pobjOrdenSelected, intDiasDefectoCumplimientoRentaFija)

                    End If
                End If
                MyBase.CambioItem("OrdenOYDPLUSSelected")
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los días del plazo.", Me.ToString(), "CalcularDiasPlazo", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Sub CalcularDiasPlazo(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If Not IsNothing(pobjOrdenSelected) Then
                If Not IsNothing(pobjOrdenSelected.FechaCumplimiento) Then
                    If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                        If Not IsNothing(pobjOrdenSelected.FechaSalida) Then
                            CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_PLAZO, pobjOrdenSelected, -1)
                        End If
                    Else
                        If Not IsNothing(pobjOrdenSelected.FechaOrden) Then
                            CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_PLAZO, pobjOrdenSelected, -1)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los días del plazo.", Me.ToString(), "CalcularDiasPlazo", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub



    Public Sub CalcularFechaCumplimientoPorDias(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If Not IsNothing(pobjOrdenSelected) Then
                If Not IsNothing(pobjOrdenSelected.FechaOrden) Then
                    If Not IsNothing(pobjOrdenSelected.DiasCumplimiento) Then
                        CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_FECHA_CUMPLIMIENTO_DE_DIAS, pobjOrdenSelected, pobjOrdenSelected.DiasCumplimiento)
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los días del plazo.", Me.ToString(), "CalcularDiasPlazo", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub


    'Public Sub VerificarTasaRegistro_TasaCliente(ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
    '    Try
    '        MensajeTasas = String.Empty
    '        MostrarMensajeTasas = Visibility.Collapsed

    '        If logEditarRegistro Or logNuevoRegistro Then
    '            If Not IsNothing(pobjOrdenSelected) Then
    '                If Not IsNothing(pobjOrdenSelected.TasaRegistro) And Not IsNothing(pobjOrdenSelected.TasaCliente) Then
    '                    If pobjOrdenSelected.TasaRegistro <> 0 And pobjOrdenSelected.TasaCliente <> 0 Then
    '                        If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Or
    '                           pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Or
    '                           pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Or
    '                           pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or
    '                           pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
    '                            If pobjOrdenSelected.TipoOperacion = TIPOOPERACION_COMPRA Then
    '                                If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or
    '                                        pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
    '                                    If pobjOrdenSelected.TasaCliente < pobjOrdenSelected.TasaRegistro Then
    '                                        MensajeTasas = "La tasa neta no puede ser menor a la tasa operación."
    '                                        MostrarMensajeTasas = Visibility.Visible
    '                                    End If
    '                                Else
    '                                    If pobjOrdenSelected.TasaCliente > pobjOrdenSelected.TasaRegistro Then
    '                                        MensajeTasas = "La tasa cliente no puede ser mayor a la tasa registro."
    '                                        MostrarMensajeTasas = Visibility.Visible
    '                                    End If
    '                                End If
    '                            ElseIf pobjOrdenSelected.TipoOperacion = TIPOOPERACION_VENTA Then
    '                                If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or
    '                                       pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
    '                                    If pobjOrdenSelected.TasaCliente > pobjOrdenSelected.TasaRegistro Then
    '                                        MensajeTasas = "La tasa neta no puede ser mayor a la tasa operación."
    '                                        MostrarMensajeTasas = Visibility.Visible
    '                                    End If
    '                                Else
    '                                    If pobjOrdenSelected.TasaCliente < pobjOrdenSelected.TasaRegistro Then
    '                                        MensajeTasas = "La tasa cliente no puede ser menor a la tasa registro."
    '                                        MostrarMensajeTasas = Visibility.Visible
    '                                    End If
    '                                End If
    '                            End If
    '                        End If
    '                    End If
    '                End If
    '            End If
    '        End If
    '    Catch ex As Exception
    '        A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los días del plazo.", Me.ToString(), "CalcularDiasPlazo", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
    '    End Try
    'End Sub

    'Metodo para Seleccionar Las Faciales de la Especie traida de Bolsa en Operaciones Directas
    'Juan David Osorio Legarda Agosto 24 2015
    '
    Public Async Function SeleccionarFacialesEspecie_SAE(pobj As OYDPLUSUtilidades.tblOrdenesSAERentaFija) As Task(Of OYDUtilidades.BuscadorEspecies)

        Dim logResultado As Boolean = False
        Dim objRet As LoadOperation(Of OYDUtilidades.BuscadorEspecies)
        Dim FechaEmision As Nullable(Of DateTime) = Nothing
        Dim FechaVencimiento As Nullable(Of DateTime) = Nothing

        If _OrdenOYDPLUSSelected.TipoNegocio <> TIPONEGOCIO_REPO And
            _OrdenOYDPLUSSelected.TipoNegocio <> TIPONEGOCIO_REPOC And
            _OrdenOYDPLUSSelected.TipoNegocio <> TIPONEGOCIO_TTV Then
            ' _OrdenOYDPLUSSelected.TipoNegocio <> TIPONEGOCIO_TTVC Then
            If Not IsNothing(pobj.FechaEmision) Then
                FechaEmision = CDate(pobj.FechaEmision)
            End If
            If Not IsNothing(pobj.FechaVencimiento) Then
                FechaVencimiento = CDate(pobj.FechaVencimiento)
            End If
        End If

        If Not IsNothing(mdcProxyUtilidad01.BuscadorEspecies) Then
            mdcProxyUtilidad01.BuscadorEspecies.Clear()
        End If

        Try
            IsBusy = True
            ErrorForma = String.Empty
            'objRet = Await mdcProxyUtilidad01.Load(mdcProxyUtilidad01.buscarNemotecnicoEspecificoQuery("T", pobj.Especie, Program.Usuario, Program.HashConexion)).AsTask()
            objRet = Await mdcProxyUtilidad01.Load(mdcProxyUtilidad01.buscarEspeciesOyDPLUSQuery(pobj.Especie, "T", "A", "", OrdenOYDPLUSSelected.TipoNegocio, OrdenOYDPLUSSelected.TipoProducto, Program.Usuario, False, Program.HashConexion)).AsTask()


            If Not objRet Is Nothing Then
                If objRet.HasError = False Then
                    If objRet.Entities.ToList.Count > 0 Then
                        If OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Then
                            Me.NemotecnicoSeleccionadoOYDPLUS = objRet.Entities.FirstOrDefault
                        Else
                            If objRet.Entities.Where(Function(x) Not IsNothing(x.Emision) And Not IsNothing(x.Vencimiento) And Not IsNothing(x.CodModalidad)).Count > 0 Then
                                If objRet.Entities.Where(Function(x) x.Emision = FechaEmision And x.Vencimiento = FechaVencimiento And x.CodModalidad = pobj.Modalidad).Count = 1 Then
                                    Me.NemotecnicoSeleccionadoOYDPLUS = objRet.Entities.Where(Function(x) x.Emision = FechaEmision And x.Vencimiento = FechaVencimiento And x.CodModalidad = pobj.Modalidad).FirstOrDefault
                                    ConsultarIsines = False
                                ElseIf objRet.Entities.Where(Function(x) x.Emision = FechaEmision And x.Vencimiento = FechaVencimiento And x.CodModalidad = pobj.Modalidad).Count > 1 Then
                                    logMostrarIsinesCorresponden = True
                                End If
                            End If

                            'For Each li In objRet.Entities.Where(Function(i) Not IsNothing(i.Emision) And Not IsNothing(i.Vencimiento))


                            '    If li.CodModalidad = pobj.Modalidad And li.Nemotecnico = pobj.Especie And IIf(IsNothing(li.Emision), False, CDate(li.Emision).ToShortDateString) = IIf(IsNothing(pobj.FechaEmision), False, CDate(pobj.FechaEmision).ToShortDateString) And IIf(IsNothing(li.Vencimiento), False, CDate(li.Vencimiento).ToShortDateString) = IIf(IsNothing(pobj.FechaVencimiento), False, CDate(pobj.FechaVencimiento).ToShortDateString) Then
                            '        Me.NemotecnicoSeleccionadoOYDPLUS = li
                            '        ConsultarIsines = False
                            '        Exit For
                            '    End If
                            'Next

                        End If

                        If IsNothing(NemotecnicoSeleccionadoOYDPLUS) Then

                            logMostrarIsines = True
                            _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
                            If pobj.Mensajes <> String.Empty Then
                                mostrarMensaje(pobj.Mensajes, Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                            Else
                                'C-20200380_JAPC20200508: Se adiciona validacion para alertar al usuario cuando la especie no tiene las conofiguraciones de isin correspondientes a la operacion en bolsa
                                'JAPC2020608_ C-20200423 : se agrega condicion para mostrar mensaje segun parametro HABILITARMENSAJE_CARACTERISTICASFACIALES
                                If logHabilitarMensajeCaracteristicasFaciales Then
                                    mostrarMensaje("¡No se pudo seleccionar caracteristicas de la especie, revisar la configuración de la especie en OyD!",
                                        Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                End If

                            End If

                        Else
                            If pobj.Mensajes <> String.Empty Then
                                mostrarMensaje(pobj.Mensajes, Program.Aplicacion, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            End If
                        End If

                    Else
                        Me.NemotecnicoSeleccionadoOYDPLUS = Nothing
                    End If

                End If
            End If

            Return Nothing
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del objeto de negocio.", Me.ToString(), "inicializar", Application.Current.ToString(), Program.Maquina, ex)
            Return Nothing
        Finally
            IsBusy = False
        End Try
    End Function

    Public Function CalculoFechaCancelacionConDiasNoHabil(pdtmFechaOrden As DateTime,
                                                          intDiasCancelacion As Integer) As DateTime

        If Not IsNothing(pdtmFechaOrden) Then
            Dim FechaValida As DateTime = pdtmFechaOrden.Date.AddDays(intDiasCancelacion - 1)
            Return FechaValida
        Else
            Return Nothing
        End If

        'Dim logResultado As Boolean = False

        'Try
        '    Dim objRet As System.OpenRiaServices.DomainServices.Client.LoadOperation(Of OyDPLUSOrdenesBolsa.ValidarFecha)
        '    Dim objProxy As OYDPLUSOrdenesBolsaDomainContext

        '    If System.Diagnostics.Debugger.IsAttached And Program.ejecutarAppSegunAmbiente() Then
        '        objProxy = New OYDPLUSOrdenesBolsaDomainContext()
        '    Else
        '        objProxy = New OYDPLUSOrdenesBolsaDomainContext(New System.Uri(Program.RutaServicioNegocio))
        '    End If

        '    'Se realiza para aumentar el tiempo de consulta de ria y evitar el timeup en algunas consultas
        '    DirectCast(objProxy.DomainClient, WebDomainClient(Of OYDPLUSOrdenesBolsaDomainContext.IOYDPLUSOrdenesBolsaDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)

        '    IsBusy = True
        '    ErrorForma = String.Empty

        '    objProxy.ValidarFechas.Clear()
        '    objRet = Await objProxy.Load(objProxy.CalcularDiasHabilesQuery(MSTR_CALCULAR_DIAS_ORDEN, pdtmFechaOrden.ToShortDateString, Nothing, intDiasCancelacion, Program.Usuario)).AsTask()

        '    If Not objRet Is Nothing Then
        '        If objRet.HasError = False Then
        '            If Not IsNothing(objRet.Entities.FirstOrDefault.FechaFinal) Then
        '                FechaCancelacionValidada = objRet.Entities.FirstOrDefault.FechaFinal + " 23:59:59"
        '                OrdenOYDPLUSSelected.Dias = objRet.Entities.FirstOrDefault.NroDias
        '            End If
        '        End If

        '    End If
        '    Return FechaCancelacionValidada
        'Catch ex As Exception
        '    A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del objeto de negocio.", Me.ToString(), "inicializar", Application.Current.ToString(), Program.Maquina, ex)
        '    Return Nothing
        'Finally
        '    IsBusy = False
        'End Try
    End Function

    Private Async Function ValidarOrdenCruzadaReceptor(pstrReceptorNuevo As String, pstrNombreReceptor As String) As System.Threading.Tasks.Task

        Dim objRet As LoadOperation(Of OyDPLUSOrdenesBolsa.tblOrdenesCruzadas)

        Try
            IsBusy = True
            ErrorForma = String.Empty
            strReceptorId_Cruzada = String.Empty
            strNombreReceptor_Cruzada = String.Empty
            dcProxy.tblOrdenesCruzadas.Clear()
            objRet = Await dcProxy.Load(dcProxy.OYDPLUS_ConsultarOrdenesCruzadasQuery(_OrdenOYDPLUSSelected.IDNroOrden, True, Program.Usuario, True, _ReceptoresOrdenCruzadaSelected.IDReceptor, Program.HashConexion)).AsTask()

            If Not objRet Is Nothing Then
                If objRet.HasError = False Then
                    If Not IsNothing(objRet.Entities) Then
                        If objRet.Entities.Count > 0 Then
                            If objRet.Entities.Where(Function(i) i.Mensaje = Nothing).Count > 0 Then
                                _ReceptoresOrdenCruzadaSelected.IDReceptor = pstrReceptorNuevo
                                _ReceptoresOrdenCruzadaSelected.NombreReceptor = pstrNombreReceptor
                                _ReceptoresOrdenCruzadaSelected.Usuario = Program.Usuario
                            Else
                                strReceptorId_Cruzada = pstrReceptorNuevo
                                strNombreReceptor_Cruzada = pstrNombreReceptor
                                mostrarMensajePregunta(objRet.Entities.FirstOrDefault.Mensaje.Replace("---", vbCrLf).Replace("<<>>", pstrReceptorNuevo),
                                         Program.TituloSistema,
                                         "",
                                         AddressOf TerminoPreguntaReceptorCruzadaCambio, True)
                            End If
                        Else
                            _ReceptoresOrdenCruzadaSelected.IDReceptor = pstrReceptorNuevo
                            _ReceptoresOrdenCruzadaSelected.NombreReceptor = pstrNombreReceptor
                            _ReceptoresOrdenCruzadaSelected.Usuario = Program.Usuario
                        End If

                    End If
                End If

            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del objeto de negocio.", Me.ToString(), "inicializar", Application.Current.ToString(), Program.Maquina, ex)

        Finally
            IsBusy = False
        End Try
    End Function

    Private Function ValidarTipoProductoPosicionPropia(ByVal pobjOrdenSelected As OrdenOYDPLUS) As Boolean
        Dim logRetorno As Boolean = False

        Try
            If logHabilitarCondicionesTipoProductoCuentaPropia Then
                If Not IsNothing(pobjOrdenSelected) Then
                    If Not String.IsNullOrEmpty(pobjOrdenSelected.TipoProducto) Then
                        If Not IsNothing(strTiposProductoPosicionPropia) Then
                            Dim objRegistros = strTiposProductoPosicionPropia.Split(",")
                            For Each objRegistro In objRegistros
                                If objRegistro = pobjOrdenSelected.TipoProducto Then
                                    logRetorno = True
                                    Exit For
                                End If
                            Next
                        End If
                    End If
                End If
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del objeto de negocio.", Me.ToString(), "inicializar", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
        Return logRetorno
    End Function

    Private Function LlevarRecetorOrdenDistribucionComision(ByVal pobjOrdenSelected As OrdenOYDPLUS, ByVal plogOrdenCruzada As Boolean) As Boolean
        Dim logRetorno As Boolean = False

        Try
            Dim objListaDistribucionComision As New List(Of ReceptoresOrden)
            Dim NewReceptoresOrden As New OyDPLUSOrdenesBolsa.ReceptoresOrden

            NewReceptoresOrden.ClaseOrden = pobjOrdenSelected.Clase
            NewReceptoresOrden.TipoOrden = pobjOrdenSelected.TipoOperacion
            NewReceptoresOrden.NroOrden = pobjOrdenSelected.NroOrden
            NewReceptoresOrden.Version = pobjOrdenSelected.Version
            NewReceptoresOrden.IDComisionista = 0
            NewReceptoresOrden.IDSucComisionista = 0
            NewReceptoresOrden.FechaActualizacion = dtmFechaServidor
            NewReceptoresOrden.Usuario = Program.Usuario
            NewReceptoresOrden.Lider = True
            NewReceptoresOrden.Porcentaje = 100
            NewReceptoresOrden.Nombre = pobjOrdenSelected.NombreReceptor
            NewReceptoresOrden.IDReceptor = pobjOrdenSelected.Receptor

            objListaDistribucionComision.Add(NewReceptoresOrden)

            If plogOrdenCruzada Then
                DistribucionComisionCruzadaSelected = Nothing
                ListaDistribucionComisionCruzada = objListaDistribucionComision
                If ListaDistribucionComisionCruzada.Count > 0 Then
                    DistribucionComisionCruzadaSelected = ListaDistribucionComisionCruzada.First
                End If
            Else
                ReceptoresOrdenSelected = Nothing
                ListaReceptoresOrdenes = objListaDistribucionComision
                If ListaReceptoresOrdenes.Count > 0 Then
                    ReceptoresOrdenSelected = ListaReceptoresOrdenes.First
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del objeto de negocio.", Me.ToString(), "inicializar", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
        Return logRetorno
    End Function

    Public Function VerificarTipoCalculo(ByVal pobjOrdenSelected As OrdenOYDPLUS, ByVal pstrTipoCalculoConsolidado As String, ByVal pstrCampoModificado As String) As String
        Dim strRetorno As String = String.Empty

        Try
            If Not IsNothing(pobjOrdenSelected) Then

                Dim logEsCalculosOrdenDirecta_RentaFija As Boolean = False

                If logOrdenDIRECTA_RENTAFIJA And (pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or
                                                  pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Or
                                                  pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Or
                                                  pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC) Then
                    If Not IsNothing(_ListaOrdenSAERentaFija) Then
                        If ListaOrdenSAERentaFija.Where(Function(i) i.Seleccionada = True).Count > 0 Then
                            logEsCalculosOrdenDirecta_RentaFija = True
                        End If
                    End If

                    If Not IsNothing(ListaLiqAsociadasOrdenes) Then
                        If ListaLiqAsociadasOrdenes.Count > 0 Then
                            logEsCalculosOrdenDirecta_RentaFija = True
                        End If
                    End If
                End If

                If logEsCalculosOrdenDirecta_RentaFija Then

                    ValidarTipoCalculoDefecto(False, pobjOrdenSelected.TipoNegocio)

                    If pstrCampoModificado = TIPOCALCULOS_MOTOR.COMISION.ToString Then
                        If objTipoCalculo = TIPOCALCULOS_MOTOR.COMISION.ToString Then
                            strRetorno = (TIPOCALCULOS_MOTOR.COMISION.ToString)
                        Else
                            strRetorno = String.Format("{0}_{1}", objTipoCalculo, TIPOCALCULOS_MOTOR.COMISION.ToString)
                        End If
                    ElseIf pstrCampoModificado = TIPOCALCULOS_MOTOR.VALORCOMISION.ToString Then
                        If objTipoCalculo = TIPOCALCULOS_MOTOR.VALORCOMISION.ToString Then
                            strRetorno = (TIPOCALCULOS_MOTOR.VALORCOMISION.ToString)
                        Else
                            strRetorno = String.Format("{0}_{1}", objTipoCalculo, TIPOCALCULOS_MOTOR.VALORCOMISION.ToString)
                        End If
                        'strRetorno = String.Format("{0}_{1}", objTipoCalculo, TIPOCALCULOS_MOTOR.VALORCOMISION.ToString)
                    ElseIf pstrCampoModificado = TIPOCALCULOS_MOTOR.TASACLIENTE.ToString Then
                        If objTipoCalculo = TIPOCALCULOS_MOTOR.TASACLIENTE.ToString Then
                            strRetorno = (TIPOCALCULOS_MOTOR.TASACLIENTE.ToString)
                        Else
                            strRetorno = String.Format("{0}_{1}", objTipoCalculo, TIPOCALCULOS_MOTOR.TASACLIENTE.ToString)
                        End If
                        'strRetorno = String.Format("{0}_{1}", objTipoCalculo, TIPOCALCULOS_MOTOR.TASACLIENTE.ToString)
                    ElseIf pstrCampoModificado = TIPOCALCULOS_MOTOR.CANTIDAD.ToString And pobjOrdenSelected.TipoGarantia = TIPONEGOCIO_RENTAFIJA Then
                        If objTipoCalculo = TIPOCALCULOS_MOTOR.CANTIDAD.ToString Then
                            strRetorno = (TIPOCALCULOS_MOTOR.CANTIDAD.ToString)
                        Else
                            strRetorno = String.Format("{0}_{1}", objTipoCalculo, TIPOCALCULOS_MOTOR.CANTIDAD.ToString)
                        End If
                        'strRetorno = String.Format("{0}_{1}", objTipoCalculo, TIPOCALCULOS_MOTOR.COMISION.ToString)
                    Else
                        If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                            strRetorno = TIPOCALCULOS_MOTOR.COMISION.ToString
                        Else
                            strRetorno = String.Format("{0}_{1}", objTipoCalculo, TIPOCALCULOS_MOTOR.COMISION.ToString)
                        End If
                    End If
                Else
                    If Not String.IsNullOrEmpty(pstrCampoModificado) Then
                        If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or
                            pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ADR Or
                            pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                            pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                            If Not String.IsNullOrEmpty(pstrCampoModificado) Then
                                strRetorno = pstrCampoModificado
                            Else
                                strRetorno = pstrTipoCalculoConsolidado
                            End If
                        ElseIf pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                            If pobjOrdenSelected.EnPesos Then
                                If strParametroBaseComercialCaptacionRepo = "PRE" Then
                                    If pstrCampoModificado = TIPOCALCULOS_MOTOR.COMISION.ToString Then
                                        strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.TASACLIENTE.ToString, pstrCampoModificado)
                                    ElseIf pstrCampoModificado = TIPOCALCULOS_MOTOR.VALORCOMISION.ToString Then
                                        strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.TASACLIENTE.ToString, pstrCampoModificado)
                                    ElseIf pstrCampoModificado = TIPOCALCULOS_MOTOR.TASAREGISTRO.ToString Then
                                        strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.TASACLIENTE.ToString, pstrCampoModificado)
                                    Else
                                        strRetorno = pstrTipoCalculoConsolidado
                                    End If
                                Else
                                    If pstrCampoModificado = TIPOCALCULOS_MOTOR.COMISION.ToString Then
                                        strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.VALORCAPTACION.ToString, pstrCampoModificado)
                                    ElseIf pstrCampoModificado = TIPOCALCULOS_MOTOR.VALORCOMISION.ToString Then
                                        strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.VALORCAPTACION.ToString, pstrCampoModificado)
                                    ElseIf pstrCampoModificado = TIPOCALCULOS_MOTOR.TASACLIENTE.ToString Then
                                        strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.VALORCAPTACION.ToString, pstrCampoModificado)
                                    ElseIf pstrCampoModificado = TIPOCALCULOS_MOTOR.VALORCAPTACION.ToString Then
                                        strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.VALORCAPTACION.ToString, TIPOCALCULOS_MOTOR.COMISION)
                                    Else
                                        strRetorno = pstrTipoCalculoConsolidado
                                    End If
                                End If
                            Else
                                If pstrCampoModificado <> TIPOCALCULOS_MOTOR.TASAREGISTRO.ToString Then
                                    strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.TASAREGISTRO.ToString, pstrCampoModificado)
                                Else
                                    strRetorno = pstrTipoCalculoConsolidado
                                End If
                            End If
                        ElseIf pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_REPOC Then
                            If pstrCampoModificado = TIPOCALCULOS_MOTOR.PRECIO.ToString Or
                                pstrCampoModificado = TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString Then
                                If String.IsNullOrEmpty(pstrTipoCalculoConsolidado) Then
                                    strRetorno = pstrCampoModificado
                                Else
                                    If pstrTipoCalculoConsolidado = TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString Or
                                        pstrTipoCalculoConsolidado = TIPOCALCULOS_MOTOR.PRECIO.ToString Then
                                        strRetorno = pstrCampoModificado
                                    Else
                                        strRetorno = pstrTipoCalculoConsolidado.Replace(String.Format("{0}_", TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString), "")
                                        strRetorno = strRetorno.Replace(String.Format("{0}_", TIPOCALCULOS_MOTOR.PRECIO.ToString), "")
                                        If pstrCampoModificado = TIPOCALCULOS_MOTOR.PRECIO.ToString Then
                                            strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIO.ToString, strRetorno)
                                        Else
                                            strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString, strRetorno)
                                        End If
                                    End If
                                End If
                            Else
                                If pstrTipoCalculoConsolidado.Contains(TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString) Then
                                    strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString, pstrCampoModificado)
                                ElseIf pstrTipoCalculoConsolidado.Contains(TIPOCALCULOS_MOTOR.PRECIO.ToString) Then
                                    strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIO.ToString, pstrCampoModificado)
                                Else
                                    strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIO.ToString, pstrCampoModificado)
                                End If
                            End If
                        ElseIf pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                            If pstrCampoModificado = TIPOCALCULOS_MOTOR.PRECIO.ToString Or
                                pstrCampoModificado = TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString Then
                                If String.IsNullOrEmpty(pstrTipoCalculoConsolidado) Then
                                    strRetorno = pstrCampoModificado
                                Else
                                    If pstrTipoCalculoConsolidado = TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString Or
                                        pstrTipoCalculoConsolidado = TIPOCALCULOS_MOTOR.PRECIO.ToString Then
                                        strRetorno = pstrCampoModificado
                                    Else
                                        strRetorno = pstrTipoCalculoConsolidado.Replace(String.Format("{0}_", TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString), "")
                                        strRetorno = strRetorno.Replace(String.Format("{0}_", TIPOCALCULOS_MOTOR.PRECIO.ToString), "")
                                        If pstrCampoModificado = TIPOCALCULOS_MOTOR.PRECIO.ToString Then
                                            strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIO.ToString, strRetorno)
                                        Else
                                            strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString, strRetorno)
                                        End If
                                    End If
                                End If
                            Else
                                If pstrTipoCalculoConsolidado.Contains(TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString) Then
                                    strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString, pstrCampoModificado)
                                ElseIf pstrTipoCalculoConsolidado.Contains(TIPOCALCULOS_MOTOR.PRECIO.ToString) Then
                                    strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIO.ToString, pstrCampoModificado)
                                Else
                                    strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.PRECIO.ToString, pstrCampoModificado)
                                End If
                            End If
                        Else
                            If pstrCampoModificado = TIPOCALCULOS_MOTOR.CANTIDAD.ToString Or
                                pstrCampoModificado = TIPOCALCULOS_MOTOR.VALORNETO.ToString Or
                                pstrCampoModificado = TIPOCALCULOS_MOTOR.PRECIO.ToString Or
                                pstrCampoModificado = TIPOCALCULOS_MOTOR.PRECIOMAXIMOMINIMO.ToString Or
                                (pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA And pstrCampoModificado = TIPOCALCULOS_MOTOR.TASAREGISTRO.ToString) Then
                                strRetorno = pstrCampoModificado
                            Else
                                Dim logContieneTexto As Boolean = False
                                For Each li In pstrTipoCalculoConsolidado.Split("_")
                                    If li = pstrCampoModificado Then
                                        logContieneTexto = True
                                        Exit For
                                    End If
                                Next

                                If logContieneTexto = False Then
                                    Dim intCantidadSeparador As Integer = pstrTipoCalculoConsolidado.Split("_").Count
                                    If intCantidadSeparador >= 2 Then
                                        Dim strTextoTemporal As String = pstrTipoCalculoConsolidado.Substring(0, pstrTipoCalculoConsolidado.IndexOf("_") + 1)
                                        pstrTipoCalculoConsolidado = Replace(pstrTipoCalculoConsolidado, strTextoTemporal, String.Empty)

                                        strRetorno = String.Format("{0}_{1}", pstrTipoCalculoConsolidado, pstrCampoModificado)

                                        If strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.COMISION.ToString, TIPOCALCULOS_MOTOR.VALORCOMISION.ToString) Or
                                            strRetorno = String.Format("{0}_{1}", TIPOCALCULOS_MOTOR.VALORCOMISION.ToString, TIPOCALCULOS_MOTOR.COMISION.ToString) Then
                                            strRetorno = String.Format("{0}{1}", strTextoTemporal, pstrCampoModificado)
                                        End If
                                    Else
                                        If String.IsNullOrEmpty(pstrTipoCalculoConsolidado) Then
                                            strRetorno = pstrCampoModificado
                                        Else
                                            strRetorno = String.Format("{0}_{1}", pstrTipoCalculoConsolidado, pstrCampoModificado)
                                        End If
                                    End If
                                Else
                                    strRetorno = pstrTipoCalculoConsolidado
                                End If
                            End If
                        End If
                    ElseIf Not String.IsNullOrEmpty(pstrTipoCalculoConsolidado) Then
                        strRetorno = pstrTipoCalculoConsolidado
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la inicialización del objeto de negocio.", Me.ToString(), "inicializar", Application.Current.ToString(), Program.Maquina, ex)
            IsBusy = False
        End Try
        Return strRetorno
    End Function

    Public Sub ObtenerDecimales()
        Try
            Dim intCantidadDecimalesEspeciales As Integer = 2
            Dim intCantidadDecimalesPorcentajeComision As Integer = 3
            Dim intCantidadDecimalesRentabilidad As Integer = 3
            Dim intCantidadDecimalesCalculoPrecio As Integer = 3

            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("CANTIDADDECIMALESESPECIALES_ORDENOYDPLUS") Then
                    If DiccionarioCombosOYDPlusCompleta("CANTIDADDECIMALESESPECIALES_ORDENOYDPLUS").Count > 0 Then
                        intCantidadDecimalesEspeciales = CInt(DiccionarioCombosOYDPlusCompleta("CANTIDADDECIMALESESPECIALES_ORDENOYDPLUS").First.Retorno)
                    End If
                End If
            End If

            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("CANTIDADDECIMALESPORCOMISION_ORDENOYDPLUS") Then
                    If DiccionarioCombosOYDPlusCompleta("CANTIDADDECIMALESPORCOMISION_ORDENOYDPLUS").Count > 0 Then
                        intCantidadDecimalesPorcentajeComision = CInt(DiccionarioCombosOYDPlusCompleta("CANTIDADDECIMALESPORCOMISION_ORDENOYDPLUS").First.Retorno)
                    End If
                End If
            End If

            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("CANTIDADDECIMALESRENTABILIDAD_ORDENOYDPLUS") Then
                    If DiccionarioCombosOYDPlusCompleta("CANTIDADDECIMALESRENTABILIDAD_ORDENOYDPLUS").Count > 0 Then
                        intCantidadDecimalesRentabilidad = CInt(DiccionarioCombosOYDPlusCompleta("CANTIDADDECIMALESRENTABILIDAD_ORDENOYDPLUS").First.Retorno)
                    End If
                End If
            End If

            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("CANTIDADDECIMALESCALCULOPRECIO_ORDENOYDPLUS") Then
                    If DiccionarioCombosOYDPlusCompleta("CANTIDADDECIMALESCALCULOPRECIO_ORDENOYDPLUS").Count > 0 Then
                        intCantidadDecimalesCalculoPrecio = CInt(DiccionarioCombosOYDPlusCompleta("CANTIDADDECIMALESCALCULOPRECIO_ORDENOYDPLUS").First.Retorno)
                    End If
                End If
            End If

            FormatoCamposDecimalesEspeciales = String.Format("{0}", intCantidadDecimalesEspeciales)
            FormatoCamposNumericosEspeciales = String.Format("{0}", intCantidadDecimalesEspeciales)

            FormatoCamposDecimalesPorcentajeComision = String.Format("{0}", intCantidadDecimalesPorcentajeComision)
            FormatoCamposNumericosPorcentajeComision = String.Format("{0}", intCantidadDecimalesPorcentajeComision)

            FormatoCamposDecimalesRentabilidad = String.Format("{0}", intCantidadDecimalesRentabilidad)
            FormatoCamposNumericosRentabilidad = String.Format("{0}", intCantidadDecimalesRentabilidad)

            FormatoCamposDecimalesPrecio = String.Format("{0}", intCantidadDecimalesCalculoPrecio)
            FormatoCamposNumericosPrecio = String.Format("{0}", intCantidadDecimalesCalculoPrecio)

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar la valición del registro.", Me.ToString, "ObtenerDecimales", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Async Function ConsultarPorcentajeGarantia() As System.Threading.Tasks.Task(Of Double)
        Dim logLlamadoExitoso As Boolean = False
        Try
            Dim strTipoNegocio As String = String.Empty
            Dim strEspecie As String = String.Empty

            If logOrdenCruzada Then
                If Not IsNothing(_OrdenCruzadaSelected) Then
                    strTipoNegocio = _OrdenCruzadaSelected.TipoNegocio
                    strEspecie = _OrdenCruzadaSelected.Especie
                End If
            Else
                If Not IsNothing(_OrdenOYDPLUSSelected) Then
                    strTipoNegocio = _OrdenOYDPLUSSelected.TipoNegocio
                    strEspecie = _OrdenOYDPLUSSelected.Especie
                End If
            End If

            If Not String.IsNullOrEmpty(strTipoNegocio) And Not String.IsNullOrEmpty(strEspecie) And Not strEspecie = "(No Seleccionado)" Then

                Try
                    Dim objRet As InvokeOperation(Of Double)
                    Dim objProxy As OYDPLUSOrdenesBolsaDomainContext

                    If System.Diagnostics.Debugger.IsAttached And Program.ejecutarAppSegunAmbiente() Then
                        objProxy = New OYDPLUSOrdenesBolsaDomainContext()
                    Else
                        objProxy = New OYDPLUSOrdenesBolsaDomainContext(New System.Uri(Program.RutaServicioNegocio))
                    End If

                    'Se realiza para aumentar el tiempo de consulta de ria y evitar el timeup en algunas consultas
                    DirectCast(objProxy.DomainClient, WebDomainClient(Of OYDPLUSOrdenesBolsaDomainContext.IOYDPLUSOrdenesBolsaDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)

                    IsBusyCalculos = True
                    ErrorForma = String.Empty

                    objRet = Await objProxy.OYDPLUS_ConsultarPorcentajeGarantiaSync(strTipoNegocio, strEspecie, Program.Usuario, Program.HashConexion).AsTask()

                    If Not objRet Is Nothing Then
                        If objRet.HasError Then
                            If objRet.Error Is Nothing Then
                                A2Utilidades.Mensajes.mostrarMensaje("Se presentó un problema al calcular los valores.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Errores)
                            Else
                                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los valores.", Me.ToString(), "ConsultarPorcentajeGarantia", Program.TituloSistema, Program.Maquina, objRet.Error)
                            End If

                            objRet.MarkErrorAsHandled()
                        Else
                            If logOrdenCruzada Then
                                If Not IsNothing(_OrdenCruzadaSelected) Then
                                    If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                                        _OrdenCruzadaSelected.Castigo = objRet.Value
                                        dblValorConsultadoPorcentajeGarantia = objRet.Value
                                        Await CalcularValorOrden(_OrdenOYDPLUSSelected)
                                    Else
                                        _OrdenCruzadaSelected.PrecioMaximoMinimo = objRet.Value
                                        dblValorConsultadoPorcentajeGarantia = objRet.Value
                                        Await CalcularValorOrden(_OrdenOYDPLUSSelected)
                                    End If
                                End If
                            Else
                                If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Or
                                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                        _OrdenOYDPLUSSelected.Castigo = objRet.Value
                                        dblValorConsultadoPorcentajeGarantia = objRet.Value

                                        ''-------------------------------------------------------------------
                                        ''----------------- RECALCULO % GARANTÍA TTV RF ---------------------

                                        If OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                            OrdenOYDPLUSSelected.PrecioMaximoMinimo = objRet.Value
                                        End If

                                        EjecutoPorcentajeGarantia = True

                                        Await CalcularValorOrden(_OrdenOYDPLUSSelected)

                                        ''-------------------------------------------------------------------
                                        ''----------------- RECALCULO % GARANTÍA TTV RF ---------------------
                                    Else
                                        _OrdenOYDPLUSSelected.PrecioMaximoMinimo = objRet.Value
                                        dblValorConsultadoPorcentajeGarantia = objRet.Value
                                        Await CalcularValorOrden(_OrdenOYDPLUSSelected)
                                    End If
                                End If
                            End If
                        End If
                    End If
                Catch ex As Exception
                    A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los valores.", Me.ToString(), "ConsultarPorcentajeGarantia", Application.Current.ToString(), Program.Maquina, ex)
                    logLlamadoExitoso = False
                Finally
                End Try
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema para calcular el valor en el motor de calculos.", Me.ToString(), "ConsultarPorcentajeGarantia", Program.TituloSistema, Program.Maquina, ex)
        End Try

        logCalcularValores = True
        IsBusyCalculos = False

        Return logLlamadoExitoso
    End Function

    Private Async Function EliminarAsociacionOrdenLiqProbables() As System.Threading.Tasks.Task(Of Boolean)
        Dim logLlamadoExitoso As Boolean = False
        Try

            Dim objRet As InvokeOperation(Of Boolean)
            Dim objProxy As OYDPLUSOrdenesBolsaDomainContext

            If System.Diagnostics.Debugger.IsAttached And Program.ejecutarAppSegunAmbiente() Then
                objProxy = New OYDPLUSOrdenesBolsaDomainContext()
            Else
                objProxy = New OYDPLUSOrdenesBolsaDomainContext(New System.Uri(Program.RutaServicioNegocio))
            End If

            'Se realiza para aumentar el tiempo de consulta de ria y evitar el timeup en algunas consultas
            DirectCast(objProxy.DomainClient, WebDomainClient(Of OYDPLUSOrdenesBolsaDomainContext.IOYDPLUSOrdenesBolsaDomainServiceContract)).ChannelFactory.Endpoint.Binding.SendTimeout = New TimeSpan(0, 0, 300)

            IsBusy = True
            ErrorForma = String.Empty

            objRet = Await objProxy.OYDPLUS_EliminarAsociacionOrdenLiqProbablesSync(_OrdenOYDPLUSSelected.NroOrden, Program.Usuario, Program.HashConexion).AsTask()

            If Not objRet Is Nothing Then
                If objRet.HasError Then
                    If objRet.Error Is Nothing Then
                        A2Utilidades.Mensajes.mostrarMensaje("Se presentó un problema al eliminar la asociación.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Errores)
                    Else
                        A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al eliminar la asociación.", Me.ToString(), "EliminarAsociacionOrdenLiqProbables", Program.TituloSistema, Program.Maquina, objRet.Error)
                    End If

                    objRet.MarkErrorAsHandled()
                Else
                    logLlamadoExitoso = objRet.Value

                End If
            End If
        Catch ex As Exception

            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al calcular los valores.", Me.ToString(), "ConsultarPorcentajeGarantia", Application.Current.ToString(), Program.Maquina, ex)
            logLlamadoExitoso = False
        Finally
            IsBusy = False
        End Try
        Return logLlamadoExitoso
    End Function

    Private Sub consultarInstruccionesOrden()
        Try
            If MostrarTabInstrucciones = Visibility.Visible Then
                dcProxy1.InstruccionesOrdenes.Clear()
                ListaInstruccionesOrdenes = Nothing
                InstruccionesOrdeneSelected = Nothing

                Dim _EstadoMakerCheckerConsultarInstrucciones As String = ""
                Dim strTopico As String = String.Empty

                If VistaSeleccionada = VISTA_PENDIENTESAPROBAR Then
                    _EstadoMakerCheckerConsultarInstrucciones = "PA"
                Else
                    _EstadoMakerCheckerConsultarInstrucciones = "A"
                End If

                Select Case _OrdenOYDPLUSSelected.TipoOperacion
                    Case "C", "R"
                        strTopico = STR_TOPICO_INST_ORDENES_COMPRA
                    Case "V", "S"
                        strTopico = STR_TOPICO_INST_ORDENES_VENTA
                End Select
                dcProxy1.Load(dcProxy1.OYDPLUS_Consultar_InstruccionesOrdenesQuery(_OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.Clase, _OrdenOYDPLUSSelected.NroOrden, _OrdenOYDPLUSSelected.Version, strTopico, _EstadoMakerCheckerConsultarInstrucciones, Program.Usuario), AddressOf TerminoTraerInstrucciones, "")
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar las Instrucciones de la Orden.", Me.ToString(), "consultarInstruccionesOrden", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub consultarInstruccionesCliente()
        Try
            If MostrarTabInstrucciones = Visibility.Visible Then
                If Editando And (logNuevoRegistro Or logDuplicarRegistro) Or (logEditarRegistro And IsNothing(ListaInstruccionesOrdenes)) Then
                    dcProxy1.InstruccionesOrdenes.Clear()
                    Dim strTopico As String = String.Empty
                    Select Case _OrdenOYDPLUSSelected.TipoOperacion
                        Case "C", "R"
                            strTopico = STR_TOPICO_INST_ORDENES_COMPRA
                        Case "V", "S"
                            strTopico = STR_TOPICO_INST_ORDENES_VENTA
                    End Select
                    If Not IsNothing(_ComitenteSeleccionadoOYDPLUS) Then
                        dcProxy1.Load(dcProxy1.OYDPLUS_Traer_InstruccionesClientesQuery(_ComitenteSeleccionadoOYDPLUS.IdComitente, strTopico, Program.Usuario), AddressOf TerminoTraerInstrucciones, "")
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar las Instrucciones de la Orden.", Me.ToString(), "consultarInstruccionesCliente", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub consultarCuentasCliente(ByVal pobjComitenteSeleccionado As String)
        Try
            dcProxy.CuentasClientes.Clear()
            dcProxy.Load(dcProxy.OYDPLUS_Consultar_CuentasClientesQuery(pobjComitenteSeleccionado, Program.Usuario), AddressOf TerminoTraerCuentasClientes, "")
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar las Cuentas del cliente.", Me.ToString(), "consultarCuentasCliente", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Public Function ValidarOpcionesListaConfiguracion(ByVal pstrOpcionSelected As String, ByVal pstrRegistro As String, ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS) As Boolean
        Try
            If pstrOpcionSelected = "EJECUCION" Then
                If ListaConfiguracion.Where(Function(I) I.TipoLimite = _OrdenOYDPLUSSelected.TipoLimite).Count > 0 Then
                    For Each li In ListaConfiguracion.Where(Function(I) I.TipoLimite = _OrdenOYDPLUSSelected.TipoLimite)
                        If li.Ejecucion = pstrRegistro Then
                            Return True
                        End If
                    Next
                End If
            ElseIf pstrOpcionSelected = "DURACION" Then
                If ListaConfiguracion.Where(Function(I) I.TipoLimite = _OrdenOYDPLUSSelected.TipoLimite And I.Ejecucion = _OrdenOYDPLUSSelected.Ejecucion).Count > 0 Then
                    For Each li In ListaConfiguracion.Where(Function(I) I.TipoLimite = _OrdenOYDPLUSSelected.TipoLimite And I.Ejecucion = _OrdenOYDPLUSSelected.Ejecucion)
                        If li.Duracion = pstrRegistro Then
                            Return True
                        End If
                    Next
                End If
            End If
            Return False
        Catch ex As Exception
            Return False
        End Try
    End Function

    Private Sub FiltrarOpcionesTipoLimite(ByVal OpcionSelected As String, ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS)
        Try
            If pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or pobjOrdenSelected.TipoNegocio = TIPONEGOCIO_ADR Then

                Dim ListaComboEjecucion As New List(Of OYDPLUSUtilidades.CombosReceptor)
                Dim ListaComboDuracion As New List(Of OYDPLUSUtilidades.CombosReceptor)

                If OpcionSelected = "TIPOLIMITE" Then
                    logCalcularValores = False
                    pobjOrdenSelected.Ejecucion = ""
                    pobjOrdenSelected.Duracion = ""

                    For Each li In DiccionarioCombosOYDPlusCompleta("EJECUCION")
                        If ValidarOpcionesListaConfiguracion("EJECUCION", li.Retorno, pobjOrdenSelected) Then
                            ListaComboEjecucion.Add(li)
                        End If
                    Next

                    DiccionarioCombosOYDPlus("EJECUCION") = ListaComboEjecucion
                    DiccionarioCombosOYDPlus("DURACION") = ListaComboDuracion
                    MyBase.CambioItem("DiccionarioCombosOYDPlus")

                    logCalcularValores = True

                    If ListaComboEjecucion.Count = 1 Then
                        pobjOrdenSelected.Ejecucion = ListaComboEjecucion.First.Retorno
                    End If

                ElseIf OpcionSelected = "EJECUCION" Then
                    logCalcularValores = False
                    pobjOrdenSelected.Duracion = ""

                    For Each li In DiccionarioCombosOYDPlusCompleta("DURACIONGENERAL")
                        If ValidarOpcionesListaConfiguracion("DURACION", li.Retorno, pobjOrdenSelected) Then
                            ListaComboDuracion.Add(li)
                        End If
                    Next

                    DiccionarioCombosOYDPlus("DURACION") = ListaComboDuracion
                    MyBase.CambioItem("DiccionarioCombosOYDPlus")
                    logCalcularValores = True

                    If ListaComboDuracion.Count = 1 Then
                        pobjOrdenSelected.Duracion = ListaComboDuracion.First.Retorno
                    End If
                End If

            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al consultar los tipos de límite.", Me.ToString(), "FiltrarOpcionesTipoLimite", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

#End Region

#Region "Resultados Asincrónicos OYDPlus"

    Private Sub TerminoTraerOrdenes(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.OrdenOYDPLUS))
        Try
            If Not lo.HasError Then

                If lo.UserState = "TERMINOGUARDAREDICION" Or lo.UserState = "TIMERSELECTED" Or lo.UserState = "TERMINOGUARDARPENDIENTES" Then
                    logCambiarSelected = False
                Else
                    logCambiarSelected = True
                End If

                'ListaOrdenOYDPLUS = dcProxyConsulta.OrdenOYDPLUS.ToList
                ListaOrdenOYDPLUS = lo.Entities.ToList

                If lo.UserState = "BUSQUEDA" Then
                    If _ListaOrdenOYDPLUS.Count = 0 Then
                        mostrarMensaje("No se encontraron registros que cumplan con las condiciones de busqueda.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                    IsBusy = False
                    'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
                    logRefrescarconsultaCambioTab = True
                ElseIf lo.UserState = "FILTRAR" Then
                    If _ListaOrdenOYDPLUS.Count = 0 Then
                        mostrarMensaje("No se encontraron registros que cumplan con las condiciones de indicadas.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                    IsBusy = False
                    'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
                    logRefrescarconsultaCambioTab = True
                ElseIf lo.UserState = "TERMINOGUARDAREDICION" Then
                    If _ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = intIDOrdenGuardada).Count > 0 Then
                        OrdenOYDPLUSSelected = _ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = intIDOrdenGuardada).First
                    Else
                        OrdenOYDPLUSSelected = _ListaOrdenOYDPLUS.FirstOrDefault
                    End If

                    logCambiarSelected = True
                    IsBusy = False
                    'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
                    logRefrescarconsultaCambioTab = True

                    logCrearOrdenCruzadaCliente = False
                    'Valida sí la orden fue creada como cruzada sí el usuario quiere crear la orden cruzada
                    If Not IsNothing(_OrdenOYDPLUSSelected) Then
                        If _OrdenOYDPLUSSelected.OrdenCruzadaCliente And logPreguntarOrdenCruzada Then
                            IsBusy = True
                            mostrarMensajePregunta("¿Desea crear la orden cruzada para la orden anterior?",
                                                   Program.TituloSistema,
                                                   "CREARORDENCRUZADACLIENTE",
                                                   AddressOf TerminoMensajePregunta, False)

                        End If
                    End If
                ElseIf lo.UserState = "TERMINOGUARDARNUEVO" Then
                    IsBusy = False
                    'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
                    logRefrescarconsultaCambioTab = True

                    logCrearOrdenCruzadaCliente = False
                    'Valida sí la orden fue creada como cruzada sí el usuario quiere crear la orden cruzada
                    If Not IsNothing(_OrdenOYDPLUSSelected) Then
                        If _OrdenOYDPLUSSelected.OrdenCruzadaCliente And logPreguntarOrdenCruzada Then
                            IsBusy = True
                            mostrarMensajePregunta("¿Desea crear la orden cruzada para la orden anterior?",
                                                   Program.TituloSistema,
                                                   "CREARORDENCRUZADACLIENTE",
                                                   AddressOf TerminoMensajePregunta, False)

                        End If
                    End If

                ElseIf lo.UserState = "TERMINOGUARDARPENDIENTES" Then
                    If _ListaOrdenOYDPLUS.Count = 0 Then
                        'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
                        logRefrescarconsultaCambioTab = False
                        VistaSeleccionada = VISTA_PENDIENTESAPROBAR
                        FiltrarRegistrosOYDPLUS("P", "GUARDADO ORDEN", "TERMINOGUARDAR", "TERMINOGUARDAR")
                    Else
                        If intIDOrdenGuardada <> 0 Then
                            If _ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = intIDOrdenGuardada).Count > 0 Then
                                OrdenOYDPLUSSelected = _ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = intIDOrdenGuardada).First
                            Else
                                OrdenOYDPLUSSelected = _ListaOrdenOYDPLUS.FirstOrDefault
                            End If
                        Else
                            OrdenOYDPLUSSelected = _ListaOrdenOYDPLUS.FirstOrDefault
                        End If
                        IsBusy = False
                        'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
                        logRefrescarconsultaCambioTab = True
                        logCambiarSelected = True
                    End If

                ElseIf lo.UserState = "TIMERSELECTED" Then
                    If _ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = intIDOrdenTimer).Count > 0 Then
                        OrdenOYDPLUSSelected = _ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = intIDOrdenTimer).First
                    End If
                    IsBusy = False
                    logCambiarSelected = True
                    'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
                    logRefrescarconsultaCambioTab = True
                Else
                    IsBusy = False
                    'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
                    logRefrescarconsultaCambioTab = True
                End If

                'Reinicia el TIMER para no realizar llamados a la base de datos.
                ReiniciaTimer()

                If logOrdenCruzada = False Then
                    'Valida la existencia de ordenes cruzadas.
                    ValidarExistenciaOrdenCruzada(Program.Usuario)
                End If
                If logEditarRegistro = False And logNuevoRegistro = False Then
                    MostrarCampoIndicador = Visibility.Collapsed
                    MostrarCampoPuntosIndicador = Visibility.Collapsed
                    MostrarCampoTasaFacial = Visibility.Collapsed
                    MostrarCamposFaciales = Visibility.Collapsed
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en el servicio para la obtención de la lista de Ordenes", Me.ToString(), "TerminoTraerOrden", Application.Current.ToString(), Program.Maquina, lo.Error)
                ''lo.MarkErrorAsHandled()   '????
                IsBusy = False
                'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
                logRefrescarconsultaCambioTab = True
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de Ordenes", Me.ToString(), "TerminoTraerOrden", Application.Current.ToString(), Program.Maquina, lo.Error)
            'Esta variable indica si se debe de refrescar la pantalla cuando se cambie de tab
            logRefrescarconsultaCambioTab = True
        End Try

    End Sub

    Private Sub buscarComitenteCompleted(ByVal lo As LoadOperation(Of OYDUtilidades.BuscadorClientes))
        Try
            If lo.HasError = False Then
                If lo.Entities.ToList.Count > 0 Then
                    Me.ComitenteSeleccionadoOYDPLUS = lo.Entities.ToList.FirstOrDefault
                Else
                    Me.ComitenteSeleccionadoOYDPLUS = Nothing
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir los datos del comitente de la orden", Me.ToString(), "buscarComitenteCompleted", Program.TituloSistema, Program.Maquina, lo.Error)
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir los datos del comitente de la orden", Me.ToString(), "buscarComitenteCompleted", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub buscarComitenteCompletedRestriccion(ByVal lo As LoadOperation(Of OYDUtilidades.BuscadorClientes))
        Try
            If lo.HasError = False Then
                If lo.Entities.ToList.Count > 0 Then
                    If logEsModal Then
                        Me.logCalcularValores = False
                        Me.ComitenteSeleccionadoOYDPLUS = lo.Entities.ToList.FirstOrDefault
                        Me.logCalcularValores = True

                        RaiseEvent TerminoConfigurarCliente()
                    Else
                        Me.ComitenteSeleccionadoOYDPLUS = lo.Entities.ToList.FirstOrDefault
                    End If
                Else
                    Me.ComitenteSeleccionadoOYDPLUS = Nothing
                    If logEsModal Then

                        RaiseEvent TerminoConfigurarConErrores("CODIGOOYD")
                    End If
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir los datos del comitente de la orden", Me.ToString(), "buscarComitenteCompletedRestriccion", Program.TituloSistema, Program.Maquina, lo.Error)
                If logEsModal Then
                    RaiseEvent TerminoConfigurarConErrores("CODIGOOYD")
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir los datos del comitente de la orden", Me.ToString(), "buscarComitenteCompletedRestriccion", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub buscarEspecieCompleted(ByVal lo As LoadOperation(Of OYDUtilidades.BuscadorEspecies))
        Try
            If lo.HasError = False Then
                If lo.Entities.ToList.Count > 0 Then
                    Me.NemotecnicoSeleccionadoOYDPLUS = lo.Entities.ToList.FirstOrDefault
                Else
                    Me.NemotecnicoSeleccionadoOYDPLUS = Nothing
                    _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir los datos de la especie de la orden", Me.ToString(), "buscarEspecieCompleted", Program.TituloSistema, Program.Maquina, lo.Error)
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir los datos de la especie de la orden", Me.ToString(), "buscarEspecieCompleted", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub buscarEspecieCompletedRestriccion(ByVal lo As LoadOperation(Of OYDUtilidades.BuscadorEspecies))
        Try
            If lo.HasError = False Then
                If lo.Entities.ToList.Count > 0 Then
                    If logEsModal Then
                        Me.logCalcularValores = False
                        Me.NemotecnicoSeleccionadoOYDPLUS = lo.Entities.ToList.FirstOrDefault
                        Me.logCalcularValores = True

                        RaiseEvent TerminoConfigurarEspecie()
                    Else
                        Me.NemotecnicoSeleccionadoOYDPLUS = lo.Entities.ToList.FirstOrDefault
                    End If
                Else
                    Me.NemotecnicoSeleccionadoOYDPLUS = Nothing
                    _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
                    If logEsModal Then
                        RaiseEvent TerminoConfigurarConErrores("ESPECIE")
                    End If
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir los datos de la especie de la orden", Me.ToString(), "buscarEspecieCompletedRestriccion", Program.TituloSistema, Program.Maquina, lo.Error)
                If logEsModal Then
                    RaiseEvent TerminoConfigurarConErrores("ESPECIE")
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir los datos de la especie de la orden", Me.ToString(), "buscarEspecieCompletedRestriccion", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoTraerOrdenantes(ByVal lo As LoadOperation(Of OYDUtilidades.BuscadorOrdenantes))
        Try
            If Not lo.HasError Then
                If lo.UserState = OPCION_ORDENCRUZADA Then
                    ListaOrdenantesCruzada = lo.Entities.ToList

                    If _ListaOrdenantesCruzada.Where(Function(i) i.Lider).Count > 0 Then
                        OrdenanteSeleccionadoCruzada = _ListaOrdenantesCruzada.Where(Function(i) i.Lider).First()
                    End If
                Else
                    Dim objOrdenante As String = String.Empty
                    If lo.UserState = OPCION_EDITAR Then
                        objOrdenante = OrdenOYDPLUSSelected.IDOrdenante
                    End If

                    ListaOrdenantesOYDPLUS = lo.Entities.ToList

                    If lo.UserState = OPCION_EDITAR Then
                        If _ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = objOrdenante).Count > 0 Then
                            OrdenanteSeleccionadoOYDPLUS = _ListaOrdenantesOYDPLUS.Where(Function(i) i.IdOrdenante = objOrdenante).FirstOrDefault
                        End If
                    ElseIf logNuevoRegistro Or logEditarRegistro Then
                        If Not IsNothing(DiccionarioCombosOYDPlus) Then
                            If DiccionarioCombosOYDPlus.ContainsKey("COLOCARORDENANTELIDER") Then
                                If DiccionarioCombosOYDPlus("COLOCARORDENANTELIDER").Where(Function(i) i.Retorno.ToUpper = "SI").Count > 0 Then
                                    If _ListaOrdenantesOYDPLUS.Where(Function(i) i.Lider).Count > 0 Then
                                        OrdenanteSeleccionadoOYDPLUS = _ListaOrdenantesOYDPLUS.Where(Function(i) i.Lider).First()
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de ordenantes",
                                                 Me.ToString(), "TerminoTraerOrdenantes", Program.TituloSistema, Program.Maquina, lo.Error)
                'lo.MarkErrorAsHandled()   '????
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de ordenantes",
                                                 Me.ToString(), "TerminoTraerOrdenantes", Program.TituloSistema, Program.Maquina, ex)
        End Try


    End Sub

    Private Sub TerminoTraerCuentasDeposito(ByVal lo As LoadOperation(Of OYDUtilidades.BuscadorCuentasDeposito))
        Try
            If Not lo.HasError Then
                If lo.UserState = OPCION_ORDENCRUZADA Then
                    If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or
                        _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                        _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                        _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTVC Or
                        _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                        If lo.Entities.ToList.Where(Function(I) I.Deposito <> "V").Count > 0 Then
                            ListaCuentasDepositoCruzada = lo.Entities.ToList.Where(Function(I) I.Deposito <> "V").ToList

                            If ListaCuentasDepositoCruzada.Where(Function(i) i.Deposito = "D").Count > 0 Then
                                CtaDepositoSeleccionadaCruzada = ListaCuentasDepositoCruzada.Where(Function(i) i.Deposito = "D").First
                            End If
                        Else
                            ListaCuentasDepositoCruzada = Nothing
                        End If
                    Else
                        ListaCuentasDepositoCruzada = lo.Entities.ToList
                    End If
                Else
                    Dim objNroCuenta As Integer = -1
                    Dim strDeposito As String = String.Empty

                    If lo.UserState = OPCION_EDITAR And Not IsNothing(_OrdenAnteriorOYDPLUS) Then
                        strDeposito = _OrdenAnteriorOYDPLUS.UBICACIONTITULO
                        If Not IsNothing(_OrdenAnteriorOYDPLUS.CuentaDeposito) Then
                            objNroCuenta = _OrdenAnteriorOYDPLUS.CuentaDeposito
                        End If
                    End If

                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or
                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                        If lo.Entities.ToList.Where(Function(I) I.Deposito <> "V").Count > 0 Then
                            ListaCuentasDepositoOYDPLUS = lo.Entities.ToList.Where(Function(I) I.Deposito <> "V").ToList

                            If ListaCuentasDepositoOYDPLUS.Where(Function(i) i.Deposito = strDeposito And IIf(IsNothing(i.NroCuentaDeposito), -1, i.NroCuentaDeposito) = objNroCuenta).Count > 0 Then
                                CtaDepositoSeleccionadaOYDPLUS = ListaCuentasDepositoOYDPLUS.Where(Function(i) i.Deposito = strDeposito And IIf(IsNothing(i.NroCuentaDeposito), -1, i.NroCuentaDeposito) = objNroCuenta).FirstOrDefault
                            Else
                                If ListaCuentasDepositoOYDPLUS.Where(Function(i) i.Deposito = "D").Count > 0 Then
                                    CtaDepositoSeleccionadaOYDPLUS = ListaCuentasDepositoOYDPLUS.Where(Function(i) i.Deposito = "D").First
                                End If
                            End If
                        Else
                            ListaCuentasDepositoOYDPLUS = Nothing
                        End If
                    Else

                        ListaCuentasDepositoOYDPLUS = lo.Entities.ToList
                        If ListaCuentasDepositoOYDPLUS.Where(Function(i) i.Deposito = strDeposito And IIf(IsNothing(i.NroCuentaDeposito), -1, i.NroCuentaDeposito) = objNroCuenta).Count > 0 Then
                            CtaDepositoSeleccionadaOYDPLUS = ListaCuentasDepositoOYDPLUS.Where(Function(i) i.Deposito = strDeposito And IIf(IsNothing(i.NroCuentaDeposito), -1, i.NroCuentaDeposito) = objNroCuenta).FirstOrDefault
                        Else
                            CtaDepositoSeleccionadaOYDPLUS = Nothing
                        End If

                    End If

                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de cuentas de depósito",
                                                 Me.ToString(), "TerminoTraerCuentasDeposito", Program.TituloSistema, Program.Maquina, lo.Error)
                'lo.MarkErrorAsHandled()   '????
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de cuentas de depósito",
                                                 Me.ToString(), "TerminoTraerCuentasDeposito", Program.TituloSistema, Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoTraerReceptoresOrdenes(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.ReceptoresOrden))
        Try
            If Not lo.HasError Then
                If logOrdenCruzada Then
                    ListaDistribucionComisionCruzada = lo.Entities.ToList()
                Else
                    ListaReceptoresOrdenes = lo.Entities.ToList()
                End If
                ObtenerReceptorLiderOrdenOYDPLUS()
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de ReceptoresOrdenes",
                                                 Me.ToString(), "TerminoTraerReceptoresOrdenes", Program.TituloSistema, Program.Maquina, lo.Error)
                'lo.MarkErrorAsHandled()   '????
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de ReceptoresOrdenes",
                                                Me.ToString(), "TerminoTraerReceptoresOrdenes", Program.TituloSistema, Program.Maquina, ex)
            IsBusy = False
        End Try

    End Sub

    Private Sub TerminoTraerReceptoresOrdenesCruzadas(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.tblReceptoresOrdenesPorCruzar))
        Try
            If Not lo.HasError Then
                ListaReceptoresOrdenesCruzada = lo.Entities.ToList()
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de ReceptoresOrdenesCruzadas",
                                                 Me.ToString(), "TerminoTraerReceptoresOrdenesCruzadas", Program.TituloSistema, Program.Maquina, lo.Error)
                'lo.MarkErrorAsHandled()   '????
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de ReceptoresOrdenesCruzadas",
                                                Me.ToString(), "TerminoTraerReceptoresOrdenesCruzadas", Program.TituloSistema, Program.Maquina, ex)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoConsultarCombosOYDCOMPLETOS(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.CombosReceptor))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    Dim strNombreCategoria As String = String.Empty
                    Dim objListaNodosCategoria As List(Of OYDPLUSUtilidades.CombosReceptor) = Nothing
                    Dim objDiccionarioCompleto As New Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))
                    Dim objDiccionario As New Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))

                    Dim listaCategorias = From lc In lo.Entities Select lc.Categoria Distinct

                    For Each li In listaCategorias
                        strNombreCategoria = li
                        objListaNodosCategoria = (From ln In lo.Entities Where ln.Categoria = strNombreCategoria).ToList
                        objDiccionarioCompleto.Add(strNombreCategoria, objListaNodosCategoria)
                    Next

                    DiccionarioCombosOYDPlusCompleta = Nothing

                    DiccionarioCombosOYDPlusCompleta = objDiccionarioCompleto

                    ObtenerDecimales()
                    ObtenerExentoRetencion()

                    If lo.UserState <> "DESPUESDEGUARDAR" Then
                        ObtenerInformacionCombosCompletos()

                        If logEsModal Then
                            NuevoRegistro()
                        Else
                            VistaSeleccionada = VISTA_APROBADAS
                        End If
                    End If
                Else
                    mostrarMensaje("Señor Usuario, usted no tiene combos configurados.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    IsBusy = False
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener la lista de Combos de la aplicación.", Me.ToString(), "TerminoConsultarCombosOYDCOMPLETOS", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener la lista de Combos de la aplicación.", Me.ToString(), "TerminoConsultarCombosOYDCOMPLETOS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub
    Public Sub ObtenerExentoRetencion()
        Try
            If Not IsNothing(DiccionarioCombosOYDPlusCompleta) Then
                If DiccionarioCombosOYDPlusCompleta.ContainsKey("HABILITAREXENTO_ORDENES") Then
                    If DiccionarioCombosOYDPlusCompleta("HABILITAREXENTO_ORDENES").Count > 0 Then
                        Try
                            ActivoExento = (DiccionarioCombosOYDPlusCompleta("HABILITAREXENTO_ORDENES").FirstOrDefault.Retorno)
                        Catch ex As Exception
                            ActivoExento = "NO"
                        End Try
                    End If
                End If
            Else
                ActivoExento = "NO"
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar la valición del registro.", Me.ToString, "ObtenerExentoRetencion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub
    Private Sub TerminoConsultarCombosOYD(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.CombosReceptor))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    Dim strNombreCategoria As String = String.Empty
                    Dim objListaNodosCategoria As List(Of OYDPLUSUtilidades.CombosReceptor) = Nothing
                    Dim objDiccionario As New Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor))

                    Dim listaCategorias = From lc In lo.Entities Select lc.Categoria Distinct

                    For Each li In listaCategorias
                        strNombreCategoria = li
                        objListaNodosCategoria = (From ln In lo.Entities Where ln.Categoria = strNombreCategoria).ToList
                        objDiccionario.Add(strNombreCategoria, objListaNodosCategoria)
                    Next

                    If Not IsNothing(DiccionarioCombosOYDPlus) Then
                        DiccionarioCombosOYDPlus.Clear()
                    End If

                    logCalcularValores = False

                    DiccionarioCombosOYDPlus = Nothing
                    DiccionarioCombosOYDPlus = objDiccionario

                    logCalcularValores = True

                    If logNuevoRegistro = False And logEditarRegistro = False Then
                        ObtenerValoresCombos(True, _OrdenOYDPLUSSelected)
                    Else
                        If lo.UserState = OPCION_EDITAR Then
                            Dim logContinuarEdicion As Boolean = True

                            If Not DiccionarioCombosOYDPlus.ContainsKey("TIPOPRODUCTO") Then
                                logContinuarEdicion = False
                            ElseIf DiccionarioCombosOYDPlus("TIPOPRODUCTO").Where(Function(i) i.Retorno = OrdenAnteriorOYDPLUS.TipoProducto).Count = 0 Then
                                logContinuarEdicion = False
                            ElseIf Not DiccionarioCombosOYDPlus.ContainsKey("TIPOORDENGENERAL") Then
                                logContinuarEdicion = False
                            ElseIf DiccionarioCombosOYDPlus("TIPOORDENGENERAL").Where(Function(i) i.Retorno = OrdenAnteriorOYDPLUS.TipoOrden).Count = 0 Then
                                logContinuarEdicion = False
                            End If

                            If logContinuarEdicion Then
                                ObtenerValoresCombos(False, _OrdenOYDPLUSSelected, lo.UserState.ToString.ToUpper)
                            Else
                                mostrarMensaje(String.Format("Señor Usuario, el receptor no tiene configurado el tipo de producto o tipo de orden, no es posible realizar la accción.", vbCrLf), "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                CancelarEditarRegistro()
                            End If
                        ElseIf Not DiccionarioCombosOYDPlus.ContainsKey("TIPOPRODUCTO") Then
                            mostrarMensaje(String.Format("Señor Usuario, el receptor no tiene configurado tipos de producto.", vbCrLf), "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            HabilitarNegocio = False
                            HabilitarEspecieCumplimiento = False
                            HabilitarNegocioComitente = False
                            HabilitarDuracion = False
                            HabilitarCantidad = False
                            HabilitarValorOrden = False
                            HabilitarValorRepoOrden = False
                            HabilitarCaptacionRepoOrden = False
                            HabilitarRepoEnPesos = False

                            HabilitarPrecio = False
                            HabilitarDatosLeo = False
                            MostrarNegocio = Visibility.Collapsed
                            MostrarCamposAcciones = Visibility.Collapsed
                            HabilitarEjecucion = False
                            MostrarCamposRentaFija = Visibility.Collapsed
                            MostrarCampoIndicador = Visibility.Collapsed
                            MostrarCampoPuntosIndicador = Visibility.Collapsed
                            MostrarCamposCompra = Visibility.Collapsed
                            MostrarCamposCuentaPropia = Visibility.Collapsed
                            MostrarCamposFaciales = Visibility.Collapsed
                            MostrarCampoTasaFacial = Visibility.Collapsed
                            MostrarCamposVenta = Visibility.Collapsed
                            MostrarControles = Visibility.Collapsed
                            IsBusy = False

                            RaiseEvent TerminoConfigurarConErrores("TIPOPRODUCTO")
                        Else
                            If Not IsNothing(lo.UserState) Then
                                If lo.UserState.ToString.ToUpper = OPCION_ORDENCRUZADA Then
                                    ObtenerValoresCombos(False, _OrdenCruzadaSelected, lo.UserState.ToString.ToUpper)
                                Else
                                    If lo.UserState.ToString = OPCION_DUPLICAR Then
                                        ObtenerValoresCombos(False, _OrdenDuplicarOYDPLUS, lo.UserState.ToString.ToUpper)
                                    ElseIf lo.UserState.ToString = OPCION_PLANTILLA Or lo.UserState.ToString = OPCION_CREARORDENPLANTILLA Then
                                        ObtenerValoresCombos(False, _OrdenPlantillaOYDPLUS, lo.UserState.ToString.ToUpper)
                                    Else
                                        ObtenerValoresCombos(False, _OrdenOYDPLUSSelected, lo.UserState.ToString.ToUpper)
                                    End If
                                End If
                            Else
                                ObtenerValoresCombos(False, _OrdenOYDPLUSSelected, OPCION_RECEPTOR)
                            End If
                        End If
                    End If

                Else
                    mostrarMensaje("Señor Usuario, usted no tiene receptores asociados.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    IsBusy = False
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener la lista de Combos de la aplicación.", Me.ToString(), "TerminoConsultarCombosOYD", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener la lista de Combos de la aplicación.", Me.ToString(), "TerminoConsultarCombosOYD", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoConsultarTipoNegocioOYDCOMPLETOS(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblTipoNegocioReceptor))
        Try
            If lo.HasError = False Then
                ListaTipoNegocioCOMPLETOS = lo.Entities.ToList

                'Consultar Receptores Usuario
                CargarReceptoresUsuarioOYDPLUS("INICIO")
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los tipos de negocio del receptor.", Me.ToString(), "TerminoConsultarTipoNegocioOYDCOMPLETOS", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los tipos de negocio del receptor.", Me.ToString(), "TerminoConsultarTipoNegocioOYDCOMPLETOS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoConsultarTipoNegocioOYD(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblTipoNegocioReceptor))
        Try
            If lo.HasError = False Then
                If lo.UserState = "EDITARORDENOYDPLUS" Or lo.UserState = "ANULARORDENOYDPLUS" Then
                    If lo.Entities.Where(Function(i) i.CodigoTipoNegocio = _OrdenOYDPLUSSelected.TipoNegocio).Count > 0 Then
                        validarOrdenModificable(lo.UserState)
                    Else
                        If lo.UserState = "EDITARORDENOYDPLUS" Then
                            MyBase.RetornarValorEdicionNavegacion()
                        End If
                        mostrarMensaje("Señor Usuario, el receptor ya no tiene permisos sobre el tipo de negocio, no se puede realizar la acción.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        HabilitarCamposOYDPLUS(_OrdenOYDPLUSSelected)
                        IsBusy = False
                    End If
                ElseIf lo.Entities.Count > 0 Then

                    If String.IsNullOrEmpty(strTiposNegocioHabilitadosNuevoRegistro) Then
                        ListaTipoNegocio = lo.Entities.ToList
                    Else
                        Dim objListaTipoNegocio = New List(Of OYDPLUSUtilidades.tblTipoNegocioReceptor)
                        Dim objItemsNuevoTipoNegocio = strTiposNegocioHabilitadosNuevoRegistro.Split("|")
                        Dim logTipoNegocioPermitido As Boolean = False

                        For Each li In lo.Entities.ToList
                            logTipoNegocioPermitido = False
                            For Each liVal In objItemsNuevoTipoNegocio
                                If liVal = li.CodigoTipoNegocio Then
                                    logTipoNegocioPermitido = True
                                    Exit For
                                End If
                            Next

                            If logTipoNegocioPermitido Then
                                objListaTipoNegocio.Add(li)
                            End If
                        Next

                        ListaTipoNegocio = objListaTipoNegocio
                    End If

                    If ListaTipoNegocio.Count > 0 Then
                        If logOrdenCruzada Then
                            CargarConfiguracionReceptorOYDPLUS(_OrdenCruzadaSelected.Receptor, lo.UserState)
                        Else
                            If lo.UserState.ToString = OPCION_DUPLICAR Then
                                CargarConfiguracionReceptorOYDPLUS(_OrdenDuplicarOYDPLUS.Receptor, lo.UserState)
                            ElseIf lo.UserState.ToString = OPCION_CREARORDENPLANTILLA Then
                                CargarConfiguracionReceptorOYDPLUS(_OrdenPlantillaOYDPLUS.Receptor, lo.UserState)
                            Else
                                CargarConfiguracionReceptorOYDPLUS(_OrdenOYDPLUSSelected.Receptor, lo.UserState)
                            End If
                        End If
                    Else
                        mostrarMensaje("Señor Usuario, el receptor seleccionado no tiene tipos de negocio configurados.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        HabilitarNegocio = False
                        HabilitarEspecieCumplimiento = False
                        HabilitarNegocioComitente = False
                        HabilitarDuracion = False
                        HabilitarCantidad = False
                        HabilitarValorOrden = False
                        HabilitarValorRepoOrden = False
                        HabilitarCaptacionRepoOrden = False
                        HabilitarRepoEnPesos = False

                        HabilitarPrecio = False
                        HabilitarDatosLeo = False
                        MostrarNegocio = Visibility.Collapsed
                        MostrarCamposAcciones = Visibility.Collapsed
                        HabilitarEjecucion = False
                        MostrarCamposRentaFija = Visibility.Collapsed
                        MostrarCampoIndicador = Visibility.Collapsed
                        MostrarCampoPuntosIndicador = Visibility.Collapsed
                        MostrarCamposCompra = Visibility.Collapsed
                        MostrarCamposCuentaPropia = Visibility.Collapsed
                        MostrarCamposFaciales = Visibility.Collapsed
                        MostrarCampoTasaFacial = Visibility.Collapsed
                        MostrarCamposVenta = Visibility.Collapsed
                        MostrarControles = Visibility.Collapsed
                        IsBusy = False
                    End If

                Else
                    mostrarMensaje("Señor Usuario, el receptor seleccionado no tiene tipos de negocio configurados.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarNegocio = False
                    HabilitarEspecieCumplimiento = False
                    HabilitarNegocioComitente = False
                    HabilitarDuracion = False
                    HabilitarCantidad = False
                    HabilitarValorOrden = False
                    HabilitarValorRepoOrden = False
                    HabilitarCaptacionRepoOrden = False
                    HabilitarRepoEnPesos = False

                    HabilitarPrecio = False
                    HabilitarDatosLeo = False
                    MostrarNegocio = Visibility.Collapsed
                    MostrarCamposAcciones = Visibility.Collapsed
                    HabilitarEjecucion = False
                    MostrarCamposRentaFija = Visibility.Collapsed
                    MostrarCampoIndicador = Visibility.Collapsed
                    MostrarCampoPuntosIndicador = Visibility.Collapsed
                    MostrarCamposCompra = Visibility.Collapsed
                    MostrarCamposCuentaPropia = Visibility.Collapsed
                    MostrarCamposFaciales = Visibility.Collapsed
                    MostrarCampoTasaFacial = Visibility.Collapsed
                    MostrarCamposVenta = Visibility.Collapsed
                    MostrarControles = Visibility.Collapsed
                    IsBusy = False
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los tipos de negocio del receptor.", Me.ToString(), "TerminoConsultarTipoNegocioOYD", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los tipos de negocio del receptor.", Me.ToString(), "TerminoConsultarTipoNegocioOYD", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoConsultarConfiguracionReceptor(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblConfiguracionesAdicionalesReceptor))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    ConfiguracionReceptor = lo.Entities.FirstOrDefault

                    'Consulta los parametros del receptor.
                    If logOrdenCruzada Then
                        CargarParametrosReceptorOYDPLUS(_OrdenCruzadaSelected.Receptor, lo.UserState)
                    Else
                        If lo.UserState.ToString = OPCION_DUPLICAR Then
                            CargarParametrosReceptorOYDPLUS(_OrdenDuplicarOYDPLUS.Receptor, lo.UserState)
                        ElseIf lo.UserState.ToString = OPCION_CREARORDENPLANTILLA Then
                            CargarParametrosReceptorOYDPLUS(_OrdenPlantillaOYDPLUS.Receptor, lo.UserState)
                        Else
                            CargarParametrosReceptorOYDPLUS(_OrdenOYDPLUSSelected.Receptor, lo.UserState)
                        End If
                    End If
                Else
                    ConfiguracionReceptor = Nothing
                    mostrarMensaje(String.Format("Señor Usuario, el receptor no tiene configurado datos en el maestro de configuraciones adicionales receptor.", vbCrLf), "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    HabilitarNegocio = False
                    HabilitarEspecieCumplimiento = False
                    HabilitarNegocioComitente = False
                    HabilitarDuracion = False
                    HabilitarCantidad = False
                    HabilitarValorOrden = False
                    HabilitarValorRepoOrden = False
                    HabilitarCaptacionRepoOrden = False
                    HabilitarRepoEnPesos = False

                    HabilitarPrecio = False
                    HabilitarDatosLeo = False
                    MostrarNegocio = Visibility.Collapsed
                    MostrarCamposAcciones = Visibility.Collapsed
                    HabilitarEjecucion = False
                    MostrarCamposRentaFija = Visibility.Collapsed
                    MostrarCampoIndicador = Visibility.Collapsed
                    MostrarCampoPuntosIndicador = Visibility.Collapsed
                    MostrarCamposCompra = Visibility.Collapsed
                    MostrarCamposCuentaPropia = Visibility.Collapsed
                    MostrarCamposFaciales = Visibility.Collapsed
                    MostrarCampoTasaFacial = Visibility.Collapsed
                    MostrarCamposVenta = Visibility.Collapsed
                    MostrarControles = Visibility.Collapsed
                    IsBusy = False

                    RaiseEvent TerminoConfigurarConErrores("CONFIGURACIONRECEPTOR")
                End If

            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener la configuración del receptor.", Me.ToString(), "TerminoConsultarConfiguracionReceptor", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los parametros del receptor.", Me.ToString(), "TerminoConsultarConfiguracionReceptor", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoConsultarParametrosReceptor(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblParametrosReceptor))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    ListaParametrosReceptor = lo.Entities.ToList
                Else
                    ListaParametrosReceptor = Nothing
                End If

                If logOrdenCruzada Then
                    CargarCombosOYDPLUS(lo.UserState, _OrdenCruzadaSelected.Receptor, lo.UserState)
                Else
                    If lo.UserState.ToString = OPCION_DUPLICAR Then
                        CargarCombosOYDPLUS(lo.UserState, _OrdenDuplicarOYDPLUS.Receptor, lo.UserState)
                    ElseIf lo.UserState.ToString = OPCION_CREARORDENPLANTILLA Then
                        CargarCombosOYDPLUS(lo.UserState, _OrdenPlantillaOYDPLUS.Receptor, lo.UserState)
                    Else
                        CargarCombosOYDPLUS(lo.UserState, _OrdenOYDPLUSSelected.Receptor, lo.UserState)
                    End If
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los parametros del receptor.", Me.ToString(), "TerminoConsultarParametrosReceptor", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los parametros del receptor.", Me.ToString(), "TerminoConsultarParametrosReceptor", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoCargarMensaje(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblMensajes))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    If lo.UserState = "preciosmejorespuntascompra" Or lo.UserState = "preciosmejorespuntasventa" Or lo.UserState = "preciosmercadoespecie" Then 'JDOL 20160129 Ajuste para mostrar todos los precios de mejores puntas de todo lo del dia
                        'TituloMensaje = String.Empty
                        'For Each li In lo.Entities
                        '    TituloMensaje = TituloMensaje & li.Titulo & li.Valor & "  "
                        'Next
                        'ListaMensajes = lo.Entities.ToList
                        'Else
                        TituloMensaje = lo.Entities.FirstOrDefault.Titulo
                        ListaMensajes = lo.Entities.ToList
                    End If

                Else
                    TituloMensaje = String.Empty
                    ListaMensajes = lo.Entities.ToList
                End If

                DefectoPrecio = False
                DefectoPrecio = True
                VelocidadMensaje = VELOCIDAD_TEXTO

            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener el mensaje dinamico.", Me.ToString(), "TerminoCargarMensaje", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                TituloMensaje = String.Empty
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener el mensaje dinamico.", Me.ToString(), "TerminoCargarMensaje", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub TerminoConsultarReceptoresUsuarioCOMPLETOS(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblReceptoresUsuario))
        Try
            If lo.HasError = False Then
                ListaReceptoresCompleta = lo.Entities.ToList

                If lo.UserState <> "SOLORECEPTORES" Then
                    'Se adiciona la condición cuando para que no inicie las variables si es una orden de OYDPLUS
                    CargarCombosOYDPLUS("INICIO", String.Empty, String.Empty)
                End If
            Else
                IsBusy = False
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los receptores del usuario.", Me.ToString(), "TerminoConsultarReceptoresUsuarioCOMPLETOS", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los receptores del usuario.", Me.ToString(), "TerminoConsultarReceptoresUsuarioCOMPLETOS", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoConsultarTodosReceptoresUsuario(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblReceptoresUsuario))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    ListaReceptoresUsuario = lo.Entities.ToList
                End If
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los receptores del usuario.", Me.ToString(), "TerminoConsultarReceptoresUsuario", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los receptores del usuario.", Me.ToString(), "TerminoConsultarReceptoresUsuario", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub TerminoConsultarReceptoresUsuario(ByVal lo As LoadOperation(Of OYDPLUSUtilidades.tblReceptoresUsuario))
        Try
            If lo.HasError = False Then
                If lo.Entities.Count > 0 Then
                    ListaReceptoresUsuario = lo.Entities.ToList
                    If lo.UserState <> "INICIO" Then
                        If logEditarRegistro Or logNuevoRegistro Then
                            If lo.UserState = "NUEVO" Then
                                NuevaOrden()
                            Else
                                ObtenerValoresDefectoOYDPLUS(OPCION_RECEPTOR, _OrdenOYDPLUSSelected)
                            End If
                        End If
                    End If
                Else
                    If logNuevoRegistro Or logEditarRegistro Then
                        mostrarMensaje("No hay ningun receptor configurado para el usuario.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        logNuevoRegistro = False
                        Editando = False
                        HabilitarNegocio = False
                        HabilitarEspecieCumplimiento = False
                        HabilitarNegocioComitente = False
                        HabilitarDuracion = False
                        HabilitarCantidad = False
                        HabilitarValorOrden = False
                        HabilitarValorRepoOrden = False
                        HabilitarCaptacionRepoOrden = False
                        HabilitarRepoEnPesos = False

                        HabilitarPrecio = False
                        HabilitarDatosLeo = False
                        IsBusy = False
                    End If

                    RaiseEvent TerminoConfigurarConErrores("RECEPTOR")
                End If
            Else
                If logNuevoRegistro Or logEditarRegistro Then
                    A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los receptores del usuario.", Me.ToString(), "TerminoConsultarReceptoresUsuario", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                    HabilitarNegocio = False
                    HabilitarEspecieCumplimiento = False
                    HabilitarNegocioComitente = False
                    HabilitarDuracion = False
                    HabilitarCantidad = False
                    HabilitarValorOrden = False
                    HabilitarValorRepoOrden = False
                    HabilitarCaptacionRepoOrden = False
                    HabilitarRepoEnPesos = False

                    HabilitarPrecio = False
                    HabilitarDatosLeo = False
                End If
                IsBusy = False
                RaiseEvent TerminoConfigurarConErrores("RECEPTOR")
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al obtener los receptores del usuario.", Me.ToString(), "TerminoConsultarReceptoresUsuario", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub PosicionarControlValidaciones(ByVal plogOrdenOriginal As Boolean, ByVal pobjOrdenSelected As OyDPLUSOrdenesBolsa.OrdenOYDPLUS, ByVal pobjViewOrdenOYDPLUS As OrdenesPLUSView, ByVal pobjViewCruzada As OrdenesCruzadasOYDPLUSView)
        Try
            'Se busca el control para llevarle el foco al control que se requiere
            Dim strMensaje As String = strMensajeValidacion.ToLower

            If strMensaje.Contains("- receptor") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboReceptores") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboReceptores")
                Exit Sub
            End If
            If strMensaje.Contains("- tipo orden") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboTipoOrden") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboTipoOrden")
                Exit Sub
            End If
            If strMensaje.Contains("- tipo negocio") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboTipoNegocio") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboTipoNegocio")
                Exit Sub
            End If
            If strMensaje.Contains("- tipo producto") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboTipoProducto") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboTipoProducto")
                Exit Sub
            End If
            If strMensaje.Contains("- tipo operación") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboTipoOperacion") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboTipoOperacion")
                Exit Sub
            End If
            If strMensaje.Contains("- clasificación") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboClasificacion") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboClasificacion")
                Exit Sub
            End If
            If strMensaje.Contains("- tipo limite") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboTipoLimite") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboTipoLimite")
                Exit Sub
            End If
            If strMensaje.Contains("- condiciones negociación") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboCondicionesNegociacion") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboCondicionesNegociacion")
                Exit Sub
            End If
            If strMensaje.Contains("- forma de pago") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboFormaPago") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboFormaPago")
                Exit Sub
            End If
            If strMensaje.Contains("- tipo inversión") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboTipoInversion") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboTipoInversion")
                Exit Sub
            End If
            If strMensaje.Contains("- ejecución") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboEjecucion") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboEjecucion")
                Exit Sub
            End If
            If strMensaje.Contains("- duración") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboDuracion") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboDuracion")
                Exit Sub
            End If
            If strMensaje.Contains("- especie") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "txtEspecie") Else BuscarControlValidacionCruzada(pobjViewCruzada, "txtEspecie")
                Exit Sub
            End If
            If strMensaje.Contains("- cliente") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "txtCliente") Else BuscarControlValidacionCruzada(pobjViewCruzada, "txtCliente")
                Exit Sub
            End If
            If strMensaje.Contains("- ordenante") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboOrdenante") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboOrdenante")
                Exit Sub
            End If
            If strMensaje.Contains("- cuenta depósito") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "cboCuentaDeposito") Else BuscarControlValidacionCruzada(pobjViewCruzada, "cboCuentaDeposito")
                Exit Sub
            End If
            If strMensaje.Contains("- cantidad") Or
                strMensaje.Contains("- precio") Or
                strMensaje.Contains("- la cantidad") Or
                strMensaje.Contains("- el precio") Or
                strMensaje.Contains("- fecha recepción") Or
                strMensaje.Contains(" - el valor") Or
                strMensaje.Contains(" - la tasa") Or
                strMensaje.Contains(" - el nominal") Or
                strMensaje.Contains(" - los Dias") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "tabItemValoresComisiones") Else BuscarControlValidacionCruzada(pobjViewCruzada, "tabItemValoresComisiones")
                Exit Sub
            End If
            If strMensaje.Contains("- receptor toma") Or
                strMensaje.Contains("- canal recepción") Or
                strMensaje.Contains("- usuario operador") Or
                strMensaje.Contains("- medio verificable") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "tabItemDatosLEO") Else BuscarControlValidacionCruzada(pobjViewCruzada, "tabItemDatosLEO")
                Exit Sub
            End If
            If strMensaje.Contains("distribución de comisiones") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "tabItemDistribucionComisiones") Else BuscarControlValidacionCruzada(pobjViewCruzada, "tabItemDistribucionComisiones")
                Exit Sub
            End If
            If strMensaje.Contains("orden cruzada") Then
                If plogOrdenOriginal Then BuscarControlValidacion(pobjViewOrdenOYDPLUS, "tabItemCruzarCon")
                Exit Sub
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al terminar de mostrar el mensaje de validación.", Me.ToString, "TerminoValidacionMensajeOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoValidarIngresoOrden(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.tblRespuestaValidaciones))
        Try
            If lo.HasError = False Then

                ListaResultadoValidacion = lo.Entities.ToList

                If ListaResultadoValidacion.Count > 0 Then
                    Dim logExitoso As Boolean = False
                    Dim logContinuaMostrandoMensaje As Boolean = False
                    Dim logRequiereConfirmacion As Boolean = False
                    Dim logRequiereJustificacion As Boolean = False
                    Dim logRequiereAprobacion As Boolean = False
                    Dim logConsultaListaJustificacion As Boolean = False
                    Dim logError As Boolean = False
                    'Dim strMensajeExitoso As String = "La orden se actualizó correctamente."
                    Dim strMensajeExitoso As String = ""
                    Dim strMensajeError As String = "La orden no se pudo actualizar."
                    Dim logEsHtml As Boolean = False
                    Dim strMensajeDetallesHtml As String = String.Empty
                    Dim strMensajeRetornoHtml As String = String.Empty

                    For Each li In ListaResultadoValidacion
                        If li.Exitoso Then
                            logExitoso = True
                            logError = False
                            logContinuaMostrandoMensaje = False
                            logRequiereJustificacion = False
                            logRequiereConfirmacion = False
                            logRequiereAprobacion = False
                            strMensajeExitoso = String.Format("{0}{1} {2}", strMensajeExitoso, vbCrLf, li.Mensaje)
                            'strMensajeExitoso = String.Format("{0}{1} {2}", li.Mensaje, vbCrLf, strMensajeExitoso)
                            If Not IsNothing(li.IDOrdenIdentity) Then
                                intIDOrdenGuardada = li.IDOrdenIdentity
                            End If
                        ElseIf li.RequiereConfirmacion Then
                            logExitoso = False
                            logError = False
                            logContinuaMostrandoMensaje = False
                            logRequiereConfirmacion = True
                        ElseIf li.RequiereJustificacion Then
                            logExitoso = False
                            logError = False
                            logContinuaMostrandoMensaje = False
                            logRequiereJustificacion = True
                        ElseIf li.RequiereAprobacion Then
                            logExitoso = False
                            logError = False
                            logContinuaMostrandoMensaje = False
                            logRequiereAprobacion = True
                        ElseIf li.DetieneIngreso Then
                            logError = True
                            logExitoso = False
                            logRequiereJustificacion = False
                            logRequiereConfirmacion = False
                            logContinuaMostrandoMensaje = False
                            logRequiereAprobacion = False
                            strMensajeError = String.Format("{0}{1} -> {2}", strMensajeError, vbCrLf, li.Mensaje)
                            strMensajeRetornoHtml = String.Format("{0}{1}", strMensajeRetornoHtml, li.DetalleRegla)
                        Else
                            logError = True
                            logExitoso = False
                            logRequiereJustificacion = False
                            logRequiereConfirmacion = False
                            logContinuaMostrandoMensaje = False
                            logRequiereAprobacion = False
                            strMensajeError = String.Format("{0}{1} -> {2}", strMensajeError, vbCrLf, li.Mensaje)
                            strMensajeRetornoHtml = String.Format("{0}{1}", strMensajeRetornoHtml, li.DetalleRegla)
                        End If

                    Next

                    If logExitoso And
                        logContinuaMostrandoMensaje = False And
                        logRequiereConfirmacion = False And
                        logRequiereJustificacion = False And
                        logRequiereAprobacion = False And
                        logError = False Then

                        strMensajeExitoso = strMensajeExitoso.Replace("++", String.Format("{0}      -> ", vbCrLf))
                        strMensajeExitoso = strMensajeExitoso.Replace("*|", String.Format("{0}      -> ", vbCrLf))
                        strMensajeExitoso = strMensajeExitoso.Replace("|", String.Format("{0}   -> ", vbCrLf))
                        strMensajeExitoso = strMensajeExitoso.Replace("--", String.Format("{0}", vbCrLf))
                        logEliminarAsociacion = False
                        LiquidacionesHabilitarControles = String.Empty
                        'Valida sí es una orden cruzada.
                        If logOrdenCruzada Then
                            mostrarMensajeResultadoAsincronico(strMensajeExitoso, Program.TituloSistema, AddressOf TerminoMensajeResultadoAsincronico, "TERMINOGUARDARCRUZADA", A2Utilidades.wppMensajes.TiposMensaje.Exito)
                        Else
                            If logNuevoRegistro Then
                                strEstadoUltimoGuardado = "TERMINOGUARDARNUEVO"
                            Else
                                strEstadoUltimoGuardado = "TERMINOGUARDAREDICION"
                            End If

                            RecargarOrdenDespuesGuardado(strMensajeExitoso)
                        End If

                    ElseIf logError Then
                        If Not String.IsNullOrEmpty(strMensajeRetornoHtml) Then
                            logEsHtml = True
                            strMensajeDetallesHtml = String.Format("<HTML><HEAD></HEAD><BODY>{0}</BODY></HTML>", strMensajeRetornoHtml)
                        Else
                            logEsHtml = False
                            strMensajeDetallesHtml = String.Empty
                        End If

                        strMensajeError = strMensajeError.Replace("++", String.Format("{0}      -> ", vbCrLf))
                        strMensajeError = strMensajeError.Replace("*|", String.Format("{0}      -> ", vbCrLf))
                        strMensajeError = strMensajeError.Replace("|", String.Format("{0}   -> ", vbCrLf))
                        strMensajeError = strMensajeError.Replace("--", String.Format("{0}", vbCrLf))

                        mostrarMensaje(strMensajeError, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia, String.Empty, "Reglas incumplidas en los detalles de las ordenes", logEsHtml, strMensajeDetallesHtml)
                        If logOrdenCruzada Then
                            IsBusyCruzada = False
                        Else
                            IsBusy = False
                        End If
                    Else
                        ValidarMensajesMostrarUsuario(TIPOMENSAJEUSUARIO.TODOS)
                    End If
                End If
            Else
                If logOrdenCruzada Then
                    IsBusyCruzada = False
                Else
                    IsBusy = False
                End If
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de las validación.", Me.ToString(), "TerminoValidarIngresoOrden", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de las validación.", Me.ToString(), "TerminoValidarIngresoOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusyCruzada = False
            IsBusy = False
        End Try
    End Sub

    Private Sub RecargarOrdenDespuesGuardado(ByVal pstrMensaje As String)
        Try
            If logNuevoRegistro Or logDuplicarRegistro Then
                logPreguntarOrdenCruzada = True
            Else
                logPreguntarOrdenCruzada = False
            End If

            logCancelarRegistro = False
            logEditarRegistro = False
            logDuplicarRegistro = False
            logPlantillaRegistro = False
            logNuevoRegistro = False
            HabilitarOpcionesCruzada = False
            HabilitarEncabezado = False
            HabilitarNegocio = False
            HabilitarEspecieCumplimiento = False
            HabilitarNegocioComitente = False
            HabilitarEjecucion = False
            HabilitarDuracion = False
            HabilitarFechaVigencia = False
            HabilitarHoraVigencia = False
            HabilitarUsuarioOperador = False
            HabilitarConstancia = False
            HabilitarCantidad = False
            HabilitarValorOrden = False
            HabilitarValorRepoOrden = False
            HabilitarCaptacionRepoOrden = False
            HabilitarRepoEnPesos = False

            logEliminarAsociacion = False 'Ajuste para cuando se Edita eliminando Asociacion Probable JDOL 20180901
            HabilitarPrecio = False
            HabilitarDatosLeo = False
            HabilitarTipoLimite = False
            LiquidacionesHabilitarControles = String.Empty
            If _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_VENTA And _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA And HabilitarConstanciaFuncionalidad Then
                MostrarCamposConstancia = Visibility.Visible
            Else
                MostrarCamposConstancia = Visibility.Collapsed
            End If

            MostrarControles = Visibility.Collapsed
            MostrarControlMensajes = Visibility.Collapsed
            MostrarCamposAcciones = Visibility.Collapsed
            MostrarCamposRentaFija = Visibility.Collapsed
            MostrarCamposCuentaPropia = Visibility.Collapsed
            MostrarNoEdicion = Visibility.Visible
            MostrarCamposFaciales = Visibility.Collapsed
            MostrarCampoTasaFacial = Visibility.Collapsed
            MostrarCampoIndicador = Visibility.Collapsed
            MostrarCampoPuntosIndicador = Visibility.Collapsed

            'Esto se realiza para habilitar los botones de navegación llamando el metodo TerminoSubmitChanges
            If dcProxy1.OrdenOYDPLUS.Contains(_OrdenOYDPLUSSelected) Then
                dcProxy1.OrdenOYDPLUS.Add(_OrdenOYDPLUSSelected)
            End If

            Program.VerificarCambiosProxyServidor(dcProxy1)
            dcProxy1.SubmitChanges(AddressOf TerminoSubmitChanges, pstrMensaje)
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al iniciar de nuevo los parametros.", Me.ToString(), "RecargarOrdenDespuesGuardado", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusyCruzada = False
            IsBusy = False
        End Try

    End Sub

    Private Sub TerminoCrearOrdenCruzada(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As OrdenesCruzadasOYDPLUSView
            objResultado = CType(sender, OrdenesCruzadasOYDPLUSView)

            IsBusy = True
            IsBusyCruzada = False
            logOrdenCruzada = False
            logNuevoRegistro = False
            MostrarControles = Visibility.Collapsed
            MostrarNoEdicion = Visibility.Visible
            MostrarNegocio = Visibility.Visible
            MostrarCamposAcciones = Visibility.Collapsed
            HabilitarEjecucion = False
            HabilitarDuracion = False
            MostrarCamposRentaFija = Visibility.Collapsed
            MostrarCamposCuentaPropia = Visibility.Collapsed

            ObtenerInformacionCombosCompletos()

            If VistaSeleccionada = VISTA_PENDIENTESCRUZAR Then
                FiltrarOrdenesCruzadasOYDPLUS()
            Else
                VistaSeleccionada = VISTA_APROBADAS
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la orden cruzada.", Me.ToString(), "TerminoCrearOrdenCruzada", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try
    End Sub

    Private Async Sub TerminoValidarDiasHabiles(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.ValidarFecha))
        Dim objDatos As OyDPLUSOrdenesBolsa.ValidarFecha
        Dim strMsg As String = String.Empty
        Dim strAccion As String = String.Empty

        Try
            If Not lo.HasError Then
                objDatos = lo.Entities.FirstOrDefault
                strAccion = lo.UserState.ToString.ToLower

                If Not objDatos Is Nothing Then

                    If objDatos.EsDiaHabil Then

                        If lo.UserState = MSTR_CALCULAR_DIAS_PLAZO Then
                            Dim logCalcularValorDespuesPlazo As Boolean = False
                            If logOrdenCruzada Then
                                If Not IsNothing(_OrdenCruzadaSelected) Then
                                    If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                                        _OrdenCruzadaSelected.DiasRepo = objDatos.NroDias - 1
                                        _OrdenCruzadaSelected.DiasCumplimiento = objDatos.NroDias - 1
                                        logCalcularValorDespuesPlazo = True
                                    Else
                                        If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTVC Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPOC Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                                            If Not IsNothing(_OrdenCruzadaSelected.FechaSalida) And Not IsNothing(OrdenCruzadaSelected.FechaCumplimiento) Then
                                                _OrdenCruzadaSelected.DiasRepo = DateDiff(DateInterval.Day, _OrdenCruzadaSelected.FechaSalida.Value.Date, _OrdenCruzadaSelected.FechaCumplimiento.Value.Date)
                                                _OrdenCruzadaSelected.DiasCumplimiento = DateDiff(DateInterval.Day, _OrdenCruzadaSelected.FechaSalida.Value.Date, _OrdenCruzadaSelected.FechaCumplimiento.Value.Date)
                                                logCalcularValorDespuesPlazo = True
                                            End If
                                        Else
                                            If Not IsNothing(_OrdenCruzadaSelected.FechaOrden) And Not IsNothing(OrdenCruzadaSelected.FechaCumplimiento) Then
                                                _OrdenCruzadaSelected.DiasRepo = DateDiff(DateInterval.Day, _OrdenCruzadaSelected.FechaOrden.Value.Date, _OrdenCruzadaSelected.FechaCumplimiento.Value.Date)
                                                _OrdenCruzadaSelected.DiasCumplimiento = DateDiff(DateInterval.Day, _OrdenCruzadaSelected.FechaOrden.Value.Date, _OrdenCruzadaSelected.FechaCumplimiento.Value.Date)
                                                logCalcularValorDespuesPlazo = True
                                            End If
                                        End If
                                    End If

                                    If logCalcularValorDespuesPlazo Then
                                        If _OrdenCruzadaSelected.Cantidad > 0 And logCalcularValores Then
                                            CalcularValorOrden(_OrdenCruzadaSelected)
                                        End If
                                    End If
                                End If
                            Else
                                If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ADR Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Then
                                        logDiasCumplimiento = False
                                        _OrdenOYDPLUSSelected.DiasRepo = objDatos.NroDias
                                        _OrdenOYDPLUSSelected.DiasCumplimiento = objDatos.NroDias
                                        logCalcularValorDespuesPlazo = True
                                        logDiasCumplimiento = True
                                    Else
                                        logDiasCumplimiento = False
                                        If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                                            If Not IsNothing(_OrdenOYDPLUSSelected.FechaSalida) And Not IsNothing(_OrdenOYDPLUSSelected.FechaCumplimiento) Then
                                                _OrdenOYDPLUSSelected.DiasRepo = DateDiff(DateInterval.Day, _OrdenOYDPLUSSelected.FechaSalida.Value.Date, _OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date)
                                                _OrdenOYDPLUSSelected.DiasCumplimiento = DateDiff(DateInterval.Day, _OrdenOYDPLUSSelected.FechaSalida.Value.Date, _OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date)
                                                logCalcularValorDespuesPlazo = True
                                            End If
                                        Else
                                            If Not IsNothing(_OrdenOYDPLUSSelected.FechaOrden) And Not IsNothing(_OrdenOYDPLUSSelected.FechaCumplimiento) Then
                                                _OrdenOYDPLUSSelected.DiasRepo = DateDiff(DateInterval.Day, _OrdenOYDPLUSSelected.FechaOrden.Value.Date, _OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date)
                                                _OrdenOYDPLUSSelected.DiasCumplimiento = DateDiff(DateInterval.Day, _OrdenOYDPLUSSelected.FechaOrden.Value.Date, _OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date)
                                                logCalcularValorDespuesPlazo = True
                                            End If
                                        End If

                                        logDiasCumplimiento = True
                                    End If

                                    If logCalcularValorDespuesPlazo Then
                                        If _OrdenOYDPLUSSelected.Cantidad > 0 And logCalcularValores Then
                                            CalcularValorOrden(_OrdenOYDPLUSSelected)
                                        End If
                                    End If
                                End If
                            End If
                        ElseIf lo.UserState = MSTR_CALCULAR_CUMPLIMIENTO_ORDEN Then
                            If logOrdenCruzada Then
                                If Not IsNothing(_OrdenCruzadaSelected) Then
                                    logCalcularDiasPlazo = False
                                    _OrdenCruzadaSelected.FechaCumplimiento = objDatos.FechaFinal
                                    _OrdenCruzadaSelected.DiasRepo = objDatos.NroDias - 1
                                    _OrdenCruzadaSelected.DiasCumplimiento = objDatos.NroDias
                                    logCalcularDiasPlazo = True
                                End If
                            Else
                                If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                    logCalcularDiasPlazo = False
                                    _OrdenOYDPLUSSelected.FechaCumplimiento = objDatos.FechaFinal
                                    _OrdenOYDPLUSSelected.DiasRepo = objDatos.NroDias - 1
                                    _OrdenOYDPLUSSelected.DiasCumplimiento = objDatos.NroDias
                                    logCalcularDiasPlazo = True
                                End If
                            End If
                        ElseIf lo.UserState = MSTR_ACCION_VALIDACION_GUARDADO_ORDEN Then
                            dcProxy.ValidarFechas.Clear()
                            If logOrdenCruzada Then
                                If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(MSTR_CALCULAR_DIAS_ORDEN, _OrdenCruzadaSelected.FechaSalida, _OrdenCruzadaSelected.FechaCumplimiento.Value.Date, -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO)
                                Else
                                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(MSTR_CALCULAR_DIAS_ORDEN, _OrdenCruzadaSelected.FechaOrden, _OrdenCruzadaSelected.FechaCumplimiento.Value.Date, -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO)
                                End If
                            Else
                                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(MSTR_CALCULAR_DIAS_ORDEN, _OrdenOYDPLUSSelected.FechaSalida, IIf(IsNothing(_OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date), 0, _OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date), -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO)
                                Else
                                    dcProxy.Load(dcProxy.CalcularDiasHabilesQuery(MSTR_CALCULAR_DIAS_ORDEN, _OrdenOYDPLUSSelected.FechaOrden, IIf(IsNothing(_OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date), 0, _OrdenOYDPLUSSelected.FechaCumplimiento.Value.Date), -1, Program.Usuario, Program.HashConexion), AddressOf TerminoValidarDiasHabiles, MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO)
                                End If
                            End If
                        ElseIf lo.UserState = MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO Then
                            ValidarOrdenOriginaloCruzada()
                        Else
                            If strAccion = MSTR_ACCION_CALCULAR_DIAS Then
                                If objDatos.TipoCalculo.ToLower() = MSTR_CALCULAR_DIAS_ORDEN Then
                                    If logOrdenCruzada Then
                                        If Not IsNothing(_OrdenCruzadaSelected) Then
                                            _OrdenCruzadaSelected.Dias = objDatos.NroDias
                                        End If
                                    Else
                                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                            _OrdenOYDPLUSSelected.Dias = objDatos.NroDias
                                        End If

                                    End If
                                    CalcularDiasPlazo(_OrdenOYDPLUSSelected)
                                Else
                                    If logOrdenCruzada Then
                                        If Not IsNothing(_OrdenCruzadaSelected) Then
                                            _OrdenCruzadaSelected.Dias = objDatos.NroDias
                                        End If
                                    Else
                                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                            _OrdenOYDPLUSSelected.Dias = objDatos.NroDias
                                        End If
                                    End If
                                End If
                            Else
                                If objDatos.TipoCalculo.ToLower() = MSTR_CALCULAR_DIAS_TITULO Then
                                    If logOrdenCruzada Then
                                        If Not IsNothing(_OrdenCruzadaSelected) Then
                                            _OrdenCruzadaSelected.FechaVencimiento = objDatos.FechaFinal
                                        End If
                                    Else
                                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                            _OrdenOYDPLUSSelected.FechaVencimiento = objDatos.FechaFinal
                                        End If
                                    End If
                                ElseIf objDatos.TipoCalculo.ToLower() = MSTR_CALCULAR_FECHA_CUMPLIMIENTO_DE_DIAS Or strAccion = MSTR_CALCULAR_FECHA_CUMPLIMIENTO_DE_DIAS Then
                                    'If logOrdenCruzada Then
                                    '    If Not IsNothing(_OrdenCruzadaSelected) Then
                                    '        _OrdenCruzadaSelected.FechaCumplimiento = objDatos.FechaFinal
                                    '    End If
                                    'Else
                                    '    If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                    '        _OrdenOYDPLUSSelected.FechaCumplimiento = objDatos.FechaFinal
                                    '    End If
                                    'End If
                                    Dim dtmFechaInicialCumplimiento As DateTime
                                    logCalcularValores = False
                                    If logOrdenCruzada Then
                                        If Not IsNothing(_OrdenCruzadaSelected) Then
                                            If (_OrdenCruzadaSelected.TipoNegocio.ToUpper <> TIPONEGOCIO_ACCIONES) And (_OrdenCruzadaSelected.TipoNegocio.ToUpper <> TIPONEGOCIO_ADR) And (_OrdenCruzadaSelected.TipoNegocio.ToUpper <> TIPONEGOCIO_RENTAFIJA) Then
                                                If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                                    dtmFechaInicialCumplimiento = DateAdd(DateInterval.Day, 1, _OrdenCruzadaSelected.FechaSalida.Value.Date)
                                                Else
                                                    dtmFechaInicialCumplimiento = _OrdenCruzadaSelected.FechaOrden.Value.Date
                                                End If
                                                _OrdenCruzadaSelected.FechaCumplimiento = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, CType(_OrdenCruzadaSelected.DiasCumplimiento, Integer), dtmFechaInicialCumplimiento.Date))
                                            Else
                                                _OrdenCruzadaSelected.FechaCumplimiento = objDatos.FechaFinal
                                            End If
                                        End If
                                    Else
                                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                            If (_OrdenOYDPLUSSelected.TipoNegocio.ToUpper <> TIPONEGOCIO_ACCIONES) And (_OrdenOYDPLUSSelected.TipoNegocio.ToUpper <> TIPONEGOCIO_ADR) And (_OrdenOYDPLUSSelected.TipoNegocio.ToUpper <> TIPONEGOCIO_RENTAFIJA) Then
                                                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                                    dtmFechaInicialCumplimiento = DateAdd(DateInterval.Day, 1, _OrdenOYDPLUSSelected.FechaSalida.Value.Date)
                                                Else
                                                    dtmFechaInicialCumplimiento = DateAdd(DateInterval.Day, 1, _OrdenOYDPLUSSelected.FechaOrden.Value.Date)
                                                End If
                                                _OrdenOYDPLUSSelected.FechaCumplimiento = DateAdd(DateInterval.Minute, -1, DateAdd(DateInterval.Day, CType(_OrdenOYDPLUSSelected.DiasCumplimiento, Integer), dtmFechaInicialCumplimiento.Date))
                                            Else
                                                _OrdenOYDPLUSSelected.FechaCumplimiento = objDatos.FechaFinal
                                            End If
                                        End If
                                    End If
                                    logCalcularValores = True
                                    If logOrdenCruzada Then
                                        If _OrdenCruzadaSelected.Cantidad > 0 Then
                                            Await CalcularValorOrden(_OrdenCruzadaSelected)
                                        End If
                                    Else
                                        If _OrdenOYDPLUSSelected.Cantidad > 0 Then
                                            Await CalcularValorOrden(_OrdenOYDPLUSSelected)
                                        End If
                                    End If
                                Else
                                    If logOrdenCruzada Then
                                        If Not IsNothing(_OrdenCruzadaSelected) Then
                                            logCalcularDiasPlazo = False
                                            _OrdenCruzadaSelected.FechaVigencia = objDatos.FechaFinal
                                            _OrdenCruzadaSelected.Dias = objDatos.NroDias
                                            logCalcularDiasPlazo = True
                                        End If
                                    Else
                                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                            logCalcularDiasPlazo = False
                                            _OrdenOYDPLUSSelected.FechaVigencia = objDatos.FechaFinal
                                            _OrdenOYDPLUSSelected.Dias = objDatos.NroDias
                                            logCalcularDiasPlazo = True
                                            'Me.CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_ORDEN, _OrdenOYDPLUSSelected, -1)

                                            ' -- Se asignan los días de cumplimiento correctamente para TTV Acciones
                                            ' JDR20180524
                                            If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Then
                                                _OrdenOYDPLUSSelected.DiasCumplimiento = DateDiff(DateInterval.Day, objDatos.FechaInicial.Value, objDatos.FechaFinal.Value)

                                                Await CalcularValorOrden(_OrdenOYDPLUSSelected)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Else 'If objDatos.EsDiaHabil Then
                        If logEditarRegistro Or logNuevoRegistro Then

                            'Valida sí la duración es cancelación para que no se muestre el mensaje de error.
                            'sino que se asigne la fecha posterior sugerida por el sistema.
                            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                If _OrdenOYDPLUSSelected.Duracion = DURACION_CANCELACION And
                                    objDatos.TipoCalculo.ToLower() = MSTR_CALCULAR_DIAS_ORDEN And
                                    lo.UserState <> MSTR_ACCION_VALIDACION_GUARDADO_ORDEN And
                                    lo.UserState <> MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO And
                                    lo.UserState <> MSTR_CALCULAR_DIAS_PLAZO Then
                                    _OrdenOYDPLUSSelected.FechaVigencia = objDatos.FechaHabilMayor
                                Else
                                    If Not objDatos.FechaHabilMayor Is Nothing Then
                                        strMsg = "La fecha hábil siguiente es " & FormatDateTime(objDatos.FechaHabilMayor, Microsoft.VisualBasic.DateFormat.LongDate) & "."
                                    End If
                                    If Not objDatos.FechaHabilMenor Is Nothing Then
                                        strMsg &= "La fecha hábil anterior es " & FormatDateTime(objDatos.FechaHabilMenor, Microsoft.VisualBasic.DateFormat.LongDate) & "."
                                    End If

                                    If objDatos.TipoCalculo.ToLower() = MSTR_CALCULAR_DIAS_ORDEN Then
                                        If lo.UserState = MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO Or
                                            lo.UserState = MSTR_CALCULAR_DIAS_PLAZO Then
                                            strMsg = "La fecha de cumplimiento no es un día hábil. " & strMsg & "." & vbNewLine & vbNewLine &
                                                    "Debe seleccionar un día hábil."
                                        Else
                                            strMsg = "La fecha de vigencia no es un día hábil. " & strMsg & "." & vbNewLine & vbNewLine &
                                                "Debe seleccionar un día hábil."
                                        End If
                                    Else
                                        strMsg = "La fecha de vencimiento no es un día hábil. " & strMsg & "." & vbNewLine & vbNewLine &
                                                "Debe seleccionar un día hábil."
                                        logDiasCumplimiento = True
                                    End If

                                    If objDatos.TipoCalculo.ToLower() = "vencimiento_liquidez" Then
                                        If logOrdenCruzada Then
                                            _OrdenCruzadaSelected.DiasCumplimiento = 0
                                        Else
                                            _OrdenOYDPLUSSelected.DiasCumplimiento = 0
                                        End If
                                    End If

                                    mostrarMensaje(strMsg, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                                End If
                            End If
                        Else
                            If objDatos.TipoCalculo.ToLower() = MSTR_CALCULAR_DIAS_ORDEN Then
                                If IsNothing(objDatos.NroDias) Then
                                    If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                        If IsNothing(_OrdenOYDPLUSSelected.FechaVigencia) Then
                                            If logOrdenCruzada Then
                                                _OrdenCruzadaSelected.Dias = 0
                                            Else
                                                _OrdenOYDPLUSSelected.Dias = 0
                                            End If
                                        Else
                                            ' Se suma uno porque se deben incluir la fecha de la orden y la fecha de vigencia
                                            If logOrdenCruzada Then
                                                _OrdenCruzadaSelected.Dias = DateDiff(DateInterval.Day, CType(_OrdenCruzadaSelected.FechaOrden, Date), CType(_OrdenCruzadaSelected.FechaVigencia, Date)) + 1
                                            Else
                                                _OrdenOYDPLUSSelected.Dias = DateDiff(DateInterval.Day, CType(_OrdenOYDPLUSSelected.FechaOrden, Date), CType(_OrdenOYDPLUSSelected.FechaVigencia, Date)) + 1
                                            End If
                                        End If
                                    End If
                                Else
                                    If logOrdenCruzada Then
                                        If Not IsNothing(_OrdenCruzadaSelected) Then
                                            _OrdenCruzadaSelected.Dias = 0
                                        End If
                                    Else
                                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                            _OrdenOYDPLUSSelected.Dias = 0
                                        End If
                                    End If

                                End If
                            Else
                                If logOrdenCruzada Then
                                    If IsNothing(objDatos.NroDias) Then
                                        If Not IsNothing(_OrdenCruzadaSelected) Then
                                            _OrdenCruzadaSelected.Dias = 0
                                        End If
                                    Else
                                        If Not IsNothing(_OrdenCruzadaSelected) Then
                                            _OrdenCruzadaSelected.Dias = objDatos.NroDias
                                        End If
                                    End If
                                Else
                                    If IsNothing(objDatos.NroDias) Then
                                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                            _OrdenOYDPLUSSelected.Dias = 0
                                        End If
                                    Else
                                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                            _OrdenOYDPLUSSelected.Dias = objDatos.NroDias
                                        End If
                                    End If
                                End If

                            End If
                        End If


                        If lo.UserState = MSTR_ACCION_VALIDACION_GUARDADO_ORDEN Or lo.UserState = MSTR_ACCION_VALIDACION_GUARDADO_ORDEN_FECHACUMPLIMIENTO Then
                            IsBusy = False
                        End If

                    End If
                End If
            Else
                IsBusy = False
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la validación de los días al vencimiento", Me.ToString(), "TerminoValidarDiasHabiles", Program.TituloSistema, Program.Maquina, lo.Error)
                'lo.MarkErrorAsHandled()   '????
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la validación de los días al vencimiento", Me.ToString(), "TerminoValidarDiasHabiles", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try

    End Sub
    Sub GUARDARASOCIACION_PROBABLE()
        Try
            If Not IsNothing(ListaLiqAsociadasOrdenes) Then

                If ListaLiqAsociadasOrdenes.Count > 0 Then
                    Dim intContador = 0
                    Dim strLiquidacionesProbables As String = "<liqprobables>"
                    Dim fechaFormateada As DateTime = DateTime.Now

                    For Each li In ListaLiqAsociadasOrdenes.OrderBy(Function(x) x.NroLiquidacion).ToList
                        fechaFormateada = li.FechaLiquidacion.ToString
                        strLiquidacionesProbables = String.Format("{0}<liqprobable Id=""{1}"" Parcial=""{2}"" FechaLiq=""{3}"" Monto=""{4}"" />",
                                                            strLiquidacionesProbables,
                                                            li.NroLiquidacion,
                                                            0,
                                                           fechaFormateada.ToString("yyyy-MM-dd hh:mm:ss"),
                                                            li.Monto)


                        intContador += 1
                    Next
                    strLiquidacionesProbables = String.Format("{0}</liqprobables>", strLiquidacionesProbables)
                    LiquidacionesAsociadasEditar = strLiquidacionesProbables
                Else
                    LiquidacionesAsociadasEditar = "<liqprobables><liqprobable Id=""0"" Parcial=""-1"" FechaLiq=""" & dtmFechaServidor.ToString("yyyy-MM-dd hh:mm:ss") & """ Monto=""0.0"" /></liqprobables>"
                End If
            End If

        Catch ex As Exception

        End Try
    End Sub
    Private Sub TerminoVerificarOrdenModificable(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.OrdenModificable))
        Dim objDatos As OyDPLUSOrdenesBolsa.OrdenModificable
        Dim plogEditar As Boolean = False
        Dim strAccion As String = String.Empty
        Dim strMsg As String = String.Empty

        Try
            If Not lo.HasError Then
                objDatos = lo.Entities.FirstOrDefault
                strAccion = lo.UserState.ToString.ToUpper

                If Not objDatos Is Nothing Then
                    If objDatos.TieneLiquidacionesProbables Then
                        If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA And _OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                            logOrdenDIRECTA_RENTAFIJA = True
                        Else
                            logOrdenDIRECTA_RENTAFIJA = False

                        End If
                        If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA And _OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                            logOrdenDIRECTA_RENTAFIJA = True
                        Else
                            logOrdenDIRECTA_RENTAFIJA = False

                        End If
                        GUARDARASOCIACION_PROBABLE()
                        mostrarMensajePregunta(objDatos.Mensaje + " ¿Desea deshacer la Asociación?", "Validación Liquidaciones Probables", Nothing,
                                               AddressOf TerminoMensajeLiqProbables)
                        logPreguntoAsociacion = True
                    Else
                        logPreguntoAsociacion = False
                        If objDatos.Modificable = False Then
                            strMsg = objDatos.Mensaje
                            If strAccion = "ANULARORDENOYDPLUS" Then
                                If String.IsNullOrEmpty(strMsg) Then
                                    strMsg = "La orden no puede ser anulada."
                                End If
                            End If
                            mostrarMensaje(strMsg, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        Else
                            If objDatos.UltimaModificacion.Equals(_OrdenOYDPLUSSelected.FechaActualizacion) Then
                                plogEditar = True
                            Else
                                plogEditar = False
                            End If
                        End If
                    End If
                End If
            Else
                If strAccion = "EDITARORDENOYDPLUS" Then
                    MyBase.RetornarValorEdicionNavegacion()
                End If
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la validación del estado de la orden", Me.ToString(), "TerminoVerificarOrdenModificable", Program.TituloSistema, Program.Maquina, lo.Error)
                'lo.MarkErrorAsHandled()   '????
            End If

            If plogEditar And strAccion = "EDITARORDENOYDPLUS" Then
                If Not IsNothing(_OrdenOYDPLUSSelected) Then
                    'La orden se puede editar.
                    EditarOrdenOYDPLUS()
                Else
                    MyBase.RetornarValorEdicionNavegacion()
                    IsBusy = False
                End If
            ElseIf plogEditar And strAccion = "ANULARORDENOYDPLUS" Then
                mostrarMensajePregunta("Comentario para la anulación de la orden",
                                       Program.TituloSistema,
                                       "ANULARORDENOYDPLUS",
                                       AddressOf TerminoMensajePregunta,
                                       True,
                                       "¿Anular la orden?", False, True, True, False)

            Else
                If strAccion = "EDITARORDENOYDPLUS" Then
                    MyBase.RetornarValorEdicionNavegacion()
                End If
                IsBusy = False
                '    mostrarMensaje("La orden fue modificada después que se realizó la consulta para desplegarla en pantalla. Debe actualizarla para poder modificarla.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir la validación del estado de la orden", Me.ToString(), "TerminoVerificarOrdenModificable", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    'Ajuste para cuando se Edita eliminando Asociacion Probable JDOL 20180901
    Private Sub TerminoMensajeLiqProbables(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If Not IsNothing(objResultado) Then
                If objResultado.DialogResult Then
                    'If Await EliminarAsociacionOrdenLiqProbables() Then
                    mostrarMensaje("¡La asociación de la Orden con las liquidaciones se eliminara al guardar!", "", A2Utilidades.wppMensajes.TiposMensaje.Exito)

                    If Not IsNothing(ListaLiqAsociadasOrdenes) Then
                        Dim strListaLiquidacionesHabilitar As String = String.Empty
                        For Each li In ListaLiqAsociadasOrdenes
                            If String.IsNullOrEmpty(strListaLiquidacionesHabilitar) Then
                                strListaLiquidacionesHabilitar = li.IDLiquidacionAsociada
                            Else
                                strListaLiquidacionesHabilitar = strListaLiquidacionesHabilitar & "," & li.IDLiquidacionAsociada
                            End If
                        Next

                        LiquidacionesHabilitarControles = strListaLiquidacionesHabilitar

                        Dim objListaLiq As New List(Of OyDPLUSOrdenesBolsa.LiqAsociadasOrden)
                        ListaLiqAsociadasOrdenes = Nothing
                        ListaLiqAsociadasOrdenes = objListaLiq

                        'Julian Rincón (Alcuadrado S.A)
                        If (_OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA) Then
                            _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
                            _OrdenOYDPLUSSelected.ISIN = "(No Seleccionado)"
                            _OrdenOYDPLUSSelected.FechaEmision = Nothing
                            _OrdenOYDPLUSSelected.FechaVencimiento = Nothing
                            _OrdenOYDPLUSSelected.TasaFacial = 0
                            _OrdenOYDPLUSSelected.Modalidad = String.Empty
                            _OrdenOYDPLUSSelected.Indicador = String.Empty
                            _OrdenOYDPLUSSelected.PuntosIndicador = 0
                            _OrdenOYDPLUSSelected.Estandarizada = False
                        End If

                    End If
                    dblCantidadAnterior = _OrdenOYDPLUSSelected.Cantidad
                    ConsultarOrdenesSAE = False
                    ConsultarOrdenesSAE = True
                    'consultarLiqProbablesOrden()
                    IsBusy = False
                    logEliminarAsociacion = True
                    EditarOrdenOYDPLUS()
                    'End If
                Else
                    LiquidacionesHabilitarControles = String.Empty
                    logEliminarAsociacion = False
                    dblCantidadAnterior = _OrdenOYDPLUSSelected.Cantidad
                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                        dblPrecioAnterior = _OrdenOYDPLUSSelected.ValorAccion
                    Else
                        dblPrecioAnterior = _OrdenOYDPLUSSelected.Precio
                    End If

                    EditarOrdenOYDPLUS()
                    IsBusy = False
                    IsBusyCruzada = False
                    MostrarControles = Visibility.Collapsed
                End If
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta del mensaje pregunta.", Me.ToString(), "TerminoMensajePregunta", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub
    ''' <summary>
    ''' Se ejecuta cuando finaliza la anulación de la orden en el servidor
    ''' </summary>
    Private Sub TerminoAnularOrden(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.OrdenSAE))
        Dim objOrdenSAE As OyDPLUSOrdenesBolsa.OrdenSAE
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "No se anuló la orden porque se presentó un problema durante el proceso.", Me.ToString(), "TerminoAnularOrden", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                'lo.MarkErrorAsHandled()
            Else
                objOrdenSAE = lo.Entities.FirstOrDefault
                If objOrdenSAE.TipoMensaje > 1 Then
                    mostrarMensaje(objOrdenSAE.Msg, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                Else
                    mostrarMensaje("La orden fue anulada correctamente.", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Exito)
                    logRefrescarconsultaCambioTab = False
                    VistaSeleccionada = VISTA_APROBADAS
                    FiltrarRegistrosOYDPLUS("P", String.Empty, "TERMINOANULAR", "TERMINOANULAR")
                    logRefrescarconsultaCambioTab = True
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema durante la anulación de la orden.", Me.ToString(), "TerminoAnularOrden", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        Finally
            IsBusy = False
        End Try
    End Sub

    Private Sub TerminoTraerBeneficiariosOrdenes(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.BeneficiariosOrden))
        If Not lo.HasError Then
            ListaBeneficiariosOrdenes = lo.Entities.ToList
        Else
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de BeneficiariosOrdenes",
                                             Me.ToString(), "TerminoTraerBeneficiariosOrdenes", Program.TituloSistema, Program.Maquina, lo.Error)

        End If
    End Sub

    Private Sub TerminoConsultarLiquidacionesOrden(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.LiquidacionesOrden))
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "No se cargaron las liquidaciones de la orden porque se presentó un problema durante el proceso.", Me.ToString(), "TerminoConsultarLiquidacionesOrden", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            Else
                ListaLiquidacionesOrdenes = lo.Entities.ToList
            End If
            If Not IsNothing(ListaLiquidacionesOrdenes) Then
                If ListaLiquidacionesOrdenes.Count > 0 Then
                    If logEditarRegistro Then
                        mostrarMensajePregunta("¿Desea registrar la orden en el libro de órdenes?",
                                                               Program.TituloSistema,
                                                               "RegistroOrdenes",
                                                               AddressOf TerminoMensajePreguntaRegistroOrden, False)
                    End If
                    EditandoInstrucciones = False
                Else
                    If Editando Then
                        EditandoInstrucciones = True
                    End If
                End If
            Else
                If Editando Then
                    EditandoInstrucciones = True
                End If
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir las liquidaciones de la orden", Me.ToString(), "TerminoConsultarLiquidacionesOrden", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub
    Private Sub TerminoMensajePreguntaRegistroOrden(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If Not IsNothing(objResultado) Then
                If objResultado.DialogResult Then
                    If Not IsNothing(ListaLiquidacionesOrdenes) Then
                        If ListaLiquidacionesOrdenes.Count > 0 Then
                            If logEditarRegistro Then
                                logliqAsociadas = True
                                HabilitarNegocio = False ''
                                HabilitarEspecieCumplimiento = False
                                HabilitarNegocioComitente = True
                                HabilitarEjecucion = False
                                HabilitarDuracion = True
                                HabilitarCantidad = False
                                HabilitarPrecio = True
                                HabilitarDatosLeo = True
                            End If
                        End If
                    End If
                Else
                    If Not IsNothing(ListaLiquidacionesOrdenes) Then
                        If ListaLiquidacionesOrdenes.Count > 0 Then
                            If logEditarRegistro Then
                                logliqAsociadas = False
                                HabilitarNegocio = False ''
                                HabilitarEspecieCumplimiento = False
                                HabilitarNegocioComitente = False
                                HabilitarEjecucion = False
                                HabilitarDuracion = False
                                HabilitarCantidad = False
                                HabilitarPrecio = False
                                HabilitarDatosLeo = False
                                Editando = False
                            End If
                        End If
                    End If
                End If
            End If


        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al registrar la orden", Me.ToString(), "TerminoMensajePreguntaRegistroOrden", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoTraerLiqProbablesOrdenes(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.LiqAsociadasOrden))
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "No se cargaron las liquidaciones de la orden porque se presentó un problema durante el proceso.", Me.ToString(), "TerminoTraerLiqProbablesOrdenes", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            Else
                ListaLiqAsociadasOrdenes = lo.Entities.ToList
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir las liquidaciones de la orden", Me.ToString(), "TerminoTraerLiqProbablesOrdenes", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoTraerEnrutamientoOrdenes(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.EnrutamientoOrden))
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "No se cargaron las liquidaciones de la orden porque se presentó un problema durante el proceso.", Me.ToString(), "TerminoTraerLiqProbablesOrdenes", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            Else
                ListaEnrutamientoOrdenes = lo.Entities.ToList
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recibir las liquidaciones de la orden", Me.ToString(), "TerminoTraerLiqProbablesOrdenes", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Async Sub TerminoConsultarMejorPrecioEspecie(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.MejorPrecioEspecieOrden))
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cargar el mejor precio de la especie.", Me.ToString(), "TerminoConsultarMejorPrecioEspecie", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            Else
                If lo.Entities.Count > 0 Then
                    If lo.UserState = OPCION_ORDENCRUZADA Then
                        If Not IsNothing(_OrdenCruzadaSelected) Then
                            If Not IsNothing(lo.Entities.FirstOrDefault.Precio) Then
                                If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                                    _OrdenCruzadaSelected.ValorAccion = 0
                                    _OrdenCruzadaSelected.ValorAccion = lo.Entities.FirstOrDefault.Precio
                                    dblValorConsultadoPrecioSAE = lo.Entities.FirstOrDefault.Precio
                                Else
                                    _OrdenCruzadaSelected.Precio = 0
                                    _OrdenCruzadaSelected.Precio = lo.Entities.FirstOrDefault.Precio
                                    dblValorConsultadoPrecioSAE = lo.Entities.FirstOrDefault.Precio
                                End If
                            End If
                        End If
                    Else
                        If Not IsNothing(_OrdenOYDPLUSSelected) Then
                            If Not IsNothing(lo.Entities.FirstOrDefault.Precio) Then
                                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Then
                                    _OrdenOYDPLUSSelected.ValorAccion = 0
                                    _OrdenOYDPLUSSelected.ValorAccion = lo.Entities.FirstOrDefault.Precio
                                    dblValorConsultadoPrecioSAE = lo.Entities.FirstOrDefault.Precio
                                Else
                                    _OrdenOYDPLUSSelected.Precio = 0
                                    _OrdenOYDPLUSSelected.Precio = lo.Entities.FirstOrDefault.Precio
                                    dblValorConsultadoPrecioSAE = lo.Entities.FirstOrDefault.Precio
                                End If
                            End If
                        End If
                    End If
                End If

                If lo.UserState = "CAMBIOESPECIE" Then
                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC _
                            Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                        Await ConsultarPorcentajeGarantia()
                    End If
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cargar el mejor precio de la especie.", Me.ToString(), "TerminoConsultarMejorPrecioEspecie", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoConsultarOrdenesCruzadas(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.tblOrdenesCruzadas))
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cargar la información de las ordenes cruzadas.", Me.ToString(), "TerminoConsultarOrdenesCruzadas", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusyCruzada = False
                IsBusy = False
            Else
                Dim logRompioCruce As Boolean = False

                If lo.Entities.Count > 0 Then
                    TotalOrdenesCruzadas = 0

                    For Each li In lo.Entities.ToList
                        If li.CruceActivo Then
                            TotalOrdenesCruzadas += li.ValorOrdenCruzada
                        End If
                        If li.CruceActivo = False And _OrdenOYDPLUSSelected.OrdenCruzada And _OrdenOYDPLUSSelected.IDNroOrden = li.IDOrdenCruzada Then
                            logRompioCruce = True
                        End If
                    Next

                    If logRompioCruce And _OrdenOYDPLUSSelected.OrdenCruzada Then
                        MostrarMensajeCruceInactivo = Visibility.Visible
                    Else
                        MostrarMensajeCruceInactivo = Visibility.Collapsed
                    End If

                    If TotalOrdenesCruzadas < _OrdenOYDPLUSSelected.Cantidad Then
                        TotalPendientePorCruzar = _OrdenOYDPLUSSelected.Cantidad - TotalOrdenesCruzadas
                        If _OrdenOYDPLUSSelected.OrdenCruzada = False Then TextoCruces = "pendiente por cruces"
                    Else
                        TotalPendientePorCruzar = 0
                        If _OrdenOYDPLUSSelected.OrdenCruzada = False Then TextoCruces = "con otras ordenes"
                    End If
                Else
                    TotalOrdenesCruzadas = 0
                    If _OrdenOYDPLUSSelected.OrdenCruzada = False Then TextoCruces = "pendiente por cruces"
                    TotalPendientePorCruzar = _OrdenOYDPLUSSelected.Cantidad
                End If

                If lo.UserState = OPCION_ORDENCRUZADA Then
                    'Valida sí la orden todavia se puede crear y obtiene el valor sugerido para la orden.
                    'Crea un nuevo registro para la orden cruzada original.

                    Dim strReceptor As String = String.Empty
                    Dim strNombreReceptor As String = String.Empty

                    If logOrdenCruzada Then
                        strReceptor = _OrdenCruzadaSelected.Receptor
                        strNombreReceptor = _OrdenCruzadaSelected.NombreReceptor
                    Else
                        If logCrearOrdenCruzadaCliente Then
                            strReceptor = _OrdenOYDPLUSSelected.Receptor
                            strNombreReceptor = _OrdenOYDPLUSSelected.NombreReceptor
                        Else
                            strReceptor = _OrdenOYDPLUSSelected.ReceptorParaCruzada
                            strNombreReceptor = _OrdenOYDPLUSSelected.NombreReceptorParaCruzada
                        End If
                    End If

                    Dim objListaOrdenCruzada As New List(Of OyDPLUSOrdenesBolsa.tblOrdenesCruzadas)
                    Dim logAbrirOrdenCruzada As Boolean = False

                    If lo.Entities.Count > 0 Then
                        If TotalOrdenesCruzadas < _OrdenOYDPLUSSelected.Cantidad Then
                            logAbrirOrdenCruzada = True
                        Else
                            If logOrdenCruzada Then
                                ViewOrdenesCruzadas.Close()
                            Else
                                mostrarMensaje("No se puede crear la orden cruzada ya que la orden original fue cruzada totalmente.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                            End If
                        End If
                    Else
                        logAbrirOrdenCruzada = True
                    End If

                    If logAbrirOrdenCruzada Then
                        If logOrdenCruzada = False Then
                            NuevaOrdenCruzada(TotalPendientePorCruzar, strReceptor, strNombreReceptor)

                            Dim objViewCruzada As New OrdenesCruzadasOYDPLUSView(Me)
                            AddHandler objViewCruzada.Closed, AddressOf TerminoCrearOrdenCruzada
                            Program.Modal_OwnerMainWindowsPrincipal(objViewCruzada)
                            objViewCruzada.ShowDialog()
                        Else
                            NuevaOrdenCruzada(TotalPendientePorCruzar, strReceptor, strNombreReceptor)

                            mostrarMensajePregunta("¿Desea crear otra orden cruzada?",
                                                   Program.TituloSistema,
                                                   "CREARORDENCRUZADA",
                                                   AddressOf TerminoMensajePregunta, False)
                        End If

                        objListaOrdenCruzada.Add(New OyDPLUSOrdenesBolsa.tblOrdenesCruzadas With {.IDOrdenOriginal = _OrdenOYDPLUSSelected.IDNroOrden,
                                                                                         .IDNroOrdenOriginal = _OrdenOYDPLUSSelected.IDNroOrden,
                                                                                         .IDReceptorCruzada = _OrdenOYDPLUSSelected.Receptor,
                                                                                         .NombreReceptorCruzada = _OrdenOYDPLUSSelected.NombreReceptor,
                                                                                         .ValorOrdenCruzada = _OrdenOYDPLUSSelected.Cantidad,
                                                                                         .ClienteCruzada = IIf(_OrdenOYDPLUSSelected.OrdenCruzadaCliente, _OrdenOYDPLUSSelected.IDComitente, String.Empty),
                                                                                         .NombreClienteCruzada = IIf(_OrdenOYDPLUSSelected.OrdenCruzadaCliente, _OrdenOYDPLUSSelected.NombreCliente, String.Empty)})
                    End If

                    ListaOrdenesCruzadas = objListaOrdenCruzada

                    IsBusyCruzada = False
                Else
                    ListaOrdenesCruzadas = lo.Entities.ToList
                End If

                IsBusy = False
            End If
        Catch ex As Exception
            IsBusyCruzada = False
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cargar la orden cruzada.", Me.ToString(), "TerminoConsultarOrdenesCruzadas", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoValidarExistenciaCruzada(ByVal lo As InvokeOperation(Of Boolean))
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al validar la información de las ordenes cruzadas.", Me.ToString(), "TerminoValidarExistenciaCruzada", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
                IsBusy = False
            Else
                Dim objListaDatos As New List(Of String)
                Dim objVistaSeleccionada As String

                objVistaSeleccionada = VistaSeleccionada

                For Each li In ListaDatos
                    objListaDatos.Add(li)
                Next

                If lo.Value Then
                    If Not objListaDatos.Contains(VISTA_PENDIENTESCRUZAR) Then
                        objListaDatos.Add(VISTA_PENDIENTESCRUZAR)
                    End If
                Else
                    If objListaDatos.Contains(VISTA_PENDIENTESCRUZAR) Then
                        objListaDatos.Remove(VISTA_PENDIENTESCRUZAR)
                    End If
                End If

                ListaDatos = objListaDatos

                logRefrescarconsultaCambioTab = False

                If Not ListaDatos.Contains(VISTA_PENDIENTESCRUZAR) Then
                    If VistaSeleccionada = VISTA_PENDIENTESCRUZAR Then
                        VistaSeleccionada = VISTA_APROBADAS
                    Else
                        VistaSeleccionada = objVistaSeleccionada
                    End If
                Else
                    VistaSeleccionada = objVistaSeleccionada
                End If

                logRefrescarconsultaCambioTab = True
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al validar la orden cruzada.", Me.ToString(), "TerminoValidarExistenciaCruzada", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoMensajePregunta(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)

            If Not IsNothing(objResultado) Then
                If Not IsNothing(objResultado.CodigoLlamado) Then
                    Select Case objResultado.CodigoLlamado.ToUpper
                        Case "DUPLICARORDEN"
                            If objResultado.DialogResult Then
                                If logDuplicarParametro Then
                                    mostrarMensajePregunta("¿Desea Actualizar la Fecha y Hora de Toma LEO a la actual?",
                                                         Program.TituloSistema,
                                                       "PREGUNTAR_PARAMETRO",
                                                       AddressOf TerminoMensajePregunta, False)
                                Else
                                    IsBusy = True
                                    DuplicarOrden()
                                End If
                            End If
                        Case "PREGUNTAR_PARAMETRO"
                            If objResultado.DialogResult Then
                                IsBusy = True
                                logDuplicarParametroAceptar = True
                                DuplicarOrden()
                            Else
                                IsBusy = True
                                logDuplicarParametroAceptar = False
                                DuplicarOrden()
                            End If
                        Case "CREARORDENCRUZADACLIENTE"
                            If objResultado.DialogResult Then
                                logCrearOrdenCruzadaCliente = True
                                IsBusy = True
                                ConsultarOrdenesCruzadas(_OrdenOYDPLUSSelected.IDNroOrden, True, OPCION_ORDENCRUZADA)
                            Else
                                logCrearOrdenCruzadaCliente = False
                            End If
                        Case "CREARORDENCRUZADA"
                            If objResultado.DialogResult Then
                                IsBusyCruzada = True
                                CargarTipoNegocioReceptor(OPCION_ORDENCRUZADA, _OrdenCruzadaSelected.Receptor, _Modulo, OPCION_ORDENCRUZADA)
                            Else
                                IsBusyCruzada = True
                                ViewOrdenesCruzadas.Close()
                            End If
                        Case "PREGUNTARCONFIRMACION"
                            ValidarMensajesMostrarUsuario(TIPOMENSAJEUSUARIO.CONFIRMACION, objResultado)
                        Case "PREGUNTARAPROBACION"
                            ValidarMensajesMostrarUsuario(TIPOMENSAJEUSUARIO.APROBACION, objResultado)
                        Case "PREGUNTARJUSTIFICACION"
                            ValidarMensajesMostrarUsuario(TIPOMENSAJEUSUARIO.JUSTIFICACION, objResultado)
                        Case "ANULARORDENOYDPLUS"
                            If objResultado.DialogResult Then
                                IsBusy = True
                                If Not IsNothing(dcProxy.OrdenSAEs) Then
                                    dcProxy.OrdenSAEs.Clear()
                                End If

                                dcProxy.Load(dcProxy.OYDPLUS_AnularOrdenOYDPLUSQuery(_OrdenOYDPLUSSelected.Clase, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.NroOrden, _OrdenOYDPLUSSelected.Version, "", objResultado.Observaciones, Program.Usuario, Program.HashConexion), AddressOf TerminoAnularOrden, "ANULAR")
                            Else
                                IsBusy = True
                                dcProxy1.OYDPLUS_CancelarOrdenOYDPLUS(_OrdenOYDPLUSSelected.NroOrden, "ORDENES", Program.Usuario, Program.HashConexion, AddressOf TerminoCancelarAnularRegistro, String.Empty)
                            End If
                    End Select
                End If
            Else
                IsBusy = False
                IsBusyCruzada = False
            End If

        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta del mensaje pregunta.", Me.ToString(), "TerminoMensajePregunta", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub
    Private Sub TerminoMensajeResultadoAsincronicoFACIALES(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado = CType(sender, A2Utilidades.wcpMensajes)

            If Not IsNothing(objResultado) Then
                If Not IsNothing(objResultado.CodigoLlamado) Then
                    Select Case objResultado.CodigoLlamado.ToUpper
                        Case "FACIALES_ESPECIE"
                            If IsNothing(NemotecnicoSeleccionadoOYDPLUS) Then
                                ConsultarIsines = False
                                ConsultarIsines = True
                                EspecieBuscar = Nothing
                                EspecieBuscar = strEspecieDirecta
                                FechaEmisionBuscador = Nothing
                                FechaVencimientoBuscador = Nothing
                                ModalidadBuscador = String.Empty
                                'logMostrarIsines = False
                            End If
                    End Select
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta del mensaje asincronico.", Me.ToString(), "TerminoMensajeResultadoAsincronicoFACIALES", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoMensajeResultadoAsincronico(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado = CType(sender, A2Utilidades.wcpMensajes)

            If Not IsNothing(objResultado) Then
                If Not IsNothing(objResultado.CodigoLlamado) Then
                    Select Case objResultado.CodigoLlamado.ToUpper
                        Case "TERMINOGUARDARCRUZADA"
                            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                ConsultarOrdenesCruzadas(_OrdenOYDPLUSSelected.IDNroOrden, True, OPCION_ORDENCRUZADA)
                            End If
                        Case "TERMINOGUARDARORDEN"
                            If logEsModal Then
                                RaiseEvent TerminoGuardarRegistro(True, intIDOrdenGuardada)
                            Else
                                ObtenerInformacionCombosCompletos()
                                'Consultar los precios del mercado para activar el ticker.
                                CargarMensajeDinamicoOYDPLUS("PRECIOSMERCADO", String.Empty, String.Empty, String.Empty)

                                If CantidadAprobaciones > 0 Then
                                    VistaSeleccionada = VISTA_PENDIENTESAPROBAR
                                    FiltrarRegistrosOYDPLUS("D", String.Empty, "TERMINOGUARDAR", "TERMINOGUARDARPENDIENTES")
                                    'VistaSeleccionada = VISTA_PENDIENTESAPROBAR
                                Else
                                    If strUltimaAccionBusquedaFiltro = "BUSQUEDAAVANZADA" Then
                                        intIDOrdenTimer = _OrdenOYDPLUSSelected.IDNroOrden
                                        ConfirmarBuscar_DespuesGuardado_Refrescar()
                                    Else
                                        VistaSeleccionada = VISTA_APROBADAS
                                        If intIDOrdenGuardada = 0 Then
                                            FiltrarRegistrosOYDPLUS("P", String.Empty, "TERMINOGUARDAR", strEstadoUltimoGuardado)
                                        Else
                                            FiltrarRegistrosOYDPLUS("P", String.Empty, "TERMINOGUARDAR", strEstadoUltimoGuardado)
                                        End If
                                    End If
                                End If

                                If BorrarEspecie = True Then
                                    BorrarEspecie = False
                                End If

                                If BorrarCliente = True Then
                                    BorrarCliente = False
                                End If

                                If BorrarClienteADR = True Then
                                    BorrarClienteADR = False
                                End If

                                BorrarCliente = True
                                BorrarClienteADR = True
                                BorrarEspecie = True

                                OrdenAnterior = Nothing
                                OrdenAnteriorOYDPLUS = Nothing
                                OrdenDuplicarOYDPLUS = Nothing
                                MostrarCampoIndicador = Visibility.Collapsed
                                MostrarCampoPuntosIndicador = Visibility.Collapsed
                                MostrarCampoTasaFacial = Visibility.Collapsed
                                MostrarCamposFaciales = Visibility.Collapsed
                                HabilitarFechaVigencia = False
                                MostrarMensajeComision = Visibility.Collapsed
                                MensajeTasas = String.Empty
                                MostrarMensajeTasas = Visibility.Collapsed
                                dblValorConsultadoPrecioSAE = 0
                                dblValorConsultadoPorcentajeGarantia = 0
                                intCantidadMensajeValidacionFechaCumplimiento = 0
                                EditandoInstrucciones = False
                            End If
                    End Select
                End If
            End If
        Catch ex As Exception
            IsBusy = False
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta del mensaje asincronico.", Me.ToString(), "TerminoMensajeResultadoAsincronico", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoVerificarNombrePlantilla(ByVal lo As InvokeOperation(Of Boolean))
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al verficar el nombre de la plantilla.", Me.ToString(), "TerminoVerificarNombrePlantilla", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
            Else
                If lo.Value Then
                    strNombrePlantilla = lo.UserState.ToString
                    viewNombrePlantilla.DialogResult = True
                    PlantillaOrden()
                Else
                    mostrarMensaje("El nombre de la plantilla ya existe, por favor cambie el nombre.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al verficar el nombre de la plantilla.", Me.ToString(), "TerminoVerificarNombrePlantilla", Program.TituloSistema, Program.Maquina, ex)
        End Try

        IsBusyPlantilla = False
    End Sub

    Private Sub TerminoConsultarPlantillas(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.OrdenOYDPLUS))
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al consultar las plantillas.", Me.ToString(), "TerminoConsultarPlantillas", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
            Else
                ListaPlantillas = lo.Entities.ToList
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al consultar las plantillas.", Me.ToString(), "TerminoConsultarPlantillas", Program.TituloSistema, Program.Maquina, ex)
        End Try

        IsBusyPlantilla = False
    End Sub

    Private Sub TerminoEliminarPlantillas(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.tblRespuestaValidaciones))
        Try
            If lo.HasError Then
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al consultar las plantillas.", Me.ToString(), "TerminoConsultarPlantillas", Program.TituloSistema, Program.Maquina, lo.Error, Program.RutaServicioLog)
            Else
                If lo.Entities.ToList.Count > 0 Then
                    If lo.Entities.First.Exitoso Then
                        mostrarMensaje(lo.Entities.First.Mensaje, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Exito)
                        ConsultarPlantillasOrden()
                    Else
                        mostrarMensaje(lo.Entities.First.Mensaje, Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al consultar las plantillas.", Me.ToString(), "TerminoConsultarPlantillas", Program.TituloSistema, Program.Maquina, ex)
        End Try

        IsBusyPlantilla = False
    End Sub

    Private Sub TerminoPreguntaReceptorCruzadaCambio(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta = CType(sender, A2Utilidades.wppMensajePregunta)
            If objResultado.DialogResult Then
                _ReceptoresOrdenCruzadaSelected.IDReceptor = strReceptorId_Cruzada
                _ReceptoresOrdenCruzadaSelected.NombreReceptor = strNombreReceptor_Cruzada
                _ReceptoresOrdenCruzadaSelected.Usuario = Program.Usuario
            End If
            strReceptorId_Cruzada = String.Empty
            strNombreReceptor_Cruzada = String.Empty
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario,
                                                         "Se presentó un problema al confirmar validacion cambio receptor.",
                                                         Me.ToString(), "TerminoPreguntaReceptorCruzadaCambio", Program.TituloSistema,
                                                         Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Public Function ValidarFechaCierreSistema(ByVal pobjOrdenOYDPLUS As OrdenOYDPLUS, ByVal pstrAccion As String)
        Dim logRetorno As Boolean = True
        Try
            If Not IsNothing(pobjOrdenOYDPLUS) Then
                If Not IsNothing(pobjOrdenOYDPLUS.FechaVigencia) Then
                    If pobjOrdenOYDPLUS.FechaVigencia.Value.Date <= mdtmFechaCierreSistema Then
                        mostrarMensaje("La fecha de vigencia no puede ser menor o igual a la fecha de cierre del sistema (" & mdtmFechaCierreSistema.ToLongDateString() & ")." & vbNewLine & "No se puede " & pstrAccion & ".", "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        IsBusy = False
                        IsBusyCalculos = False
                        logRetorno = False
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario,
                                                         "Se presentó un problema al validar la fecha de cierre.",
                                                         Me.ToString(), "ValidarFechaCierreSistema", Program.TituloSistema,
                                                         Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            IsBusyCalculos = False
            logRetorno = False
        End Try
        Return logRetorno
    End Function

    Public Sub ValidarTipoCalculoDefecto(ByVal plogEsOrdenCruzada As Boolean, ByVal pstrTipoNegocio As String, Optional ByVal plogEnPesos As Boolean = False, Optional ByVal plogCambioTipoNegocio As Boolean = False, Optional ByVal pstrTipoCambio As String = "")
        Try
            If Not String.IsNullOrEmpty(pstrTipoNegocio) Then
                If pstrTipoNegocio = TIPONEGOCIO_ACCIONES Or
                    pstrTipoNegocio = TIPONEGOCIO_ADR Then
                    If plogCambioTipoNegocio Then
                        objTipoCalculo = pstrTipoCambio
                    Else
                        objTipoCalculo = strEventoDefecto_ACCIONES
                    End If
                ElseIf pstrTipoNegocio = TIPONEGOCIO_RENTAFIJA Then
                    If plogEnPesos Then
                        objTipoCalculo = strEventoDefecto_RENTAFIJA_ENPESOS
                    Else
                        If plogEsOrdenCruzada Then
                            objTipoCalculo = strEventoDefecto_RENTAFIJA_CRUZADA
                        Else
                            If Not IsNothing(_ListaOrdenSAERentaFija) Then
                                If ListaOrdenSAERentaFija.Where(Function(i) i.Seleccionada = True).Count > 0 Then
                                    objTipoCalculo = strEventoDefecto_RENTAFIJA_ORDENDIRECTA
                                    Exit Sub
                                Else
                                    objTipoCalculo = strEventoDefecto_RENTAFIJA
                                End If
                            Else
                                objTipoCalculo = strEventoDefecto_RENTAFIJA
                            End If

                            If IsNothing(ListaLiqAsociadasOrdenes) Then
                                'If (ListaLiqAsociadasOrdenes.Count > 0 And Not logDuplicarRegistro) Then
                                '    objTipoCalculo = strEventoDefecto_RENTAFIJA_ORDENDIRECTA
                                '    Exit Sub
                                'End If
                                'Else
                                objTipoCalculo = strEventoDefecto_RENTAFIJA
                            End If
                        End If
                    End If
                ElseIf pstrTipoNegocio = TIPONEGOCIO_SIMULTANEA Or pstrTipoNegocio = TIPONEGOCIO_REPOC Then
                    If Not IsNothing(_ListaOrdenSAERentaFija) Then
                        If ListaOrdenSAERentaFija.Where(Function(i) i.Seleccionada = True).Count > 0 Then
                            objTipoCalculo = strEventoDefecto_SIMULTANEA_ORDENDIRECTA
                        Else
                            objTipoCalculo = strEventoDefecto_SIMULTANEA
                        End If
                    ElseIf Not IsNothing(ListaLiqAsociadasOrdenes) Then
                        If ListaLiqAsociadasOrdenes.Count > 0 Then
                            objTipoCalculo = strEventoDefecto_SIMULTANEA_ORDENDIRECTA
                        Else
                            objTipoCalculo = strEventoDefecto_SIMULTANEA
                        End If
                    Else
                        objTipoCalculo = strEventoDefecto_SIMULTANEA
                    End If
                ElseIf pstrTipoNegocio = TIPONEGOCIO_REPO Then
                    If plogEnPesos Then
                        objTipoCalculo = strEventoDefecto_REPO_ENPESOS
                    Else
                        objTipoCalculo = strEventoDefecto_REPO
                    End If
                ElseIf pstrTipoNegocio = TIPONEGOCIO_TTV Then
                    objTipoCalculo = strEventoDefecto_TTV
                ElseIf pstrTipoNegocio = TIPONEGOCIO_TTVC Then
                    objTipoCalculo = strEventoDefecto_TTVRENTAFIJA
                Else
                    objTipoCalculo = String.Empty
                End If
            Else
                objTipoCalculo = String.Empty
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario,
                                                         "Se presentó un problema al validar el tipo calculo por defecto.",
                                                         Me.ToString(), "ValidarTipoCalculoDefecto", Program.TituloSistema,
                                                         Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            IsBusyCalculos = False
        End Try
    End Sub

    Private Sub TerminoTraerInstrucciones(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.InstruccionesOrdene))
        Try
            If Not lo.HasError Then
                ListaInstruccionesOrdenes = dcProxy1.InstruccionesOrdenes
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de las instrucciones",
                                                 Me.ToString(), "TerminoTraerInstrucciones", Program.TituloSistema, Program.Maquina, lo.Error)
                lo.MarkErrorAsHandled()   '????
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de las instrucciones",
                                            Me.ToString(), "TerminoTraerInstrucciones", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoTraerCuentasClientes(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.CuentasClientes))
        Try
            If Not lo.HasError Then
                CuentasClientes = dcProxy.CuentasClientes.ToList
                consultarInstruccionesCliente()
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de cuentas de depósito",
                                                 Me.ToString(), "TerminoTraerCuentasClientes", Program.TituloSistema, Program.Maquina, lo.Error)
                lo.MarkErrorAsHandled()   '????
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de la lista de cuentas de depósito",
                                             Me.ToString(), "TerminoTraerCuentasClientes", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoTraerCombinacionesTipoLimite(ByVal lo As LoadOperation(Of OyDPLUSOrdenesBolsa.CombinacionesTipoLimite))
        Try
            If Not lo.HasError Then
                'ListaCombosCombinaciones = dcProxy.CombinacionesTipoLimites.ToList
                ListaConfiguracion = lo.Entities.ToList
            Else
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de las combinaciones de los Tipos de límite.",
                                                 Me.ToString(), "TerminoTraerCuentasClientes", Program.TituloSistema, Program.Maquina, lo.Error)
                lo.MarkErrorAsHandled()   '????
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema en la obtención de las combinaciones de los Tipos de límite.",
                                             Me.ToString(), "TerminoTraerCuentasClientes", Program.TituloSistema, Program.Maquina, ex)
        End Try
    End Sub

#End Region

#Region "Funciones Generales"


    Public Sub PrRemoverValoresDic(ByRef pobjDiccionario As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor)), ByVal pstrArray As String())
        Try
            For i = 0 To pstrArray.Count - 1
                If pobjDiccionario.ContainsKey(pstrArray(i)) Then pobjDiccionario.Remove(pstrArray(i))
            Next
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al obtener los valores de los combos.",
                                 Me.ToString(), "PrRemoverValoresDic", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Function ExtraerListaPorCategoria(pobjDiccionario As Dictionary(Of String, List(Of OYDPLUSUtilidades.CombosReceptor)), pstrTopico As String, pstrCategoria As String) As List(Of OYDPLUSUtilidades.CombosReceptor)
        ExtraerListaPorCategoria = New List(Of OYDPLUSUtilidades.CombosReceptor)
        Try
            If pobjDiccionario.ContainsKey(pstrTopico) Then
                Dim objRetorno = From item In pobjDiccionario(pstrTopico)
                                 Select New OYDPLUSUtilidades.CombosReceptor With {.ID = item.ID,
                                                                            .Retorno = item.Retorno,
                                                                            .Descripcion = item.Descripcion,
                                                                            .Categoria = pstrCategoria}
                If objRetorno.Count > 0 Then
                    ExtraerListaPorCategoria = objRetorno.ToList()
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó al obtener los valores de los combos.",
                                 Me.ToString(), "ExtraerListaPorCategoria", Application.Current.ToString(), Program.Maquina, ex)
            Return New List(Of OYDPLUSUtilidades.CombosReceptor)
        End Try
    End Function


#End Region

#Region "Eventos"

    ''' <summary>
    ''' Este evento se dispara cuando alguna propiedad de la orden activa cambia
    ''' Desarrollado por Juan David Correa
    ''' Fecha 14 de Agosto del 2012
    ''' </summary>
    Private Async Sub _OrdenOYDPLUSSelected_PropertyChanged(ByVal sender As Object, ByVal e As System.ComponentModel.PropertyChangedEventArgs) Handles _OrdenOYDPLUSSelected.PropertyChanged
        Try
            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                Select Case e.PropertyName.ToLower()

                    Case "tipoproducto"
                        If logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(_OrdenOYDPLUSSelected) Then
                            _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                        ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(_OrdenOYDPLUSSelected) = False Then
                            _OrdenOYDPLUSSelected.FechaRecepcion = Nothing
                        ElseIf logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                            If logLlevarFechaActualRecepcion Then
                                If logLlevarHoraActualRecepcion Then
                                    _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                                Else
                                    _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor.Date
                                End If
                            Else
                                _OrdenOYDPLUSSelected.FechaRecepcion = Nothing
                            End If

                        End If

                    Case "clase"

                        If _OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA Then
                            BuscarControlValidacion_NEW(viewFormaOrdenes, "TabOrdenSAE")
                            ConsultarOrdenesSAE = False
                            ConsultarOrdenesSAE = True
                        End If
                    Case "receptor"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Receptor) Then
                                LimpiarControlesOYDPLUS(OPCION_RECEPTOR, _OrdenOYDPLUSSelected)
                                MostrarControlMensajes = Visibility.Visible
                                MostrarControles = Visibility.Visible
                                MostrarNoEdicion = Visibility.Collapsed
                                CargarTipoNegocioReceptor(OPCION_RECEPTOR, _OrdenOYDPLUSSelected.Receptor, _Modulo, OPCION_RECEPTOR)
                                CargarMensajeDinamicoOYDPLUS("CERTIFICACIONES", _OrdenOYDPLUSSelected.Receptor, String.Empty, String.Empty, String.Empty)
                            Else
                                MostrarControlMensajes = Visibility.Collapsed
                                MostrarNoEdicion = Visibility.Visible
                                MostrarControles = Visibility.Collapsed
                                ListaMensajes = Nothing
                                ConfiguracionReceptor = Nothing
                                LimpiarControlesOYDPLUS(OPCION_RECEPTOR, _OrdenOYDPLUSSelected)
                            End If
                            BuscarControlValidacion(ViewOrdenesOYDPLUS, "cboTipoOrden")
                        End If
                    Case "tipoorden"
                        If Not IsNothing(_OrdenOYDPLUSSelected.TipoOrden) Then
                            If logEditarRegistro Or logNuevoRegistro Then
                                HabilitarConsultaControles(_OrdenOYDPLUSSelected)
                                ValidarHabilitarNegocio()
                                BuscarControlValidacion(ViewOrdenesOYDPLUS, "cboTipoProducto")
                                If _OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA Then
                                    If (logEditarRegistro = True Or logNuevoRegistro = True) Then
                                        MostrarOrdenesSAE = Visibility.Visible
                                    End If
                                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                                        logOrdenDIRECTA_RENTAFIJA = True
                                    End If
                                Else
                                    logOrdenDIRECTA_RENTAFIJA = False
                                    MostrarOrdenesSAE = Visibility.Collapsed
                                    BuscarControlValidacion_NEW(viewFormaOrdenes, "TabSaldoCliente")
                                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_SIMULTANEA Then
                                        logOrdenDIRECTA_RENTAFIJA = False
                                    End If
                                End If
                            End If
                        End If
                    Case "tiponegocio"
                        If Not IsNothing(_OrdenOYDPLUSSelected.TipoNegocio) Then
                            IsBusy = True
                            If Not IsNothing(ListaTipoNegocio) Then
                                If ListaTipoNegocio.Where(Function(i) i.CodigoTipoNegocio = _OrdenOYDPLUSSelected.TipoNegocio).Count > 0 Then
                                    TipoNegocioSelected = ListaTipoNegocio.Where(Function(i) i.CodigoTipoNegocio = _OrdenOYDPLUSSelected.TipoNegocio).FirstOrDefault
                                End If
                            End If
                            'Santiago Alexander Vergara Orrego - Mayo 15/2014 - Se deshabilitan las opciones de orden cruzada cuando esta es de otras firmas
                            If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJAOF Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONESOF Then
                                _OrdenOYDPLUSSelected.OrdenCruzadaCliente = False
                                _OrdenOYDPLUSSelected.OrdenCruzadaReceptor = False
                                HabilitarOpcionesCruzada = False
                            Else
                                HabilitarOpcionesCruzada = True
                            End If
                            LimpiarControlesOYDPLUS(OPCION_TIPONEGOCIO, _OrdenOYDPLUSSelected)
                            If logEditarRegistro Or logNuevoRegistro Then
                                ValidarHabilitarNegocio()
                                If logRealizarConsultaPropiedades Then
                                    ObtenerValoresCombos(False, _OrdenOYDPLUSSelected, OPCION_TIPONEGOCIO)

                                Else
                                    IsBusy = False
                                End If
                            End If
                            If logEditarRegistro Or logNuevoRegistro Then
                                BuscarControlValidacion(ViewOrdenesOYDPLUS, "cboTipoOperacion")
                            End If

                            HabilitarConsultaControles(_OrdenOYDPLUSSelected)
                            CalcularFechaVigenciaOrden(_OrdenOYDPLUSSelected)

                            'Ajuste para Enajenacion
                            If _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_VENTA And _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA And HabilitarConstanciaFuncionalidad Then
                                MostrarCamposConstancia = Visibility.Visible
                            Else
                                MostrarCamposConstancia = Visibility.Collapsed
                            End If

                            'If logNuevoRegistro = True Then ' AJUSTE PARA TIPO ACCIONES EL CUMPLIMIENTO X DEFECTO SEA T+3 JDOL 20160219
                            '	CalcularFechaCumplimiento(_OrdenOYDPLUSSelected)
                            'End If
                            If _OrdenOYDPLUSSelected.TipoNegocio <> TIPONEGOCIO_ACCIONES Then
                                TituloMensaje = String.Empty
                                ListaMensajes = Nothing
                            End If
                            If _OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA Then
                                BuscarControlValidacion_NEW(viewFormaOrdenes, "TabOrdenSAE")
                                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA Then
                                    logOrdenDIRECTA_RENTAFIJA = True
                                End If
                            Else
                                logOrdenDIRECTA_RENTAFIJA = False
                            End If

                            If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                                _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Then
                                _OrdenOYDPLUSSelected.TipoLimite = Nothing
                                HabilitarTipoLimite = False
                            Else
                                HabilitarTipoLimite = True
                            End If

                        End If

                        If Not IsNothing(_OrdenOYDPLUSSelected.TipoProducto) Then
                            If logNuevoRegistro Or logEditarRegistro Then
                                ValidarHabilitarNegocio()
                                BuscarControlValidacion(ViewOrdenesOYDPLUS, "cboTipoNegocio")
                            End If
                        End If

                        If logNuevoRegistro = True Then ' AJUSTE PARA TIPO ACCIONES EL CUMPLIMIENTO X DEFECTO SEA T+3 JDOL 20160219
                            CalcularFechaCumplimiento(_OrdenOYDPLUSSelected)
                        End If

                        consultarClaseEspecie("TIPONEGOCIO")

                    Case "tipooperacion"
                        If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Duracion) Then
                            CalcularFechaVigenciaOrden(_OrdenOYDPLUSSelected)
                        End If
                        If logCalcularValores Then
                            If Not IsNothing(_OrdenOYDPLUSSelected.TipoOperacion) Then
                                If logNuevoRegistro Or logEditarRegistro Then
                                    'VerificarTasaRegistro_TasaCliente(_OrdenOYDPLUSSelected)
                                    ValidarHabilitarNegocio(True)
                                    If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoLimite) And
                                    Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Especie) And
                                    Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOperacion) Then
                                        If _OrdenOYDPLUSSelected.TipoLimite = TIPOMERCADO_PRECIO_ESPECIE Or _OrdenOYDPLUSSelected.TipoLimite = TIPOMERCADO_PORLOMEJOR_PRECIO_ESPECIE Then
                                            Await ConsultarUltimoPrecioEspecieAsync(_OrdenOYDPLUSSelected.Especie, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.TipoNegocio)
                                        End If
                                    End If
                                    If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or
                                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPOC Or
                                        _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or
                                                    _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTVC Then
                                        CargarMensajeDinamicoOYDPLUS("preciosmercadoespecie", String.Empty, String.Empty, OrdenOYDPLUSSelected.Especie, "preciosmercadoespecie")
                                    Else
                                        If _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_COMPRA And _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                                            'Consultar los precios del mercado para activar el ticker.
                                            CargarMensajeDinamicoOYDPLUS("preciosmejorespuntascompra", String.Empty, String.Empty, _OrdenOYDPLUSSelected.Especie, "preciosmejorespuntascompra")
                                        ElseIf _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_VENTA And _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                                            'Consultar los precios del mercado para activar el ticker.
                                            CargarMensajeDinamicoOYDPLUS("preciosmejorespuntasventa", String.Empty, String.Empty, _OrdenOYDPLUSSelected.Especie, "preciosmejorespuntasventa")
                                        Else
                                            If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                                                CargarMensajeDinamicoOYDPLUS("PRECIOSMERCADO", String.Empty, String.Empty, _OrdenOYDPLUSSelected.Especie, "preciosmejorespuntasventa")
                                            End If

                                        End If
                                    End If

                                End If
                                'logCambiarConsultaSAE = False
                                HabilitarConsultaControles(_OrdenOYDPLUSSelected)

                                BuscarControlValidacion(ViewOrdenesOYDPLUS, "cboClasificacion")

                                If logEditarRegistro Or logNuevoRegistro Then
                                    LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACION, _OrdenOYDPLUSSelected)
                                End If

                                'Ajuste para Enajenacion
                                If _OrdenOYDPLUSSelected.TipoOperacion = TIPOOPERACION_VENTA And _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA And HabilitarConstanciaFuncionalidad Then
                                    MostrarCamposConstancia = Visibility.Visible
                                Else
                                    MostrarCamposConstancia = Visibility.Collapsed
                                End If

                                'If logNuevoRegistro = True Then ' AJUSTE PARA TIPO ACCIONES EL CUMPLIMIENTO X DEFECTO SEA T+3 JDOL 20160219
                                '	CalcularFechaCumplimiento(_OrdenOYDPLUSSelected)
                                'End If


                                If logCalcularValores Then
                                    If logNuevoRegistro Or logEditarRegistro Then
                                        If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Duracion) Then
                                            CalcularFechaVigenciaOrden(_OrdenOYDPLUSSelected)
                                        End If
                                    End If
                                End If

                                If logNuevoRegistro = True Then ' AJUSTE PARA TIPO ACCIONES EL CUMPLIMIENTO X DEFECTO SEA T+3 JDOL 20160219
                                    CalcularFechaCumplimiento(_OrdenOYDPLUSSelected)
                                End If
                            End If
                        End If
                        If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOperacion) And
                                  Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoNegocio) Then

                            If _OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA Then
                                BuscarControlValidacion_NEW(viewFormaOrdenes, "TabOrdenSAE")
                                ConsultarOrdenesSAE = False
                                ConsultarOrdenesSAE = True
                                If (logEditarRegistro = True Or logNuevoRegistro = True) Then
                                    MostrarOrdenesSAE = Visibility.Visible
                                End If
                            Else
                                MostrarOrdenesSAE = Visibility.Collapsed
                                BuscarControlValidacion_NEW(viewFormaOrdenes, "TabSaldoCliente")
                            End If

                            If logNuevoRegistro = True Then ' AJUSTE PARA TIPO ACCIONES EL CUMPLIMIENTO X DEFECTO SEA T+3 JDOL 20160219
                                CalcularFechaCumplimiento(_OrdenOYDPLUSSelected)
                            End If
                        End If
                    Case "idcomitente"
                        If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.IDComitente) Then
                            HabilitarConsultaControles(_OrdenOYDPLUSSelected)
                        End If
                    Case "especie"
                        If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Especie) Then
                            consultarClaseEspecie("CAMBIOESPECIE")
                            HabilitarConsultaControles(_OrdenOYDPLUSSelected)

                            'Si la orden es Directa filtrar las operaciones de bolsa (SAE) por la especie seleccionada
                            'Julian Rincón (Alcuadrado S.A)
                            If (OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA) Then
                                FiltrarOperacionesEspecieCumplimiento()

                            End If

                        End If
                        'Case "operacioncruzada"
                    Case "duracion"
                        If logCalcularValores Then
                            ' If logNuevoRegistro Or logEditarRegistro Then
                            If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Duracion) Then
                                CalcularFechaVigenciaOrden(_OrdenOYDPLUSSelected)
                            End If
                            'End If
                        End If
                    Case "fechavigencia"
                        If logCalcularValores Then
                            If logNuevoRegistro Or logEditarRegistro Then
                                If Not IsNothing(_OrdenOYDPLUSSelected.FechaVigencia) Then
                                    _OrdenOYDPLUSSelected.HoraVigencia = String.Format("{0:00}:{1:00}:{2:00}",
                                                                                       _OrdenOYDPLUSSelected.FechaVigencia.Value.Hour,
                                                                                       _OrdenOYDPLUSSelected.FechaVigencia.Value.Minute,
                                                                                       _OrdenOYDPLUSSelected.FechaVigencia.Value.Second)


                                    If logCalcularValores Then
                                        If Not IsNothing(_OrdenOYDPLUSSelected.FechaVigencia) Then
                                            If ValidarFechaCierreSistema(_OrdenOYDPLUSSelected, "seleccionar esta fecha de vigencia") Then

                                            End If
                                        End If
                                    End If
                                End If
                            End If

                            If logCalcularDiasPlazo Then
                                Me.CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_ORDEN, _OrdenOYDPLUSSelected, -1)
                            End If
                        End If
                    Case "enpesos"
                        HabilitarCamposOYDPLUS(_OrdenOYDPLUSSelected)
                        ValidarTipoCalculoDefecto(False, _OrdenOYDPLUSSelected.TipoNegocio, _OrdenOYDPLUSSelected.EnPesos)
                        If logEditarRegistro Or logNuevoRegistro Then
                            If logCalcularValores Then
                                LimpiarControlesOYDPLUS(OPCION_ENPESOS, _OrdenOYDPLUSSelected)
                            End If
                        End If
                    Case "tipolimite"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If logCalcularValores Then
                                FiltrarOpcionesTipoLimite("TIPOLIMITE", _OrdenOYDPLUSSelected)

                            End If
                            If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoLimite) And
                                Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Especie) And
                                Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.TipoOperacion) Then
                                If _OrdenOYDPLUSSelected.TipoLimite = TIPOMERCADO_PRECIO_ESPECIE Or _OrdenOYDPLUSSelected.TipoLimite = TIPOMERCADO_PORLOMEJOR_PRECIO_ESPECIE Then
                                    Await ConsultarUltimoPrecioEspecieAsync(_OrdenOYDPLUSSelected.Especie, _OrdenOYDPLUSSelected.TipoOperacion, _OrdenOYDPLUSSelected.TipoNegocio)
                                End If
                                If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                                    Await CalcularValorOrden(_OrdenOYDPLUSSelected)
                                End If
                            End If
                        End If
                    Case "ejecucion"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If logCalcularValores Then
                                FiltrarOpcionesTipoLimite("EJECUCION", OrdenOYDPLUSSelected)
                            End If

                        End If
                    Case "ordencruzadareceptor"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If _OrdenOYDPLUSSelected.OrdenCruzadaReceptor Then
                                MostrarReceptoresCruzada = Visibility.Visible
                            Else
                                MostrarReceptoresCruzada = Visibility.Collapsed
                                BuscarControlValidacion(ViewOrdenesOYDPLUS, "tabItemValoresComisiones")
                            End If

                            If _OrdenOYDPLUSSelected.OrdenCruzadaCliente = False And _OrdenOYDPLUSSelected.OrdenCruzadaReceptor = False Then
                                ListaReceptoresOrdenesCruzada = Nothing
                            End If
                        End If
                    Case "ordencruzadacliente"
                        If logEditarRegistro Or logNuevoRegistro Then
                            ObtenerReceptorCruzadaCliente(_OrdenOYDPLUSSelected.Receptor, _OrdenOYDPLUSSelected.OrdenCruzadaCliente)
                            If _OrdenOYDPLUSSelected.OrdenCruzadaCliente = False And _OrdenOYDPLUSSelected.OrdenCruzadaReceptor = False Then
                                ListaReceptoresOrdenesCruzada = Nothing
                                BuscarControlValidacion(ViewOrdenesOYDPLUS, "tabItemValoresComisiones")
                            End If
                        End If
                    Case "fechacumplimiento"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If logCalcularDiasPlazo Then
                                'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
                                'JUAN DAVID CORREA MARZO 2015
                                If logCalcularValores Then
                                    CalcularDiasPlazo(_OrdenOYDPLUSSelected)
                                    logDiasCumplimiento = False

                                End If

                            End If
                        End If
                    Case "diascumplimiento"
                        If logEditarRegistro Or logNuevoRegistro Then


                            If logCalcularValores Then
                                If logDiasCumplimiento Then
                                    CalcularFechaCumplimientoPorDias(_OrdenOYDPLUSSelected)

                                End If
                                'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
                                'JUAN DAVID CORREA MARZO 2015

                                '-- Se comenta llamado ya que afectaba el grabado de órdenes indirectas
                                ' JDR20180524 
                                'Await CalcularValorOrden(_OrdenOYDPLUSSelected)
                            End If
                        End If
                    Case "comision"
                        If logEditarRegistro Or logNuevoRegistro Then
                            VerificarComision(_OrdenOYDPLUSSelected)
                        End If
                    Case "fecharecepcion"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If Not IsNothing(_OrdenOYDPLUSSelected.FechaRecepcion) Then
                                If logCambiarFechaRecepcion Then
                                    Dim strHoraRecepcion As String = String.Format("{0:00}:{1:00}:{2:00}",
                                                                               _OrdenOYDPLUSSelected.FechaRecepcion.Value.Hour,
                                                                               _OrdenOYDPLUSSelected.FechaRecepcion.Value.Minute,
                                                                               _OrdenOYDPLUSSelected.FechaRecepcion.Value.Second)

                                    If strHoraRecepcion <> "00:00:00" Then
                                        If _OrdenOYDPLUSSelected.FechaRecepcion.Value.Year <= 1900 Then
                                            Dim dtmFechaHoraSeleccionada As DateTime = _OrdenOYDPLUSSelected.FechaRecepcion
                                            Dim dtmFechaNuevaRecepcion As DateTime = New DateTime(Now.Year, Now.Month, Now.Day, dtmFechaHoraSeleccionada.Hour, dtmFechaHoraSeleccionada.Minute, dtmFechaHoraSeleccionada.Second, dtmFechaHoraSeleccionada.Millisecond)
                                            logCambiarFechaRecepcion = False
                                            _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaNuevaRecepcion
                                            logCambiarFechaRecepcion = True
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Case "tasafacial"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If logCalcularValores And (_OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_RENTAFIJA) Then
                                _OrdenOYDPLUSSelected.TasaNominal = _OrdenOYDPLUSSelected.TasaFacial
                            End If

                            If logCalcularValores Then
                                LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACIONESPECIE, _OrdenOYDPLUSSelected)
                            End If
                        End If
                    Case "indicador"
                        If _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                            If Not IsNothing(ListaOrdenSAEAcciones) Then
                                If ListaOrdenSAEAcciones.Where(Function(i) i.Seleccionada = True).Count > 0 Then
                                    Exit Select
                                End If
                            End If
                        Else
                            If Not IsNothing(ListaOrdenSAERentaFija) Then
                                If ListaOrdenSAERentaFija.Where(Function(i) i.Seleccionada = True).Count > 0 Then
                                    Exit Select
                                End If
                            End If
                        End If


                        If logEditarRegistro Or logNuevoRegistro Then
                            If logCalcularValores Then
                                LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACIONESPECIE, _OrdenOYDPLUSSelected)

                                If _OrdenOYDPLUSSelected.Indicador = INDICADOR_TASA_FIJA Then
                                    If Not IsNothing(_OrdenOYDPLUSSelected.PuntosIndicador) And _OrdenOYDPLUSSelected.PuntosIndicador <> 0 Then
                                        _OrdenOYDPLUSSelected.PuntosIndicador = 0
                                    End If
                                Else
                                    If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Indicador) Then
                                        If Not IsNothing(_OrdenOYDPLUSSelected.TasaFacial) And _OrdenOYDPLUSSelected.TasaFacial <> 0 Then
                                            _OrdenOYDPLUSSelected.TasaFacial = 0
                                        End If
                                    End If
                                End If

                            End If

                            HabilitarDeshabilitarControlesEspecies(False, _OrdenOYDPLUSSelected.EspecieEsAccion, _OrdenOYDPLUSSelected.TipoTasaFija, _OrdenOYDPLUSSelected.Indicador)
                        End If
                    Case "fechaemision"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If Not IsNothing(_OrdenOYDPLUSSelected.FechaEmision) Then
                                HabilitarConsultaControles(_OrdenOYDPLUSSelected)
                            End If
                            If logCalcularValores Then
                                LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACIONESPECIE, _OrdenOYDPLUSSelected)
                            End If

                            If (OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA) Then
                                FiltrarOperacionesEspecieCumplimiento()

                            End If
                        End If
                    Case "fechavencimiento"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If Not IsNothing(_OrdenOYDPLUSSelected.FechaVencimiento) Then
                                HabilitarConsultaControles(_OrdenOYDPLUSSelected)
                            End If
                            If logCalcularValores Then
                                LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACIONESPECIE, _OrdenOYDPLUSSelected)
                            End If

                            If (OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA) Then
                                FiltrarOperacionesEspecieCumplimiento()

                            End If
                        End If
                    Case "modalidad"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Modalidad) Then
                                HabilitarConsultaControles(_OrdenOYDPLUSSelected)
                            End If

                            If (OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA) Then
                                FiltrarOperacionesEspecieCumplimiento()


                            End If
                        End If
                    Case "puntosindicador"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If logCalcularValores Then
                                LimpiarControlesOYDPLUS(OPCION_DATOSNEGOCIACIONESPECIE, _OrdenOYDPLUSSelected)
                            End If
                        End If

                        'Se deshabilita funcionalidad ya que no corresponde el filtro de especies para operaciones SAE porque BVC no envía este dato
                        'JDR20180606
                        'If (OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA) Then
                        '    FiltrarOperacionesEspecieCumplimiento()

                        'End If
                    Case "fechasalida"
                        If logEditarRegistro Or logNuevoRegistro Then
                            If logCalcularDiasPlazo Then
                                'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
                                'JUAN DAVID CORREA MARZO 2015
                                If logCalcularValores Then
                                    CalcularDiasPlazo(_OrdenOYDPLUSSelected)
                                    logDiasCumplimiento = False
                                End If
                            End If
                        End If
                    Case "cantidad"
                        If logEditarRegistro And logEliminarAsociacion = False And logPreguntoAsociacion Then
                            If OrdenOYDPLUSSelected.Cantidad < dblCantidadAnterior Then
                                HabilitarPrecio = False
                                OrdenOYDPLUSSelected.Precio = dblPrecioAnterior
                            Else
                                HabilitarPrecio = True
                            End If
                        End If
                    Case "clasificacion"
                        If _OrdenOYDPLUSSelected.Clase = CLASE_ACCIONES And _OrdenOYDPLUSSelected.Clasificacion = "OPA" Then
                            VisibilidadOfertaPublicaP = Visibility.Visible
                            HabilitarOfertaPublica = True
                            _OrdenOYDPLUSSelected.VendeTodo = Nothing
                            _OrdenOYDPLUSSelected.ExistePreacuerdo = Nothing
                        Else
                            VisibilidadOfertaPublicaP = Visibility.Collapsed
                            HabilitarOfertaPublica = False
                            _OrdenOYDPLUSSelected.VendeTodo = Nothing
                            _OrdenOYDPLUSSelected.ExistePreacuerdo = Nothing

                        End If
                    Case "clasificacion"
                        If _OrdenOYDPLUSSelected.Clase = CLASE_ACCIONES And _OrdenOYDPLUSSelected.Clasificacion = "OPA" Then
                            VisibilidadOfertaPublicaP = Visibility.Visible
                            HabilitarOfertaPublica = True
                            _OrdenOYDPLUSSelected.VendeTodo = Nothing
                            _OrdenOYDPLUSSelected.ExistePreacuerdo = Nothing
                            _OrdenOYDPLUSSelected.PorcentajePagoEfectivo = 0
                        Else
                            VisibilidadOfertaPublicaP = Visibility.Collapsed
                            HabilitarOfertaPublica = False
                            _OrdenOYDPLUSSelected.VendeTodo = Nothing
                            _OrdenOYDPLUSSelected.ExistePreacuerdo = Nothing
                            _OrdenOYDPLUSSelected.PorcentajePagoEfectivo = 0

                        End If
                End Select
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar el cambio en la propiedad.", Me.ToString, "_OrdenOYDPLUSSelected_PropertyChanged", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try

    End Sub

    ''' <summary>
    ''' Este evento se dispara cuando se realiza algun cambio en la propiedad de OrdenCruzadaSelected
    ''' Desarrollado por Juan David Correa
    ''' Fecha 18 de Marzo del 2013
    ''' </summary>
    Private Async Sub _OrdenCruzadaSelected_PropertyChanged(ByVal sender As Object, ByVal e As System.ComponentModel.PropertyChangedEventArgs) Handles _OrdenCruzadaSelected.PropertyChanged
        Try
            Select Case e.PropertyName.ToLower()
                Case "tipoproducto"
                    If Not IsNothing(_OrdenCruzadaSelected.TipoProducto) Then
                        HabilitarClienteCruzada = True
                        If logNuevoRegistro Or logEditarRegistro Then
                            If logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(_OrdenCruzadaSelected) Then
                                _OrdenCruzadaSelected.FechaRecepcion = dtmFechaServidor
                            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia And ValidarTipoProductoPosicionPropia(_OrdenCruzadaSelected) = False Then
                                _OrdenCruzadaSelected.FechaRecepcion = Nothing
                            ElseIf logHabilitarCondicionesTipoProductoCuentaPropia = False Then
                                If logLlevarFechaActualRecepcion Then
                                    If logLlevarHoraActualRecepcion Then
                                        _OrdenCruzadaSelected.FechaRecepcion = dtmFechaServidor
                                    Else
                                        _OrdenCruzadaSelected.FechaRecepcion = dtmFechaServidor.Date
                                    End If
                                Else
                                    _OrdenCruzadaSelected.FechaRecepcion = Nothing
                                End If
                                If logDuplicarParametroAceptar = True Then
                                    _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                                Else
                                    If Not IsNothing(FechaDuplicaParametro) Then
                                        _OrdenOYDPLUSSelected.FechaRecepcion = FechaDuplicaParametro
                                    Else
                                        _OrdenOYDPLUSSelected.FechaRecepcion = dtmFechaServidor
                                    End If
                                End If
                            End If
                        End If
                    Else
                        HabilitarClienteCruzada = False
                    End If
                Case "idcomitente"
                    If Not String.IsNullOrEmpty(_OrdenCruzadaSelected.IDComitente) Then
                        HabilitarConsultaControles(_OrdenCruzadaSelected)
                    End If
                Case "especie"
                    If Not String.IsNullOrEmpty(_OrdenCruzadaSelected.Especie) Then
                        HabilitarConsultaControles(_OrdenCruzadaSelected)
                    End If
                    'Case "operacioncruzada"
                Case "duracion"
                    If logNuevoRegistro Or logEditarRegistro Then
                        If Not String.IsNullOrEmpty(_OrdenCruzadaSelected.Duracion) Then
                            CalcularFechaVigenciaOrden(_OrdenCruzadaSelected)
                        End If
                    End If
                    'Case "fechaorden"
                    'If logNuevoRegistro Or logEditarRegistro Then
                    '    Me.CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_ORDEN, -1)
                    'End If
                Case "fechavigencia"
                    If logNuevoRegistro Or logEditarRegistro Then
                        If Not IsNothing(_OrdenCruzadaSelected.FechaVigencia) Then
                            _OrdenCruzadaSelected.HoraVigencia = String.Format("{0:00}:{1:00}:{2:00}",
                                                                               _OrdenCruzadaSelected.FechaVigencia.Value.Hour,
                                                                               _OrdenCruzadaSelected.FechaVigencia.Value.Minute,
                                                                               _OrdenCruzadaSelected.FechaVigencia.Value.Second)

                            Me.CalcularDiasOrdenOYDPLUS(MSTR_CALCULAR_DIAS_ORDEN, _OrdenCruzadaSelected, -1)

                            If logCalcularValores Then
                                If ValidarFechaCierreSistema(_OrdenCruzadaSelected, "seleccionar esta fecha de vigencia") Then

                                End If
                            End If
                        End If
                    End If
                Case "enpesos"
                    HabilitarCamposOYDPLUS(_OrdenCruzadaSelected)
                    If logEditarRegistro Or logNuevoRegistro Then
                        If logCalcularValores Then
                            LimpiarControlesOYDPLUS(OPCION_ENPESOS, _OrdenCruzadaSelected)
                        End If
                    End If
                Case "tipolimite"
                    If logEditarRegistro Or logNuevoRegistro Then

                        If logCalcularValores Then
                            FiltrarOpcionesTipoLimite("TIPOLIMITE", _OrdenCruzadaSelected)

                        End If
                        If Not String.IsNullOrEmpty(_OrdenCruzadaSelected.TipoLimite) And
                            Not String.IsNullOrEmpty(_OrdenCruzadaSelected.Especie) And
                            Not String.IsNullOrEmpty(_OrdenCruzadaSelected.TipoOperacion) Then
                            If _OrdenCruzadaSelected.TipoLimite = TIPOMERCADO_PRECIO_ESPECIE Or _OrdenCruzadaSelected.TipoLimite = TIPOMERCADO_PORLOMEJOR_PRECIO_ESPECIE Then
                                Await ConsultarUltimoPrecioEspecieAsync(_OrdenCruzadaSelected.Especie, _OrdenCruzadaSelected.TipoOperacion, _OrdenCruzadaSelected.TipoNegocio)
                            End If
                            If _OrdenCruzadaSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Then
                                Await CalcularValorOrden(_OrdenCruzadaSelected)
                            End If
                        End If
                    End If
                Case "ejecucion"
                    If logEditarRegistro Or logNuevoRegistro Then
                        If logCalcularValores Then
                            FiltrarOpcionesTipoLimite("EJECUCION", _OrdenCruzadaSelected)
                        End If

                    End If
                Case "fechacumplimiento"
                    If logEditarRegistro Or logNuevoRegistro Then
                        'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
                        'JUAN DAVID CORREA MARZO 2015
                        CalcularDiasPlazo(_OrdenCruzadaSelected)
                    End If
                Case "diascumplimiento"
                    If logEditarRegistro Or logNuevoRegistro Then
                        'If logCalcularValores Then
                        '    'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
                        '    'JUAN DAVID CORREA MARZO 2015
                        '    If logDiasCumplimiento Then
                        '        CalcularFechaCumplimientoPorDias(_OrdenCruzadaSelected)
                        '    End If
                        '    Await CalcularValorOrden(_OrdenCruzadaSelected)
                        'End If
                    End If
                Case "fecharecepcion"
                    If logEditarRegistro Or logNuevoRegistro Then
                        If Not IsNothing(_OrdenCruzadaSelected.FechaRecepcion) Then
                            If logCambiarFechaRecepcion Then
                                Dim strHoraRecepcion As String = String.Format("{0:00}:{1:00}:{2:00}",
                                                                           _OrdenCruzadaSelected.FechaRecepcion.Value.Hour,
                                                                           _OrdenCruzadaSelected.FechaRecepcion.Value.Minute,
                                                                           _OrdenCruzadaSelected.FechaRecepcion.Value.Second)

                                If strHoraRecepcion <> "00:00:00" Then
                                    If _OrdenCruzadaSelected.FechaRecepcion.Value.Year <= 1900 Then
                                        Dim dtmFechaHoraSeleccionada As DateTime = _OrdenCruzadaSelected.FechaRecepcion
                                        Dim dtmFechaNuevaRecepcion As DateTime = New DateTime(Now.Year, Now.Month, Now.Day, dtmFechaHoraSeleccionada.Hour, dtmFechaHoraSeleccionada.Minute, dtmFechaHoraSeleccionada.Second, dtmFechaHoraSeleccionada.Millisecond)
                                        logCambiarFechaRecepcion = False
                                        _OrdenCruzadaSelected.FechaRecepcion = dtmFechaNuevaRecepcion
                                        logCambiarFechaRecepcion = True
                                    End If
                                End If
                            End If
                        End If
                    End If
                Case "fechasalida"
                    If logEditarRegistro Or logNuevoRegistro Then
                        If logCalcularDiasPlazo Then
                            'CAMBIO CALCULOS SOLICITADO POR CASA DE BOLSA
                            'JUAN DAVID CORREA MARZO 2015
                            If logCalcularValores Then
                                CalcularDiasPlazo(_OrdenCruzadaSelected)
                                logDiasCumplimiento = False
                            End If
                        End If
                    End If
            End Select
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar el cambio en la propiedad.", Me.ToString, "_OrdenCruzadaSelected_PropertyChanged", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
        End Try

    End Sub

#End Region

#Region "Notificaciones"

    Private Const TIPOMENSAJE_NOTIFICACIONOPERACIONES = "SAE_NOTIFICACIONOPERACIONES"

    'Private Const TOPICOORDENES = "ORDENES"
    'Private Const TOPICOAUTORIZACIONES = "AUTORIZACIONES"
    'Private Const TOPICOSETEADOR = "SETEADOR"
    'Private Const TOPICOBUSINTEGRACION = "BUS"
    Dim NroOrdenEditar As Integer = 0


    Public Overrides Sub LlegoNotificacion(pobjInfoNotificacion As A2.Notificaciones.Cliente.clsNotificacion)
        Try

            Dim objNotificacion As clsSAENotificacionOperacion

            If Not String.IsNullOrEmpty(pobjInfoNotificacion.strTipoMensaje) Then

                If pobjInfoNotificacion.strTipoMensaje.ToUpper = TIPOMENSAJE_NOTIFICACIONOPERACIONES Then

                    If Not IsNothing(pobjInfoNotificacion.strInfoMensaje) Then

                        objNotificacion = New clsSAENotificacionOperacion

                        objNotificacion = clsSAENotificacionOperacion.Deserialize(pobjInfoNotificacion.strInfoMensaje)

                        If objNotificacion.strCodigoReceptor = _OrdenOYDPLUSSelected.Receptor And objNotificacion.strClaseOrden = _OrdenOYDPLUSSelected.Clase _
                            And objNotificacion.strTipoOperacion = _OrdenOYDPLUSSelected.TipoOperacion And _OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA Then

                            If ConsultarOrdenesSAE Then
                                ConsultarOrdenesSAE = False
                            End If

                            ConsultarOrdenesSAE = True

                        End If

                    End If

                ElseIf pobjInfoNotificacion.strTipoMensaje = "A2CONSOLA_CERRARVENTANA" Then
                    If pobjInfoNotificacion.strInfoMensaje.Contains("A2.OyD.PLUSOrdenes.SL;component/Views/OYDPLUS/FrontOrdenesPLUSView.xaml") Then
                        If Editando Then
                            If Not IsNothing(_OrdenOYDPLUSSelected) Then
                                If Not IsNothing(dcProxy1) Then
                                    dcProxy1.OYDPLUS_CancelarOrdenOYDPLUS(_OrdenOYDPLUSSelected.NroOrden, "ORDENES", Program.Usuario, Program.HashConexion, AddressOf TerminoCancelarEditarRegistro, String.Empty)
                                End If
                            End If
                        End If
                    End If
                End If

                'strTopico = pobjInfoNotificacion.strTopicos.ToUpper

                'mostrarMensaje(pobjInfoNotificacion.strMensajeConsola, "Notificaciones Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)

                'Select Case strTopico
                '    Case TOPICOSETEADOR
                '        If Not IsNothing(pobjInfoNotificacion.strInfoMensaje.Split("|")) Then
                '            arrResultado = pobjInfoNotificacion.strInfoMensaje.Split("|")
                '            strAccionMensaje = arrResultado(0)
                '            strUsuarioMensaje = arrResultado(1)

                '            If strUsuarioMensaje = Program.Usuario Then
                '                If strAccionMensaje = MensajeNotificacion.AccionEjecutada.Rechazada Then
                '                    Dim strMensajeMostrarUsuario As String = String.Empty

                '                    strMensajeMostrarUsuario = String.Format("Señor Usuario, la Orden nro {0} fue rechazada en la pantalla del Seteador. Las causas de rechazo fueron las siguientes: ", pobjInfoNotificacion.intConsecutivo)

                '                    If logEditarRegistro = False And logNuevoRegistro = False Then
                '                        Dim strCausas As String = String.Empty
                '                        Dim strObservacionUsuario As String = String.Empty
                '                        Dim arrMensajeConsola() As String
                '                        ReDim arrMensajeConsola(2)

                '                        If Not IsNothing(ListaOrdenOYDPLUS) Then
                '                            Dim NroOrden As Integer = 0
                '                            If ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjInfoNotificacion.intConsecutivo).Count > 0 Then
                '                                NroOrdenEditar = ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjInfoNotificacion.intConsecutivo).FirstOrDefault.NroOrden
                '                            End If
                '                        End If

                '                        If NroOrdenEditar <> 0 Then
                '                            If Not IsNothing(pobjInfoNotificacion.strMensajeConsola.Split("*")) Then
                '                                strCausas = arrMensajeConsola(0)
                '                                strObservacionUsuario = arrMensajeConsola(1)

                '                                For Each li In strCausas.Split("|")
                '                                    strMensajeMostrarUsuario = String.Format("{0}{1}{2}", strMensajeMostrarUsuario, vbCrLf, li)
                '                                Next

                '                                strMensajeMostrarUsuario = String.Format("{0}{1}Observaciones: {2}", strMensajeMostrarUsuario, vbCrLf, strObservacionUsuario)

                '                                strMensajeMostrarUsuario = String.Format("{0}{1}¿Desea Editar la Orden?", strMensajeMostrarUsuario, vbCrLf)

                '                                mostrarMensajePregunta(strMensajeMostrarUsuario, _
                '                                                       Program.TituloSistema, _
                '                                                       "CONFIRMACIONSETEADOR", _
                '                                                       AddressOf TerminoPreguntarConfirmacionSeteador)

                '                            End If
                '                        End If
                '                    Else
                '                        mostrarMensaje(strMensajeMostrarUsuario, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                '                    End If
                '                ElseIf strAccionMensaje = MensajeNotificacion.AccionEjecutada.EnviadaSAE Then
                '                    If Not IsNothing(ListaOrdenOYDPLUS) Then
                '                        Dim NroOrden As Integer = 0
                '                        If ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjInfoNotificacion.intConsecutivo).Count > 0 Then
                '                            NroOrdenEditar = ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = pobjInfoNotificacion.intConsecutivo).FirstOrDefault.NroOrden
                '                        End If
                '                    End If

                '                    If NroOrdenEditar <> 0 Then
                '                        mostrarMensaje(pobjInfoNotificacion.strMensajeConsola, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Exito)
                '                    End If
                '                End If
                '            End If
                '        End If


                '    Case TOPICOBUSINTEGRACION
                '        If Not IsNothing(pobjInfoNotificacion.strInfoMensaje.Split("|")) Then
                '            arrResultado = pobjInfoNotificacion.strInfoMensaje.Split("|")
                '            strAccionMensaje = arrResultado(0)
                '            strUsuarioMensaje = arrResultado(1)

                '            If strUsuarioMensaje = Program.Usuario Then
                '                mostrarMensaje(pobjInfoNotificacion.strMensajeConsola, "Ordenes", A2Utilidades.wppMensajes.TiposMensaje.Exito)
                '            End If
                '        End If
                '    Case TOPICOAUTORIZACIONES
                '        If logEditarRegistro = False And logNuevoRegistro = False Then
                '            If Not IsNothing(pobjInfoNotificacion.strInfoMensaje.Split("|")) Then
                '                arrResultado = pobjInfoNotificacion.strInfoMensaje.Split("|")
                '                strAccionMensaje = arrResultado(0)
                '                strUsuarioMensaje = arrResultado(1)

                '                If strUsuarioMensaje = Program.Usuario Then
                '                    If VistaSeleccionada = VISTA_APROBADAS Then
                '                        FiltrarRegistrosOYDPLUS("P", String.Empty, "CAMBIOBUS")
                '                    Else
                '                        VistaSeleccionada = VISTA_APROBADAS
                '                    End If
                '                End If
                '            End If
                '        End If
                'End Select

            End If

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir el mensaje de la notificación.",
                                Me.ToString(), "LlegoNotificacion", Application.Current.ToString(), Program.Maquina, ex)
        End Try
    End Sub

    Private Sub TerminoPreguntarConfirmacionSeteador(ByVal sender As Object, ByVal e As EventArgs)
        Try
            Dim objResultado As A2Utilidades.wppMensajePregunta
            objResultado = CType(sender, A2Utilidades.wppMensajePregunta)

            If objResultado.DialogResult Then
                If logEditarRegistro = False And logNuevoRegistro = False Then
                    ObtenerValoresOrdenAnterior(_OrdenOYDPLUSSelected, OrdenAnteriorOYDPLUS)

                    If Not IsNothing(ListaOrdenOYDPLUS) Then
                        If ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = NroOrdenEditar).Count > 0 Then
                            OrdenOYDPLUSSelected = ListaOrdenOYDPLUS.Where(Function(i) i.IDNroOrden = NroOrdenEditar).FirstOrDefault
                            EditarRegistro()
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al recibir la respuesta de la validación.", Me.ToString(), "TerminoPreguntarConfirmacion", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            IsBusy = False
            CantidadConfirmaciones = 0
        End Try
    End Sub

    'Public Sub EnviarMensajeCliente(ByVal pNotificacion As MensajeNotificacion.AccionEjecutada, ByVal pMensajeNotificacion As String, ByVal pConsecutivo As Integer, ByVal pIDConexion As String)
    '    Try
    '        Dim objNC As clsNotificacionCliente = New clsNotificacionCliente

    '        objNC.objInfoNotificacion = New clsNotificacion With {.strTopico = TOPICOORDENES,
    '                                                              .strInfoMensaje = pNotificacion & "|" & Program.Usuario,
    '                                                              .strMensajeConsola = pMensajeNotificacion,
    '                                                              .dtmFechaEnvio = dtmFechaServidor,
    '                                                              .intConsecutivo = pConsecutivo,
    '                                                              .strIdConexion = pIDConexion}

    '        'EnviarNotificacion(objNC)
    '    Catch ex As Exception
    '        A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al enviar el mensaje de notificación.", _
    '                            Me.ToString(), "EnviarMensajeCliente", Application.Current.ToString(), Program.Maquina, ex)
    '    End Try
    'End Sub

    '#End If


#End Region

#Region "Timer Refrescar pantalla"

    Private _myDispatcherTimerOrdenes As System.Windows.Threading.DispatcherTimer '= New System.Windows.Threading.DispatcherTimer

    Public Sub ReiniciaTimer()
        Try
            If Program.Recarga_Automatica_Activa Then
                If _myDispatcherTimerOrdenes Is Nothing Then
                    _myDispatcherTimerOrdenes = New System.Windows.Threading.DispatcherTimer
                    _myDispatcherTimerOrdenes.Interval = New TimeSpan(0, Program.Par_lapso_recarga_OYDPLUS, 0)
                    AddHandler _myDispatcherTimerOrdenes.Tick, AddressOf Me.Each_Tick
                End If
                _myDispatcherTimerOrdenes.Start()
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al intentar reiniciar el timer.", Me.ToString, "ReiniciaTimer", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try

    End Sub

    ''' <summary>
    ''' Para hilo del temporizador
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub pararTemporizador()
        Try
            If Not IsNothing(_myDispatcherTimerOrdenes) Then
                _myDispatcherTimerOrdenes.Stop()
                RemoveHandler _myDispatcherTimerOrdenes.Tick, AddressOf Me.Each_Tick
                _myDispatcherTimerOrdenes = Nothing
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al intentar parar el timer.", Me.ToString, "pararTemporizador", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
        End Try
    End Sub

    Private Sub Each_Tick(sender As Object, e As EventArgs)
        'Recarga la pantalla cuando se este en un tiempo de espera sin notificaciones y sin refrescar la pantalla.
        RecargarPantallaOrdenes()
    End Sub

#End Region

    '*****************************************************************************************************************
    'Inicio Segmento código obtener ordenes SAE - Genérico pantalla Ordenes 
    'Julian Rincón (Alcuadrado S.A)
    '*****************************************************************************************************************
#Region "Propiedades"


    Private _MostrarConsultandoOrden As Visibility = Visibility.Collapsed
    ''' <summary>
    ''' Propiedad que permite la visualización del mensaje "Consultado Ordenes..." en la pestaña Bolsa
    ''' </summary>
    ''' <returns></returns>
    Public Property MostrarConsultandoOrden() As Visibility
        Get
            Return _MostrarConsultandoOrden
        End Get
        Set(ByVal value As Visibility)
            _MostrarConsultandoOrden = value
            MyBase.CambioItem("MostrarConsultandoOrden")
        End Set
    End Property

    ''' <summary>
    ''' Propiedad usada para obtener la lista de Acciones SAE cargada y así controlar la paginación 
    ''' </summary>
    ''' <returns></returns>
    Public ReadOnly Property ListaOrdenesSAEAccionesPaged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaOrdenSAEAcciones) Then
                Dim view = New PagedCollectionView(_ListaOrdenSAEAcciones)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property

    ''' <summary>
    ''' Propiedad usada para obtener la lista de Renta fija SAE cargada y así controlar la paginación 
    ''' </summary>
    ''' <returns></returns>
    Public ReadOnly Property ListaOrdenesSAERentaFijaPaged() As PagedCollectionView
        Get
            If Not IsNothing(_ListaOrdenSAERentaFija) Then
                Dim view = New PagedCollectionView(_ListaOrdenSAERentaFija)
                Return view
            Else
                Return Nothing
            End If
        End Get
    End Property


    Private _ListaOrdenSAEAccionesTotales As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
    ''' <summary>
    ''' Propiedad que contiene la lista de operaciones en su totalidad, es decir sin hacer ningún filtro por especie o faciales (si aplica)
    ''' </summary>
    ''' <returns></returns>
    Public Property ListaOrdenSAEAccionesTotales() As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
        Get
            Return _ListaOrdenSAEAccionesTotales
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones))
            _ListaOrdenSAEAccionesTotales = value
            MyBase.CambioItem("ListaOrdenesSAEAccionesTotales")
        End Set
    End Property



    Private _ListaOrdenSAERentaFijaTotales As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)
    ''' <summary>
    ''' Propiedad que contiene la lista de operaciones de Renta Fija en su totalidad, es decir sin hacer ningún filtro por especie o faciales (si aplica)
    ''' </summary>
    ''' <returns></returns>
    Public Property ListaOrdenSAERentaFijaTotales() As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)
        Get
            Return _ListaOrdenSAERentaFijaTotales
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija))
            _ListaOrdenSAERentaFijaTotales = value
            MyBase.CambioItem("ListaOrdenSAERentaFijaTotales")
        End Set
    End Property


    Private _ListaOrdenesSAEAccionesControl As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
    ''' <summary>
    ''' Lista auxiliar de operaciones de Bolsa de Renta Variable
    ''' </summary>
    ''' <returns></returns>
    Public Property ListaOrdenesSAEAccionesControl() As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
        Get
            Return _ListaOrdenesSAEAccionesControl
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones))
            _ListaOrdenesSAEAccionesControl = value
            ListaOrdenSAEAcciones = _ListaOrdenesSAEAccionesControl

            If Not IsNothing(ListaOrdenSAEAcciones) Then
                If ListaOrdenSAEAcciones.Count > 0 Then

                    Dim strEspecietemp As String = _ListaOrdenesSAEAccionesControl.FirstOrDefault.Especie.ToString()
                    Dim intCantidadOperaciones As Integer = ListaOrdenSAEAcciones.Count
                    Dim ContadorOpIguales As Integer = 0

                    For Each li In ListaOrdenSAEAcciones
                        If (li.Especie.ToUpper = strEspecietemp.ToUpper) Then
                            ContadorOpIguales = ContadorOpIguales + 1
                        End If

                    Next

                    If ContadorOpIguales = intCantidadOperaciones Then
                        HabilitarSeleccionarTodosFolios = True
                    Else
                        HabilitarSeleccionarTodosFolios = False
                        'SeleccionarTodosFolios = False
                    End If

                End If
            End If

            If Not IsNothing(_ListaOrdenesSAEAccionesControl) Then
                OrdenesSAEAccionesSelectedControl = _ListaOrdenesSAEAccionesControl.FirstOrDefault
            End If
            MyBase.CambioItem("ListaOrdenesSAEAccionesControl")
            MyBase.CambioItem("ListaOrdenesSAEAccionesPaged")
        End Set
    End Property


    Private _ListaOrdenesSAERentaFijaControl As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)
    ''' <summary>
    ''' Lista auxiliar de operaciones de Bolsa de Renta Fija
    ''' </summary>
    ''' <returns></returns>
    Public Property ListaOrdenesSAERentaFijaControl() As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)
        Get
            Return _ListaOrdenesSAERentaFijaControl
        End Get
        Set(ByVal value As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija))
            _ListaOrdenesSAERentaFijaControl = value
            ListaOrdenSAERentaFija = _ListaOrdenesSAERentaFijaControl

            If Not IsNothing(ListaOrdenSAERentaFija) Then
                If ListaOrdenSAERentaFija.Count > 0 Then

                    Dim intCantidadOperaciones As Integer = _ListaOrdenesSAERentaFijaControl.Count
                    Dim ContadorOpIguales As Integer = 0

                    For Each li In ListaOrdenSAERentaFija
                        If (li.Especie.ToUpper = _ListaOrdenesSAERentaFijaControl.FirstOrDefault.Especie.ToUpper And
                            li.FechaEmision = _ListaOrdenesSAERentaFijaControl.FirstOrDefault.FechaEmision And
                            li.FechaVencimiento = _ListaOrdenesSAERentaFijaControl.FirstOrDefault.FechaVencimiento And
                            li.Modalidad = _ListaOrdenesSAERentaFijaControl.FirstOrDefault.Modalidad And
                            li.FechaCumplimiento = _ListaOrdenesSAERentaFijaControl.FirstOrDefault.FechaCumplimiento) Then
                            ContadorOpIguales = ContadorOpIguales + 1
                        End If

                    Next

                    If ContadorOpIguales = intCantidadOperaciones Then
                        HabilitarSeleccionarTodosFolios = True
                    Else
                        HabilitarSeleccionarTodosFolios = False
                        'SeleccionarTodosFolios = False
                    End If

                End If
            End If

            If Not IsNothing(_ListaOrdenesSAERentaFijaControl) Then
                OrdenesSAERentaFijaSelectedControl = _ListaOrdenesSAERentaFijaControl.FirstOrDefault
            End If
            MyBase.CambioItem("ListaOrdenesSAERentaFijaControl")
            MyBase.CambioItem("ListaOrdenesSAERentaFijaPaged")
        End Set
    End Property


    Private WithEvents _OrdenesSAEAccionesSelectedControl As OYDPLUSUtilidades.tblOrdenesSAEAcciones
    ''' <summary>
    ''' Propiedad selected de tipo lista Renta Variable auxiliar para el proceso de filtro de operaciones de Bolsa
    ''' </summary>
    ''' <returns></returns>
    Public Property OrdenesSAEAccionesSelectedControl() As OYDPLUSUtilidades.tblOrdenesSAEAcciones
        Get
            Return _OrdenesSAEAccionesSelectedControl
        End Get
        Set(ByVal value As OYDPLUSUtilidades.tblOrdenesSAEAcciones)
            _OrdenesSAEAccionesSelectedControl = value
            OrdenSAEAccionesSelected = OrdenesSAEAccionesSelectedControl

            If Not IsNothing(OrdenesSAEAccionesSelectedControl) Then
                If OrdenesSAEAccionesSelectedControl.Seleccionada Then
                    OrdenSAESeleccionada = True
                Else
                    OrdenSAESeleccionada = False
                End If
            End If
            MyBase.CambioItem("OrdenesSAEAccionesSelectedControl")
        End Set
    End Property


    Private WithEvents _OrdenesSAERentaFijaSelectedControl As OYDPLUSUtilidades.tblOrdenesSAERentaFija
    ''' <summary>
    ''' Propiedad selected de tipo lista Renta Fija auxiliar para el proceso de filtro de operaciones de Bolsa
    ''' </summary>
    ''' <returns></returns>
    Public Property OrdenesSAERentaFijaSelectedControl() As OYDPLUSUtilidades.tblOrdenesSAERentaFija
        Get
            Return _OrdenesSAERentaFijaSelectedControl
        End Get
        Set(ByVal value As OYDPLUSUtilidades.tblOrdenesSAERentaFija)
            _OrdenesSAERentaFijaSelectedControl = value
            OrdenSAERentaFijaSelected = OrdenesSAERentaFijaSelectedControl

            If Not IsNothing(OrdenesSAERentaFijaSelectedControl) Then
                If OrdenesSAERentaFijaSelectedControl.Seleccionada Then
                    OrdenSAESeleccionada = True
                Else
                    OrdenSAESeleccionada = False
                End If
            End If
            MyBase.CambioItem("OrdenesSAEAccionesSelectedControl")
        End Set
    End Property

    Private _HabilitarSeleccionarTodosFolios As Boolean = False
    ''' <summary>
    ''' Propiedad que habilita la visibilidad del control de selección masiva de las operaciones 
    ''' </summary>
    ''' <returns></returns>
    Public Property HabilitarSeleccionarTodosFolios() As Boolean
        Get
            Return _HabilitarSeleccionarTodosFolios
        End Get
        Set(ByVal value As Boolean)
            _HabilitarSeleccionarTodosFolios = value
            MyBase.CambioItem("HabilitarSeleccionarTodosFolios")
        End Set
    End Property


    Private _SeleccionarTodosFolios As Boolean
    ''' <summary>
    ''' Propiedad que controla la selección masiva de las operaciones de bolsa
    ''' </summary>
    ''' <returns></returns>
    Public Property SeleccionarTodosFolios() As Boolean
        Get
            Return _SeleccionarTodosFolios
        End Get
        Set(ByVal value As Boolean)
            _SeleccionarTodosFolios = value

            Try
                If OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                    Dim objListatemp As New List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
                    If Not IsNothing(ListaOrdenesSAEAccionesControl) Then
                        If ListaOrdenesSAEAccionesControl.Count > 0 Then
                            For Each li In ListaOrdenesSAEAccionesControl
                                objListatemp.Add(li)
                            Next

                            For Each li In objListatemp
                                li.Seleccionada = _SeleccionarTodosFolios
                            Next

                            ListaOrdenesSAEAccionesControl = Nothing
                            ListaOrdenesSAEAccionesControl = objListatemp

                            RecorrerVariosAcciones()
                        End If
                    End If
                Else
                    Dim objListatemp As New List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)
                    If Not IsNothing(ListaOrdenesSAERentaFijaControl) Then
                        If ListaOrdenesSAERentaFijaControl.Count > 0 Then
                            For Each li In ListaOrdenesSAERentaFijaControl
                                objListatemp.Add(li)
                            Next

                            For Each li In objListatemp
                                li.Seleccionada = _SeleccionarTodosFolios
                            Next

                            ListaOrdenesSAERentaFijaControl = Nothing
                            ListaOrdenesSAERentaFijaControl = objListatemp
                            RecorrerVarios()

                        End If
                    End If
                End If
            Catch ex As Exception
                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al seleccionar todas las Operaciones.",
                                                             Me.ToString(), "SeleccionarTodosFolios", Application.Current.ToString(), Program.Maquina, ex)
            End Try
            MyBase.CambioItem("SeleccionarTodosFolios")
            'RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("SeleccionarTodosFolios"))
        End Set
    End Property

#End Region


    ''' <summary>
    ''' Método para limpiar los controles relacionados a la operaciones de SAE
    ''' </summary>
    Public Sub LimpiarOrdenesSAE()
        Try
            ListaOrdenSAEAcciones = Nothing
            ListaOrdenesSAEAccionesControl = Nothing
            OrdenesSAEAccionesSelectedControl = Nothing
            ListaOrdenSAERentaFija = Nothing
            ListaOrdenesSAERentaFijaControl = Nothing
            OrdenesSAERentaFijaSelectedControl = Nothing
            ''JDR20180302
            SeleccionarTodosFolios = False
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al limpiar los controles.",
                                 Me.ToString(), "LimpiarOrdenesSAE", Application.Current.ToString(), Program.Maquina, ex)
            MostrarConsultandoOrden = Visibility.Collapsed
        End Try
    End Sub


    ''' <summary>
    ''' Método que es ejecutado para consultar las operaciones de BVC sea Acciones o Renta Fija 
    ''' </summary>
    ''' <param name="pstrUserState"></param>
    Public Async Function ConsultarOrdenesSAEControl(Optional ByVal pstrUserState As String = "") As Task(Of Boolean)
        Dim logResultado As Boolean = False
        Dim objRet As LoadOperation(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
        Dim objRetRF As LoadOperation(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)

        Try
            LimpiarOrdenesSAE()

            MostrarConsultandoOrden = Visibility.Visible
            If ConsultarOrdenesSAE Then
                If Not IsNothing(ReceptorControles) Then
                    If Not IsNothing(mdcProxyUtilidad03.tblOrdenesSAEAcciones) Then
                        mdcProxyUtilidad03.tblOrdenesSAEAcciones.Clear()
                    End If
                    If Not IsNothing(mdcProxyUtilidad03.tblOrdenesSAERentaFijas) Then
                        mdcProxyUtilidad03.tblOrdenesSAERentaFijas.Clear()
                    End If
                    If OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                        objRet = Await mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarOrdenesBolsaAccionesQuery(ReceptorControles, OrdenOYDPLUSSelected.Clase, OrdenOYDPLUSSelected.TipoOperacion, Program.Usuario, OrdenOYDPLUSSelected.TipoNegocio, LiquidacionesHabilitarControles, Program.HashConexion)).AsTask()
                        If Not objRet Is Nothing Then
                            If objRet.HasError Then
                                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cargar operaciones de bolsa acciones...", Me.ToString(), "ConsultarOrdenesSAEControl", Program.TituloSistema, Program.Maquina, objRet.Error, Program.RutaServicioLog)
                                MostrarConsultandoOrden = Visibility.Collapsed
                            Else
                                'If objRet.Entities.ToList.Count > 0 Then
                                ListaOrdenesSAEAccionesControl = objRet.Entities.ToList
                                ListaOrdenSAEAccionesTotales = objRet.Entities.ToList
                                MostrarConsultandoOrden = Visibility.Collapsed
                                'End If
                            End If
                        End If
                    Else
                        objRetRF = Await mdcProxyUtilidad03.Load(mdcProxyUtilidad03.OYDPLUS_ConsultarOrdenesBolsaRentaFijaQuery(ReceptorControles, OrdenOYDPLUSSelected.Clase, OrdenOYDPLUSSelected.TipoOperacion, Program.Usuario, OrdenOYDPLUSSelected.TipoNegocio, LiquidacionesHabilitarControles, Program.HashConexion)).AsTask()
                        If Not objRetRF Is Nothing Then
                            If objRetRF.HasError Then
                                A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cargar operaciones de bolsa renta fija...", Me.ToString(), "ConsultarOrdenesSAEControl", Program.TituloSistema, Program.Maquina, objRetRF.Error, Program.RutaServicioLog)
                                MostrarConsultandoOrden = Visibility.Collapsed
                            Else
                                'If objRetRF.Entities.ToList.Count > 0 Then
                                ListaOrdenesSAERentaFijaControl = objRetRF.Entities.ToList
                                ListaOrdenSAERentaFijaTotales = objRetRF.Entities.ToList
                                MostrarConsultandoOrden = Visibility.Collapsed
                                If pstrUserState = "NOTIFICARSELECCIONADA" Then
                                    If OrdenSAESeleccionada Then
                                        OrdenSAESeleccionada = False
                                    End If
                                End If
                                'End If
                            End If
                        End If
                    End If
                End If
            End If
            Return Nothing
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presento un problema al cargar operaciones de bolsa..", Me.ToString(), "ConsultarOrdenesSAEControl", Application.Current.ToString(), Program.Maquina, ex)
            Return Nothing
        Finally
            MostrarConsultandoOrden = Visibility.Collapsed
        End Try
    End Function

    ''' <summary>
    ''' Método que totaliza los valores de negocio de las ordenes SAE de Renta Variable seleccionadas y los retorna
    ''' </summary>
    ''' <param name="pobj">Lista de ordenes SAE seleccionadas a totalizar</param>
    ''' <returns></returns>
    Public Function ObtenerDatosSAERentaAccionesVarios(pobj As List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)) As OYDPLUSUtilidades.tblOrdenesSAEAcciones
        Try
            Dim obj As New OYDPLUSUtilidades.tblOrdenesSAEAcciones
            Dim cantidad As Double = 0
            Dim precio As Double = 0
            Dim precioLimpio As Double = 0
            ' Dim precioSucio As Double = 0

            For Each li In pobj
                cantidad = CDbl(cantidad + li.Cantidad)
                precio = CDbl(precio + (li.Cantidad * li.Precio))
                precioLimpio = CDbl(precioLimpio + (li.Cantidad * li.Precio))
                'precioSucio = CDbl(precioSucio + (li.Cantidad * li.PrecioSucio))
            Next
            precio = precio / cantidad
            precioLimpio = precioLimpio / cantidad
            'precioSucio = precioSucio / cantidad

            obj.Precio = precio
            obj.Precio = precioLimpio
            ' obj.PrecioSucio = precioSucio
            obj.Cantidad = cantidad
            obj.ID = pobj.FirstOrDefault.ID
            obj.NroLiquidacion = pobj.FirstOrDefault.NroLiquidacion
            obj.Seleccionada = pobj.FirstOrDefault.Seleccionada
            obj.Especie = pobj.FirstOrDefault.Especie
            obj.FechaReferencia = pobj.FirstOrDefault.FechaReferencia



            Return obj

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al sumar las cantidades y precio de varios registros.",
                                 Me.ToString(), "ObtenerDatosSAERentaFijaVarios", Application.Current.ToString(), Program.Maquina, ex)
            MostrarConsultandoOrden = Visibility.Collapsed
            Return Nothing
        End Try
    End Function

    ''' <summary>
    ''' Método que totaliza los valores de negocio de las ordenes SAE de Renta Fija seleccionadas y los retorna
    ''' </summary>
    ''' <param name="pobj">Lista de ordenes SAE seleccionadas a totalizar</param>
    ''' <returns></returns>
    Public Function ObtenerDatosSAERentaFijaVarios(pobj As List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)) As OYDPLUSUtilidades.tblOrdenesSAERentaFija
        Try
            Dim obj As New OYDPLUSUtilidades.tblOrdenesSAERentaFija
            Dim cantidad As Double = 0
            Dim captacion As Double = 0
            Dim Futuro As Double = 0
            Dim precio As Double = 0
            Dim precioLimpio As Double = 0
            Dim precioSucio As Double = 0

            For Each li In pobj
                cantidad = CDbl(cantidad + IIf(IsNothing(li.Cantidad), 0, li.Cantidad))
                precio = CDbl(precio + (IIf(IsNothing(li.Cantidad), 0, li.Cantidad) * IIf(IsNothing(li.Precio), 0, li.Precio)))
                precioLimpio = CDbl(precioLimpio + (IIf(IsNothing(li.Cantidad), 0, li.Cantidad) * IIf(IsNothing(li.PrecioLimpio), 0, li.PrecioLimpio)))
                precioSucio = CDbl(precioSucio + (IIf(IsNothing(li.Cantidad), 0, li.Cantidad) * IIf(IsNothing(li.PrecioSucio), 0, li.PrecioSucio)))
                captacion = CDbl(captacion + IIf(IsNothing(li.CantidadCaptacion), 0, li.CantidadCaptacion))
                Futuro = CDbl(Futuro + IIf(IsNothing(li.CantidadFutura), 0, li.CantidadFutura))
            Next
            precio = precio / cantidad
            precioLimpio = precioLimpio / cantidad
            precioSucio = precioSucio / cantidad

            obj.Precio = precio
            obj.PrecioLimpio = precioLimpio
            obj.PrecioSucio = precioSucio
            obj.Cantidad = cantidad
            obj.ID = pobj.FirstOrDefault.ID
            obj.ISIN = pobj.FirstOrDefault.ISIN
            obj.Mercado = pobj.FirstOrDefault.Mercado
            obj.Modalidad = pobj.FirstOrDefault.Modalidad
            obj.NombreCondicionesNegociacion = pobj.FirstOrDefault.NombreModalidad
            obj.NombreIndicador = pobj.FirstOrDefault.NombreIndicador
            obj.NombreModalidad = pobj.FirstOrDefault.NombreModalidad
            obj.NroLiquidacion = pobj.FirstOrDefault.NroLiquidacion
            obj.PuntosIndicador = pobj.FirstOrDefault.PuntosIndicador
            obj.RuedaNegocio = pobj.FirstOrDefault.RuedaNegocio
            obj.Seleccionada = pobj.FirstOrDefault.Seleccionada
            obj.TasaInicial = pobj.FirstOrDefault.TasaInicial
            obj.TasaNominal = pobj.FirstOrDefault.TasaNominal
            obj.TasaRepoSimultanea = pobj.FirstOrDefault.TasaRepoSimultanea
            obj.TipoSimultanea = pobj.FirstOrDefault.TipoSimultanea
            obj.Trader = pobj.FirstOrDefault.Trader
            obj.UBICACIONTITULO = pobj.FirstOrDefault.UBICACIONTITULO
            obj.FechaEmision = pobj.FirstOrDefault.FechaEmision
            obj.FechaVencimiento = pobj.FirstOrDefault.FechaVencimiento
            obj.Especie = pobj.FirstOrDefault.Especie
            obj.TasaInicial = pobj.FirstOrDefault.TasaInicial
            obj.Indicador = pobj.FirstOrDefault.Indicador
            obj.FechaCumplimiento = pobj.FirstOrDefault.FechaCumplimiento
            obj.DiasCumplimiento = pobj.FirstOrDefault.DiasCumplimiento
            obj.CondicionesNegociacion = pobj.FirstOrDefault.CondicionesNegociacion
            obj.Clasificacion = pobj.FirstOrDefault.Clasificacion
            obj.FechaReferencia = pobj.FirstOrDefault.FechaReferencia
            obj.EstadoTitulo = pobj.FirstOrDefault.EstadoTitulo
            obj.CantidadRepoSimultanea = pobj.FirstOrDefault.CantidadRepoSimultanea
            obj.dtmFechaCumplimientoRepo = pobj.FirstOrDefault.dtmFechaCumplimientoRepo
            obj.CantidadCaptacion = captacion
            obj.CantidadFutura = Futuro

            Return obj

        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al sumar las cantidades y precio de varios registros.",
                                 Me.ToString(), "ObtenerDatosSAERentaFijaVarios", Application.Current.ToString(), Program.Maquina, ex)
            MostrarConsultandoOrden = Visibility.Collapsed
            Return Nothing
        End Try
    End Function

    ''' <summary>
    ''' Método que filtra las operaciones de Renta Variable seleccionadas y así obtener sus valores de Negocio
    ''' </summary>
    Private Async Sub RecorrerVariosAcciones()
        Dim CantidadSeleccionada As Integer = 0
        Dim objListaTotalizar As New List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)

        Try
            For Each li In ListaOrdenesSAEAccionesControl.Where(Function(i) CBool(i.Seleccionada) = True)
                CantidadSeleccionada = CantidadSeleccionada + 1
            Next

            If CantidadSeleccionada = 1 Then
                OrdenSAEAccionesSelected = Nothing
                OrdenSAEAccionesSelected = ListaOrdenesSAEAccionesControl.Where(Function(i) CBool(i.Seleccionada = True)).FirstOrDefault
                OrdenSAESeleccionada = True
            ElseIf CantidadSeleccionada > 1 Then
                Dim X = ListaOrdenesSAEAccionesControl.Where(Function(i) CBool(i.Seleccionada) = True).FirstOrDefault
                For Each Y In ListaOrdenesSAEAccionesControl.Where(Function(i) CBool(i.Seleccionada) = True)

                    If (X.Especie = Y.Especie) Then
                        objListaTotalizar.Add(Y)
                    End If
                Next

                If Not IsNothing(objListaTotalizar) Then
                    If objListaTotalizar.Count = CantidadSeleccionada Then
                        OrdenesSAEAccionesSelectedControl = ObtenerDatosSAERentaAccionesVarios(objListaTotalizar)
                        'OrdenSAEAccionesSelected = OrdenesSAEAccionesSelectedControl
                        If OrdenSAESeleccionada Then
                            OrdenSAESeleccionada = False
                        End If
                        OrdenSAESeleccionada = True
                    Else
                        OrdenSAEAccionesSelected.Mensajes = "¡No se pudo seleccionar varios registros!" + vbCrLf + "→ Verifique que los Nemotecnicos sean iguales."
                        A2Utilidades.Mensajes.mostrarMensaje(OrdenSAEAccionesSelected.Mensajes, "", A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        ConsultarOrdenesSAE = True

                        Await ConsultarOrdenesSAEControl("NOTIFICARSELECCIONADA")
                        ConsultarOrdenesSAE = True

                        'Julian Rincón (Alcuadrado S.A)
                        If (_OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA) Then
                            _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
                            _OrdenOYDPLUSSelected.ISIN = "(No Seleccionado)"
                            _OrdenOYDPLUSSelected.FechaEmision = Nothing
                            _OrdenOYDPLUSSelected.FechaVencimiento = Nothing
                            _OrdenOYDPLUSSelected.TasaFacial = 0
                            _OrdenOYDPLUSSelected.Modalidad = String.Empty
                            _OrdenOYDPLUSSelected.Indicador = String.Empty
                            _OrdenOYDPLUSSelected.PuntosIndicador = 0
                            _OrdenOYDPLUSSelected.Estandarizada = False
                        End If
                    End If
                End If
            Else
                OrdenSAESeleccionada = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recorrer registros SAE.",
                                 Me.ToString(), "RecorrerVariosAcciones", Application.Current.ToString(), Program.Maquina, ex)
            MostrarConsultandoOrden = Visibility.Collapsed
        End Try
    End Sub

    ''' <summary>
    ''' Método que filtra las operaciones de Renta Fija seleccionadas y así obtener sus valores de Negocio
    ''' </summary>
    Private Async Sub RecorrerVarios()
        Dim CantidadSeleccionada As Integer = 0
        Dim objListaTotalizar As New List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)

        Try
            For Each li In ListaOrdenesSAERentaFijaControl.Where(Function(i) CBool(i.Seleccionada) = True)
                CantidadSeleccionada = CantidadSeleccionada + 1
            Next
            OrdenesSAERentaFijaSelectedControl.Mensajes = String.Empty
            If CantidadSeleccionada = 1 Then
                OrdenSAERentaFijaSelected = Nothing
                OrdenSAERentaFijaSelected = ListaOrdenesSAERentaFijaControl.Where(Function(i) CBool(i.Seleccionada = True)).FirstOrDefault
                OrdenSAESeleccionada = True
            ElseIf CantidadSeleccionada > 1 Then
                Dim X = ListaOrdenesSAERentaFijaControl.Where(Function(i) CBool(i.Seleccionada) = True).FirstOrDefault
                For Each Y In ListaOrdenesSAERentaFijaControl.Where(Function(i) CBool(i.Seleccionada) = True)

                    If (X.Especie = Y.Especie) And
                        ((X.FechaCumplimiento = Y.FechaCumplimiento) And
                        ((X.FechaEmision = Y.FechaEmision Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV) And
                        (X.FechaVencimiento = Y.FechaVencimiento Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV) And
                        (X.Modalidad = Y.Modalidad Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV))) Then
                        objListaTotalizar.Add(Y)
                    End If
                Next

                If Not IsNothing(objListaTotalizar) Then
                    If objListaTotalizar.Count = CantidadSeleccionada Then
                        OrdenesSAERentaFijaSelectedControl = ObtenerDatosSAERentaFijaVarios(objListaTotalizar)
                        'OrdenSAERentaFijaSelected = OrdenesSAERentaFijaSelectedControl
                        If OrdenSAESeleccionada Then
                            OrdenSAESeleccionada = False
                        End If
                        OrdenSAESeleccionada = True
                    Else
                        A2Utilidades.Mensajes.mostrarMensaje("¡No se pudo seleccionar varios registros!" + vbCrLf + "→ Verifique que las faciales de la Especie sean iguales y contengan todos valores correspondientes." _
                             + vbCrLf + "→ Valide que las fechas de cumplimiento sean iguales.", Program.TituloSistema, A2Utilidades.wppMensajes.TiposMensaje.Advertencia)
                        ConsultarOrdenesSAE = True
                        Await ConsultarOrdenesSAEControl("NOTIFICARSELECCIONADA")
                        ConsultarOrdenesSAE = True

                        'Julian Rincón (Alcuadrado S.A)
                        If (_OrdenOYDPLUSSelected.TipoOrden = TIPOORDEN_DIRECTA) Then
                            _OrdenOYDPLUSSelected.Especie = "(No Seleccionado)"
                            _OrdenOYDPLUSSelected.ISIN = "(No Seleccionado)"
                            _OrdenOYDPLUSSelected.FechaEmision = Nothing
                            _OrdenOYDPLUSSelected.FechaVencimiento = Nothing
                            _OrdenOYDPLUSSelected.TasaFacial = 0
                            _OrdenOYDPLUSSelected.Modalidad = String.Empty
                            _OrdenOYDPLUSSelected.Indicador = String.Empty
                            _OrdenOYDPLUSSelected.PuntosIndicador = 0
                            _OrdenOYDPLUSSelected.Estandarizada = False
                        End If
                    End If
                End If
            Else
                OrdenSAESeleccionada = False
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al recorrer registros SAE.",
                                 Me.ToString(), "RecorrerVarios", Application.Current.ToString(), Program.Maquina, ex)
            MostrarConsultandoOrden = Visibility.Collapsed
        End Try
    End Sub

    ''' <summary>
    ''' Este evento se dispara cuando alguna propiedad de la orden SAE activa cambia
    ''' Julian Rincón (Alcuadrado S.A)
    ''' 20 Marzo 2018
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Private Sub _OrdenesSAEAccionesSelectedControl_PropertyChanged(ByVal sender As Object, ByVal e As System.ComponentModel.PropertyChangedEventArgs) Handles _OrdenSAEAccionesSelected.PropertyChanged
        Try
            Select Case e.PropertyName.ToLower()
                Case "seleccionada"
                    If logCambiarPropiedad Then
                        If OrdenSAEAccionesSelected.Seleccionada Then
                            logCambiarPropiedad = False
                            RecorrerVariosAcciones()
                            logCambiarPropiedad = True
                        Else
                            RecorrerVariosAcciones()
                        End If
                    End If
            End Select
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar el cambio en la propiedad.", Me.ToString, "_OrdenesSAEAccionesSelectedControl_PropertyChanged", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            MostrarConsultandoOrden = Visibility.Collapsed
        End Try

    End Sub


    ''' <summary>
    ''' Este evento se dispara cuando alguna propiedad de la orden activa cambia
    ''' Desarrollado por Juan David Correa
    ''' Fecha 14 de Agosto del 2012
    ''' </summary>
    Private Sub _OrdenesSAERentaFijaSelectedControl_PropertyChanged(ByVal sender As Object, ByVal e As System.ComponentModel.PropertyChangedEventArgs) Handles _OrdenSAERentaFijaSelected.PropertyChanged
        Try
            Select Case e.PropertyName.ToLower()
                Case "seleccionada"
                    If logCambiarPropiedad Then
                        If OrdenSAERentaFijaSelected.Seleccionada Then
                            logCambiarPropiedad = False
                            RecorrerVarios()
                            logCambiarPropiedad = True
                        Else
                            RecorrerVarios()
                        End If
                    End If
            End Select
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Ocurrio un error al realizar el cambio en la propiedad.", Me.ToString, "_OrdenesSAERentaFijaSelectedControl_PropertyChanged", Program.TituloSistema, Program.Maquina, ex, Program.RutaServicioLog)
            MostrarConsultandoOrden = Visibility.Collapsed
        End Try

    End Sub

    ''' <summary>
    ''' Método que realiza el filtro de las operaciones SAE con respecto a la especie seleccionada sea Acciones o RF
    ''' </summary>
    Public Sub FiltrarOperacionesEspecieCumplimiento()
        Try
            If (Not (String.IsNullOrEmpty(EspecieControles)) And Not (EspecieControles = "(No Seleccionado)")) Then
                If OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                    Dim objListatemp As New List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
                    If Not IsNothing(ListaOrdenSAEAccionesTotales) Then
                        'If ListaOrdenesSAEAccionesControl.Count > 0 Then

                        '    For Each li In ListaOrdenesSAEAccionesControl.Where(Function(x) (x.Especie.ToUpper = EspecieControles.ToUpper))
                        '        objListatemp.Add(li)
                        '    Next
                        '    ListaOrdenesSAEAccionesControl = Nothing
                        '    ListaOrdenesSAEAccionesControl = objListatemp
                        'End If

                        For Each li In ListaOrdenSAEAccionesTotales.Where(Function(x) (x.Especie.ToUpper = EspecieControles.ToUpper))
                            objListatemp.Add(li)
                        Next
                        ListaOrdenesSAEAccionesControl = Nothing
                        ListaOrdenesSAEAccionesControl = objListatemp


                    End If
                Else
                    Dim objListatemp As New List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)
                    If Not IsNothing(ListaOrdenSAERentaFijaTotales) Then
                        If ListaOrdenSAERentaFijaTotales.Count > 0 Then
                            Dim logEsValida As Boolean = True

                            If Not IsNothing(_OrdenOYDPLUSSelected.Especie) And
                                (Not IsNothing(_OrdenOYDPLUSSelected.FechaEmision) Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO) And
                                (Not IsNothing(_OrdenOYDPLUSSelected.FechaVencimiento) Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO) And
                                ((Not IsNothing(_OrdenOYDPLUSSelected.Modalidad) And Not String.IsNullOrEmpty(_OrdenOYDPLUSSelected.Modalidad)) Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO) Then

                                For Each li In ListaOrdenSAERentaFijaTotales
                                    logEsValida = True
                                    If Not String.IsNullOrEmpty(EspecieControles) Then

                                        If (li.Especie.ToUpper = _OrdenOYDPLUSSelected.Especie And
                                            ((li.FechaEmision = _OrdenOYDPLUSSelected.FechaEmision) Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO) And
                                            ((li.FechaVencimiento = _OrdenOYDPLUSSelected.FechaVencimiento) Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO) And
                                            ((li.Modalidad = _OrdenOYDPLUSSelected.Modalidad) Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_TTV Or _OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_REPO)) Then

                                            logEsValida = True
                                        Else
                                            logEsValida = False
                                        End If

                                    End If

                                    If logEsValida Then
                                        objListatemp.Add(li)
                                    End If
                                Next

                                'If objListatemp.Count > 0 Then
                                ListaOrdenesSAERentaFijaControl = Nothing
                                ListaOrdenesSAERentaFijaControl = objListatemp

                                'End If

                            End If

                        End If
                    End If
                End If
            Else
                If OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ACCIONES Or OrdenOYDPLUSSelected.TipoNegocio = TIPONEGOCIO_ADR Then
                    If Not IsNothing(ListaOrdenSAEAccionesTotales) Then
                        'JDRH - Se limpia la totalidad de la lista como NO seleccionada
                        Dim ListaAccionesTemp As New List(Of OYDPLUSUtilidades.tblOrdenesSAEAcciones)
                        If ListaOrdenSAEAccionesTotales.Count > 0 Then
                            For Each li In ListaOrdenSAEAccionesTotales
                                ListaAccionesTemp.Add(li)
                            Next

                            For Each li In ListaAccionesTemp
                                li.Seleccionada = False
                            Next

                            ListaOrdenesSAEAccionesControl = Nothing
                            ListaOrdenesSAEAccionesControl = ListaAccionesTemp

                        End If

                        SeleccionarTodosFolios = False
                    End If
                Else
                    If Not IsNothing(ListaOrdenSAERentaFijaTotales) Then
                        'JDRH - Se limpia la totalidad de la lista como NO seleccionada
                        Dim ListaRentaFijaTemp As New List(Of OYDPLUSUtilidades.tblOrdenesSAERentaFija)

                        If ListaOrdenSAERentaFijaTotales.Count > 0 Then
                            For Each li In ListaOrdenSAERentaFijaTotales
                                ListaRentaFijaTemp.Add(li)
                            Next

                            For Each li In ListaRentaFijaTemp
                                li.Seleccionada = False
                            Next

                            ListaOrdenesSAERentaFijaControl = Nothing
                            ListaOrdenesSAERentaFijaControl = ListaRentaFijaTemp

                        End If

                        SeleccionarTodosFolios = False

                    End If
                End If
            End If
        Catch ex As Exception
            A2Utilidades.Mensajes.mostrarErrorAplicacion(Program.Usuario, "Se presentó un problema al filtrar las Operaciones de Bolsa.", Me.ToString(), "FiltrarOperacionesEspecieCumplimiento", Application.Current.ToString(), Program.Maquina, ex)
        End Try


    End Sub

    '*****************************************************************************************************************
    'Fin Segmento código obtener ordenes SAE - Genérico pantalla Ordenes 
    'Julian Rincón (Alcuadrado S.A)
    '*****************************************************************************************************************


End Class

'Clase base para forma de búsquedas
Public Class CamposBusquedaOrdenOYDPLUS
    Implements INotifyPropertyChanged

    Private _NroOrden As Integer
    <Display(Name:="Nro Orden")>
    Public Property NroOrden() As Integer
        Get
            Return _NroOrden
        End Get
        Set(ByVal value As Integer)
            _NroOrden = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("NroOrden"))
        End Set
    End Property


    Private _Version As Integer
    <Display(Name:="Versión")>
    Public Property Version() As Integer
        Get
            Return _Version
        End Get
        Set(ByVal value As Integer)
            _Version = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("Version"))
        End Set
    End Property

    Private _EstadoOrden As String
    <Display(Name:="Estado orden")>
    Public Property EstadoOrden() As String
        Get
            Return _EstadoOrden
        End Get
        Set(ByVal value As String)
            _EstadoOrden = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("EstadoOrden"))
        End Set
    End Property

    Private _Receptor As String
    <Display(Name:="Receptor")>
    Public Property Receptor() As String
        Get
            Return _Receptor
        End Get
        Set(ByVal value As String)
            _Receptor = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("Receptor"))
        End Set
    End Property

    Private _TipoOrden As String
    <Display(Name:="Tipo Orden")>
    Public Property TipoOrden() As String
        Get
            Return _TipoOrden
        End Get
        Set(ByVal value As String)
            _TipoOrden = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("TipoOrden"))
        End Set
    End Property

    Private _TipoNegocio As String
    <Display(Name:="Tipo Negocio")>
    Public Property TipoNegocio() As String
        Get
            Return _TipoNegocio
        End Get
        Set(ByVal value As String)
            _TipoNegocio = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("TipoNegocio"))
        End Set
    End Property

    Private _TipoOperacion As String
    <Display(Name:="Tipo Operación")>
    Public Property TipoOperacion() As String
        Get
            Return _TipoOperacion
        End Get
        Set(ByVal value As String)
            _TipoOperacion = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("TipoOperacion"))
        End Set
    End Property

    Private _TipoProducto As String
    <Display(Name:="Tipo Producto")>
    Public Property TipoProducto() As String
        Get
            Return _TipoProducto
        End Get
        Set(ByVal value As String)
            _TipoProducto = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("TipoProducto"))
        End Set
    End Property

    Private _FechaOrden As Nullable(Of Date)
    <Display(Name:="Fecha Orden")>
    Public Property FechaOrden() As Nullable(Of Date)
        Get
            Return _FechaOrden
        End Get
        Set(ByVal value As Nullable(Of Date))
            _FechaOrden = value
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs("FechaOrden"))
        End Set
    End Property


    Public Event PropertyChanged(sender As Object, e As System.ComponentModel.PropertyChangedEventArgs) Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
End Class

Public Class SAELiquidacionesSeleccionadas

    Private _IDLiquidacion As String
    Public Property IDLiquidacion() As String
        Get
            Return _IDLiquidacion
        End Get
        Set(ByVal value As String)
            _IDLiquidacion = value
        End Set
    End Property

    Private _FechaReferencia As DateTime
    Public Property FechaReferencia() As DateTime
        Get
            Return _FechaReferencia
        End Get
        Set(ByVal value As DateTime)
            _FechaReferencia = value
        End Set
    End Property


    Private _Cantidad As Double
    Public Property Cantidad() As Double
        Get
            Return _Cantidad
        End Get
        Set(ByVal value As Double)
            _Cantidad = value
        End Set
    End Property

End Class
